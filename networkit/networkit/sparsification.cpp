/* Generated by Cython 0.29.21 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "networkit/cython_helper.h"
        ],
        "include_dirs": [
            "./networkit",
            "networkit"
        ],
        "language": "c++",
        "name": "networkit.sparsification",
        "sources": [
            "networkit/sparsification.pyx"
        ]
    },
    "module_name": "networkit.sparsification"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_21"
#define CYTHON_HEX_VERSION 0x001D15F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__networkit__sparsification
#define __PYX_HAVE_API__networkit__sparsification
/* Early includes */
#include <stdint.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <string.h>
#include <string>
#include <networkit/base/Algorithm.hpp>
#include <utility>

    #if __cplusplus > 199711L
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <unordered_set>
#include <algorithm>
#include "cython_helper.h"
#include <networkit/Globals.hpp>
#include <networkit/graph/Graph.hpp>
#include <networkit/graph/SpanningForest.hpp>
#include <networkit/graph/RandomMaximumSpanningForest.hpp>
#include <networkit/graph/UnionMaximumSpanningForest.hpp>
#include <networkit/edgescores/EdgeScore.hpp>
#include <networkit/edgescores/ChibaNishizekiTriangleEdgeScore.hpp>
#include <networkit/edgescores/ChibaNishizekiQuadrangleEdgeScore.hpp>
#include <networkit/edgescores/TriangleEdgeScore.hpp>
#include <networkit/edgescores/EdgeScoreLinearizer.hpp>
#include <networkit/edgescores/EdgeScoreNormalizer.hpp>
#include <networkit/edgescores/EdgeScoreBlender.hpp>
#include <networkit/edgescores/GeometricMeanScore.hpp>
#include <networkit/edgescores/EdgeScoreAsWeight.hpp>
#include <networkit/sparsification/SimmelianOverlapScore.hpp>
#include <networkit/edgescores/PrefixJaccardScore.hpp>
#include <networkit/sparsification/MultiscaleScore.hpp>
#include <networkit/sparsification/RandomEdgeScore.hpp>
#include <networkit/sparsification/LocalSimilarityScore.hpp>
#include <networkit/sparsification/ForestFireScore.hpp>
#include <networkit/sparsification/LocalDegreeScore.hpp>
#include <networkit/sparsification/RandomNodeEdgeScore.hpp>
#include <networkit/sparsification/LocalFilterScore.hpp>
#include <networkit/sparsification/ChanceCorrectedTriangleScore.hpp>
#include <networkit/sparsification/SCANStructuralSimilarityScore.hpp>
#include <networkit/sparsification/GlobalThresholdFilter.hpp>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "networkit/sparsification.pyx",
  "stringsource",
  "networkit/graph.pxd",
};

/* "graph.pxd":13
 * from libcpp.unordered_set cimport unordered_set
 * 
 * ctypedef uint64_t edgeid             # <<<<<<<<<<<<<<
 * ctypedef uint64_t index
 * ctypedef uint64_t count
 */
typedef uint64_t __pyx_t_9networkit_5graph_edgeid;

/* "graph.pxd":14
 * 
 * ctypedef uint64_t edgeid
 * ctypedef uint64_t index             # <<<<<<<<<<<<<<
 * ctypedef uint64_t count
 * ctypedef index node
 */
typedef uint64_t __pyx_t_9networkit_5graph_index;

/* "graph.pxd":15
 * ctypedef uint64_t edgeid
 * ctypedef uint64_t index
 * ctypedef uint64_t count             # <<<<<<<<<<<<<<
 * ctypedef index node
 * ctypedef double edgeweight
 */
typedef uint64_t __pyx_t_9networkit_5graph_count;

/* "graph.pxd":16
 * ctypedef uint64_t index
 * ctypedef uint64_t count
 * ctypedef index node             # <<<<<<<<<<<<<<
 * ctypedef double edgeweight
 * 
 */
typedef __pyx_t_9networkit_5graph_index __pyx_t_9networkit_5graph_node;

/* "graph.pxd":17
 * ctypedef uint64_t count
 * ctypedef index node
 * ctypedef double edgeweight             # <<<<<<<<<<<<<<
 * 
 * from .base cimport _Algorithm
 */
typedef double __pyx_t_9networkit_5graph_edgeweight;

/* "networkit/sparsification.pyx":7
 * from libcpp.vector cimport vector
 * 
 * ctypedef uint64_t count             # <<<<<<<<<<<<<<
 * ctypedef uint64_t index
 * ctypedef uint64_t edgeid
 */
typedef uint64_t __pyx_t_9networkit_14sparsification_count;

/* "networkit/sparsification.pyx":8
 * 
 * ctypedef uint64_t count
 * ctypedef uint64_t index             # <<<<<<<<<<<<<<
 * ctypedef uint64_t edgeid
 * ctypedef index node
 */
typedef uint64_t __pyx_t_9networkit_14sparsification_index;

/* "networkit/sparsification.pyx":9
 * ctypedef uint64_t count
 * ctypedef uint64_t index
 * ctypedef uint64_t edgeid             # <<<<<<<<<<<<<<
 * ctypedef index node
 * ctypedef double edgeweight
 */
typedef uint64_t __pyx_t_9networkit_14sparsification_edgeid;

/* "networkit/sparsification.pyx":10
 * ctypedef uint64_t index
 * ctypedef uint64_t edgeid
 * ctypedef index node             # <<<<<<<<<<<<<<
 * ctypedef double edgeweight
 * 
 */
typedef __pyx_t_9networkit_14sparsification_index __pyx_t_9networkit_14sparsification_node;

/* "networkit/sparsification.pyx":11
 * ctypedef uint64_t edgeid
 * ctypedef index node
 * ctypedef double edgeweight             # <<<<<<<<<<<<<<
 * 
 * from .base cimport _Algorithm, Algorithm
 */
typedef double __pyx_t_9networkit_14sparsification_edgeweight;

/*--- Type declarations ---*/
struct __pyx_obj_9networkit_4base_Algorithm;
struct __pyx_obj_9networkit_5graph_Graph;
struct __pyx_obj_9networkit_5graph_RandomMaximumSpanningForest;
struct __pyx_obj_9networkit_5graph_UnionMaximumSpanningForest;
struct __pyx_obj_9networkit_14sparsification_EdgeScore;
struct __pyx_obj_9networkit_14sparsification_ChibaNishizekiTriangleEdgeScore;
struct __pyx_obj_9networkit_14sparsification_ChibaNishizekiQuadrangleEdgeScore;
struct __pyx_obj_9networkit_14sparsification_TriangleEdgeScore;
struct __pyx_obj_9networkit_14sparsification_EdgeScoreLinearizer;
struct __pyx_obj_9networkit_14sparsification_EdgeScoreNormalizer;
struct __pyx_obj_9networkit_14sparsification_EdgeScoreBlender;
struct __pyx_obj_9networkit_14sparsification_GeometricMeanScore;
struct __pyx_obj_9networkit_14sparsification_EdgeScoreAsWeight;
struct __pyx_obj_9networkit_14sparsification_SimmelianOverlapScore;
struct __pyx_obj_9networkit_14sparsification_PrefixJaccardScore;
struct __pyx_obj_9networkit_14sparsification_MultiscaleScore;
struct __pyx_obj_9networkit_14sparsification_RandomEdgeScore;
struct __pyx_obj_9networkit_14sparsification_LocalSimilarityScore;
struct __pyx_obj_9networkit_14sparsification_ForestFireScore;
struct __pyx_obj_9networkit_14sparsification_LocalDegreeScore;
struct __pyx_obj_9networkit_14sparsification_RandomNodeEdgeScore;
struct __pyx_obj_9networkit_14sparsification_LocalFilterScore;
struct __pyx_obj_9networkit_14sparsification_ChanceCorrectedTriangleScore;
struct __pyx_obj_9networkit_14sparsification_SCANStructuralSimilarityScore;
struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter;
struct __pyx_obj_9networkit_14sparsification___pyx_scope_struct__scores;

/* "base.pxd":13
 * 		bool_t isParallel() except +
 * 
 * cdef class Algorithm:             # <<<<<<<<<<<<<<
 * 	cdef _Algorithm *_this
 * 
 */
struct __pyx_obj_9networkit_4base_Algorithm {
  PyObject_HEAD
  NetworKit::Algorithm *_this;
};


/* "graph.pxd":150
 * 		_NeighborIterator end() except +
 * 
 * cdef class Graph:             # <<<<<<<<<<<<<<
 * 	cdef _Graph _this
 * 	cdef setThis(self, _Graph& other)
 */
struct __pyx_obj_9networkit_5graph_Graph {
  PyObject_HEAD
  struct __pyx_vtabstruct_9networkit_5graph_Graph *__pyx_vtab;
  NetworKit::Graph _this;
};


/* "graph.pxd":172
 * 		bool_t inMSF(node u, node v) except +
 * 
 * cdef class RandomMaximumSpanningForest(Algorithm):             # <<<<<<<<<<<<<<
 * 	cdef vector[double] _attribute
 * 	cdef Graph _G
 */
struct __pyx_obj_9networkit_5graph_RandomMaximumSpanningForest {
  struct __pyx_obj_9networkit_4base_Algorithm __pyx_base;
  std::vector<double>  _attribute;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
};


/* "graph.pxd":187
 * 		bool_t inUMSF(node u, node v) except +
 * 
 * cdef class UnionMaximumSpanningForest(Algorithm):             # <<<<<<<<<<<<<<
 * 	cdef Graph _G
 * 
 */
struct __pyx_obj_9networkit_5graph_UnionMaximumSpanningForest {
  struct __pyx_obj_9networkit_4base_Algorithm __pyx_base;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
};


/* "networkit/sparsification.pyx":32
 * 		T score(node u, node v) except +
 * 
 * cdef class EdgeScore(Algorithm):             # <<<<<<<<<<<<<<
 * 	"""
 * 	TODO DOCSTIRNG
 */
struct __pyx_obj_9networkit_14sparsification_EdgeScore {
  struct __pyx_obj_9networkit_4base_Algorithm __pyx_base;
  struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScore *__pyx_vtab;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
};


/* "networkit/sparsification.pyx":72
 * 		_ChibaNishizekiTriangleEdgeScore(const _Graph& G) except +
 * 
 * cdef class ChibaNishizekiTriangleEdgeScore(EdgeScore):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Calculates for each edge the number of triangles it is embedded in.
 */
struct __pyx_obj_9networkit_14sparsification_ChibaNishizekiTriangleEdgeScore {
  struct __pyx_obj_9networkit_14sparsification_EdgeScore __pyx_base;
};


/* "networkit/sparsification.pyx":98
 * 		_ChibaNishizekiQuadrangleEdgeScore(const _Graph& G) except +
 * 
 * cdef class ChibaNishizekiQuadrangleEdgeScore(EdgeScore):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Calculates for each edge the number of quadrangles (circles of length 4) it is embedded in.
 */
struct __pyx_obj_9networkit_14sparsification_ChibaNishizekiQuadrangleEdgeScore {
  struct __pyx_obj_9networkit_14sparsification_EdgeScore __pyx_base;
};


/* "networkit/sparsification.pyx":126
 * 		_TriangleEdgeScore(const _Graph& G) except +
 * 
 * cdef class TriangleEdgeScore(EdgeScore):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Triangle counting.
 */
struct __pyx_obj_9networkit_14sparsification_TriangleEdgeScore {
  struct __pyx_obj_9networkit_14sparsification_EdgeScore __pyx_base;
};


/* "networkit/sparsification.pyx":154
 * 		_EdgeScoreLinearizer(const _Graph& G, const vector[double]& attribute, bool_t inverse) except +
 * 
 * cdef class EdgeScoreLinearizer(EdgeScore):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Linearizes a score such that values are evenly distributed between 0 and 1.
 */
struct __pyx_obj_9networkit_14sparsification_EdgeScoreLinearizer {
  struct __pyx_obj_9networkit_14sparsification_EdgeScore __pyx_base;
  std::vector<double>  _score;
};


/* "networkit/sparsification.pyx":181
 * 		_EdgeScoreNormalizer(const _Graph&, vector[T]&, bool_t inverse, double lower, double upper) except +
 * 
 * cdef class EdgeScoreNormalizer(EdgeScore):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Normalize an edge score such that it is in a certain range.
 */
struct __pyx_obj_9networkit_14sparsification_EdgeScoreNormalizer {
  struct __pyx_obj_9networkit_14sparsification_EdgeScore __pyx_base;
  std::vector<double>  _inScoreDouble;
  std::vector<__pyx_t_9networkit_14sparsification_count>  _inScoreCount;
};


/* "networkit/sparsification.pyx":221
 * 		_EdgeScoreBlender(const _Graph&, const vector[double]&, const vector[double]&, const vector[bool_t]&) except +
 * 
 * cdef class EdgeScoreBlender(EdgeScore):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Blends two attribute vectors, the value is chosen depending on the supplied bool vector
 */
struct __pyx_obj_9networkit_14sparsification_EdgeScoreBlender {
  struct __pyx_obj_9networkit_14sparsification_EdgeScore __pyx_base;
  std::vector<double>  _attribute0;
  std::vector<double>  _attribute1;
  std::vector<bool>  _selection;
};


/* "networkit/sparsification.pyx":256
 * 		_GeometricMeanScore(const _Graph& G, const vector[double]& a) except +
 * 
 * cdef class GeometricMeanScore(EdgeScore):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Normalizes the given edge attribute by the geometric average of the sum of the attributes of the incident edges of the incident nodes.
 */
struct __pyx_obj_9networkit_14sparsification_GeometricMeanScore {
  struct __pyx_obj_9networkit_14sparsification_EdgeScore __pyx_base;
  std::vector<double>  _attribute;
};


/* "networkit/sparsification.pyx":283
 * 		_Graph calculate() except +
 * 
 * cdef class EdgeScoreAsWeight:             # <<<<<<<<<<<<<<
 * 	"""
 * 	Assigns an edge score as edge weight of a graph.
 */
struct __pyx_obj_9networkit_14sparsification_EdgeScoreAsWeight {
  PyObject_HEAD
  NetworKit::EdgeScoreAsWeight *_this;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
  std::vector<double>  _score;
};


/* "networkit/sparsification.pyx":329
 * 		_SimmelianOverlapScore(const _Graph& G, const vector[count]& triangles, count maxRank) except +
 * 
 * cdef class SimmelianOverlapScore(EdgeScore):             # <<<<<<<<<<<<<<
 * 	cdef vector[count] _triangles
 * 
 */
struct __pyx_obj_9networkit_14sparsification_SimmelianOverlapScore {
  struct __pyx_obj_9networkit_14sparsification_EdgeScore __pyx_base;
  std::vector<__pyx_t_9networkit_14sparsification_count>  _triangles;
};


/* "networkit/sparsification.pyx":359
 * 		_PrefixJaccardScore(const _Graph& G, const vector[double]& a) except +
 * 
 * cdef class PrefixJaccardScore(EdgeScore):             # <<<<<<<<<<<<<<
 * 	cdef vector[double] _attribute
 * 
 */
struct __pyx_obj_9networkit_14sparsification_PrefixJaccardScore {
  struct __pyx_obj_9networkit_14sparsification_EdgeScore __pyx_base;
  std::vector<double>  _attribute;
};


/* "networkit/sparsification.pyx":375
 * 		_MultiscaleScore(const _Graph& G, const vector[double]& a) except +
 * 
 * cdef class MultiscaleScore(EdgeScore):             # <<<<<<<<<<<<<<
 * 	"""
 * 	An implementation of the Multiscale Backbone. Calculates for each edge the minimum
 */
struct __pyx_obj_9networkit_14sparsification_MultiscaleScore {
  struct __pyx_obj_9networkit_14sparsification_EdgeScore __pyx_base;
  std::vector<double>  _attribute;
};


/* "networkit/sparsification.pyx":403
 * 		_RandomEdgeScore(const _Graph& G) except +
 * 
 * cdef class RandomEdgeScore(EdgeScore):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Generates a random edge attribute. Each edge is assigned a random value in [0,1].
 */
struct __pyx_obj_9networkit_14sparsification_RandomEdgeScore {
  struct __pyx_obj_9networkit_14sparsification_EdgeScore __pyx_base;
};


/* "networkit/sparsification.pyx":425
 * 		_LocalSimilarityScore(const _Graph& G, const vector[count]& triangles) except +
 * 
 * cdef class LocalSimilarityScore(EdgeScore):             # <<<<<<<<<<<<<<
 * 	"""
 * 	An implementation of the Local Simlarity sparsification approach.
 */
struct __pyx_obj_9networkit_14sparsification_LocalSimilarityScore {
  struct __pyx_obj_9networkit_14sparsification_EdgeScore __pyx_base;
  std::vector<__pyx_t_9networkit_14sparsification_count>  _triangles;
};


/* "networkit/sparsification.pyx":453
 * 		_ForestFireScore(const _Graph& G, double pf, double tebr) except +
 * 
 * cdef class ForestFireScore(EdgeScore):             # <<<<<<<<<<<<<<
 * 	"""
 * 	A variant of the Forest Fire sparsification approach that is based on random walks.
 */
struct __pyx_obj_9networkit_14sparsification_ForestFireScore {
  struct __pyx_obj_9networkit_14sparsification_EdgeScore __pyx_base;
};


/* "networkit/sparsification.pyx":481
 * 		_LocalDegreeScore(const _Graph& G) except +
 * 
 * cdef class LocalDegreeScore(EdgeScore):             # <<<<<<<<<<<<<<
 * 	"""
 * 	The LocalDegree sparsification approach is based on the idea of hub nodes.
 */
struct __pyx_obj_9networkit_14sparsification_LocalDegreeScore {
  struct __pyx_obj_9networkit_14sparsification_EdgeScore __pyx_base;
};


/* "networkit/sparsification.pyx":505
 * 		_RandomNodeEdgeScore(const _Graph& G) except +
 * 
 * cdef class RandomNodeEdgeScore(EdgeScore):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Random Edge sampling. This attributizer returns edge attributes where
 */
struct __pyx_obj_9networkit_14sparsification_RandomNodeEdgeScore {
  struct __pyx_obj_9networkit_14sparsification_EdgeScore __pyx_base;
};


/* "networkit/sparsification.pyx":534
 * 		_LocalFilterScoreInt(const _Graph& G, const vector[double]& a, bool_t logarithmic) except +
 * 
 * cdef class LocalFilterScore(EdgeScore):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Local filtering edge scoring. Edges with high score are more important.
 */
struct __pyx_obj_9networkit_14sparsification_LocalFilterScore {
  struct __pyx_obj_9networkit_14sparsification_EdgeScore __pyx_base;
  std::vector<double>  _a;
};


/* "networkit/sparsification.pyx":566
 * 		_ChanceCorrectedTriangleScore(const _Graph& G, const vector[count]& triangles) except +
 * 
 * cdef class ChanceCorrectedTriangleScore(EdgeScore):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Divide the number of triangles per edge by the expected number of triangles given a random edge distribution.
 */
struct __pyx_obj_9networkit_14sparsification_ChanceCorrectedTriangleScore {
  struct __pyx_obj_9networkit_14sparsification_EdgeScore __pyx_base;
  std::vector<__pyx_t_9networkit_14sparsification_count>  _triangles;
};


/* "networkit/sparsification.pyx":592
 * 		_SCANStructuralSimilarityScore(_Graph G, const vector[count]& triangles) except +
 * 
 * cdef class SCANStructuralSimilarityScore(EdgeScore):             # <<<<<<<<<<<<<<
 * 	"""
 * 	An implementation of the SCANStructuralSimilarityScore algorithm.
 */
struct __pyx_obj_9networkit_14sparsification_SCANStructuralSimilarityScore {
  struct __pyx_obj_9networkit_14sparsification_EdgeScore __pyx_base;
  std::vector<__pyx_t_9networkit_14sparsification_count>  _triangles;
};


/* "networkit/sparsification.pyx":619
 * 		_Graph calculate() except +
 * 
 * cdef class GlobalThresholdFilter:             # <<<<<<<<<<<<<<
 * 	"""
 * 	Calculates a sparsified graph by filtering globally using a constant threshold value
 */
struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter {
  PyObject_HEAD
  NetworKit::GlobalThresholdFilter *_this;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
  std::vector<double>  _attribute;
};


/* "networkit/sparsification.pyx":1250
 * 	"""  """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the minimum parameter value
 * 		such that the edge is contained in the sparsified graph.
 */
struct __pyx_obj_9networkit_14sparsification___pyx_scope_struct__scores {
  PyObject_HEAD
  PyObject *__pyx_v_edgeScores;
  PyObject *__pyx_v_partition;
  PyObject *__pyx_v_together;
};



/* "graph.pxd":150
 * 		_NeighborIterator end() except +
 * 
 * cdef class Graph:             # <<<<<<<<<<<<<<
 * 	cdef _Graph _this
 * 	cdef setThis(self, _Graph& other)
 */

struct __pyx_vtabstruct_9networkit_5graph_Graph {
  PyObject *(*setThis)(struct __pyx_obj_9networkit_5graph_Graph *, NetworKit::Graph &);
};
static struct __pyx_vtabstruct_9networkit_5graph_Graph *__pyx_vtabptr_9networkit_5graph_Graph;


/* "networkit/sparsification.pyx":32
 * 		T score(node u, node v) except +
 * 
 * cdef class EdgeScore(Algorithm):             # <<<<<<<<<<<<<<
 * 	"""
 * 	TODO DOCSTIRNG
 */

struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScore {
  bool (*isDoubleValue)(struct __pyx_obj_9networkit_14sparsification_EdgeScore *);
};
static struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScore *__pyx_vtabptr_9networkit_14sparsification_EdgeScore;


/* "networkit/sparsification.pyx":72
 * 		_ChibaNishizekiTriangleEdgeScore(const _Graph& G) except +
 * 
 * cdef class ChibaNishizekiTriangleEdgeScore(EdgeScore):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Calculates for each edge the number of triangles it is embedded in.
 */

struct __pyx_vtabstruct_9networkit_14sparsification_ChibaNishizekiTriangleEdgeScore {
  struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScore __pyx_base;
};
static struct __pyx_vtabstruct_9networkit_14sparsification_ChibaNishizekiTriangleEdgeScore *__pyx_vtabptr_9networkit_14sparsification_ChibaNishizekiTriangleEdgeScore;


/* "networkit/sparsification.pyx":98
 * 		_ChibaNishizekiQuadrangleEdgeScore(const _Graph& G) except +
 * 
 * cdef class ChibaNishizekiQuadrangleEdgeScore(EdgeScore):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Calculates for each edge the number of quadrangles (circles of length 4) it is embedded in.
 */

struct __pyx_vtabstruct_9networkit_14sparsification_ChibaNishizekiQuadrangleEdgeScore {
  struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScore __pyx_base;
};
static struct __pyx_vtabstruct_9networkit_14sparsification_ChibaNishizekiQuadrangleEdgeScore *__pyx_vtabptr_9networkit_14sparsification_ChibaNishizekiQuadrangleEdgeScore;


/* "networkit/sparsification.pyx":126
 * 		_TriangleEdgeScore(const _Graph& G) except +
 * 
 * cdef class TriangleEdgeScore(EdgeScore):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Triangle counting.
 */

struct __pyx_vtabstruct_9networkit_14sparsification_TriangleEdgeScore {
  struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScore __pyx_base;
};
static struct __pyx_vtabstruct_9networkit_14sparsification_TriangleEdgeScore *__pyx_vtabptr_9networkit_14sparsification_TriangleEdgeScore;


/* "networkit/sparsification.pyx":154
 * 		_EdgeScoreLinearizer(const _Graph& G, const vector[double]& attribute, bool_t inverse) except +
 * 
 * cdef class EdgeScoreLinearizer(EdgeScore):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Linearizes a score such that values are evenly distributed between 0 and 1.
 */

struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScoreLinearizer {
  struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScore __pyx_base;
};
static struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScoreLinearizer *__pyx_vtabptr_9networkit_14sparsification_EdgeScoreLinearizer;


/* "networkit/sparsification.pyx":181
 * 		_EdgeScoreNormalizer(const _Graph&, vector[T]&, bool_t inverse, double lower, double upper) except +
 * 
 * cdef class EdgeScoreNormalizer(EdgeScore):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Normalize an edge score such that it is in a certain range.
 */

struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScoreNormalizer {
  struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScore __pyx_base;
};
static struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScoreNormalizer *__pyx_vtabptr_9networkit_14sparsification_EdgeScoreNormalizer;


/* "networkit/sparsification.pyx":221
 * 		_EdgeScoreBlender(const _Graph&, const vector[double]&, const vector[double]&, const vector[bool_t]&) except +
 * 
 * cdef class EdgeScoreBlender(EdgeScore):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Blends two attribute vectors, the value is chosen depending on the supplied bool vector
 */

struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScoreBlender {
  struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScore __pyx_base;
};
static struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScoreBlender *__pyx_vtabptr_9networkit_14sparsification_EdgeScoreBlender;


/* "networkit/sparsification.pyx":256
 * 		_GeometricMeanScore(const _Graph& G, const vector[double]& a) except +
 * 
 * cdef class GeometricMeanScore(EdgeScore):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Normalizes the given edge attribute by the geometric average of the sum of the attributes of the incident edges of the incident nodes.
 */

struct __pyx_vtabstruct_9networkit_14sparsification_GeometricMeanScore {
  struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScore __pyx_base;
};
static struct __pyx_vtabstruct_9networkit_14sparsification_GeometricMeanScore *__pyx_vtabptr_9networkit_14sparsification_GeometricMeanScore;


/* "networkit/sparsification.pyx":329
 * 		_SimmelianOverlapScore(const _Graph& G, const vector[count]& triangles, count maxRank) except +
 * 
 * cdef class SimmelianOverlapScore(EdgeScore):             # <<<<<<<<<<<<<<
 * 	cdef vector[count] _triangles
 * 
 */

struct __pyx_vtabstruct_9networkit_14sparsification_SimmelianOverlapScore {
  struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScore __pyx_base;
};
static struct __pyx_vtabstruct_9networkit_14sparsification_SimmelianOverlapScore *__pyx_vtabptr_9networkit_14sparsification_SimmelianOverlapScore;


/* "networkit/sparsification.pyx":359
 * 		_PrefixJaccardScore(const _Graph& G, const vector[double]& a) except +
 * 
 * cdef class PrefixJaccardScore(EdgeScore):             # <<<<<<<<<<<<<<
 * 	cdef vector[double] _attribute
 * 
 */

struct __pyx_vtabstruct_9networkit_14sparsification_PrefixJaccardScore {
  struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScore __pyx_base;
};
static struct __pyx_vtabstruct_9networkit_14sparsification_PrefixJaccardScore *__pyx_vtabptr_9networkit_14sparsification_PrefixJaccardScore;


/* "networkit/sparsification.pyx":375
 * 		_MultiscaleScore(const _Graph& G, const vector[double]& a) except +
 * 
 * cdef class MultiscaleScore(EdgeScore):             # <<<<<<<<<<<<<<
 * 	"""
 * 	An implementation of the Multiscale Backbone. Calculates for each edge the minimum
 */

struct __pyx_vtabstruct_9networkit_14sparsification_MultiscaleScore {
  struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScore __pyx_base;
};
static struct __pyx_vtabstruct_9networkit_14sparsification_MultiscaleScore *__pyx_vtabptr_9networkit_14sparsification_MultiscaleScore;


/* "networkit/sparsification.pyx":403
 * 		_RandomEdgeScore(const _Graph& G) except +
 * 
 * cdef class RandomEdgeScore(EdgeScore):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Generates a random edge attribute. Each edge is assigned a random value in [0,1].
 */

struct __pyx_vtabstruct_9networkit_14sparsification_RandomEdgeScore {
  struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScore __pyx_base;
};
static struct __pyx_vtabstruct_9networkit_14sparsification_RandomEdgeScore *__pyx_vtabptr_9networkit_14sparsification_RandomEdgeScore;


/* "networkit/sparsification.pyx":425
 * 		_LocalSimilarityScore(const _Graph& G, const vector[count]& triangles) except +
 * 
 * cdef class LocalSimilarityScore(EdgeScore):             # <<<<<<<<<<<<<<
 * 	"""
 * 	An implementation of the Local Simlarity sparsification approach.
 */

struct __pyx_vtabstruct_9networkit_14sparsification_LocalSimilarityScore {
  struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScore __pyx_base;
};
static struct __pyx_vtabstruct_9networkit_14sparsification_LocalSimilarityScore *__pyx_vtabptr_9networkit_14sparsification_LocalSimilarityScore;


/* "networkit/sparsification.pyx":453
 * 		_ForestFireScore(const _Graph& G, double pf, double tebr) except +
 * 
 * cdef class ForestFireScore(EdgeScore):             # <<<<<<<<<<<<<<
 * 	"""
 * 	A variant of the Forest Fire sparsification approach that is based on random walks.
 */

struct __pyx_vtabstruct_9networkit_14sparsification_ForestFireScore {
  struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScore __pyx_base;
};
static struct __pyx_vtabstruct_9networkit_14sparsification_ForestFireScore *__pyx_vtabptr_9networkit_14sparsification_ForestFireScore;


/* "networkit/sparsification.pyx":481
 * 		_LocalDegreeScore(const _Graph& G) except +
 * 
 * cdef class LocalDegreeScore(EdgeScore):             # <<<<<<<<<<<<<<
 * 	"""
 * 	The LocalDegree sparsification approach is based on the idea of hub nodes.
 */

struct __pyx_vtabstruct_9networkit_14sparsification_LocalDegreeScore {
  struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScore __pyx_base;
};
static struct __pyx_vtabstruct_9networkit_14sparsification_LocalDegreeScore *__pyx_vtabptr_9networkit_14sparsification_LocalDegreeScore;


/* "networkit/sparsification.pyx":505
 * 		_RandomNodeEdgeScore(const _Graph& G) except +
 * 
 * cdef class RandomNodeEdgeScore(EdgeScore):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Random Edge sampling. This attributizer returns edge attributes where
 */

struct __pyx_vtabstruct_9networkit_14sparsification_RandomNodeEdgeScore {
  struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScore __pyx_base;
};
static struct __pyx_vtabstruct_9networkit_14sparsification_RandomNodeEdgeScore *__pyx_vtabptr_9networkit_14sparsification_RandomNodeEdgeScore;


/* "networkit/sparsification.pyx":534
 * 		_LocalFilterScoreInt(const _Graph& G, const vector[double]& a, bool_t logarithmic) except +
 * 
 * cdef class LocalFilterScore(EdgeScore):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Local filtering edge scoring. Edges with high score are more important.
 */

struct __pyx_vtabstruct_9networkit_14sparsification_LocalFilterScore {
  struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScore __pyx_base;
};
static struct __pyx_vtabstruct_9networkit_14sparsification_LocalFilterScore *__pyx_vtabptr_9networkit_14sparsification_LocalFilterScore;


/* "networkit/sparsification.pyx":566
 * 		_ChanceCorrectedTriangleScore(const _Graph& G, const vector[count]& triangles) except +
 * 
 * cdef class ChanceCorrectedTriangleScore(EdgeScore):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Divide the number of triangles per edge by the expected number of triangles given a random edge distribution.
 */

struct __pyx_vtabstruct_9networkit_14sparsification_ChanceCorrectedTriangleScore {
  struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScore __pyx_base;
};
static struct __pyx_vtabstruct_9networkit_14sparsification_ChanceCorrectedTriangleScore *__pyx_vtabptr_9networkit_14sparsification_ChanceCorrectedTriangleScore;


/* "networkit/sparsification.pyx":592
 * 		_SCANStructuralSimilarityScore(_Graph G, const vector[count]& triangles) except +
 * 
 * cdef class SCANStructuralSimilarityScore(EdgeScore):             # <<<<<<<<<<<<<<
 * 	"""
 * 	An implementation of the SCANStructuralSimilarityScore algorithm.
 */

struct __pyx_vtabstruct_9networkit_14sparsification_SCANStructuralSimilarityScore {
  struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScore __pyx_base;
};
static struct __pyx_vtabstruct_9networkit_14sparsification_SCANStructuralSimilarityScore *__pyx_vtabptr_9networkit_14sparsification_SCANStructuralSimilarityScore;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* PyFloatBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_TrueDivideObjC(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyFloat_TrueDivideObjC(op1, op2, floatval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceTrueDivide(op1, op2) : PyNumber_TrueDivide(op1, op2))
#endif

/* py_abs.proto */
#if CYTHON_USE_PYLONG_INTERNALS
static PyObject *__Pyx_PyLong_AbsNeg(PyObject *num);
#define __Pyx_PyNumber_Absolute(x)\
    ((likely(PyLong_CheckExact(x))) ?\
         (likely(Py_SIZE(x) >= 0) ? (Py_INCREF(x), (x)) : __Pyx_PyLong_AbsNeg(x)) :\
         PyNumber_Absolute(x))
#else
#define __Pyx_PyNumber_Absolute(x)  PyNumber_Absolute(x)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_Check(obj)  (__Pyx_TypeCheck(obj, __pyx_CyFunctionType))
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* PyFloatBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_SubtractCObj(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyFloat_SubtractCObj(op1, op2, floatval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod2.proto */
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2);
#else
#define __Pyx_CallUnboundCMethod2(cfunc, self, arg1, arg2)  __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2)
#endif

/* CallNextTpDealloc.proto */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc);

/* CallNextTpTraverse.proto */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

/* CallNextTpClear.proto */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_dealloc);

/* IncludeStringH.proto */
#include <string.h>

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* SetNameInClass.proto */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? _PyDict_SetItem_KnownHash(ns, name, value, ((PyASCIIObject *) name)->hash) : PyObject_SetItem(ns, name, value))
#elif CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? PyDict_SetItem(ns, name, value) : PyObject_SetItem(ns, name, value))
#else
#define __Pyx_SetNameInClass(ns, name, value)  PyObject_SetItem(ns, name, value)
#endif

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE uint64_t __Pyx_PyInt_As_uint64_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static bool __pyx_f_9networkit_14sparsification_9EdgeScore_isDoubleValue(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_EdgeScore *__pyx_v_self); /* proto*/
static bool __pyx_f_9networkit_14sparsification_31ChibaNishizekiTriangleEdgeScore_isDoubleValue(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_ChibaNishizekiTriangleEdgeScore *__pyx_v_self); /* proto*/
static bool __pyx_f_9networkit_14sparsification_33ChibaNishizekiQuadrangleEdgeScore_isDoubleValue(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_ChibaNishizekiQuadrangleEdgeScore *__pyx_v_self); /* proto*/
static bool __pyx_f_9networkit_14sparsification_17TriangleEdgeScore_isDoubleValue(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_TriangleEdgeScore *__pyx_v_self); /* proto*/
static bool __pyx_f_9networkit_14sparsification_19EdgeScoreLinearizer_isDoubleValue(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_EdgeScoreLinearizer *__pyx_v_self); /* proto*/
static bool __pyx_f_9networkit_14sparsification_19EdgeScoreNormalizer_isDoubleValue(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_EdgeScoreNormalizer *__pyx_v_self); /* proto*/
static bool __pyx_f_9networkit_14sparsification_16EdgeScoreBlender_isDoubleValue(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_EdgeScoreBlender *__pyx_v_self); /* proto*/
static bool __pyx_f_9networkit_14sparsification_18GeometricMeanScore_isDoubleValue(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_GeometricMeanScore *__pyx_v_self); /* proto*/
static bool __pyx_f_9networkit_14sparsification_21SimmelianOverlapScore_isDoubleValue(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_SimmelianOverlapScore *__pyx_v_self); /* proto*/
static bool __pyx_f_9networkit_14sparsification_18PrefixJaccardScore_isDoubleValue(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_PrefixJaccardScore *__pyx_v_self); /* proto*/
static bool __pyx_f_9networkit_14sparsification_15MultiscaleScore_isDoubleValue(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_MultiscaleScore *__pyx_v_self); /* proto*/
static bool __pyx_f_9networkit_14sparsification_15RandomEdgeScore_isDoubleValue(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_RandomEdgeScore *__pyx_v_self); /* proto*/
static bool __pyx_f_9networkit_14sparsification_20LocalSimilarityScore_isDoubleValue(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_LocalSimilarityScore *__pyx_v_self); /* proto*/
static bool __pyx_f_9networkit_14sparsification_15ForestFireScore_isDoubleValue(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_ForestFireScore *__pyx_v_self); /* proto*/
static bool __pyx_f_9networkit_14sparsification_16LocalDegreeScore_isDoubleValue(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_LocalDegreeScore *__pyx_v_self); /* proto*/
static bool __pyx_f_9networkit_14sparsification_19RandomNodeEdgeScore_isDoubleValue(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_RandomNodeEdgeScore *__pyx_v_self); /* proto*/
static bool __pyx_f_9networkit_14sparsification_16LocalFilterScore_isDoubleValue(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_LocalFilterScore *__pyx_v_self); /* proto*/
static bool __pyx_f_9networkit_14sparsification_28ChanceCorrectedTriangleScore_isDoubleValue(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_ChanceCorrectedTriangleScore *__pyx_v_self); /* proto*/
static bool __pyx_f_9networkit_14sparsification_29SCANStructuralSimilarityScore_isDoubleValue(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_SCANStructuralSimilarityScore *__pyx_v_self); /* proto*/

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'networkit.base' */
static PyTypeObject *__pyx_ptype_9networkit_4base_Algorithm = 0;

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.unordered_set' */

/* Module declarations from 'networkit.graph' */
static PyTypeObject *__pyx_ptype_9networkit_5graph_Graph = 0;
static PyTypeObject *__pyx_ptype_9networkit_5graph_RandomMaximumSpanningForest = 0;
static PyTypeObject *__pyx_ptype_9networkit_5graph_UnionMaximumSpanningForest = 0;

/* Module declarations from 'networkit.sparsification' */
static PyTypeObject *__pyx_ptype_9networkit_14sparsification_EdgeScore = 0;
static PyTypeObject *__pyx_ptype_9networkit_14sparsification_ChibaNishizekiTriangleEdgeScore = 0;
static PyTypeObject *__pyx_ptype_9networkit_14sparsification_ChibaNishizekiQuadrangleEdgeScore = 0;
static PyTypeObject *__pyx_ptype_9networkit_14sparsification_TriangleEdgeScore = 0;
static PyTypeObject *__pyx_ptype_9networkit_14sparsification_EdgeScoreLinearizer = 0;
static PyTypeObject *__pyx_ptype_9networkit_14sparsification_EdgeScoreNormalizer = 0;
static PyTypeObject *__pyx_ptype_9networkit_14sparsification_EdgeScoreBlender = 0;
static PyTypeObject *__pyx_ptype_9networkit_14sparsification_GeometricMeanScore = 0;
static PyTypeObject *__pyx_ptype_9networkit_14sparsification_EdgeScoreAsWeight = 0;
static PyTypeObject *__pyx_ptype_9networkit_14sparsification_SimmelianOverlapScore = 0;
static PyTypeObject *__pyx_ptype_9networkit_14sparsification_PrefixJaccardScore = 0;
static PyTypeObject *__pyx_ptype_9networkit_14sparsification_MultiscaleScore = 0;
static PyTypeObject *__pyx_ptype_9networkit_14sparsification_RandomEdgeScore = 0;
static PyTypeObject *__pyx_ptype_9networkit_14sparsification_LocalSimilarityScore = 0;
static PyTypeObject *__pyx_ptype_9networkit_14sparsification_ForestFireScore = 0;
static PyTypeObject *__pyx_ptype_9networkit_14sparsification_LocalDegreeScore = 0;
static PyTypeObject *__pyx_ptype_9networkit_14sparsification_RandomNodeEdgeScore = 0;
static PyTypeObject *__pyx_ptype_9networkit_14sparsification_LocalFilterScore = 0;
static PyTypeObject *__pyx_ptype_9networkit_14sparsification_ChanceCorrectedTriangleScore = 0;
static PyTypeObject *__pyx_ptype_9networkit_14sparsification_SCANStructuralSimilarityScore = 0;
static PyTypeObject *__pyx_ptype_9networkit_14sparsification_GlobalThresholdFilter = 0;
static PyTypeObject *__pyx_ptype_9networkit_14sparsification___pyx_scope_struct__scores = 0;
static std::vector<double>  __pyx_convert_vector_from_py_double(PyObject *); /*proto*/
static std::vector<bool>  __pyx_convert_vector_from_py_bool(PyObject *); /*proto*/
static std::vector<__pyx_t_9networkit_14sparsification_count>  __pyx_convert_vector_from_py___pyx_t_9networkit_14sparsification_count(PyObject *); /*proto*/
static PyObject *__pyx_convert_vector_to_py_double(const std::vector<double>  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py___pyx_t_9networkit_14sparsification_count(const std::vector<__pyx_t_9networkit_14sparsification_count>  &); /*proto*/
#define __Pyx_MODULE_NAME "networkit.sparsification"
extern int __pyx_module_is_main_networkit__sparsification;
int __pyx_module_is_main_networkit__sparsification = 0;

/* Implementation of 'networkit.sparsification' */
static PyObject *__pyx_builtin_object;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_NotImplementedError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_zip;
static PyObject *__pyx_builtin_sorted;
static const char __pyx_k_G[] = "G";
static const char __pyx_k_a[] = "a";
static const char __pyx_k_d[] = "d";
static const char __pyx_k_e[] = "e";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_u[] = "u";
static const char __pyx_k_v[] = "v";
static const char __pyx_k_w[] = "w";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_gf[] = "gf";
static const char __pyx_k_ms[] = "ms";
static const char __pyx_k_pf[] = "pf";
static const char __pyx_k_PLM[] = "PLM";
static const char __pyx_k__51[] = "";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_eid[] = "eid";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_par[] = "par";
static const char __pyx_k_run[] = "run";
static const char __pyx_k_zip[] = "zip";
static const char __pyx_k__190[] = "  ";
static const char __pyx_k_a_ms[] = "a_ms";
static const char __pyx_k_a_sj[] = "a_sj";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_norm[] = "norm";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_tebr[] = "tebr";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_above[] = "above";
static const char __pyx_k_index[] = "_index";
static const char __pyx_k_lower[] = "lower";
static const char __pyx_k_omega[] = "omega";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_score[] = "score";
static const char __pyx_k_turbo[] = "turbo";
static const char __pyx_k_upper[] = "upper";
static const char __pyx_k_cdAlgo[] = "cdAlgo";
static const char __pyx_k_degree[] = "degree";
static const char __pyx_k_edgeId[] = "edgeId";
static const char __pyx_k_factor[] = "factor";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_object[] = "object";
static const char __pyx_k_offset[] = "offset";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_refine[] = "refine";
static const char __pyx_k_result[] = "result";
static const char __pyx_k_scorer[] = "scorer";
static const char __pyx_k_scores[] = "scores";
static const char __pyx_k_sorted[] = "sorted";
static const char __pyx_k_algDist[] = "algDist";
static const char __pyx_k_ffScore[] = "ffScore";
static const char __pyx_k_inverse[] = "inverse";
static const char __pyx_k_maxRank[] = "maxRank";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_reScore[] = "reScore";
static const char __pyx_k_reverse[] = "reverse";
static const char __pyx_k_setitem[] = "__setitem__";
static const char __pyx_k_squared[] = "squared";
static const char __pyx_k_ABS_ZERO[] = "_ABS_ZERO";
static const char __pyx_k_distance[] = "distance";
static const char __pyx_k_forEdges[] = "forEdges";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_increase[] = "increase";
static const char __pyx_k_maxSteps[] = "maxSteps";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_rneScore[] = "rneScore";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_together[] = "together";
static const char __pyx_k_EdgeScore[] = "EdgeScore";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_algorithm[] = "algorithm";
static const char __pyx_k_attribute[] = "attribute";
static const char __pyx_k_bestRatio[] = "bestRatio";
static const char __pyx_k_calculate[] = "calculate";
static const char __pyx_k_community[] = "community";
static const char __pyx_k_edgeRatio[] = "edgeRatio";
static const char __pyx_k_iterEdges[] = "iterEdges";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_parameter[] = "parameter";
static const char __pyx_k_partition[] = "partition";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_scanScore[] = "scanScore";
static const char __pyx_k_selection[] = "selection";
static const char __pyx_k_triangles[] = "triangles";
static const char __pyx_k_Sparsifier[] = "Sparsifier";
static const char __pyx_k_attribute0[] = "attribute0";
static const char __pyx_k_attribute1[] = "attribute1";
static const char __pyx_k_constValue[] = "constValue";
static const char __pyx_k_edgeScores[] = "edgeScores";
static const char __pyx_k_estimation[] = "estimation";
static const char __pyx_k_lowerBound[] = "lowerBound";
static const char __pyx_k_preprocess[] = "preprocess";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_sparsified[] = "sparsified";
static const char __pyx_k_sparsifier[] = "sparsifier";
static const char __pyx_k_upperBound[] = "upperBound";
static const char __pyx_k_a_triangles[] = "a_triangles";
static const char __pyx_k_attribute_2[] = "_attribute";
static const char __pyx_k_localDegree[] = "localDegree";
static const char __pyx_k_logarithmic[] = "logarithmic";
static const char __pyx_k_minDistance[] = "minDistance";
static const char __pyx_k_quadrangles[] = "quadrangles";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_getAttribute[] = "getAttribute";
static const char __pyx_k_getParameter[] = "getParameter";
static const char __pyx_k_getPartition[] = "getPartition";
static const char __pyx_k_parameterize[] = "parameterize";
static const char __pyx_k_ConstantScore[] = "ConstantScore";
static const char __pyx_k_bestParameter[] = "bestParameter";
static const char __pyx_k_getEdgeScores[] = "getEdgeScores";
static const char __pyx_k_localSimScore[] = "localSimScore";
static const char __pyx_k_numberOfEdges[] = "numberOfEdges";
static const char __pyx_k_numberSystems[] = "numberSystems";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_triangleScore[] = "triangleScore";
static const char __pyx_k_SCANSparsifier[] = "SCANSparsifier";
static const char __pyx_k_inputAttribute[] = "inputAttribute";
static const char __pyx_k_originalScores[] = "originalScores";
static const char __pyx_k_paramAlgorithm[] = "paramAlgorithm";
static const char __pyx_k_withEdgeScores[] = "withEdgeScores";
static const char __pyx_k_ForestFireScore[] = "ForestFireScore";
static const char __pyx_k_LocalSparsifier[] = "LocalSparsifier";
static const char __pyx_k_MultiscaleScore[] = "MultiscaleScore";
static const char __pyx_k_RandomEdgeScore[] = "RandomEdgeScore";
static const char __pyx_k_burnProbability[] = "burnProbability";
static const char __pyx_k_degsToAttrValue[] = "degsToAttrValue";
static const char __pyx_k_meanQuadrangles[] = "meanQuadrangles";
static const char __pyx_k_none_randomized[] = "none randomized";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_EdgeScoreBlender[] = "EdgeScoreBlender";
static const char __pyx_k_LocalDegreeScore[] = "LocalDegreeScore";
static const char __pyx_k_LocalFilterScore[] = "LocalFilterScore";
static const char __pyx_k_currentEdgeRatio[] = "currentEdgeRatio";
static const char __pyx_k_getRankAttribute[] = "getRankAttribute";
static const char __pyx_k_iterEdgesWeights[] = "iterEdgesWeights";
static const char __pyx_k_localDegreeScore[] = "localDegreeScore";
static const char __pyx_k_localFilterScore[] = "localFilterScore";
static const char __pyx_k_numberIterations[] = "numberIterations";
static const char __pyx_k_simmelianOverlap[] = "simmelianOverlap";
static const char __pyx_k_targetBurntRatio[] = "targetBurntRatio";
static const char __pyx_k_upperEdgeIdBound[] = "upperEdgeIdBound";
static const char __pyx_k_AlgebraicDistance[] = "AlgebraicDistance";
static const char __pyx_k_EdgeScoreAsWeight[] = "EdgeScoreAsWeight";
static const char __pyx_k_Sparsifier_scores[] = "Sparsifier.scores";
static const char __pyx_k_TriangleEdgeScore[] = "TriangleEdgeScore";
static const char __pyx_k_AdamicAdarDistance[] = "AdamicAdarDistance";
static const char __pyx_k_GeometricMeanScore[] = "GeometricMeanScore";
static const char __pyx_k_PrefixJaccardScore[] = "PrefixJaccardScore";
static const char __pyx_k_TriangleSparsifier[] = "TriangleSparsifier";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_getSparsifiedGraph[] = "_getSparsifiedGraph";
static const char __pyx_k_EdgeScoreLinearizer[] = "EdgeScoreLinearizer";
static const char __pyx_k_EdgeScoreNormalizer[] = "EdgeScoreNormalizer";
static const char __pyx_k_NotImplementedError[] = "NotImplementedError";
static const char __pyx_k_RandomNodeEdgeScore[] = "RandomNodeEdgeScore";
static const char __pyx_k_lowerParameterBound[] = "lowerParameterBound";
static const char __pyx_k_upperParameterBound[] = "upperParameterBound";
static const char __pyx_k_ConstantScore___init[] = "ConstantScore.__init__";
static const char __pyx_k_ConstantScore_scores[] = "ConstantScore.scores";
static const char __pyx_k_ForestFireSparsifier[] = "ForestFireSparsifier";
static const char __pyx_k_LocalSimilarityScore[] = "LocalSimilarityScore";
static const char __pyx_k_MultiscaleSparsifier[] = "MultiscaleSparsifier";
static const char __pyx_k_RandomEdgeSparsifier[] = "RandomEdgeSparsifier";
static const char __pyx_k_getSparsifiedGraph_2[] = "getSparsifiedGraph";
static const char __pyx_k_GlobalThresholdFilter[] = "GlobalThresholdFilter";
static const char __pyx_k_Implement_in_subclass[] = "Implement in subclass";
static const char __pyx_k_LocalDegreeSparsifier[] = "LocalDegreeSparsifier";
static const char __pyx_k_SCANSparsifier_scores[] = "SCANSparsifier.scores";
static const char __pyx_k_SimmelianOverlapScore[] = "SimmelianOverlapScore";
static const char __pyx_k_LocalSparsifier___init[] = "LocalSparsifier.__init__";
static const char __pyx_k_LocalSparsifier_scores[] = "LocalSparsifier.scores";
static const char __pyx_k_SimpleParameterization[] = "SimpleParameterization";
static const char __pyx_k_Sparsifier_getParameter[] = "Sparsifier.getParameter";
static const char __pyx_k_TODO_not_yet_documented[] = " [TODO not yet documented] ";
static const char __pyx_k_quadranglePrefixJaccard[] = "quadranglePrefixJaccard";
static const char __pyx_k_ModularityPartitionScore[] = "ModularityPartitionScore";
static const char __pyx_k_RandomNodeEdgeSparsifier[] = "RandomNodeEdgeSparsifier";
static const char __pyx_k_getSparsifiedGraphOfSize[] = "getSparsifiedGraphOfSize";
static const char __pyx_k_networkit_sparsification[] = "networkit.sparsification";
static const char __pyx_k_LocalSimilaritySparsifier[] = "LocalSimilaritySparsifier";
static const char __pyx_k_TriangleSparsifier_scores[] = "TriangleSparsifier.scores";
static const char __pyx_k_DegreeMultiscaleSparsifier[] = "DegreeMultiscaleSparsifier";
static const char __pyx_k_sizeIncreasesWithParameter[] = "sizeIncreasesWithParameter";
static const char __pyx_k_AlgebraicDistanceSparsifier[] = "AlgebraicDistanceSparsifier";
static const char __pyx_k_ForestFireSparsifier___init[] = "ForestFireSparsifier.__init__";
static const char __pyx_k_ForestFireSparsifier_scores[] = "ForestFireSparsifier.scores";
static const char __pyx_k_JaccardSimilaritySparsifier[] = "JaccardSimilaritySparsifier";
static const char __pyx_k_MultiscaleSparsifier_scores[] = "MultiscaleSparsifier.scores";
static const char __pyx_k_RandomEdgeSparsifier_scores[] = "RandomEdgeSparsifier.scores";
static const char __pyx_k_BinarySearchParameterization[] = "BinarySearchParameterization";
static const char __pyx_k_ChanceCorrectedTriangleScore[] = "ChanceCorrectedTriangleScore";
static const char __pyx_k_LocalDegreeSparsifier_scores[] = "LocalDegreeSparsifier.scores";
static const char __pyx_k_getParameterizationAlgorithm[] = "_getParameterizationAlgorithm";
static const char __pyx_k_networkit_sparsification_pyx[] = "networkit/sparsification.pyx";
static const char __pyx_k_JaccardSimilarityAttributizer[] = "JaccardSimilarityAttributizer";
static const char __pyx_k_SCANStructuralSimilarityScore[] = "SCANStructuralSimilarityScore";
static const char __pyx_k_SimmelianMultiscaleSparsifier[] = "SimmelianMultiscaleSparsifier";
static const char __pyx_k_SimmelianSparsifierParametric[] = "SimmelianSparsifierParametric";
static const char __pyx_k_Sparsifier_getSparsifiedGraph[] = "Sparsifier.getSparsifiedGraph";
static const char __pyx_k_An_implementation_of_the_Local[] = " An implementation of the Local Similarity sparsification approach introduced by Satuluri et al. ";
static const char __pyx_k_CompleteSearchParameterization[] = "CompleteSearchParameterization";
static const char __pyx_k_Parameterizes_a_sparsification[] = " Parameterizes a sparsification algorithm using binary search. ";
static const char __pyx_k_Sparsifier__getSparsifiedGraph[] = "Sparsifier._getSparsifiedGraph";
static const char __pyx_k_getRankAttribute_locals_lambda[] = "getRankAttribute.<locals>.<lambda>";
static const char __pyx_k_A_parameterization_algorithm_re[] = " A parameterization algorithm representds an algorithm that, given a graph\n\tand a sparsifier, calculates a parameter value such that a desired edge ratio is met.\n\tThe SimpleParameterization strategy simply returns the input edgeRatio as parameterization\n\tresult. ";
static const char __pyx_k_A_sparsifiier_dervived_from_SCA[] = " A sparsifiier dervived from 'SCAN: a structural clustering algorithm for networks' ";
static const char __pyx_k_A_variant_of_the_Forest_Fire_sp[] = " A variant of the Forest Fire sparsification approach proposed by Leskovec et al. ";
static const char __pyx_k_Abstract_base_class_representin[] = " Abstract base class representing a graph sparsification algorithm that\n\tuses only one parameter to determine the degree of filtering. ";
static const char __pyx_k_Allows_for_global_filtering_wit[] = "  Allows for global filtering with respect to triangle counts. ";
static const char __pyx_k_An_implementation_of_the_Jaccar[] = " An implementation of the Jaccard Similarity sparsification approach introduced by Satuluri et al. ";
static const char __pyx_k_An_implementation_of_the_Multis[] = " An implementation of the Multiscale backbone approach introduced by Serrano et al. ";
static const char __pyx_k_An_implementation_of_the_Non_pa[] = " An implementation of the Non-parametric variant of the Simmelian Sparsifiers\n\tintroduced by Nick et al. ";
static const char __pyx_k_An_implementation_of_the_Parame[] = " An implementation of the Parametric variant of the Simmelian Sparsifiers\n\t introduced by Nick et al. ";
static const char __pyx_k_An_implementation_of_the_Simmel[] = " An implementation of the Simmelian Sparsifiers based on quadrangles. ";
static const char __pyx_k_Assigns_as_an_attribute_the_sam[] = " Assigns as an attribute the same value to each edge (for sanity checks) ";
static const char __pyx_k_ChibaNishizekiTriangleEdgeScore[] = "ChibaNishizekiTriangleEdgeScore";
static const char __pyx_k_Error_you_may_not_use_EdgeScore[] = "Error, you may not use EdgeScore directly, use a sub-class instead";
static const char __pyx_k_ModularityPartitionScore_scores[] = "ModularityPartitionScore.scores.<locals>.together";
static const char __pyx_k_Multiscale_Sparsifier_that_uses[] = " Multiscale Sparsifier that uses triangle counts as input edge weight. ";
static const char __pyx_k_RandomNodeEdgeSparsifier___init[] = "RandomNodeEdgeSparsifier.__init__";
static const char __pyx_k_RandomNodeEdgeSparsifier_scores[] = "RandomNodeEdgeSparsifier.scores";
static const char __pyx_k_Random_Edge_sampling_Edges_to_k[] = " Random Edge sampling. Edges to keep in the sparsified graph are selected uniformly at random. ";
static const char __pyx_k_SimmelianSparsifierParametric_2[] = "SimmelianSparsifierParametric.__init__";
static const char __pyx_k_parameterization_method_not_yet[] = "parameterization method not yet implemented.";
static const char __pyx_k_AlgebraicDistanceSparsifier___in[] = "AlgebraicDistanceSparsifier.__init__";
static const char __pyx_k_AlgebraicDistanceSparsifier__get[] = "AlgebraicDistanceSparsifier._getSparsifiedGraph";
static const char __pyx_k_AlgebraicDistanceSparsifier_scor[] = "AlgebraicDistanceSparsifier.scores";
static const char __pyx_k_An_implementation_of_the_Local_2[] = " An implementation of the Local Degree sparsification algorithm. ";
static const char __pyx_k_BinarySearchParameterization___i[] = "BinarySearchParameterization.__init__";
static const char __pyx_k_BinarySearchParameterization_par[] = "BinarySearchParameterization.parameterize";
static const char __pyx_k_ChibaNishizekiQuadrangleEdgeScor[] = "ChibaNishizekiQuadrangleEdgeScore";
static const char __pyx_k_CompleteSearchParameterization_2[] = "CompleteSearchParameterization.__init__";
static const char __pyx_k_CompleteSearchParameterization_p[] = "CompleteSearchParameterization.parameterize";
static const char __pyx_k_DegreeMultiscaleSparsifier___ini[] = "DegreeMultiscaleSparsifier.__init__";
static const char __pyx_k_DegreeMultiscaleSparsifier__getP[] = "DegreeMultiscaleSparsifier._getParameterizationAlgorithm";
static const char __pyx_k_DegreeMultiscaleSparsifier__getS[] = "DegreeMultiscaleSparsifier._getSparsifiedGraph";
static const char __pyx_k_DegreeMultiscaleSparsifier_score[] = "DegreeMultiscaleSparsifier.scores";
static const char __pyx_k_ForestFireSparsifier__getParamet[] = "ForestFireSparsifier._getParameterizationAlgorithm";
static const char __pyx_k_ForestFireSparsifier__getSparsif[] = "ForestFireSparsifier._getSparsifiedGraph";
static const char __pyx_k_JaccardSimilaritySparsifier__get[] = "JaccardSimilaritySparsifier._getSparsifiedGraph";
static const char __pyx_k_JaccardSimilaritySparsifier_scor[] = "JaccardSimilaritySparsifier.scores";
static const char __pyx_k_LocalDegreeSparsifier__getParame[] = "LocalDegreeSparsifier._getParameterizationAlgorithm";
static const char __pyx_k_LocalDegreeSparsifier__getSparsi[] = "LocalDegreeSparsifier._getSparsifiedGraph";
static const char __pyx_k_LocalSimilaritySparsifier__getPa[] = "LocalSimilaritySparsifier._getParameterizationAlgorithm";
static const char __pyx_k_LocalSimilaritySparsifier__getSp[] = "LocalSimilaritySparsifier._getSparsifiedGraph";
static const char __pyx_k_LocalSimilaritySparsifier_scores[] = "LocalSimilaritySparsifier.scores";
static const char __pyx_k_LocalSparsifier__getParameteriza[] = "LocalSparsifier._getParameterizationAlgorithm";
static const char __pyx_k_LocalSparsifier__getSparsifiedGr[] = "LocalSparsifier._getSparsifiedGraph";
static const char __pyx_k_MultiscaleSparsifier__getParamet[] = "MultiscaleSparsifier._getParameterizationAlgorithm";
static const char __pyx_k_MultiscaleSparsifier__getSparsif[] = "MultiscaleSparsifier._getSparsifiedGraph";
static const char __pyx_k_Parameterizes_a_sparsification_2[] = " Parameterizes a sparsification algorithm using complete search\n\t(applicable only to algorithms which take as input a parameter from a small\n\tset of possible values) ";
static const char __pyx_k_QuadrilateralSimmelianSparsifier[] = "QuadrilateralSimmelianSparsifier";
static const char __pyx_k_RandomEdgeSparsifier__getParamet[] = "RandomEdgeSparsifier._getParameterizationAlgorithm";
static const char __pyx_k_RandomEdgeSparsifier__getSparsif[] = "RandomEdgeSparsifier._getSparsifiedGraph";
static const char __pyx_k_RandomNodeEdgeSparsifier__getPar[] = "RandomNodeEdgeSparsifier._getParameterizationAlgorithm";
static const char __pyx_k_RandomNodeEdgeSparsifier__getSpa[] = "RandomNodeEdgeSparsifier._getSparsifiedGraph";
static const char __pyx_k_SCANSparsifier__getParameterizat[] = "SCANSparsifier._getParameterizationAlgorithm";
static const char __pyx_k_SCANSparsifier__getSparsifiedGra[] = "SCANSparsifier._getSparsifiedGraph";
static const char __pyx_k_SimmelianMultiscaleSparsifier__g[] = "SimmelianMultiscaleSparsifier._getSparsifiedGraph";
static const char __pyx_k_SimmelianMultiscaleSparsifier_sc[] = "SimmelianMultiscaleSparsifier.scores";
static const char __pyx_k_SimmelianSparsifierNonParametric[] = "SimmelianSparsifierNonParametric";
static const char __pyx_k_SimmelianSparsifierParametric__g[] = "SimmelianSparsifierParametric._getSparsifiedGraph";
static const char __pyx_k_SimmelianSparsifierParametric_sc[] = "SimmelianSparsifierParametric.scores";
static const char __pyx_k_SimpleParameterization_parameter[] = "SimpleParameterization.parameterize";
static const char __pyx_k_Sparsifier__getParameterizationA[] = "Sparsifier._getParameterizationAlgorithm";
static const char __pyx_k_Sparsifier_getSparsifiedGraphOfS[] = "Sparsifier.getSparsifiedGraphOfSize";
static const char __pyx_k_TriangleSparsifier__getParameter[] = "TriangleSparsifier._getParameterizationAlgorithm";
static const char __pyx_k_TriangleSparsifier__getSparsifie[] = "TriangleSparsifier._getSparsifiedGraph";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_score_must_be_either_a_vector_of[] = "score must be either a vector of integer or float";
static const char __pyx_k_self__this_cannot_be_converted_t[] = "self._this cannot be converted to a Python object for pickling";
static const char __pyx_k_Allows_for_global_filtering_wit_2[] = " Allows for global filtering with respect to (inverted) algebraic distances. ";
static const char __pyx_k_ModularityPartitionScore_scores_2[] = "ModularityPartitionScore.scores.<locals>.<lambda>";
static const char __pyx_k_ModularityPartitionScore_scores_3[] = "ModularityPartitionScore.scores";
static const char __pyx_k_Multiscale_Sparsifier_that_uses_2[] = " Multiscale Sparsifier that uses node degrees (mapped to edges) as input edge weight. ";
static const char __pyx_k_AlgebraicDistanceSparsifier__get_2[] = "AlgebraicDistanceSparsifier._getParameterizationAlgorithm";
static const char __pyx_k_JaccardSimilaritySparsifier__get_2[] = "JaccardSimilaritySparsifier._getParameterizationAlgorithm";
static const char __pyx_k_QuadrilateralSimmelianSparsifier_2[] = "QuadrilateralSimmelianSparsifier.scores";
static const char __pyx_k_QuadrilateralSimmelianSparsifier_3[] = "QuadrilateralSimmelianSparsifier._getSparsifiedGraph";
static const char __pyx_k_QuadrilateralSimmelianSparsifier_4[] = "QuadrilateralSimmelianSparsifier._getParameterizationAlgorithm";
static const char __pyx_k_SimmelianMultiscaleSparsifier__g_2[] = "SimmelianMultiscaleSparsifier._getParameterizationAlgorithm";
static const char __pyx_k_SimmelianSparsifierNonParametric_2[] = "SimmelianSparsifierNonParametric.scores";
static const char __pyx_k_SimmelianSparsifierNonParametric_3[] = "SimmelianSparsifierNonParametric._getSparsifiedGraph";
static const char __pyx_k_SimmelianSparsifierNonParametric_4[] = "SimmelianSparsifierNonParametric._getParameterizationAlgorithm";
static const char __pyx_k_SimmelianSparsifierParametric__g_2[] = "SimmelianSparsifierParametric._getParameterizationAlgorithm";
static PyObject *__pyx_n_s_ABS_ZERO;
static PyObject *__pyx_kp_s_A_parameterization_algorithm_re;
static PyObject *__pyx_kp_s_A_sparsifiier_dervived_from_SCA;
static PyObject *__pyx_kp_s_A_variant_of_the_Forest_Fire_sp;
static PyObject *__pyx_kp_s_Abstract_base_class_representin;
static PyObject *__pyx_n_s_AdamicAdarDistance;
static PyObject *__pyx_n_s_AlgebraicDistance;
static PyObject *__pyx_n_s_AlgebraicDistanceSparsifier;
static PyObject *__pyx_n_s_AlgebraicDistanceSparsifier___in;
static PyObject *__pyx_n_s_AlgebraicDistanceSparsifier__get;
static PyObject *__pyx_n_s_AlgebraicDistanceSparsifier__get_2;
static PyObject *__pyx_n_s_AlgebraicDistanceSparsifier_scor;
static PyObject *__pyx_kp_s_Allows_for_global_filtering_wit;
static PyObject *__pyx_kp_s_Allows_for_global_filtering_wit_2;
static PyObject *__pyx_kp_s_An_implementation_of_the_Jaccar;
static PyObject *__pyx_kp_s_An_implementation_of_the_Local;
static PyObject *__pyx_kp_s_An_implementation_of_the_Local_2;
static PyObject *__pyx_kp_s_An_implementation_of_the_Multis;
static PyObject *__pyx_kp_s_An_implementation_of_the_Non_pa;
static PyObject *__pyx_kp_s_An_implementation_of_the_Parame;
static PyObject *__pyx_kp_s_An_implementation_of_the_Simmel;
static PyObject *__pyx_kp_s_Assigns_as_an_attribute_the_sam;
static PyObject *__pyx_n_s_BinarySearchParameterization;
static PyObject *__pyx_n_s_BinarySearchParameterization___i;
static PyObject *__pyx_n_s_BinarySearchParameterization_par;
static PyObject *__pyx_n_s_ChanceCorrectedTriangleScore;
static PyObject *__pyx_n_s_ChibaNishizekiQuadrangleEdgeScor;
static PyObject *__pyx_n_s_ChibaNishizekiTriangleEdgeScore;
static PyObject *__pyx_n_s_CompleteSearchParameterization;
static PyObject *__pyx_n_s_CompleteSearchParameterization_2;
static PyObject *__pyx_n_s_CompleteSearchParameterization_p;
static PyObject *__pyx_n_s_ConstantScore;
static PyObject *__pyx_n_s_ConstantScore___init;
static PyObject *__pyx_n_s_ConstantScore_scores;
static PyObject *__pyx_n_s_DegreeMultiscaleSparsifier;
static PyObject *__pyx_n_s_DegreeMultiscaleSparsifier___ini;
static PyObject *__pyx_n_s_DegreeMultiscaleSparsifier__getP;
static PyObject *__pyx_n_s_DegreeMultiscaleSparsifier__getS;
static PyObject *__pyx_n_s_DegreeMultiscaleSparsifier_score;
static PyObject *__pyx_n_s_EdgeScore;
static PyObject *__pyx_n_s_EdgeScoreAsWeight;
static PyObject *__pyx_n_s_EdgeScoreBlender;
static PyObject *__pyx_n_s_EdgeScoreLinearizer;
static PyObject *__pyx_n_s_EdgeScoreNormalizer;
static PyObject *__pyx_kp_u_Error_you_may_not_use_EdgeScore;
static PyObject *__pyx_n_s_ForestFireScore;
static PyObject *__pyx_n_s_ForestFireSparsifier;
static PyObject *__pyx_n_s_ForestFireSparsifier___init;
static PyObject *__pyx_n_s_ForestFireSparsifier__getParamet;
static PyObject *__pyx_n_s_ForestFireSparsifier__getSparsif;
static PyObject *__pyx_n_s_ForestFireSparsifier_scores;
static PyObject *__pyx_n_s_G;
static PyObject *__pyx_n_s_GeometricMeanScore;
static PyObject *__pyx_n_s_GlobalThresholdFilter;
static PyObject *__pyx_kp_u_Implement_in_subclass;
static PyObject *__pyx_n_s_JaccardSimilarityAttributizer;
static PyObject *__pyx_n_s_JaccardSimilaritySparsifier;
static PyObject *__pyx_n_s_JaccardSimilaritySparsifier__get;
static PyObject *__pyx_n_s_JaccardSimilaritySparsifier__get_2;
static PyObject *__pyx_n_s_JaccardSimilaritySparsifier_scor;
static PyObject *__pyx_n_s_LocalDegreeScore;
static PyObject *__pyx_n_s_LocalDegreeSparsifier;
static PyObject *__pyx_n_s_LocalDegreeSparsifier__getParame;
static PyObject *__pyx_n_s_LocalDegreeSparsifier__getSparsi;
static PyObject *__pyx_n_s_LocalDegreeSparsifier_scores;
static PyObject *__pyx_n_s_LocalFilterScore;
static PyObject *__pyx_n_s_LocalSimilarityScore;
static PyObject *__pyx_n_s_LocalSimilaritySparsifier;
static PyObject *__pyx_n_s_LocalSimilaritySparsifier__getPa;
static PyObject *__pyx_n_s_LocalSimilaritySparsifier__getSp;
static PyObject *__pyx_n_s_LocalSimilaritySparsifier_scores;
static PyObject *__pyx_n_s_LocalSparsifier;
static PyObject *__pyx_n_s_LocalSparsifier___init;
static PyObject *__pyx_n_s_LocalSparsifier__getParameteriza;
static PyObject *__pyx_n_s_LocalSparsifier__getSparsifiedGr;
static PyObject *__pyx_n_s_LocalSparsifier_scores;
static PyObject *__pyx_n_s_ModularityPartitionScore;
static PyObject *__pyx_n_s_ModularityPartitionScore_scores;
static PyObject *__pyx_n_s_ModularityPartitionScore_scores_2;
static PyObject *__pyx_n_s_ModularityPartitionScore_scores_3;
static PyObject *__pyx_n_s_MultiscaleScore;
static PyObject *__pyx_n_s_MultiscaleSparsifier;
static PyObject *__pyx_n_s_MultiscaleSparsifier__getParamet;
static PyObject *__pyx_n_s_MultiscaleSparsifier__getSparsif;
static PyObject *__pyx_n_s_MultiscaleSparsifier_scores;
static PyObject *__pyx_kp_s_Multiscale_Sparsifier_that_uses;
static PyObject *__pyx_kp_s_Multiscale_Sparsifier_that_uses_2;
static PyObject *__pyx_n_s_NotImplementedError;
static PyObject *__pyx_n_s_PLM;
static PyObject *__pyx_kp_s_Parameterizes_a_sparsification;
static PyObject *__pyx_kp_s_Parameterizes_a_sparsification_2;
static PyObject *__pyx_n_s_PrefixJaccardScore;
static PyObject *__pyx_n_s_QuadrilateralSimmelianSparsifier;
static PyObject *__pyx_n_s_QuadrilateralSimmelianSparsifier_2;
static PyObject *__pyx_n_s_QuadrilateralSimmelianSparsifier_3;
static PyObject *__pyx_n_s_QuadrilateralSimmelianSparsifier_4;
static PyObject *__pyx_n_s_RandomEdgeScore;
static PyObject *__pyx_n_s_RandomEdgeSparsifier;
static PyObject *__pyx_n_s_RandomEdgeSparsifier__getParamet;
static PyObject *__pyx_n_s_RandomEdgeSparsifier__getSparsif;
static PyObject *__pyx_n_s_RandomEdgeSparsifier_scores;
static PyObject *__pyx_n_s_RandomNodeEdgeScore;
static PyObject *__pyx_n_s_RandomNodeEdgeSparsifier;
static PyObject *__pyx_n_s_RandomNodeEdgeSparsifier___init;
static PyObject *__pyx_n_s_RandomNodeEdgeSparsifier__getPar;
static PyObject *__pyx_n_s_RandomNodeEdgeSparsifier__getSpa;
static PyObject *__pyx_n_s_RandomNodeEdgeSparsifier_scores;
static PyObject *__pyx_kp_s_Random_Edge_sampling_Edges_to_k;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_SCANSparsifier;
static PyObject *__pyx_n_s_SCANSparsifier__getParameterizat;
static PyObject *__pyx_n_s_SCANSparsifier__getSparsifiedGra;
static PyObject *__pyx_n_s_SCANSparsifier_scores;
static PyObject *__pyx_n_s_SCANStructuralSimilarityScore;
static PyObject *__pyx_n_s_SimmelianMultiscaleSparsifier;
static PyObject *__pyx_n_s_SimmelianMultiscaleSparsifier__g;
static PyObject *__pyx_n_s_SimmelianMultiscaleSparsifier__g_2;
static PyObject *__pyx_n_s_SimmelianMultiscaleSparsifier_sc;
static PyObject *__pyx_n_s_SimmelianOverlapScore;
static PyObject *__pyx_n_s_SimmelianSparsifierNonParametric;
static PyObject *__pyx_n_s_SimmelianSparsifierNonParametric_2;
static PyObject *__pyx_n_s_SimmelianSparsifierNonParametric_3;
static PyObject *__pyx_n_s_SimmelianSparsifierNonParametric_4;
static PyObject *__pyx_n_s_SimmelianSparsifierParametric;
static PyObject *__pyx_n_s_SimmelianSparsifierParametric_2;
static PyObject *__pyx_n_s_SimmelianSparsifierParametric__g;
static PyObject *__pyx_n_s_SimmelianSparsifierParametric__g_2;
static PyObject *__pyx_n_s_SimmelianSparsifierParametric_sc;
static PyObject *__pyx_n_s_SimpleParameterization;
static PyObject *__pyx_n_s_SimpleParameterization_parameter;
static PyObject *__pyx_n_s_Sparsifier;
static PyObject *__pyx_n_s_Sparsifier__getParameterizationA;
static PyObject *__pyx_n_s_Sparsifier__getSparsifiedGraph;
static PyObject *__pyx_n_s_Sparsifier_getParameter;
static PyObject *__pyx_n_s_Sparsifier_getSparsifiedGraph;
static PyObject *__pyx_n_s_Sparsifier_getSparsifiedGraphOfS;
static PyObject *__pyx_n_s_Sparsifier_scores;
static PyObject *__pyx_kp_s_TODO_not_yet_documented;
static PyObject *__pyx_n_s_TriangleEdgeScore;
static PyObject *__pyx_n_s_TriangleSparsifier;
static PyObject *__pyx_n_s_TriangleSparsifier__getParameter;
static PyObject *__pyx_n_s_TriangleSparsifier__getSparsifie;
static PyObject *__pyx_n_s_TriangleSparsifier_scores;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s__190;
static PyObject *__pyx_n_s__51;
static PyObject *__pyx_n_s_a;
static PyObject *__pyx_n_s_a_ms;
static PyObject *__pyx_n_s_a_sj;
static PyObject *__pyx_n_s_a_triangles;
static PyObject *__pyx_n_s_above;
static PyObject *__pyx_n_s_algDist;
static PyObject *__pyx_n_s_algorithm;
static PyObject *__pyx_n_s_attribute;
static PyObject *__pyx_n_s_attribute0;
static PyObject *__pyx_n_s_attribute1;
static PyObject *__pyx_n_s_attribute_2;
static PyObject *__pyx_n_s_bestParameter;
static PyObject *__pyx_n_s_bestRatio;
static PyObject *__pyx_n_s_burnProbability;
static PyObject *__pyx_n_s_calculate;
static PyObject *__pyx_n_s_cdAlgo;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_community;
static PyObject *__pyx_n_s_constValue;
static PyObject *__pyx_n_s_currentEdgeRatio;
static PyObject *__pyx_n_s_d;
static PyObject *__pyx_n_s_degree;
static PyObject *__pyx_n_s_degsToAttrValue;
static PyObject *__pyx_n_s_distance;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_e;
static PyObject *__pyx_n_s_edgeId;
static PyObject *__pyx_n_s_edgeRatio;
static PyObject *__pyx_n_s_edgeScores;
static PyObject *__pyx_n_s_eid;
static PyObject *__pyx_n_s_estimation;
static PyObject *__pyx_n_s_factor;
static PyObject *__pyx_n_s_ffScore;
static PyObject *__pyx_n_s_forEdges;
static PyObject *__pyx_n_s_getAttribute;
static PyObject *__pyx_n_s_getEdgeScores;
static PyObject *__pyx_n_s_getParameter;
static PyObject *__pyx_n_s_getParameterizationAlgorithm;
static PyObject *__pyx_n_s_getPartition;
static PyObject *__pyx_n_s_getRankAttribute;
static PyObject *__pyx_n_s_getRankAttribute_locals_lambda;
static PyObject *__pyx_n_s_getSparsifiedGraph;
static PyObject *__pyx_n_s_getSparsifiedGraphOfSize;
static PyObject *__pyx_n_s_getSparsifiedGraph_2;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_gf;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_increase;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_inputAttribute;
static PyObject *__pyx_n_s_inverse;
static PyObject *__pyx_n_s_iterEdges;
static PyObject *__pyx_n_s_iterEdgesWeights;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_localDegree;
static PyObject *__pyx_n_s_localDegreeScore;
static PyObject *__pyx_n_s_localFilterScore;
static PyObject *__pyx_n_s_localSimScore;
static PyObject *__pyx_n_s_logarithmic;
static PyObject *__pyx_n_s_lower;
static PyObject *__pyx_n_s_lowerBound;
static PyObject *__pyx_n_s_lowerParameterBound;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_maxRank;
static PyObject *__pyx_n_s_maxSteps;
static PyObject *__pyx_n_s_meanQuadrangles;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_minDistance;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_ms;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_networkit_sparsification;
static PyObject *__pyx_kp_s_networkit_sparsification_pyx;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_kp_u_none_randomized;
static PyObject *__pyx_n_s_norm;
static PyObject *__pyx_n_s_numberIterations;
static PyObject *__pyx_n_s_numberOfEdges;
static PyObject *__pyx_n_s_numberSystems;
static PyObject *__pyx_n_s_object;
static PyObject *__pyx_n_s_offset;
static PyObject *__pyx_n_s_omega;
static PyObject *__pyx_n_s_originalScores;
static PyObject *__pyx_n_s_par;
static PyObject *__pyx_n_s_paramAlgorithm;
static PyObject *__pyx_n_s_parameter;
static PyObject *__pyx_kp_u_parameterization_method_not_yet;
static PyObject *__pyx_n_s_parameterize;
static PyObject *__pyx_n_s_partition;
static PyObject *__pyx_n_s_pf;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_preprocess;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_quadranglePrefixJaccard;
static PyObject *__pyx_n_s_quadrangles;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reScore;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_refine;
static PyObject *__pyx_n_s_result;
static PyObject *__pyx_n_s_reverse;
static PyObject *__pyx_n_s_rneScore;
static PyObject *__pyx_n_s_run;
static PyObject *__pyx_n_s_scanScore;
static PyObject *__pyx_n_s_score;
static PyObject *__pyx_kp_u_score_must_be_either_a_vector_of;
static PyObject *__pyx_n_s_scorer;
static PyObject *__pyx_n_s_scores;
static PyObject *__pyx_n_s_selection;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_kp_s_self__this_cannot_be_converted_t;
static PyObject *__pyx_n_s_setitem;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_simmelianOverlap;
static PyObject *__pyx_n_s_sizeIncreasesWithParameter;
static PyObject *__pyx_n_s_sorted;
static PyObject *__pyx_n_s_sparsified;
static PyObject *__pyx_n_s_sparsifier;
static PyObject *__pyx_n_s_squared;
static PyObject *__pyx_n_s_targetBurntRatio;
static PyObject *__pyx_n_s_tebr;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_together;
static PyObject *__pyx_n_s_triangleScore;
static PyObject *__pyx_n_s_triangles;
static PyObject *__pyx_n_s_turbo;
static PyObject *__pyx_n_s_u;
static PyObject *__pyx_n_s_upper;
static PyObject *__pyx_n_s_upperBound;
static PyObject *__pyx_n_s_upperEdgeIdBound;
static PyObject *__pyx_n_s_upperParameterBound;
static PyObject *__pyx_n_s_v;
static PyObject *__pyx_n_s_w;
static PyObject *__pyx_n_s_withEdgeScores;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_n_s_zip;
static int __pyx_pf_9networkit_14sparsification_9EdgeScore___init__(struct __pyx_obj_9networkit_14sparsification_EdgeScore *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_namedargs); /* proto */
static void __pyx_pf_9networkit_14sparsification_9EdgeScore_2__dealloc__(struct __pyx_obj_9networkit_14sparsification_EdgeScore *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_9EdgeScore_4score(struct __pyx_obj_9networkit_14sparsification_EdgeScore *__pyx_v_self, PyObject *__pyx_v_u, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_9EdgeScore_6scores(struct __pyx_obj_9networkit_14sparsification_EdgeScore *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_9EdgeScore_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_EdgeScore *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_9EdgeScore_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_EdgeScore *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_14sparsification_31ChibaNishizekiTriangleEdgeScore___cinit__(struct __pyx_obj_9networkit_14sparsification_ChibaNishizekiTriangleEdgeScore *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_31ChibaNishizekiTriangleEdgeScore_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_ChibaNishizekiTriangleEdgeScore *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_31ChibaNishizekiTriangleEdgeScore_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_ChibaNishizekiTriangleEdgeScore *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_14sparsification_33ChibaNishizekiQuadrangleEdgeScore___cinit__(struct __pyx_obj_9networkit_14sparsification_ChibaNishizekiQuadrangleEdgeScore *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_33ChibaNishizekiQuadrangleEdgeScore_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_ChibaNishizekiQuadrangleEdgeScore *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_33ChibaNishizekiQuadrangleEdgeScore_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_ChibaNishizekiQuadrangleEdgeScore *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_14sparsification_17TriangleEdgeScore___cinit__(struct __pyx_obj_9networkit_14sparsification_TriangleEdgeScore *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_17TriangleEdgeScore_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_TriangleEdgeScore *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_17TriangleEdgeScore_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_TriangleEdgeScore *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_14sparsification_19EdgeScoreLinearizer___cinit__(struct __pyx_obj_9networkit_14sparsification_EdgeScoreLinearizer *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, std::vector<double>  __pyx_v_score, PyObject *__pyx_v_inverse); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_19EdgeScoreLinearizer_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_EdgeScoreLinearizer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_19EdgeScoreLinearizer_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_EdgeScoreLinearizer *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_14sparsification_19EdgeScoreNormalizer___cinit__(struct __pyx_obj_9networkit_14sparsification_EdgeScoreNormalizer *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_score, bool __pyx_v_inverse, double __pyx_v_lower, double __pyx_v_upper); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_19EdgeScoreNormalizer_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_EdgeScoreNormalizer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_19EdgeScoreNormalizer_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_EdgeScoreNormalizer *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_14sparsification_16EdgeScoreBlender___cinit__(struct __pyx_obj_9networkit_14sparsification_EdgeScoreBlender *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, std::vector<double>  __pyx_v_attribute0, std::vector<double>  __pyx_v_attribute1, std::vector<bool>  __pyx_v_selection); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_16EdgeScoreBlender_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_EdgeScoreBlender *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_16EdgeScoreBlender_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_EdgeScoreBlender *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_14sparsification_18GeometricMeanScore___cinit__(struct __pyx_obj_9networkit_14sparsification_GeometricMeanScore *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, std::vector<double>  __pyx_v_attribute); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_18GeometricMeanScore_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_GeometricMeanScore *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_18GeometricMeanScore_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_GeometricMeanScore *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_14sparsification_17EdgeScoreAsWeight___cinit__(struct __pyx_obj_9networkit_14sparsification_EdgeScoreAsWeight *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, std::vector<double>  __pyx_v_score, bool __pyx_v_squared, __pyx_t_9networkit_14sparsification_edgeweight __pyx_v_offset, __pyx_t_9networkit_14sparsification_edgeweight __pyx_v_factor); /* proto */
static void __pyx_pf_9networkit_14sparsification_17EdgeScoreAsWeight_2__dealloc__(struct __pyx_obj_9networkit_14sparsification_EdgeScoreAsWeight *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_17EdgeScoreAsWeight_4getWeightedGraph(struct __pyx_obj_9networkit_14sparsification_EdgeScoreAsWeight *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_17EdgeScoreAsWeight_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_EdgeScoreAsWeight *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_17EdgeScoreAsWeight_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_EdgeScoreAsWeight *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_14sparsification_21SimmelianOverlapScore___cinit__(struct __pyx_obj_9networkit_14sparsification_SimmelianOverlapScore *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, std::vector<__pyx_t_9networkit_14sparsification_count>  __pyx_v_triangles, __pyx_t_9networkit_14sparsification_count __pyx_v_maxRank); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_21SimmelianOverlapScore_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_SimmelianOverlapScore *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_21SimmelianOverlapScore_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_SimmelianOverlapScore *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_14sparsification_18PrefixJaccardScore___cinit__(struct __pyx_obj_9networkit_14sparsification_PrefixJaccardScore *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, std::vector<double>  __pyx_v_attribute); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_18PrefixJaccardScore_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_PrefixJaccardScore *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_18PrefixJaccardScore_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_PrefixJaccardScore *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_14sparsification_15MultiscaleScore___cinit__(struct __pyx_obj_9networkit_14sparsification_MultiscaleScore *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, std::vector<double>  __pyx_v_attribute); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_15MultiscaleScore_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_MultiscaleScore *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_15MultiscaleScore_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_MultiscaleScore *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_14sparsification_15RandomEdgeScore___cinit__(struct __pyx_obj_9networkit_14sparsification_RandomEdgeScore *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_15RandomEdgeScore_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_RandomEdgeScore *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_15RandomEdgeScore_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_RandomEdgeScore *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_14sparsification_20LocalSimilarityScore___cinit__(struct __pyx_obj_9networkit_14sparsification_LocalSimilarityScore *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, std::vector<__pyx_t_9networkit_14sparsification_count>  __pyx_v_triangles); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_20LocalSimilarityScore_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_LocalSimilarityScore *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_20LocalSimilarityScore_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_LocalSimilarityScore *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_14sparsification_15ForestFireScore___cinit__(struct __pyx_obj_9networkit_14sparsification_ForestFireScore *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, double __pyx_v_pf, double __pyx_v_tebr); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_15ForestFireScore_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_ForestFireScore *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_15ForestFireScore_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_ForestFireScore *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_14sparsification_16LocalDegreeScore___cinit__(struct __pyx_obj_9networkit_14sparsification_LocalDegreeScore *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_16LocalDegreeScore_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_LocalDegreeScore *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_16LocalDegreeScore_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_LocalDegreeScore *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_14sparsification_19RandomNodeEdgeScore___cinit__(struct __pyx_obj_9networkit_14sparsification_RandomNodeEdgeScore *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_19RandomNodeEdgeScore_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_RandomNodeEdgeScore *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_19RandomNodeEdgeScore_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_RandomNodeEdgeScore *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_14sparsification_16LocalFilterScore___cinit__(struct __pyx_obj_9networkit_14sparsification_LocalFilterScore *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, std::vector<double>  __pyx_v_a, bool __pyx_v_logarithmic); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_16LocalFilterScore_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_LocalFilterScore *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_16LocalFilterScore_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_LocalFilterScore *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_14sparsification_28ChanceCorrectedTriangleScore___cinit__(struct __pyx_obj_9networkit_14sparsification_ChanceCorrectedTriangleScore *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, std::vector<__pyx_t_9networkit_14sparsification_count>  __pyx_v_triangles); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_28ChanceCorrectedTriangleScore_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_ChanceCorrectedTriangleScore *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_28ChanceCorrectedTriangleScore_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_ChanceCorrectedTriangleScore *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_14sparsification_29SCANStructuralSimilarityScore___cinit__(struct __pyx_obj_9networkit_14sparsification_SCANStructuralSimilarityScore *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, std::vector<__pyx_t_9networkit_14sparsification_count>  __pyx_v_triangles); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_29SCANStructuralSimilarityScore_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_SCANStructuralSimilarityScore *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_29SCANStructuralSimilarityScore_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_SCANStructuralSimilarityScore *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_14sparsification_21GlobalThresholdFilter___cinit__(struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, std::vector<double>  __pyx_v_attribute, double __pyx_v_e, bool __pyx_v_above); /* proto */
static void __pyx_pf_9networkit_14sparsification_21GlobalThresholdFilter_2__dealloc__(struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_21GlobalThresholdFilter_4calculate(struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_21GlobalThresholdFilter_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_21GlobalThresholdFilter_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_10Sparsifier_scores(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_G); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_10Sparsifier_2_getSparsifiedGraph(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_G, CYTHON_UNUSED PyObject *__pyx_v_parameter, CYTHON_UNUSED PyObject *__pyx_v_attribute); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_10Sparsifier_4_getParameterizationAlgorithm(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_10Sparsifier_6getSparsifiedGraph(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_G, PyObject *__pyx_v_parameter, PyObject *__pyx_v_attribute); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_10Sparsifier_8getSparsifiedGraphOfSize(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_G, PyObject *__pyx_v_edgeRatio, PyObject *__pyx_v_attribute); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_10Sparsifier_10getParameter(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_G, PyObject *__pyx_v_edgeRatio, PyObject *__pyx_v_attribute); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_22SimpleParameterization_parameterize(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_algorithm, CYTHON_UNUSED PyObject *__pyx_v_G, CYTHON_UNUSED PyObject *__pyx_v_attribute, PyObject *__pyx_v_edgeRatio); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_28BinarySearchParameterization___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_sizeIncreasesWithParameter, PyObject *__pyx_v_lowerParameterBound, PyObject *__pyx_v_upperParameterBound, PyObject *__pyx_v_maxSteps); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_28BinarySearchParameterization_2parameterize(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_algorithm, PyObject *__pyx_v_G, PyObject *__pyx_v_attribute, PyObject *__pyx_v_edgeRatio); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_30CompleteSearchParameterization___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_lowerParameterBound, PyObject *__pyx_v_upperParameterBound); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_30CompleteSearchParameterization_2parameterize(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_algorithm, PyObject *__pyx_v_G, PyObject *__pyx_v_attribute, PyObject *__pyx_v_edgeRatio); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_getRankAttribute(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_attribute, PyObject *__pyx_v_reverse); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_29SimmelianSparsifierParametric___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_maxRank); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_29SimmelianSparsifierParametric_2scores(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_G); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_29SimmelianSparsifierParametric_4_getSparsifiedGraph(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G, PyObject *__pyx_v_parameter, PyObject *__pyx_v_attribute); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_29SimmelianSparsifierParametric_6_getParameterizationAlgorithm(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_32SimmelianSparsifierNonParametric_scores(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_32SimmelianSparsifierNonParametric_2_getSparsifiedGraph(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G, PyObject *__pyx_v_parameter, PyObject *__pyx_v_attribute); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_32SimmelianSparsifierNonParametric_4_getParameterizationAlgorithm(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_32QuadrilateralSimmelianSparsifier_scores(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_32QuadrilateralSimmelianSparsifier_2_getSparsifiedGraph(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G, PyObject *__pyx_v_parameter, PyObject *__pyx_v_attribute); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_32QuadrilateralSimmelianSparsifier_4_getParameterizationAlgorithm(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_29SimmelianMultiscaleSparsifier_scores(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_29SimmelianMultiscaleSparsifier_2_getSparsifiedGraph(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G, PyObject *__pyx_v_parameter, PyObject *__pyx_v_attribute); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_29SimmelianMultiscaleSparsifier_4_getParameterizationAlgorithm(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_26DegreeMultiscaleSparsifier___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_degsToAttrValue); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_26DegreeMultiscaleSparsifier_2scores(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_G); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_26DegreeMultiscaleSparsifier_4_getSparsifiedGraph(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G, PyObject *__pyx_v_parameter, PyObject *__pyx_v_attribute); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_26DegreeMultiscaleSparsifier_6_getParameterizationAlgorithm(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_27JaccardSimilaritySparsifier_scores(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_27JaccardSimilaritySparsifier_2_getSparsifiedGraph(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G, PyObject *__pyx_v_parameter, PyObject *__pyx_v_attribute); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_27JaccardSimilaritySparsifier_4_getParameterizationAlgorithm(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_25LocalSimilaritySparsifier_scores(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_25LocalSimilaritySparsifier_2_getSparsifiedGraph(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G, PyObject *__pyx_v_parameter, PyObject *__pyx_v_attribute); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_25LocalSimilaritySparsifier_4_getParameterizationAlgorithm(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_20MultiscaleSparsifier_scores(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_20MultiscaleSparsifier_2_getSparsifiedGraph(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G, PyObject *__pyx_v_parameter, PyObject *__pyx_v_attribute); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_20MultiscaleSparsifier_4_getParameterizationAlgorithm(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_20RandomEdgeSparsifier_scores(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_20RandomEdgeSparsifier_2_getSparsifiedGraph(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G, PyObject *__pyx_v_parameter, PyObject *__pyx_v_attribute); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_20RandomEdgeSparsifier_4_getParameterizationAlgorithm(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_24RandomNodeEdgeSparsifier___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_above); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_24RandomNodeEdgeSparsifier_2scores(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_24RandomNodeEdgeSparsifier_4_getSparsifiedGraph(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_G, PyObject *__pyx_v_parameter, PyObject *__pyx_v_attribute); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_24RandomNodeEdgeSparsifier_6_getParameterizationAlgorithm(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_20ForestFireSparsifier___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_burnProbability, PyObject *__pyx_v_targetBurntRatio); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_20ForestFireSparsifier_2scores(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_G); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_20ForestFireSparsifier_4_getSparsifiedGraph(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G, PyObject *__pyx_v_parameter, PyObject *__pyx_v_attribute); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_20ForestFireSparsifier_6_getParameterizationAlgorithm(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_21LocalDegreeSparsifier_scores(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_21LocalDegreeSparsifier_2_getSparsifiedGraph(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G, PyObject *__pyx_v_parameter, PyObject *__pyx_v_attribute); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_21LocalDegreeSparsifier_4_getParameterizationAlgorithm(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_14SCANSparsifier_scores(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_14SCANSparsifier_2_getSparsifiedGraph(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G, PyObject *__pyx_v_parameter, PyObject *__pyx_v_attribute); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_14SCANSparsifier_4_getParameterizationAlgorithm(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_18TriangleSparsifier_scores(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_18TriangleSparsifier_2_getSparsifiedGraph(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G, PyObject *__pyx_v_parameter, PyObject *__pyx_v_attribute); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_18TriangleSparsifier_4_getParameterizationAlgorithm(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_27AlgebraicDistanceSparsifier___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_numberSystems, PyObject *__pyx_v_numberIterations, PyObject *__pyx_v_omega, PyObject *__pyx_v_norm); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_27AlgebraicDistanceSparsifier_2scores(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_G); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_27AlgebraicDistanceSparsifier_4_getSparsifiedGraph(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G, PyObject *__pyx_v_parameter, PyObject *__pyx_v_attribute); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_27AlgebraicDistanceSparsifier_6_getParameterizationAlgorithm(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_15LocalSparsifier___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_sparsifier); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_15LocalSparsifier_2scores(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_G); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_15LocalSparsifier_4_getSparsifiedGraph(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G, PyObject *__pyx_v_parameter, PyObject *__pyx_v_attribute); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_15LocalSparsifier_6_getParameterizationAlgorithm(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_24ModularityPartitionScore_6scores_together(PyObject *__pyx_self, PyObject *__pyx_v_u, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda1(PyObject *__pyx_self, PyObject *__pyx_v_u, PyObject *__pyx_v_v, CYTHON_UNUSED PyObject *__pyx_v_w, PyObject *__pyx_v_eid); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_24ModularityPartitionScore_scores(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_13ConstantScore___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_constValue); /* proto */
static PyObject *__pyx_pf_9networkit_14sparsification_13ConstantScore_2scores(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_G); /* proto */
static PyObject *__pyx_tp_new_9networkit_14sparsification_EdgeScore(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_14sparsification_ChibaNishizekiTriangleEdgeScore(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_14sparsification_ChibaNishizekiQuadrangleEdgeScore(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_14sparsification_TriangleEdgeScore(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_14sparsification_EdgeScoreLinearizer(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_14sparsification_EdgeScoreNormalizer(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_14sparsification_EdgeScoreBlender(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_14sparsification_GeometricMeanScore(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_14sparsification_EdgeScoreAsWeight(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_14sparsification_SimmelianOverlapScore(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_14sparsification_PrefixJaccardScore(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_14sparsification_MultiscaleScore(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_14sparsification_RandomEdgeScore(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_14sparsification_LocalSimilarityScore(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_14sparsification_ForestFireScore(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_14sparsification_LocalDegreeScore(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_14sparsification_RandomNodeEdgeScore(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_14sparsification_LocalFilterScore(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_14sparsification_ChanceCorrectedTriangleScore(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_14sparsification_SCANStructuralSimilarityScore(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_14sparsification_GlobalThresholdFilter(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_14sparsification___pyx_scope_struct__scores(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyList_Type___setitem = {0, &__pyx_n_s_setitem, 0, 0, 0};
static PyObject *__pyx_float_0_0;
static PyObject *__pyx_float_0_5;
static PyObject *__pyx_float_1_0;
static PyObject *__pyx_float_2_0;
static PyObject *__pyx_float_1eneg_7;
static PyObject *__pyx_float_100_0;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_10;
static PyObject *__pyx_int_20;
static PyObject *__pyx_int_30;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_tuple__74;
static PyObject *__pyx_tuple__76;
static PyObject *__pyx_tuple__78;
static PyObject *__pyx_tuple__80;
static PyObject *__pyx_tuple__82;
static PyObject *__pyx_tuple__84;
static PyObject *__pyx_tuple__86;
static PyObject *__pyx_tuple__88;
static PyObject *__pyx_tuple__90;
static PyObject *__pyx_tuple__92;
static PyObject *__pyx_tuple__94;
static PyObject *__pyx_tuple__96;
static PyObject *__pyx_tuple__98;
static PyObject *__pyx_tuple__100;
static PyObject *__pyx_tuple__102;
static PyObject *__pyx_tuple__104;
static PyObject *__pyx_tuple__106;
static PyObject *__pyx_tuple__108;
static PyObject *__pyx_tuple__110;
static PyObject *__pyx_tuple__112;
static PyObject *__pyx_tuple__114;
static PyObject *__pyx_tuple__116;
static PyObject *__pyx_tuple__118;
static PyObject *__pyx_tuple__120;
static PyObject *__pyx_tuple__122;
static PyObject *__pyx_tuple__124;
static PyObject *__pyx_tuple__126;
static PyObject *__pyx_tuple__128;
static PyObject *__pyx_tuple__130;
static PyObject *__pyx_tuple__132;
static PyObject *__pyx_tuple__134;
static PyObject *__pyx_tuple__136;
static PyObject *__pyx_tuple__138;
static PyObject *__pyx_tuple__140;
static PyObject *__pyx_tuple__141;
static PyObject *__pyx_tuple__143;
static PyObject *__pyx_tuple__145;
static PyObject *__pyx_tuple__147;
static PyObject *__pyx_tuple__149;
static PyObject *__pyx_tuple__151;
static PyObject *__pyx_tuple__153;
static PyObject *__pyx_tuple__155;
static PyObject *__pyx_tuple__157;
static PyObject *__pyx_tuple__159;
static PyObject *__pyx_tuple__161;
static PyObject *__pyx_tuple__163;
static PyObject *__pyx_tuple__165;
static PyObject *__pyx_tuple__167;
static PyObject *__pyx_tuple__169;
static PyObject *__pyx_tuple__171;
static PyObject *__pyx_tuple__173;
static PyObject *__pyx_tuple__175;
static PyObject *__pyx_tuple__176;
static PyObject *__pyx_tuple__178;
static PyObject *__pyx_tuple__180;
static PyObject *__pyx_tuple__182;
static PyObject *__pyx_tuple__184;
static PyObject *__pyx_tuple__186;
static PyObject *__pyx_tuple__188;
static PyObject *__pyx_tuple__191;
static PyObject *__pyx_tuple__193;
static PyObject *__pyx_tuple__195;
static PyObject *__pyx_tuple__196;
static PyObject *__pyx_codeobj__50;
static PyObject *__pyx_codeobj__54;
static PyObject *__pyx_codeobj__56;
static PyObject *__pyx_codeobj__58;
static PyObject *__pyx_codeobj__60;
static PyObject *__pyx_codeobj__63;
static PyObject *__pyx_codeobj__66;
static PyObject *__pyx_codeobj__69;
static PyObject *__pyx_codeobj__71;
static PyObject *__pyx_codeobj__73;
static PyObject *__pyx_codeobj__75;
static PyObject *__pyx_codeobj__77;
static PyObject *__pyx_codeobj__79;
static PyObject *__pyx_codeobj__81;
static PyObject *__pyx_codeobj__83;
static PyObject *__pyx_codeobj__85;
static PyObject *__pyx_codeobj__87;
static PyObject *__pyx_codeobj__89;
static PyObject *__pyx_codeobj__91;
static PyObject *__pyx_codeobj__93;
static PyObject *__pyx_codeobj__95;
static PyObject *__pyx_codeobj__97;
static PyObject *__pyx_codeobj__99;
static PyObject *__pyx_codeobj__101;
static PyObject *__pyx_codeobj__103;
static PyObject *__pyx_codeobj__105;
static PyObject *__pyx_codeobj__107;
static PyObject *__pyx_codeobj__109;
static PyObject *__pyx_codeobj__111;
static PyObject *__pyx_codeobj__113;
static PyObject *__pyx_codeobj__115;
static PyObject *__pyx_codeobj__117;
static PyObject *__pyx_codeobj__119;
static PyObject *__pyx_codeobj__121;
static PyObject *__pyx_codeobj__123;
static PyObject *__pyx_codeobj__125;
static PyObject *__pyx_codeobj__127;
static PyObject *__pyx_codeobj__129;
static PyObject *__pyx_codeobj__131;
static PyObject *__pyx_codeobj__133;
static PyObject *__pyx_codeobj__135;
static PyObject *__pyx_codeobj__137;
static PyObject *__pyx_codeobj__139;
static PyObject *__pyx_codeobj__142;
static PyObject *__pyx_codeobj__144;
static PyObject *__pyx_codeobj__146;
static PyObject *__pyx_codeobj__148;
static PyObject *__pyx_codeobj__150;
static PyObject *__pyx_codeobj__152;
static PyObject *__pyx_codeobj__154;
static PyObject *__pyx_codeobj__156;
static PyObject *__pyx_codeobj__158;
static PyObject *__pyx_codeobj__160;
static PyObject *__pyx_codeobj__162;
static PyObject *__pyx_codeobj__164;
static PyObject *__pyx_codeobj__166;
static PyObject *__pyx_codeobj__168;
static PyObject *__pyx_codeobj__170;
static PyObject *__pyx_codeobj__172;
static PyObject *__pyx_codeobj__174;
static PyObject *__pyx_codeobj__177;
static PyObject *__pyx_codeobj__179;
static PyObject *__pyx_codeobj__181;
static PyObject *__pyx_codeobj__183;
static PyObject *__pyx_codeobj__185;
static PyObject *__pyx_codeobj__187;
static PyObject *__pyx_codeobj__189;
static PyObject *__pyx_codeobj__192;
static PyObject *__pyx_codeobj__194;
static PyObject *__pyx_codeobj__197;
/* Late includes */

/* "networkit/sparsification.pyx":38
 * 	cdef Graph _G
 * 
 * 	cdef bool_t isDoubleValue(self):             # <<<<<<<<<<<<<<
 * 		raise RuntimeError("Implement in subclass")
 * 
 */

static bool __pyx_f_9networkit_14sparsification_9EdgeScore_isDoubleValue(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_EdgeScore *__pyx_v_self) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isDoubleValue", 0);

  /* "networkit/sparsification.pyx":39
 * 
 * 	cdef bool_t isDoubleValue(self):
 * 		raise RuntimeError("Implement in subclass")             # <<<<<<<<<<<<<<
 * 
 * 	def __init__(self, *args, **namedargs):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 39, __pyx_L1_error)

  /* "networkit/sparsification.pyx":38
 * 	cdef Graph _G
 * 
 * 	cdef bool_t isDoubleValue(self):             # <<<<<<<<<<<<<<
 * 		raise RuntimeError("Implement in subclass")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("networkit.sparsification.EdgeScore.isDoubleValue", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":41
 * 		raise RuntimeError("Implement in subclass")
 * 
 * 	def __init__(self, *args, **namedargs):             # <<<<<<<<<<<<<<
 * 		if type(self) == EdgeScore:
 * 			raise RuntimeError("Error, you may not use EdgeScore directly, use a sub-class instead")
 */

/* Python wrapper */
static int __pyx_pw_9networkit_14sparsification_9EdgeScore_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_14sparsification_9EdgeScore_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_namedargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_9networkit_14sparsification_9EdgeScore___init__(((struct __pyx_obj_9networkit_14sparsification_EdgeScore *)__pyx_v_self), __pyx_v_args, __pyx_v_namedargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_namedargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_14sparsification_9EdgeScore___init__(struct __pyx_obj_9networkit_14sparsification_EdgeScore *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_namedargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "networkit/sparsification.pyx":42
 * 
 * 	def __init__(self, *args, **namedargs):
 * 		if type(self) == EdgeScore:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, you may not use EdgeScore directly, use a sub-class instead")
 * 
 */
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))), ((PyObject *)__pyx_ptype_9networkit_14sparsification_EdgeScore), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 42, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_2)) {

    /* "networkit/sparsification.pyx":43
 * 	def __init__(self, *args, **namedargs):
 * 		if type(self) == EdgeScore:
 * 			raise RuntimeError("Error, you may not use EdgeScore directly, use a sub-class instead")             # <<<<<<<<<<<<<<
 * 
 * 	def __dealloc__(self):
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 43, __pyx_L1_error)

    /* "networkit/sparsification.pyx":42
 * 
 * 	def __init__(self, *args, **namedargs):
 * 		if type(self) == EdgeScore:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, you may not use EdgeScore directly, use a sub-class instead")
 * 
 */
  }

  /* "networkit/sparsification.pyx":41
 * 		raise RuntimeError("Implement in subclass")
 * 
 * 	def __init__(self, *args, **namedargs):             # <<<<<<<<<<<<<<
 * 		if type(self) == EdgeScore:
 * 			raise RuntimeError("Error, you may not use EdgeScore directly, use a sub-class instead")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.sparsification.EdgeScore.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":45
 * 			raise RuntimeError("Error, you may not use EdgeScore directly, use a sub-class instead")
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		self._G = None # just to be sure the graph is deleted
 * 
 */

/* Python wrapper */
static void __pyx_pw_9networkit_14sparsification_9EdgeScore_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_9networkit_14sparsification_9EdgeScore_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_9networkit_14sparsification_9EdgeScore_2__dealloc__(((struct __pyx_obj_9networkit_14sparsification_EdgeScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_9networkit_14sparsification_9EdgeScore_2__dealloc__(struct __pyx_obj_9networkit_14sparsification_EdgeScore *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "networkit/sparsification.pyx":46
 * 
 * 	def __dealloc__(self):
 * 		self._G = None # just to be sure the graph is deleted             # <<<<<<<<<<<<<<
 * 
 * 	def score(self, u, v = None):
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_G));
  __pyx_v_self->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None);

  /* "networkit/sparsification.pyx":45
 * 			raise RuntimeError("Error, you may not use EdgeScore directly, use a sub-class instead")
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		self._G = None # just to be sure the graph is deleted
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "networkit/sparsification.pyx":48
 * 		self._G = None # just to be sure the graph is deleted
 * 
 * 	def score(self, u, v = None):             # <<<<<<<<<<<<<<
 * 		if v is None:
 * 			if self.isDoubleValue():
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_9EdgeScore_5score(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9networkit_14sparsification_9EdgeScore_5score(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_u = 0;
  PyObject *__pyx_v_v = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("score (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_u,&__pyx_n_s_v,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_u)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_v);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "score") < 0)) __PYX_ERR(0, 48, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_u = values[0];
    __pyx_v_v = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("score", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 48, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.EdgeScore.score", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_9EdgeScore_4score(((struct __pyx_obj_9networkit_14sparsification_EdgeScore *)__pyx_v_self), __pyx_v_u, __pyx_v_v);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_9EdgeScore_4score(struct __pyx_obj_9networkit_14sparsification_EdgeScore *__pyx_v_self, PyObject *__pyx_v_u, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __pyx_t_9networkit_14sparsification_edgeid __pyx_t_3;
  double __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __pyx_t_9networkit_14sparsification_count __pyx_t_6;
  __pyx_t_9networkit_14sparsification_node __pyx_t_7;
  __pyx_t_9networkit_14sparsification_node __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("score", 0);

  /* "networkit/sparsification.pyx":49
 * 
 * 	def score(self, u, v = None):
 * 		if v is None:             # <<<<<<<<<<<<<<
 * 			if self.isDoubleValue():
 * 				return (<_EdgeScore[double]*>(self._this)).score(u)
 */
  __pyx_t_1 = (__pyx_v_v == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "networkit/sparsification.pyx":50
 * 	def score(self, u, v = None):
 * 		if v is None:
 * 			if self.isDoubleValue():             # <<<<<<<<<<<<<<
 * 				return (<_EdgeScore[double]*>(self._this)).score(u)
 * 			else:
 */
    __pyx_t_2 = (((struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScore *)__pyx_v_self->__pyx_vtab)->isDoubleValue(__pyx_v_self) != 0);
    if (__pyx_t_2) {

      /* "networkit/sparsification.pyx":51
 * 		if v is None:
 * 			if self.isDoubleValue():
 * 				return (<_EdgeScore[double]*>(self._this)).score(u)             # <<<<<<<<<<<<<<
 * 			else:
 * 				return (<_EdgeScore[count]*>(self._this)).score(u)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_v_u); if (unlikely((__pyx_t_3 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 51, __pyx_L1_error)
      try {
        __pyx_t_4 = ((NetworKit::EdgeScore<double>  *)__pyx_v_self->__pyx_base._this)->score(__pyx_t_3);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 51, __pyx_L1_error)
      }
      __pyx_t_5 = PyFloat_FromDouble(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 51, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_r = __pyx_t_5;
      __pyx_t_5 = 0;
      goto __pyx_L0;

      /* "networkit/sparsification.pyx":50
 * 	def score(self, u, v = None):
 * 		if v is None:
 * 			if self.isDoubleValue():             # <<<<<<<<<<<<<<
 * 				return (<_EdgeScore[double]*>(self._this)).score(u)
 * 			else:
 */
    }

    /* "networkit/sparsification.pyx":53
 * 				return (<_EdgeScore[double]*>(self._this)).score(u)
 * 			else:
 * 				return (<_EdgeScore[count]*>(self._this)).score(u)             # <<<<<<<<<<<<<<
 * 		else:
 * 			if self.isDoubleValue():
 */
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_v_u); if (unlikely((__pyx_t_3 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 53, __pyx_L1_error)
      try {
        __pyx_t_6 = ((NetworKit::EdgeScore<__pyx_t_9networkit_14sparsification_count>  *)__pyx_v_self->__pyx_base._this)->score(__pyx_t_3);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 53, __pyx_L1_error)
      }
      __pyx_t_5 = __Pyx_PyInt_From_uint64_t(__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 53, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_r = __pyx_t_5;
      __pyx_t_5 = 0;
      goto __pyx_L0;
    }

    /* "networkit/sparsification.pyx":49
 * 
 * 	def score(self, u, v = None):
 * 		if v is None:             # <<<<<<<<<<<<<<
 * 			if self.isDoubleValue():
 * 				return (<_EdgeScore[double]*>(self._this)).score(u)
 */
  }

  /* "networkit/sparsification.pyx":55
 * 				return (<_EdgeScore[count]*>(self._this)).score(u)
 * 		else:
 * 			if self.isDoubleValue():             # <<<<<<<<<<<<<<
 * 				return (<_EdgeScore[double]*>(self._this)).score(u, v)
 * 			else:
 */
  /*else*/ {
    __pyx_t_2 = (((struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScore *)__pyx_v_self->__pyx_vtab)->isDoubleValue(__pyx_v_self) != 0);
    if (__pyx_t_2) {

      /* "networkit/sparsification.pyx":56
 * 		else:
 * 			if self.isDoubleValue():
 * 				return (<_EdgeScore[double]*>(self._this)).score(u, v)             # <<<<<<<<<<<<<<
 * 			else:
 * 				return (<_EdgeScore[count]*>(self._this)).score(u, v)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_7 = __Pyx_PyInt_As_uint64_t(__pyx_v_u); if (unlikely((__pyx_t_7 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 56, __pyx_L1_error)
      __pyx_t_8 = __Pyx_PyInt_As_uint64_t(__pyx_v_v); if (unlikely((__pyx_t_8 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 56, __pyx_L1_error)
      try {
        __pyx_t_4 = ((NetworKit::EdgeScore<double>  *)__pyx_v_self->__pyx_base._this)->score(__pyx_t_7, __pyx_t_8);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 56, __pyx_L1_error)
      }
      __pyx_t_5 = PyFloat_FromDouble(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 56, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_r = __pyx_t_5;
      __pyx_t_5 = 0;
      goto __pyx_L0;

      /* "networkit/sparsification.pyx":55
 * 				return (<_EdgeScore[count]*>(self._this)).score(u)
 * 		else:
 * 			if self.isDoubleValue():             # <<<<<<<<<<<<<<
 * 				return (<_EdgeScore[double]*>(self._this)).score(u, v)
 * 			else:
 */
    }

    /* "networkit/sparsification.pyx":58
 * 				return (<_EdgeScore[double]*>(self._this)).score(u, v)
 * 			else:
 * 				return (<_EdgeScore[count]*>(self._this)).score(u, v)             # <<<<<<<<<<<<<<
 * 
 * 	def scores(self):
 */
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_8 = __Pyx_PyInt_As_uint64_t(__pyx_v_u); if (unlikely((__pyx_t_8 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 58, __pyx_L1_error)
      __pyx_t_7 = __Pyx_PyInt_As_uint64_t(__pyx_v_v); if (unlikely((__pyx_t_7 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 58, __pyx_L1_error)
      try {
        __pyx_t_6 = ((NetworKit::EdgeScore<__pyx_t_9networkit_14sparsification_count>  *)__pyx_v_self->__pyx_base._this)->score(__pyx_t_8, __pyx_t_7);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 58, __pyx_L1_error)
      }
      __pyx_t_5 = __Pyx_PyInt_From_uint64_t(__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 58, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_r = __pyx_t_5;
      __pyx_t_5 = 0;
      goto __pyx_L0;
    }
  }

  /* "networkit/sparsification.pyx":48
 * 		self._G = None # just to be sure the graph is deleted
 * 
 * 	def score(self, u, v = None):             # <<<<<<<<<<<<<<
 * 		if v is None:
 * 			if self.isDoubleValue():
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("networkit.sparsification.EdgeScore.score", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":60
 * 				return (<_EdgeScore[count]*>(self._this)).score(u, v)
 * 
 * 	def scores(self):             # <<<<<<<<<<<<<<
 * 		if self.isDoubleValue():
 * 			return (<_EdgeScore[double]*>(self._this)).scores()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_9EdgeScore_7scores(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_14sparsification_9EdgeScore_7scores(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scores (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_9EdgeScore_6scores(((struct __pyx_obj_9networkit_14sparsification_EdgeScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_9EdgeScore_6scores(struct __pyx_obj_9networkit_14sparsification_EdgeScore *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  std::vector<double>  __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::vector<__pyx_t_9networkit_14sparsification_count>  __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("scores", 0);

  /* "networkit/sparsification.pyx":61
 * 
 * 	def scores(self):
 * 		if self.isDoubleValue():             # <<<<<<<<<<<<<<
 * 			return (<_EdgeScore[double]*>(self._this)).scores()
 * 		else:
 */
  __pyx_t_1 = (((struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScore *)__pyx_v_self->__pyx_vtab)->isDoubleValue(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "networkit/sparsification.pyx":62
 * 	def scores(self):
 * 		if self.isDoubleValue():
 * 			return (<_EdgeScore[double]*>(self._this)).scores()             # <<<<<<<<<<<<<<
 * 		else:
 * 			return (<_EdgeScore[count]*>(self._this)).scores()
 */
    __Pyx_XDECREF(__pyx_r);
    try {
      __pyx_t_2 = ((NetworKit::EdgeScore<double>  *)__pyx_v_self->__pyx_base._this)->scores();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 62, __pyx_L1_error)
    }
    __pyx_t_3 = __pyx_convert_vector_to_py_double(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 62, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "networkit/sparsification.pyx":61
 * 
 * 	def scores(self):
 * 		if self.isDoubleValue():             # <<<<<<<<<<<<<<
 * 			return (<_EdgeScore[double]*>(self._this)).scores()
 * 		else:
 */
  }

  /* "networkit/sparsification.pyx":64
 * 			return (<_EdgeScore[double]*>(self._this)).scores()
 * 		else:
 * 			return (<_EdgeScore[count]*>(self._this)).scores()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    try {
      __pyx_t_4 = ((NetworKit::EdgeScore<__pyx_t_9networkit_14sparsification_count>  *)__pyx_v_self->__pyx_base._this)->scores();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 64, __pyx_L1_error)
    }
    __pyx_t_3 = __pyx_convert_vector_to_py___pyx_t_9networkit_14sparsification_count(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 64, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "networkit/sparsification.pyx":60
 * 				return (<_EdgeScore[count]*>(self._this)).score(u, v)
 * 
 * 	def scores(self):             # <<<<<<<<<<<<<<
 * 		if self.isDoubleValue():
 * 			return (<_EdgeScore[double]*>(self._this)).scores()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.sparsification.EdgeScore.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_9EdgeScore_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_14sparsification_9EdgeScore_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_9EdgeScore_8__reduce_cython__(((struct __pyx_obj_9networkit_14sparsification_EdgeScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_9EdgeScore_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_EdgeScore *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.sparsification.EdgeScore.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_9EdgeScore_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_14sparsification_9EdgeScore_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_9EdgeScore_10__setstate_cython__(((struct __pyx_obj_9networkit_14sparsification_EdgeScore *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_9EdgeScore_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_EdgeScore *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.sparsification.EdgeScore.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":82
 * 	"""
 * 
 * 	def __cinit__(self, Graph G):             # <<<<<<<<<<<<<<
 * 		"""
 * 		G : networkit.Graph
 */

/* Python wrapper */
static int __pyx_pw_9networkit_14sparsification_31ChibaNishizekiTriangleEdgeScore_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_14sparsification_31ChibaNishizekiTriangleEdgeScore_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 82, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 82, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.ChibaNishizekiTriangleEdgeScore.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 82, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_14sparsification_31ChibaNishizekiTriangleEdgeScore___cinit__(((struct __pyx_obj_9networkit_14sparsification_ChibaNishizekiTriangleEdgeScore *)__pyx_v_self), __pyx_v_G);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_14sparsification_31ChibaNishizekiTriangleEdgeScore___cinit__(struct __pyx_obj_9networkit_14sparsification_ChibaNishizekiTriangleEdgeScore *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::ChibaNishizekiTriangleEdgeScore *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/sparsification.pyx":87
 * 			The graph to count triangles on.
 * 		"""
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _ChibaNishizekiTriangleEdgeScore(G._this)
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base._G));
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/sparsification.pyx":88
 * 		"""
 * 		self._G = G
 * 		self._this = new _ChibaNishizekiTriangleEdgeScore(G._this)             # <<<<<<<<<<<<<<
 * 
 * 	cdef bool_t isDoubleValue(self):
 */
  try {
    __pyx_t_1 = new NetworKit::ChibaNishizekiTriangleEdgeScore(__pyx_v_G->_this);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 88, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/sparsification.pyx":82
 * 	"""
 * 
 * 	def __cinit__(self, Graph G):             # <<<<<<<<<<<<<<
 * 		"""
 * 		G : networkit.Graph
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.sparsification.ChibaNishizekiTriangleEdgeScore.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":90
 * 		self._this = new _ChibaNishizekiTriangleEdgeScore(G._this)
 * 
 * 	cdef bool_t isDoubleValue(self):             # <<<<<<<<<<<<<<
 * 		return False
 * 
 */

static bool __pyx_f_9networkit_14sparsification_31ChibaNishizekiTriangleEdgeScore_isDoubleValue(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_ChibaNishizekiTriangleEdgeScore *__pyx_v_self) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isDoubleValue", 0);

  /* "networkit/sparsification.pyx":91
 * 
 * 	cdef bool_t isDoubleValue(self):
 * 		return False             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/edgescores/ChibaNishizekiQuadrangleEdgeScore.hpp>":
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":90
 * 		self._this = new _ChibaNishizekiTriangleEdgeScore(G._this)
 * 
 * 	cdef bool_t isDoubleValue(self):             # <<<<<<<<<<<<<<
 * 		return False
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_31ChibaNishizekiTriangleEdgeScore_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_14sparsification_31ChibaNishizekiTriangleEdgeScore_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_31ChibaNishizekiTriangleEdgeScore_2__reduce_cython__(((struct __pyx_obj_9networkit_14sparsification_ChibaNishizekiTriangleEdgeScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_31ChibaNishizekiTriangleEdgeScore_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_ChibaNishizekiTriangleEdgeScore *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.sparsification.ChibaNishizekiTriangleEdgeScore.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_31ChibaNishizekiTriangleEdgeScore_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_14sparsification_31ChibaNishizekiTriangleEdgeScore_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_31ChibaNishizekiTriangleEdgeScore_4__setstate_cython__(((struct __pyx_obj_9networkit_14sparsification_ChibaNishizekiTriangleEdgeScore *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_31ChibaNishizekiTriangleEdgeScore_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_ChibaNishizekiTriangleEdgeScore *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.sparsification.ChibaNishizekiTriangleEdgeScore.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":108
 * 	"""
 * 
 * 	def __cinit__(self, Graph G):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Parameters:
 */

/* Python wrapper */
static int __pyx_pw_9networkit_14sparsification_33ChibaNishizekiQuadrangleEdgeScore_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_14sparsification_33ChibaNishizekiQuadrangleEdgeScore_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 108, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 108, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.ChibaNishizekiQuadrangleEdgeScore.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 108, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_14sparsification_33ChibaNishizekiQuadrangleEdgeScore___cinit__(((struct __pyx_obj_9networkit_14sparsification_ChibaNishizekiQuadrangleEdgeScore *)__pyx_v_self), __pyx_v_G);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_14sparsification_33ChibaNishizekiQuadrangleEdgeScore___cinit__(struct __pyx_obj_9networkit_14sparsification_ChibaNishizekiQuadrangleEdgeScore *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::ChibaNishizekiQuadrangleEdgeScore *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/sparsification.pyx":115
 * 			The graph to count quadrangles on.
 * 		"""
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _ChibaNishizekiQuadrangleEdgeScore(G._this)
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base._G));
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/sparsification.pyx":116
 * 		"""
 * 		self._G = G
 * 		self._this = new _ChibaNishizekiQuadrangleEdgeScore(G._this)             # <<<<<<<<<<<<<<
 * 
 * 	cdef bool_t isDoubleValue(self):
 */
  try {
    __pyx_t_1 = new NetworKit::ChibaNishizekiQuadrangleEdgeScore(__pyx_v_G->_this);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 116, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/sparsification.pyx":108
 * 	"""
 * 
 * 	def __cinit__(self, Graph G):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Parameters:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.sparsification.ChibaNishizekiQuadrangleEdgeScore.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":118
 * 		self._this = new _ChibaNishizekiQuadrangleEdgeScore(G._this)
 * 
 * 	cdef bool_t isDoubleValue(self):             # <<<<<<<<<<<<<<
 * 		return False
 * 
 */

static bool __pyx_f_9networkit_14sparsification_33ChibaNishizekiQuadrangleEdgeScore_isDoubleValue(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_ChibaNishizekiQuadrangleEdgeScore *__pyx_v_self) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isDoubleValue", 0);

  /* "networkit/sparsification.pyx":119
 * 
 * 	cdef bool_t isDoubleValue(self):
 * 		return False             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/edgescores/TriangleEdgeScore.hpp>":
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":118
 * 		self._this = new _ChibaNishizekiQuadrangleEdgeScore(G._this)
 * 
 * 	cdef bool_t isDoubleValue(self):             # <<<<<<<<<<<<<<
 * 		return False
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_33ChibaNishizekiQuadrangleEdgeScore_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_14sparsification_33ChibaNishizekiQuadrangleEdgeScore_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_33ChibaNishizekiQuadrangleEdgeScore_2__reduce_cython__(((struct __pyx_obj_9networkit_14sparsification_ChibaNishizekiQuadrangleEdgeScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_33ChibaNishizekiQuadrangleEdgeScore_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_ChibaNishizekiQuadrangleEdgeScore *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.sparsification.ChibaNishizekiQuadrangleEdgeScore.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_33ChibaNishizekiQuadrangleEdgeScore_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_14sparsification_33ChibaNishizekiQuadrangleEdgeScore_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_33ChibaNishizekiQuadrangleEdgeScore_4__setstate_cython__(((struct __pyx_obj_9networkit_14sparsification_ChibaNishizekiQuadrangleEdgeScore *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_33ChibaNishizekiQuadrangleEdgeScore_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_ChibaNishizekiQuadrangleEdgeScore *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.sparsification.ChibaNishizekiQuadrangleEdgeScore.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":136
 * 	"""
 * 
 * 	def __cinit__(self, Graph G):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Parameters:
 */

/* Python wrapper */
static int __pyx_pw_9networkit_14sparsification_17TriangleEdgeScore_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_14sparsification_17TriangleEdgeScore_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 136, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 136, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.TriangleEdgeScore.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 136, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_14sparsification_17TriangleEdgeScore___cinit__(((struct __pyx_obj_9networkit_14sparsification_TriangleEdgeScore *)__pyx_v_self), __pyx_v_G);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_14sparsification_17TriangleEdgeScore___cinit__(struct __pyx_obj_9networkit_14sparsification_TriangleEdgeScore *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::TriangleEdgeScore *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/sparsification.pyx":143
 * 			The graph to count triangles on.
 * 		"""
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _TriangleEdgeScore(G._this)
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base._G));
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/sparsification.pyx":144
 * 		"""
 * 		self._G = G
 * 		self._this = new _TriangleEdgeScore(G._this)             # <<<<<<<<<<<<<<
 * 
 * 	cdef bool_t isDoubleValue(self):
 */
  try {
    __pyx_t_1 = new NetworKit::TriangleEdgeScore(__pyx_v_G->_this);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 144, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/sparsification.pyx":136
 * 	"""
 * 
 * 	def __cinit__(self, Graph G):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Parameters:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.sparsification.TriangleEdgeScore.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":146
 * 		self._this = new _TriangleEdgeScore(G._this)
 * 
 * 	cdef bool_t isDoubleValue(self):             # <<<<<<<<<<<<<<
 * 		return False
 * 
 */

static bool __pyx_f_9networkit_14sparsification_17TriangleEdgeScore_isDoubleValue(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_TriangleEdgeScore *__pyx_v_self) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isDoubleValue", 0);

  /* "networkit/sparsification.pyx":147
 * 
 * 	cdef bool_t isDoubleValue(self):
 * 		return False             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/edgescores/EdgeScoreLinearizer.hpp>":
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":146
 * 		self._this = new _TriangleEdgeScore(G._this)
 * 
 * 	cdef bool_t isDoubleValue(self):             # <<<<<<<<<<<<<<
 * 		return False
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_17TriangleEdgeScore_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_14sparsification_17TriangleEdgeScore_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_17TriangleEdgeScore_2__reduce_cython__(((struct __pyx_obj_9networkit_14sparsification_TriangleEdgeScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_17TriangleEdgeScore_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_TriangleEdgeScore *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.sparsification.TriangleEdgeScore.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_17TriangleEdgeScore_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_14sparsification_17TriangleEdgeScore_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_17TriangleEdgeScore_4__setstate_cython__(((struct __pyx_obj_9networkit_14sparsification_TriangleEdgeScore *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_17TriangleEdgeScore_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_TriangleEdgeScore *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.sparsification.TriangleEdgeScore.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":167
 * 	cdef vector[double] _score
 * 
 * 	def __cinit__(self, Graph G, vector[double] score, inverse = False):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._score = score
 */

/* Python wrapper */
static int __pyx_pw_9networkit_14sparsification_19EdgeScoreLinearizer_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_14sparsification_19EdgeScoreLinearizer_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  std::vector<double>  __pyx_v_score;
  PyObject *__pyx_v_inverse = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_score,&__pyx_n_s_inverse,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_score)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, 1); __PYX_ERR(0, 167, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_inverse);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 167, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_score = __pyx_convert_vector_from_py_double(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 167, __pyx_L3_error)
    __pyx_v_inverse = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 167, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.EdgeScoreLinearizer.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 167, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_14sparsification_19EdgeScoreLinearizer___cinit__(((struct __pyx_obj_9networkit_14sparsification_EdgeScoreLinearizer *)__pyx_v_self), __pyx_v_G, __pyx_v_score, __pyx_v_inverse);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_14sparsification_19EdgeScoreLinearizer___cinit__(struct __pyx_obj_9networkit_14sparsification_EdgeScoreLinearizer *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, std::vector<double>  __pyx_v_score, PyObject *__pyx_v_inverse) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  NetworKit::EdgeScoreLinearizer *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/sparsification.pyx":168
 * 
 * 	def __cinit__(self, Graph G, vector[double] score, inverse = False):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._score = score
 * 		self._this = new _EdgeScoreLinearizer(G._this, self._score, inverse)
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base._G));
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/sparsification.pyx":169
 * 	def __cinit__(self, Graph G, vector[double] score, inverse = False):
 * 		self._G = G
 * 		self._score = score             # <<<<<<<<<<<<<<
 * 		self._this = new _EdgeScoreLinearizer(G._this, self._score, inverse)
 * 
 */
  __pyx_v_self->_score = __pyx_v_score;

  /* "networkit/sparsification.pyx":170
 * 		self._G = G
 * 		self._score = score
 * 		self._this = new _EdgeScoreLinearizer(G._this, self._score, inverse)             # <<<<<<<<<<<<<<
 * 
 * 	cdef bool_t isDoubleValue(self):
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_inverse); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 170, __pyx_L1_error)
  try {
    __pyx_t_2 = new NetworKit::EdgeScoreLinearizer(__pyx_v_G->_this, __pyx_v_self->_score, __pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 170, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_2;

  /* "networkit/sparsification.pyx":167
 * 	cdef vector[double] _score
 * 
 * 	def __cinit__(self, Graph G, vector[double] score, inverse = False):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._score = score
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.sparsification.EdgeScoreLinearizer.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":172
 * 		self._this = new _EdgeScoreLinearizer(G._this, self._score, inverse)
 * 
 * 	cdef bool_t isDoubleValue(self):             # <<<<<<<<<<<<<<
 * 		return True
 * 
 */

static bool __pyx_f_9networkit_14sparsification_19EdgeScoreLinearizer_isDoubleValue(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_EdgeScoreLinearizer *__pyx_v_self) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isDoubleValue", 0);

  /* "networkit/sparsification.pyx":173
 * 
 * 	cdef bool_t isDoubleValue(self):
 * 		return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":172
 * 		self._this = new _EdgeScoreLinearizer(G._this, self._score, inverse)
 * 
 * 	cdef bool_t isDoubleValue(self):             # <<<<<<<<<<<<<<
 * 		return True
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_19EdgeScoreLinearizer_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_14sparsification_19EdgeScoreLinearizer_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_19EdgeScoreLinearizer_2__reduce_cython__(((struct __pyx_obj_9networkit_14sparsification_EdgeScoreLinearizer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_19EdgeScoreLinearizer_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_EdgeScoreLinearizer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.sparsification.EdgeScoreLinearizer.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_19EdgeScoreLinearizer_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_14sparsification_19EdgeScoreLinearizer_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_19EdgeScoreLinearizer_4__setstate_cython__(((struct __pyx_obj_9networkit_14sparsification_EdgeScoreLinearizer *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_19EdgeScoreLinearizer_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_EdgeScoreLinearizer *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.sparsification.EdgeScoreLinearizer.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":201
 * 	cdef vector[count] _inScoreCount
 * 
 * 	def __cinit__(self, Graph G not None, score, bool_t inverse = False, double lower = 0.0, double upper = 1.0):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		try:
 */

/* Python wrapper */
static int __pyx_pw_9networkit_14sparsification_19EdgeScoreNormalizer_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_14sparsification_19EdgeScoreNormalizer_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  PyObject *__pyx_v_score = 0;
  bool __pyx_v_inverse;
  double __pyx_v_lower;
  double __pyx_v_upper;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_score,&__pyx_n_s_inverse,&__pyx_n_s_lower,&__pyx_n_s_upper,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_score)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 5, 1); __PYX_ERR(0, 201, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_inverse);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lower);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_upper);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 201, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_score = values[1];
    if (values[2]) {
      __pyx_v_inverse = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_inverse == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 201, __pyx_L3_error)
    } else {
      __pyx_v_inverse = ((bool)0);
    }
    if (values[3]) {
      __pyx_v_lower = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_lower == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 201, __pyx_L3_error)
    } else {
      __pyx_v_lower = ((double)0.0);
    }
    if (values[4]) {
      __pyx_v_upper = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_upper == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 201, __pyx_L3_error)
    } else {
      __pyx_v_upper = ((double)1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 201, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.EdgeScoreNormalizer.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 0, "G", 0))) __PYX_ERR(0, 201, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_14sparsification_19EdgeScoreNormalizer___cinit__(((struct __pyx_obj_9networkit_14sparsification_EdgeScoreNormalizer *)__pyx_v_self), __pyx_v_G, __pyx_v_score, __pyx_v_inverse, __pyx_v_lower, __pyx_v_upper);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_14sparsification_19EdgeScoreNormalizer___cinit__(struct __pyx_obj_9networkit_14sparsification_EdgeScoreNormalizer *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_score, bool __pyx_v_inverse, double __pyx_v_lower, double __pyx_v_upper) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::vector<double>  __pyx_t_4;
  NetworKit::EdgeScoreNormalizer<double>  *__pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  std::vector<__pyx_t_9networkit_14sparsification_count>  __pyx_t_13;
  NetworKit::EdgeScoreNormalizer<__pyx_t_9networkit_14sparsification_count>  *__pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/sparsification.pyx":202
 * 
 * 	def __cinit__(self, Graph G not None, score, bool_t inverse = False, double lower = 0.0, double upper = 1.0):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		try:
 * 			self._inScoreDouble = <vector[double]?>score
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base._G));
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/sparsification.pyx":203
 * 	def __cinit__(self, Graph G not None, score, bool_t inverse = False, double lower = 0.0, double upper = 1.0):
 * 		self._G = G
 * 		try:             # <<<<<<<<<<<<<<
 * 			self._inScoreDouble = <vector[double]?>score
 * 			self._this = new _EdgeScoreNormalizer[double](G._this, self._inScoreDouble, inverse, lower, upper)
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "networkit/sparsification.pyx":204
 * 		self._G = G
 * 		try:
 * 			self._inScoreDouble = <vector[double]?>score             # <<<<<<<<<<<<<<
 * 			self._this = new _EdgeScoreNormalizer[double](G._this, self._inScoreDouble, inverse, lower, upper)
 * 		except TypeError:
 */
      __pyx_t_4 = __pyx_convert_vector_from_py_double(__pyx_v_score); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 204, __pyx_L3_error)
      __pyx_v_self->_inScoreDouble = ((std::vector<double> )__pyx_t_4);

      /* "networkit/sparsification.pyx":205
 * 		try:
 * 			self._inScoreDouble = <vector[double]?>score
 * 			self._this = new _EdgeScoreNormalizer[double](G._this, self._inScoreDouble, inverse, lower, upper)             # <<<<<<<<<<<<<<
 * 		except TypeError:
 * 			try:
 */
      try {
        __pyx_t_5 = new NetworKit::EdgeScoreNormalizer<double> (__pyx_v_G->_this, __pyx_v_self->_inScoreDouble, __pyx_v_inverse, __pyx_v_lower, __pyx_v_upper);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 205, __pyx_L3_error)
      }
      __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_5;

      /* "networkit/sparsification.pyx":203
 * 	def __cinit__(self, Graph G not None, score, bool_t inverse = False, double lower = 0.0, double upper = 1.0):
 * 		self._G = G
 * 		try:             # <<<<<<<<<<<<<<
 * 			self._inScoreDouble = <vector[double]?>score
 * 			self._this = new _EdgeScoreNormalizer[double](G._this, self._inScoreDouble, inverse, lower, upper)
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "networkit/sparsification.pyx":206
 * 			self._inScoreDouble = <vector[double]?>score
 * 			self._this = new _EdgeScoreNormalizer[double](G._this, self._inScoreDouble, inverse, lower, upper)
 * 		except TypeError:             # <<<<<<<<<<<<<<
 * 			try:
 * 				self._inScoreCount = <vector[count]?>score
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("networkit.sparsification.EdgeScoreNormalizer.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9) < 0) __PYX_ERR(0, 206, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GOTREF(__pyx_t_9);

      /* "networkit/sparsification.pyx":207
 * 			self._this = new _EdgeScoreNormalizer[double](G._this, self._inScoreDouble, inverse, lower, upper)
 * 		except TypeError:
 * 			try:             # <<<<<<<<<<<<<<
 * 				self._inScoreCount = <vector[count]?>score
 * 				self._this = new _EdgeScoreNormalizer[count](G._this, self._inScoreCount, inverse, lower, upper)
 */
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
        __Pyx_XGOTREF(__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_11);
        __Pyx_XGOTREF(__pyx_t_12);
        /*try:*/ {

          /* "networkit/sparsification.pyx":208
 * 		except TypeError:
 * 			try:
 * 				self._inScoreCount = <vector[count]?>score             # <<<<<<<<<<<<<<
 * 				self._this = new _EdgeScoreNormalizer[count](G._this, self._inScoreCount, inverse, lower, upper)
 * 			except TypeError:
 */
          __pyx_t_13 = __pyx_convert_vector_from_py___pyx_t_9networkit_14sparsification_count(__pyx_v_score); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 208, __pyx_L11_error)
          __pyx_v_self->_inScoreCount = ((std::vector<__pyx_t_9networkit_14sparsification_count> )__pyx_t_13);

          /* "networkit/sparsification.pyx":209
 * 			try:
 * 				self._inScoreCount = <vector[count]?>score
 * 				self._this = new _EdgeScoreNormalizer[count](G._this, self._inScoreCount, inverse, lower, upper)             # <<<<<<<<<<<<<<
 * 			except TypeError:
 * 				raise TypeError("score must be either a vector of integer or float")
 */
          try {
            __pyx_t_14 = new NetworKit::EdgeScoreNormalizer<__pyx_t_9networkit_14sparsification_count> (__pyx_v_G->_this, ((std::vector<__pyx_t_9networkit_14sparsification_count>  &)__pyx_v_self->_inScoreCount), __pyx_v_inverse, __pyx_v_lower, __pyx_v_upper);
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(0, 209, __pyx_L11_error)
          }
          __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_14;

          /* "networkit/sparsification.pyx":207
 * 			self._this = new _EdgeScoreNormalizer[double](G._this, self._inScoreDouble, inverse, lower, upper)
 * 		except TypeError:
 * 			try:             # <<<<<<<<<<<<<<
 * 				self._inScoreCount = <vector[count]?>score
 * 				self._this = new _EdgeScoreNormalizer[count](G._this, self._inScoreCount, inverse, lower, upper)
 */
        }
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        goto __pyx_L18_try_end;
        __pyx_L11_error:;

        /* "networkit/sparsification.pyx":210
 * 				self._inScoreCount = <vector[count]?>score
 * 				self._this = new _EdgeScoreNormalizer[count](G._this, self._inScoreCount, inverse, lower, upper)
 * 			except TypeError:             # <<<<<<<<<<<<<<
 * 				raise TypeError("score must be either a vector of integer or float")
 * 
 */
        __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
        if (__pyx_t_6) {
          __Pyx_AddTraceback("networkit.sparsification.EdgeScoreNormalizer.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17) < 0) __PYX_ERR(0, 210, __pyx_L13_except_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_GOTREF(__pyx_t_16);
          __Pyx_GOTREF(__pyx_t_17);

          /* "networkit/sparsification.pyx":211
 * 				self._this = new _EdgeScoreNormalizer[count](G._this, self._inScoreCount, inverse, lower, upper)
 * 			except TypeError:
 * 				raise TypeError("score must be either a vector of integer or float")             # <<<<<<<<<<<<<<
 * 
 * 	cdef bool_t isDoubleValue(self):
 */
          __pyx_t_18 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 211, __pyx_L13_except_error)
          __Pyx_GOTREF(__pyx_t_18);
          __Pyx_Raise(__pyx_t_18, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
          __PYX_ERR(0, 211, __pyx_L13_except_error)
        }
        goto __pyx_L13_except_error;
        __pyx_L13_except_error:;

        /* "networkit/sparsification.pyx":207
 * 			self._this = new _EdgeScoreNormalizer[double](G._this, self._inScoreDouble, inverse, lower, upper)
 * 		except TypeError:
 * 			try:             # <<<<<<<<<<<<<<
 * 				self._inScoreCount = <vector[count]?>score
 * 				self._this = new _EdgeScoreNormalizer[count](G._this, self._inScoreCount, inverse, lower, upper)
 */
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
        goto __pyx_L5_except_error;
        __pyx_L18_try_end:;
      }
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "networkit/sparsification.pyx":203
 * 	def __cinit__(self, Graph G not None, score, bool_t inverse = False, double lower = 0.0, double upper = 1.0):
 * 		self._G = G
 * 		try:             # <<<<<<<<<<<<<<
 * 			self._inScoreDouble = <vector[double]?>score
 * 			self._this = new _EdgeScoreNormalizer[double](G._this, self._inScoreDouble, inverse, lower, upper)
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L8_try_end:;
  }

  /* "networkit/sparsification.pyx":201
 * 	cdef vector[count] _inScoreCount
 * 
 * 	def __cinit__(self, Graph G not None, score, bool_t inverse = False, double lower = 0.0, double upper = 1.0):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		try:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_AddTraceback("networkit.sparsification.EdgeScoreNormalizer.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":213
 * 				raise TypeError("score must be either a vector of integer or float")
 * 
 * 	cdef bool_t isDoubleValue(self):             # <<<<<<<<<<<<<<
 * 		return True
 * 
 */

static bool __pyx_f_9networkit_14sparsification_19EdgeScoreNormalizer_isDoubleValue(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_EdgeScoreNormalizer *__pyx_v_self) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isDoubleValue", 0);

  /* "networkit/sparsification.pyx":214
 * 
 * 	cdef bool_t isDoubleValue(self):
 * 		return True             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/edgescores/EdgeScoreBlender.hpp>":
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":213
 * 				raise TypeError("score must be either a vector of integer or float")
 * 
 * 	cdef bool_t isDoubleValue(self):             # <<<<<<<<<<<<<<
 * 		return True
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_19EdgeScoreNormalizer_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_14sparsification_19EdgeScoreNormalizer_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_19EdgeScoreNormalizer_2__reduce_cython__(((struct __pyx_obj_9networkit_14sparsification_EdgeScoreNormalizer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_19EdgeScoreNormalizer_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_EdgeScoreNormalizer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.sparsification.EdgeScoreNormalizer.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_19EdgeScoreNormalizer_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_14sparsification_19EdgeScoreNormalizer_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_19EdgeScoreNormalizer_4__setstate_cython__(((struct __pyx_obj_9networkit_14sparsification_EdgeScoreNormalizer *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_19EdgeScoreNormalizer_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_EdgeScoreNormalizer *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.sparsification.EdgeScoreNormalizer.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":240
 * 	cdef vector[bool_t] _selection
 * 
 * 	def __cinit__(self, Graph G not None, vector[double] attribute0, vector[double] attribute1, vector[bool_t] selection):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._attribute0 = move(attribute0)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_14sparsification_16EdgeScoreBlender_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_14sparsification_16EdgeScoreBlender_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  std::vector<double>  __pyx_v_attribute0;
  std::vector<double>  __pyx_v_attribute1;
  std::vector<bool>  __pyx_v_selection;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_attribute0,&__pyx_n_s_attribute1,&__pyx_n_s_selection,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attribute0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 4, 4, 1); __PYX_ERR(0, 240, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attribute1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 4, 4, 2); __PYX_ERR(0, 240, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_selection)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 4, 4, 3); __PYX_ERR(0, 240, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 240, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_attribute0 = __pyx_convert_vector_from_py_double(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 240, __pyx_L3_error)
    __pyx_v_attribute1 = __pyx_convert_vector_from_py_double(values[2]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 240, __pyx_L3_error)
    __pyx_v_selection = __pyx_convert_vector_from_py_bool(values[3]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 240, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 240, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.EdgeScoreBlender.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 0, "G", 0))) __PYX_ERR(0, 240, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_14sparsification_16EdgeScoreBlender___cinit__(((struct __pyx_obj_9networkit_14sparsification_EdgeScoreBlender *)__pyx_v_self), __pyx_v_G, __pyx_v_attribute0, __pyx_v_attribute1, __pyx_v_selection);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_14sparsification_16EdgeScoreBlender___cinit__(struct __pyx_obj_9networkit_14sparsification_EdgeScoreBlender *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, std::vector<double>  __pyx_v_attribute0, std::vector<double>  __pyx_v_attribute1, std::vector<bool>  __pyx_v_selection) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::EdgeScoreBlender *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/sparsification.pyx":241
 * 
 * 	def __cinit__(self, Graph G not None, vector[double] attribute0, vector[double] attribute1, vector[bool_t] selection):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._attribute0 = move(attribute0)
 * 		self._attribute1 = move(attribute1)
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base._G));
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/sparsification.pyx":242
 * 	def __cinit__(self, Graph G not None, vector[double] attribute0, vector[double] attribute1, vector[bool_t] selection):
 * 		self._G = G
 * 		self._attribute0 = move(attribute0)             # <<<<<<<<<<<<<<
 * 		self._attribute1 = move(attribute1)
 * 		self._selection = move(selection)
 */
  __pyx_v_self->_attribute0 = std::move(__pyx_v_attribute0);

  /* "networkit/sparsification.pyx":243
 * 		self._G = G
 * 		self._attribute0 = move(attribute0)
 * 		self._attribute1 = move(attribute1)             # <<<<<<<<<<<<<<
 * 		self._selection = move(selection)
 * 
 */
  __pyx_v_self->_attribute1 = std::move(__pyx_v_attribute1);

  /* "networkit/sparsification.pyx":244
 * 		self._attribute0 = move(attribute0)
 * 		self._attribute1 = move(attribute1)
 * 		self._selection = move(selection)             # <<<<<<<<<<<<<<
 * 
 * 		self._this = new _EdgeScoreBlender(G._this, self._attribute0, self._attribute1, self._selection)
 */
  __pyx_v_self->_selection = std::move(__pyx_v_selection);

  /* "networkit/sparsification.pyx":246
 * 		self._selection = move(selection)
 * 
 * 		self._this = new _EdgeScoreBlender(G._this, self._attribute0, self._attribute1, self._selection)             # <<<<<<<<<<<<<<
 * 
 * 	cdef bool_t isDoubleValue(self):
 */
  try {
    __pyx_t_1 = new NetworKit::EdgeScoreBlender(__pyx_v_G->_this, __pyx_v_self->_attribute0, __pyx_v_self->_attribute1, __pyx_v_self->_selection);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 246, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/sparsification.pyx":240
 * 	cdef vector[bool_t] _selection
 * 
 * 	def __cinit__(self, Graph G not None, vector[double] attribute0, vector[double] attribute1, vector[bool_t] selection):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._attribute0 = move(attribute0)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.sparsification.EdgeScoreBlender.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":248
 * 		self._this = new _EdgeScoreBlender(G._this, self._attribute0, self._attribute1, self._selection)
 * 
 * 	cdef bool_t isDoubleValue(self):             # <<<<<<<<<<<<<<
 * 		return True
 * 
 */

static bool __pyx_f_9networkit_14sparsification_16EdgeScoreBlender_isDoubleValue(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_EdgeScoreBlender *__pyx_v_self) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isDoubleValue", 0);

  /* "networkit/sparsification.pyx":249
 * 
 * 	cdef bool_t isDoubleValue(self):
 * 		return True             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/edgescores/GeometricMeanScore.hpp>":
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":248
 * 		self._this = new _EdgeScoreBlender(G._this, self._attribute0, self._attribute1, self._selection)
 * 
 * 	cdef bool_t isDoubleValue(self):             # <<<<<<<<<<<<<<
 * 		return True
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_16EdgeScoreBlender_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_14sparsification_16EdgeScoreBlender_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_16EdgeScoreBlender_2__reduce_cython__(((struct __pyx_obj_9networkit_14sparsification_EdgeScoreBlender *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_16EdgeScoreBlender_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_EdgeScoreBlender *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.sparsification.EdgeScoreBlender.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_16EdgeScoreBlender_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_14sparsification_16EdgeScoreBlender_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_16EdgeScoreBlender_4__setstate_cython__(((struct __pyx_obj_9networkit_14sparsification_EdgeScoreBlender *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_16EdgeScoreBlender_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_EdgeScoreBlender *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.sparsification.EdgeScoreBlender.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":269
 * 	cdef vector[double] _attribute
 * 
 * 	def __cinit__(self, Graph G, vector[double] attribute):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._attribute = attribute
 */

/* Python wrapper */
static int __pyx_pw_9networkit_14sparsification_18GeometricMeanScore_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_14sparsification_18GeometricMeanScore_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  std::vector<double>  __pyx_v_attribute;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_attribute,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attribute)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(0, 269, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 269, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_attribute = __pyx_convert_vector_from_py_double(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 269, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 269, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.GeometricMeanScore.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 269, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_14sparsification_18GeometricMeanScore___cinit__(((struct __pyx_obj_9networkit_14sparsification_GeometricMeanScore *)__pyx_v_self), __pyx_v_G, __pyx_v_attribute);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_14sparsification_18GeometricMeanScore___cinit__(struct __pyx_obj_9networkit_14sparsification_GeometricMeanScore *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, std::vector<double>  __pyx_v_attribute) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::GeometricMeanScore *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/sparsification.pyx":270
 * 
 * 	def __cinit__(self, Graph G, vector[double] attribute):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._attribute = attribute
 * 		self._this = new _GeometricMeanScore(G._this, self._attribute)
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base._G));
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/sparsification.pyx":271
 * 	def __cinit__(self, Graph G, vector[double] attribute):
 * 		self._G = G
 * 		self._attribute = attribute             # <<<<<<<<<<<<<<
 * 		self._this = new _GeometricMeanScore(G._this, self._attribute)
 * 
 */
  __pyx_v_self->_attribute = __pyx_v_attribute;

  /* "networkit/sparsification.pyx":272
 * 		self._G = G
 * 		self._attribute = attribute
 * 		self._this = new _GeometricMeanScore(G._this, self._attribute)             # <<<<<<<<<<<<<<
 * 
 * 	cdef bool_t isDoubleValue(self):
 */
  try {
    __pyx_t_1 = new NetworKit::GeometricMeanScore(__pyx_v_G->_this, __pyx_v_self->_attribute);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 272, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/sparsification.pyx":269
 * 	cdef vector[double] _attribute
 * 
 * 	def __cinit__(self, Graph G, vector[double] attribute):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._attribute = attribute
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.sparsification.GeometricMeanScore.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":274
 * 		self._this = new _GeometricMeanScore(G._this, self._attribute)
 * 
 * 	cdef bool_t isDoubleValue(self):             # <<<<<<<<<<<<<<
 * 		return True
 * 
 */

static bool __pyx_f_9networkit_14sparsification_18GeometricMeanScore_isDoubleValue(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_GeometricMeanScore *__pyx_v_self) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isDoubleValue", 0);

  /* "networkit/sparsification.pyx":275
 * 
 * 	cdef bool_t isDoubleValue(self):
 * 		return True             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/edgescores/EdgeScoreAsWeight.hpp>":
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":274
 * 		self._this = new _GeometricMeanScore(G._this, self._attribute)
 * 
 * 	cdef bool_t isDoubleValue(self):             # <<<<<<<<<<<<<<
 * 		return True
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_18GeometricMeanScore_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_14sparsification_18GeometricMeanScore_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_18GeometricMeanScore_2__reduce_cython__(((struct __pyx_obj_9networkit_14sparsification_GeometricMeanScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_18GeometricMeanScore_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_GeometricMeanScore *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.sparsification.GeometricMeanScore.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_18GeometricMeanScore_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_14sparsification_18GeometricMeanScore_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_18GeometricMeanScore_4__setstate_cython__(((struct __pyx_obj_9networkit_14sparsification_GeometricMeanScore *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_18GeometricMeanScore_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_GeometricMeanScore *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.sparsification.GeometricMeanScore.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":305
 * 	cdef vector[double] _score
 * 
 * 	def __cinit__(self, Graph G, vector[double] score, bool_t squared, edgeweight offset, edgeweight factor):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._score = score
 */

/* Python wrapper */
static int __pyx_pw_9networkit_14sparsification_17EdgeScoreAsWeight_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_14sparsification_17EdgeScoreAsWeight_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  std::vector<double>  __pyx_v_score;
  bool __pyx_v_squared;
  __pyx_t_9networkit_14sparsification_edgeweight __pyx_v_offset;
  __pyx_t_9networkit_14sparsification_edgeweight __pyx_v_factor;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_score,&__pyx_n_s_squared,&__pyx_n_s_offset,&__pyx_n_s_factor,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_score)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 5, 5, 1); __PYX_ERR(0, 305, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_squared)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 5, 5, 2); __PYX_ERR(0, 305, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_offset)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 5, 5, 3); __PYX_ERR(0, 305, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_factor)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 5, 5, 4); __PYX_ERR(0, 305, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 305, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_score = __pyx_convert_vector_from_py_double(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 305, __pyx_L3_error)
    __pyx_v_squared = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_squared == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 305, __pyx_L3_error)
    __pyx_v_offset = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_offset == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 305, __pyx_L3_error)
    __pyx_v_factor = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_factor == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 305, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 305, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.EdgeScoreAsWeight.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 305, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_14sparsification_17EdgeScoreAsWeight___cinit__(((struct __pyx_obj_9networkit_14sparsification_EdgeScoreAsWeight *)__pyx_v_self), __pyx_v_G, __pyx_v_score, __pyx_v_squared, __pyx_v_offset, __pyx_v_factor);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_14sparsification_17EdgeScoreAsWeight___cinit__(struct __pyx_obj_9networkit_14sparsification_EdgeScoreAsWeight *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, std::vector<double>  __pyx_v_score, bool __pyx_v_squared, __pyx_t_9networkit_14sparsification_edgeweight __pyx_v_offset, __pyx_t_9networkit_14sparsification_edgeweight __pyx_v_factor) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::EdgeScoreAsWeight *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/sparsification.pyx":306
 * 
 * 	def __cinit__(self, Graph G, vector[double] score, bool_t squared, edgeweight offset, edgeweight factor):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._score = score
 * 		self._this = new _EdgeScoreAsWeight(G._this, self._score, squared, offset, factor)
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->_G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_G));
  __pyx_v_self->_G = __pyx_v_G;

  /* "networkit/sparsification.pyx":307
 * 	def __cinit__(self, Graph G, vector[double] score, bool_t squared, edgeweight offset, edgeweight factor):
 * 		self._G = G
 * 		self._score = score             # <<<<<<<<<<<<<<
 * 		self._this = new _EdgeScoreAsWeight(G._this, self._score, squared, offset, factor)
 * 
 */
  __pyx_v_self->_score = __pyx_v_score;

  /* "networkit/sparsification.pyx":308
 * 		self._G = G
 * 		self._score = score
 * 		self._this = new _EdgeScoreAsWeight(G._this, self._score, squared, offset, factor)             # <<<<<<<<<<<<<<
 * 
 * 	def __dealloc__(self):
 */
  try {
    __pyx_t_1 = new NetworKit::EdgeScoreAsWeight(__pyx_v_G->_this, __pyx_v_self->_score, __pyx_v_squared, __pyx_v_offset, __pyx_v_factor);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 308, __pyx_L1_error)
  }
  __pyx_v_self->_this = __pyx_t_1;

  /* "networkit/sparsification.pyx":305
 * 	cdef vector[double] _score
 * 
 * 	def __cinit__(self, Graph G, vector[double] score, bool_t squared, edgeweight offset, edgeweight factor):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._score = score
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.sparsification.EdgeScoreAsWeight.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":310
 * 		self._this = new _EdgeScoreAsWeight(G._this, self._score, squared, offset, factor)
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		if self._this is not NULL:
 * 			del self._this
 */

/* Python wrapper */
static void __pyx_pw_9networkit_14sparsification_17EdgeScoreAsWeight_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_9networkit_14sparsification_17EdgeScoreAsWeight_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_9networkit_14sparsification_17EdgeScoreAsWeight_2__dealloc__(((struct __pyx_obj_9networkit_14sparsification_EdgeScoreAsWeight *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_9networkit_14sparsification_17EdgeScoreAsWeight_2__dealloc__(struct __pyx_obj_9networkit_14sparsification_EdgeScoreAsWeight *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "networkit/sparsification.pyx":311
 * 
 * 	def __dealloc__(self):
 * 		if self._this is not NULL:             # <<<<<<<<<<<<<<
 * 			del self._this
 * 			self._this = NULL
 */
  __pyx_t_1 = ((__pyx_v_self->_this != NULL) != 0);
  if (__pyx_t_1) {

    /* "networkit/sparsification.pyx":312
 * 	def __dealloc__(self):
 * 		if self._this is not NULL:
 * 			del self._this             # <<<<<<<<<<<<<<
 * 			self._this = NULL
 * 
 */
    delete __pyx_v_self->_this;

    /* "networkit/sparsification.pyx":313
 * 		if self._this is not NULL:
 * 			del self._this
 * 			self._this = NULL             # <<<<<<<<<<<<<<
 * 
 * 	def getWeightedGraph(self):
 */
    __pyx_v_self->_this = NULL;

    /* "networkit/sparsification.pyx":311
 * 
 * 	def __dealloc__(self):
 * 		if self._this is not NULL:             # <<<<<<<<<<<<<<
 * 			del self._this
 * 			self._this = NULL
 */
  }

  /* "networkit/sparsification.pyx":310
 * 		self._this = new _EdgeScoreAsWeight(G._this, self._score, squared, offset, factor)
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		if self._this is not NULL:
 * 			del self._this
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "networkit/sparsification.pyx":315
 * 			self._this = NULL
 * 
 * 	def getWeightedGraph(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns:
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_17EdgeScoreAsWeight_5getWeightedGraph(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9networkit_14sparsification_17EdgeScoreAsWeight_4getWeightedGraph[] = "\n\t\tReturns:\n\t\t--------\n\t\tnetworkit.Graph\n\t\t\tThe weighted result graph.\n\t\t";
static PyObject *__pyx_pw_9networkit_14sparsification_17EdgeScoreAsWeight_5getWeightedGraph(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getWeightedGraph (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_17EdgeScoreAsWeight_4getWeightedGraph(((struct __pyx_obj_9networkit_14sparsification_EdgeScoreAsWeight *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_17EdgeScoreAsWeight_4getWeightedGraph(struct __pyx_obj_9networkit_14sparsification_EdgeScoreAsWeight *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  NetworKit::Graph __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getWeightedGraph", 0);

  /* "networkit/sparsification.pyx":322
 * 			The weighted result graph.
 * 		"""
 * 		return Graph(0).setThis(self._this.calculate())             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/sparsification/SimmelianOverlapScore.hpp>":
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9networkit_5graph_Graph), __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  try {
    __pyx_t_2 = __pyx_v_self->_this->calculate();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 322, __pyx_L1_error)
  }
  __pyx_t_3 = ((struct __pyx_vtabstruct_9networkit_5graph_Graph *)((struct __pyx_obj_9networkit_5graph_Graph *)__pyx_t_1)->__pyx_vtab)->setThis(((struct __pyx_obj_9networkit_5graph_Graph *)__pyx_t_1), __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":315
 * 			self._this = NULL
 * 
 * 	def getWeightedGraph(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.sparsification.EdgeScoreAsWeight.getWeightedGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_17EdgeScoreAsWeight_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_14sparsification_17EdgeScoreAsWeight_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_17EdgeScoreAsWeight_6__reduce_cython__(((struct __pyx_obj_9networkit_14sparsification_EdgeScoreAsWeight *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_17EdgeScoreAsWeight_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_EdgeScoreAsWeight *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.sparsification.EdgeScoreAsWeight.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_17EdgeScoreAsWeight_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_14sparsification_17EdgeScoreAsWeight_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_17EdgeScoreAsWeight_8__setstate_cython__(((struct __pyx_obj_9networkit_14sparsification_EdgeScoreAsWeight *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_17EdgeScoreAsWeight_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_EdgeScoreAsWeight *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.sparsification.EdgeScoreAsWeight.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":346
 * 		maximum rank that is considered for overlap calculation.
 * 	"""
 * 	def __cinit__(self, Graph G, vector[count] triangles, count maxRank):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._triangles = triangles
 */

/* Python wrapper */
static int __pyx_pw_9networkit_14sparsification_21SimmelianOverlapScore_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_14sparsification_21SimmelianOverlapScore_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  std::vector<__pyx_t_9networkit_14sparsification_count>  __pyx_v_triangles;
  __pyx_t_9networkit_14sparsification_count __pyx_v_maxRank;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_triangles,&__pyx_n_s_maxRank,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_triangles)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 1); __PYX_ERR(0, 346, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_maxRank)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 2); __PYX_ERR(0, 346, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 346, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_triangles = __pyx_convert_vector_from_py___pyx_t_9networkit_14sparsification_count(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 346, __pyx_L3_error)
    __pyx_v_maxRank = __Pyx_PyInt_As_uint64_t(values[2]); if (unlikely((__pyx_v_maxRank == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 346, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 346, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.SimmelianOverlapScore.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 346, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_14sparsification_21SimmelianOverlapScore___cinit__(((struct __pyx_obj_9networkit_14sparsification_SimmelianOverlapScore *)__pyx_v_self), __pyx_v_G, __pyx_v_triangles, __pyx_v_maxRank);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_14sparsification_21SimmelianOverlapScore___cinit__(struct __pyx_obj_9networkit_14sparsification_SimmelianOverlapScore *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, std::vector<__pyx_t_9networkit_14sparsification_count>  __pyx_v_triangles, __pyx_t_9networkit_14sparsification_count __pyx_v_maxRank) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::SimmelianOverlapScore *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/sparsification.pyx":347
 * 	"""
 * 	def __cinit__(self, Graph G, vector[count] triangles, count maxRank):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._triangles = triangles
 * 		self._this = new _SimmelianOverlapScore(G._this, self._triangles, maxRank)
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base._G));
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/sparsification.pyx":348
 * 	def __cinit__(self, Graph G, vector[count] triangles, count maxRank):
 * 		self._G = G
 * 		self._triangles = triangles             # <<<<<<<<<<<<<<
 * 		self._this = new _SimmelianOverlapScore(G._this, self._triangles, maxRank)
 * 
 */
  __pyx_v_self->_triangles = __pyx_v_triangles;

  /* "networkit/sparsification.pyx":349
 * 		self._G = G
 * 		self._triangles = triangles
 * 		self._this = new _SimmelianOverlapScore(G._this, self._triangles, maxRank)             # <<<<<<<<<<<<<<
 * 
 * 	cdef bool_t isDoubleValue(self):
 */
  try {
    __pyx_t_1 = new NetworKit::SimmelianOverlapScore(__pyx_v_G->_this, __pyx_v_self->_triangles, __pyx_v_maxRank);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 349, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/sparsification.pyx":346
 * 		maximum rank that is considered for overlap calculation.
 * 	"""
 * 	def __cinit__(self, Graph G, vector[count] triangles, count maxRank):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._triangles = triangles
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.sparsification.SimmelianOverlapScore.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":351
 * 		self._this = new _SimmelianOverlapScore(G._this, self._triangles, maxRank)
 * 
 * 	cdef bool_t isDoubleValue(self):             # <<<<<<<<<<<<<<
 * 		return True
 * 
 */

static bool __pyx_f_9networkit_14sparsification_21SimmelianOverlapScore_isDoubleValue(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_SimmelianOverlapScore *__pyx_v_self) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isDoubleValue", 0);

  /* "networkit/sparsification.pyx":352
 * 
 * 	cdef bool_t isDoubleValue(self):
 * 		return True             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/edgescores/PrefixJaccardScore.hpp>":
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":351
 * 		self._this = new _SimmelianOverlapScore(G._this, self._triangles, maxRank)
 * 
 * 	cdef bool_t isDoubleValue(self):             # <<<<<<<<<<<<<<
 * 		return True
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_21SimmelianOverlapScore_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_14sparsification_21SimmelianOverlapScore_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_21SimmelianOverlapScore_2__reduce_cython__(((struct __pyx_obj_9networkit_14sparsification_SimmelianOverlapScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_21SimmelianOverlapScore_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_SimmelianOverlapScore *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.sparsification.SimmelianOverlapScore.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_21SimmelianOverlapScore_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_14sparsification_21SimmelianOverlapScore_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_21SimmelianOverlapScore_4__setstate_cython__(((struct __pyx_obj_9networkit_14sparsification_SimmelianOverlapScore *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_21SimmelianOverlapScore_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_SimmelianOverlapScore *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.sparsification.SimmelianOverlapScore.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":362
 * 	cdef vector[double] _attribute
 * 
 * 	def __cinit__(self, Graph G, vector[double] attribute):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._attribute = attribute
 */

/* Python wrapper */
static int __pyx_pw_9networkit_14sparsification_18PrefixJaccardScore_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_14sparsification_18PrefixJaccardScore_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  std::vector<double>  __pyx_v_attribute;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_attribute,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attribute)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(0, 362, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 362, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_attribute = __pyx_convert_vector_from_py_double(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 362, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 362, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.PrefixJaccardScore.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 362, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_14sparsification_18PrefixJaccardScore___cinit__(((struct __pyx_obj_9networkit_14sparsification_PrefixJaccardScore *)__pyx_v_self), __pyx_v_G, __pyx_v_attribute);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_14sparsification_18PrefixJaccardScore___cinit__(struct __pyx_obj_9networkit_14sparsification_PrefixJaccardScore *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, std::vector<double>  __pyx_v_attribute) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::PrefixJaccardScore<double> *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/sparsification.pyx":363
 * 
 * 	def __cinit__(self, Graph G, vector[double] attribute):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._attribute = attribute
 * 		self._this = new _PrefixJaccardScore(G._this, self._attribute)
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base._G));
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/sparsification.pyx":364
 * 	def __cinit__(self, Graph G, vector[double] attribute):
 * 		self._G = G
 * 		self._attribute = attribute             # <<<<<<<<<<<<<<
 * 		self._this = new _PrefixJaccardScore(G._this, self._attribute)
 * 
 */
  __pyx_v_self->_attribute = __pyx_v_attribute;

  /* "networkit/sparsification.pyx":365
 * 		self._G = G
 * 		self._attribute = attribute
 * 		self._this = new _PrefixJaccardScore(G._this, self._attribute)             # <<<<<<<<<<<<<<
 * 
 * 	cdef bool_t isDoubleValue(self):
 */
  try {
    __pyx_t_1 = new NetworKit::PrefixJaccardScore<double>(__pyx_v_G->_this, __pyx_v_self->_attribute);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 365, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/sparsification.pyx":362
 * 	cdef vector[double] _attribute
 * 
 * 	def __cinit__(self, Graph G, vector[double] attribute):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._attribute = attribute
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.sparsification.PrefixJaccardScore.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":367
 * 		self._this = new _PrefixJaccardScore(G._this, self._attribute)
 * 
 * 	cdef bool_t isDoubleValue(self):             # <<<<<<<<<<<<<<
 * 		return True
 * 
 */

static bool __pyx_f_9networkit_14sparsification_18PrefixJaccardScore_isDoubleValue(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_PrefixJaccardScore *__pyx_v_self) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isDoubleValue", 0);

  /* "networkit/sparsification.pyx":368
 * 
 * 	cdef bool_t isDoubleValue(self):
 * 		return True             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/sparsification/MultiscaleScore.hpp>":
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":367
 * 		self._this = new _PrefixJaccardScore(G._this, self._attribute)
 * 
 * 	cdef bool_t isDoubleValue(self):             # <<<<<<<<<<<<<<
 * 		return True
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_18PrefixJaccardScore_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_14sparsification_18PrefixJaccardScore_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_18PrefixJaccardScore_2__reduce_cython__(((struct __pyx_obj_9networkit_14sparsification_PrefixJaccardScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_18PrefixJaccardScore_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_PrefixJaccardScore *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.sparsification.PrefixJaccardScore.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_18PrefixJaccardScore_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_14sparsification_18PrefixJaccardScore_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_18PrefixJaccardScore_4__setstate_cython__(((struct __pyx_obj_9networkit_14sparsification_PrefixJaccardScore *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_18PrefixJaccardScore_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_PrefixJaccardScore *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.sparsification.PrefixJaccardScore.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":390
 * 	cdef vector[double] _attribute
 * 
 * 	def __cinit__(self, Graph G, vector[double] attribute):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._attribute = attribute
 */

/* Python wrapper */
static int __pyx_pw_9networkit_14sparsification_15MultiscaleScore_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_14sparsification_15MultiscaleScore_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  std::vector<double>  __pyx_v_attribute;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_attribute,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attribute)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(0, 390, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 390, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_attribute = __pyx_convert_vector_from_py_double(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 390, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 390, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.MultiscaleScore.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 390, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_14sparsification_15MultiscaleScore___cinit__(((struct __pyx_obj_9networkit_14sparsification_MultiscaleScore *)__pyx_v_self), __pyx_v_G, __pyx_v_attribute);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_14sparsification_15MultiscaleScore___cinit__(struct __pyx_obj_9networkit_14sparsification_MultiscaleScore *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, std::vector<double>  __pyx_v_attribute) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::MultiscaleScore *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/sparsification.pyx":391
 * 
 * 	def __cinit__(self, Graph G, vector[double] attribute):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._attribute = attribute
 * 		self._this = new _MultiscaleScore(G._this, self._attribute)
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base._G));
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/sparsification.pyx":392
 * 	def __cinit__(self, Graph G, vector[double] attribute):
 * 		self._G = G
 * 		self._attribute = attribute             # <<<<<<<<<<<<<<
 * 		self._this = new _MultiscaleScore(G._this, self._attribute)
 * 
 */
  __pyx_v_self->_attribute = __pyx_v_attribute;

  /* "networkit/sparsification.pyx":393
 * 		self._G = G
 * 		self._attribute = attribute
 * 		self._this = new _MultiscaleScore(G._this, self._attribute)             # <<<<<<<<<<<<<<
 * 
 * 	cdef bool_t isDoubleValue(self):
 */
  try {
    __pyx_t_1 = new NetworKit::MultiscaleScore(__pyx_v_G->_this, __pyx_v_self->_attribute);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 393, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/sparsification.pyx":390
 * 	cdef vector[double] _attribute
 * 
 * 	def __cinit__(self, Graph G, vector[double] attribute):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._attribute = attribute
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.sparsification.MultiscaleScore.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":395
 * 		self._this = new _MultiscaleScore(G._this, self._attribute)
 * 
 * 	cdef bool_t isDoubleValue(self):             # <<<<<<<<<<<<<<
 * 		return True
 * 
 */

static bool __pyx_f_9networkit_14sparsification_15MultiscaleScore_isDoubleValue(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_MultiscaleScore *__pyx_v_self) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isDoubleValue", 0);

  /* "networkit/sparsification.pyx":396
 * 
 * 	cdef bool_t isDoubleValue(self):
 * 		return True             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/sparsification/RandomEdgeScore.hpp>":
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":395
 * 		self._this = new _MultiscaleScore(G._this, self._attribute)
 * 
 * 	cdef bool_t isDoubleValue(self):             # <<<<<<<<<<<<<<
 * 		return True
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_15MultiscaleScore_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_14sparsification_15MultiscaleScore_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_15MultiscaleScore_2__reduce_cython__(((struct __pyx_obj_9networkit_14sparsification_MultiscaleScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_15MultiscaleScore_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_MultiscaleScore *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.sparsification.MultiscaleScore.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_15MultiscaleScore_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_14sparsification_15MultiscaleScore_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_15MultiscaleScore_4__setstate_cython__(((struct __pyx_obj_9networkit_14sparsification_MultiscaleScore *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_15MultiscaleScore_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_MultiscaleScore *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.sparsification.MultiscaleScore.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":413
 * 	"""
 * 
 * 	def __cinit__(self, Graph G):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _RandomEdgeScore(G._this)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_14sparsification_15RandomEdgeScore_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_14sparsification_15RandomEdgeScore_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 413, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 413, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.RandomEdgeScore.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 413, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_14sparsification_15RandomEdgeScore___cinit__(((struct __pyx_obj_9networkit_14sparsification_RandomEdgeScore *)__pyx_v_self), __pyx_v_G);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_14sparsification_15RandomEdgeScore___cinit__(struct __pyx_obj_9networkit_14sparsification_RandomEdgeScore *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::RandomEdgeScore *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/sparsification.pyx":414
 * 
 * 	def __cinit__(self, Graph G):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _RandomEdgeScore(G._this)
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base._G));
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/sparsification.pyx":415
 * 	def __cinit__(self, Graph G):
 * 		self._G = G
 * 		self._this = new _RandomEdgeScore(G._this)             # <<<<<<<<<<<<<<
 * 
 * 	cdef bool_t isDoubleValue(self):
 */
  try {
    __pyx_t_1 = new NetworKit::RandomEdgeScore(__pyx_v_G->_this);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 415, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/sparsification.pyx":413
 * 	"""
 * 
 * 	def __cinit__(self, Graph G):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _RandomEdgeScore(G._this)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.sparsification.RandomEdgeScore.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":417
 * 		self._this = new _RandomEdgeScore(G._this)
 * 
 * 	cdef bool_t isDoubleValue(self):             # <<<<<<<<<<<<<<
 * 		return True
 * 
 */

static bool __pyx_f_9networkit_14sparsification_15RandomEdgeScore_isDoubleValue(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_RandomEdgeScore *__pyx_v_self) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isDoubleValue", 0);

  /* "networkit/sparsification.pyx":418
 * 
 * 	cdef bool_t isDoubleValue(self):
 * 		return True             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/sparsification/LocalSimilarityScore.hpp>":
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":417
 * 		self._this = new _RandomEdgeScore(G._this)
 * 
 * 	cdef bool_t isDoubleValue(self):             # <<<<<<<<<<<<<<
 * 		return True
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_15RandomEdgeScore_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_14sparsification_15RandomEdgeScore_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_15RandomEdgeScore_2__reduce_cython__(((struct __pyx_obj_9networkit_14sparsification_RandomEdgeScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_15RandomEdgeScore_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_RandomEdgeScore *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.sparsification.RandomEdgeScore.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_15RandomEdgeScore_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_14sparsification_15RandomEdgeScore_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_15RandomEdgeScore_4__setstate_cython__(((struct __pyx_obj_9networkit_14sparsification_RandomEdgeScore *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_15RandomEdgeScore_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_RandomEdgeScore *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.sparsification.RandomEdgeScore.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":440
 * 	cdef vector[count] _triangles
 * 
 * 	def __cinit__(self, Graph G, vector[count] triangles):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._triangles = triangles
 */

/* Python wrapper */
static int __pyx_pw_9networkit_14sparsification_20LocalSimilarityScore_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_14sparsification_20LocalSimilarityScore_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  std::vector<__pyx_t_9networkit_14sparsification_count>  __pyx_v_triangles;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_triangles,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_triangles)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(0, 440, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 440, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_triangles = __pyx_convert_vector_from_py___pyx_t_9networkit_14sparsification_count(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 440, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 440, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.LocalSimilarityScore.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 440, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_14sparsification_20LocalSimilarityScore___cinit__(((struct __pyx_obj_9networkit_14sparsification_LocalSimilarityScore *)__pyx_v_self), __pyx_v_G, __pyx_v_triangles);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_14sparsification_20LocalSimilarityScore___cinit__(struct __pyx_obj_9networkit_14sparsification_LocalSimilarityScore *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, std::vector<__pyx_t_9networkit_14sparsification_count>  __pyx_v_triangles) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::LocalSimilarityScore *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/sparsification.pyx":441
 * 
 * 	def __cinit__(self, Graph G, vector[count] triangles):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._triangles = triangles
 * 		self._this = new _LocalSimilarityScore(G._this, self._triangles)
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base._G));
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/sparsification.pyx":442
 * 	def __cinit__(self, Graph G, vector[count] triangles):
 * 		self._G = G
 * 		self._triangles = triangles             # <<<<<<<<<<<<<<
 * 		self._this = new _LocalSimilarityScore(G._this, self._triangles)
 * 
 */
  __pyx_v_self->_triangles = __pyx_v_triangles;

  /* "networkit/sparsification.pyx":443
 * 		self._G = G
 * 		self._triangles = triangles
 * 		self._this = new _LocalSimilarityScore(G._this, self._triangles)             # <<<<<<<<<<<<<<
 * 
 * 	cdef bool_t isDoubleValue(self):
 */
  try {
    __pyx_t_1 = new NetworKit::LocalSimilarityScore(__pyx_v_G->_this, __pyx_v_self->_triangles);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 443, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/sparsification.pyx":440
 * 	cdef vector[count] _triangles
 * 
 * 	def __cinit__(self, Graph G, vector[count] triangles):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._triangles = triangles
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.sparsification.LocalSimilarityScore.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":445
 * 		self._this = new _LocalSimilarityScore(G._this, self._triangles)
 * 
 * 	cdef bool_t isDoubleValue(self):             # <<<<<<<<<<<<<<
 * 		return True
 * 
 */

static bool __pyx_f_9networkit_14sparsification_20LocalSimilarityScore_isDoubleValue(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_LocalSimilarityScore *__pyx_v_self) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isDoubleValue", 0);

  /* "networkit/sparsification.pyx":446
 * 
 * 	cdef bool_t isDoubleValue(self):
 * 		return True             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/sparsification/ForestFireScore.hpp>":
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":445
 * 		self._this = new _LocalSimilarityScore(G._this, self._triangles)
 * 
 * 	cdef bool_t isDoubleValue(self):             # <<<<<<<<<<<<<<
 * 		return True
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_20LocalSimilarityScore_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_14sparsification_20LocalSimilarityScore_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_20LocalSimilarityScore_2__reduce_cython__(((struct __pyx_obj_9networkit_14sparsification_LocalSimilarityScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_20LocalSimilarityScore_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_LocalSimilarityScore *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.sparsification.LocalSimilarityScore.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_20LocalSimilarityScore_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_14sparsification_20LocalSimilarityScore_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_20LocalSimilarityScore_4__setstate_cython__(((struct __pyx_obj_9networkit_14sparsification_LocalSimilarityScore *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_20LocalSimilarityScore_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_LocalSimilarityScore *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.sparsification.LocalSimilarityScore.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":469
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, double pf, double tebr):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _ForestFireScore(G._this, pf, tebr)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_14sparsification_15ForestFireScore_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_14sparsification_15ForestFireScore_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  double __pyx_v_pf;
  double __pyx_v_tebr;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_pf,&__pyx_n_s_tebr,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 1); __PYX_ERR(0, 469, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tebr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 2); __PYX_ERR(0, 469, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 469, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_pf = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_pf == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 469, __pyx_L3_error)
    __pyx_v_tebr = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_tebr == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 469, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 469, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.ForestFireScore.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 469, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_14sparsification_15ForestFireScore___cinit__(((struct __pyx_obj_9networkit_14sparsification_ForestFireScore *)__pyx_v_self), __pyx_v_G, __pyx_v_pf, __pyx_v_tebr);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_14sparsification_15ForestFireScore___cinit__(struct __pyx_obj_9networkit_14sparsification_ForestFireScore *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, double __pyx_v_pf, double __pyx_v_tebr) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::ForestFireScore *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/sparsification.pyx":470
 * 
 * 	def __cinit__(self, Graph G, double pf, double tebr):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _ForestFireScore(G._this, pf, tebr)
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base._G));
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/sparsification.pyx":471
 * 	def __cinit__(self, Graph G, double pf, double tebr):
 * 		self._G = G
 * 		self._this = new _ForestFireScore(G._this, pf, tebr)             # <<<<<<<<<<<<<<
 * 
 * 	cdef bool_t isDoubleValue(self):
 */
  try {
    __pyx_t_1 = new NetworKit::ForestFireScore(__pyx_v_G->_this, __pyx_v_pf, __pyx_v_tebr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 471, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/sparsification.pyx":469
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, double pf, double tebr):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _ForestFireScore(G._this, pf, tebr)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.sparsification.ForestFireScore.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":473
 * 		self._this = new _ForestFireScore(G._this, pf, tebr)
 * 
 * 	cdef bool_t isDoubleValue(self):             # <<<<<<<<<<<<<<
 * 		return True
 * 
 */

static bool __pyx_f_9networkit_14sparsification_15ForestFireScore_isDoubleValue(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_ForestFireScore *__pyx_v_self) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isDoubleValue", 0);

  /* "networkit/sparsification.pyx":474
 * 
 * 	cdef bool_t isDoubleValue(self):
 * 		return True             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/sparsification/LocalDegreeScore.hpp>":
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":473
 * 		self._this = new _ForestFireScore(G._this, pf, tebr)
 * 
 * 	cdef bool_t isDoubleValue(self):             # <<<<<<<<<<<<<<
 * 		return True
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_15ForestFireScore_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_14sparsification_15ForestFireScore_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_15ForestFireScore_2__reduce_cython__(((struct __pyx_obj_9networkit_14sparsification_ForestFireScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_15ForestFireScore_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_ForestFireScore *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.sparsification.ForestFireScore.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_15ForestFireScore_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_14sparsification_15ForestFireScore_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_15ForestFireScore_4__setstate_cython__(((struct __pyx_obj_9networkit_14sparsification_ForestFireScore *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_15ForestFireScore_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_ForestFireScore *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.sparsification.ForestFireScore.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":493
 * 	"""
 * 
 * 	def __cinit__(self, Graph G):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _LocalDegreeScore(G._this)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_14sparsification_16LocalDegreeScore_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_14sparsification_16LocalDegreeScore_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 493, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 493, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.LocalDegreeScore.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 493, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_14sparsification_16LocalDegreeScore___cinit__(((struct __pyx_obj_9networkit_14sparsification_LocalDegreeScore *)__pyx_v_self), __pyx_v_G);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_14sparsification_16LocalDegreeScore___cinit__(struct __pyx_obj_9networkit_14sparsification_LocalDegreeScore *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::LocalDegreeScore *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/sparsification.pyx":494
 * 
 * 	def __cinit__(self, Graph G):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _LocalDegreeScore(G._this)
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base._G));
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/sparsification.pyx":495
 * 	def __cinit__(self, Graph G):
 * 		self._G = G
 * 		self._this = new _LocalDegreeScore(G._this)             # <<<<<<<<<<<<<<
 * 
 * 	cdef bool_t isDoubleValue(self):
 */
  try {
    __pyx_t_1 = new NetworKit::LocalDegreeScore(__pyx_v_G->_this);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 495, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/sparsification.pyx":493
 * 	"""
 * 
 * 	def __cinit__(self, Graph G):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _LocalDegreeScore(G._this)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.sparsification.LocalDegreeScore.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":497
 * 		self._this = new _LocalDegreeScore(G._this)
 * 
 * 	cdef bool_t isDoubleValue(self):             # <<<<<<<<<<<<<<
 * 		return True
 * 
 */

static bool __pyx_f_9networkit_14sparsification_16LocalDegreeScore_isDoubleValue(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_LocalDegreeScore *__pyx_v_self) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isDoubleValue", 0);

  /* "networkit/sparsification.pyx":498
 * 
 * 	cdef bool_t isDoubleValue(self):
 * 		return True             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/sparsification/RandomNodeEdgeScore.hpp>":
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":497
 * 		self._this = new _LocalDegreeScore(G._this)
 * 
 * 	cdef bool_t isDoubleValue(self):             # <<<<<<<<<<<<<<
 * 		return True
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_16LocalDegreeScore_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_14sparsification_16LocalDegreeScore_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_16LocalDegreeScore_2__reduce_cython__(((struct __pyx_obj_9networkit_14sparsification_LocalDegreeScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_16LocalDegreeScore_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_LocalDegreeScore *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.sparsification.LocalDegreeScore.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_16LocalDegreeScore_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_14sparsification_16LocalDegreeScore_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_16LocalDegreeScore_4__setstate_cython__(((struct __pyx_obj_9networkit_14sparsification_LocalDegreeScore *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_16LocalDegreeScore_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_LocalDegreeScore *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.sparsification.LocalDegreeScore.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":515
 * 		The graph to calculate the Random Edge attribute for.
 * 	"""
 * 	def __cinit__(self, Graph G):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _RandomNodeEdgeScore(G._this)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_14sparsification_19RandomNodeEdgeScore_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_14sparsification_19RandomNodeEdgeScore_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 515, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 515, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.RandomNodeEdgeScore.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 515, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_14sparsification_19RandomNodeEdgeScore___cinit__(((struct __pyx_obj_9networkit_14sparsification_RandomNodeEdgeScore *)__pyx_v_self), __pyx_v_G);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_14sparsification_19RandomNodeEdgeScore___cinit__(struct __pyx_obj_9networkit_14sparsification_RandomNodeEdgeScore *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::RandomNodeEdgeScore *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/sparsification.pyx":516
 * 	"""
 * 	def __cinit__(self, Graph G):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _RandomNodeEdgeScore(G._this)
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base._G));
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/sparsification.pyx":517
 * 	def __cinit__(self, Graph G):
 * 		self._G = G
 * 		self._this = new _RandomNodeEdgeScore(G._this)             # <<<<<<<<<<<<<<
 * 
 * 	cdef bool_t isDoubleValue(self):
 */
  try {
    __pyx_t_1 = new NetworKit::RandomNodeEdgeScore(__pyx_v_G->_this);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 517, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/sparsification.pyx":515
 * 		The graph to calculate the Random Edge attribute for.
 * 	"""
 * 	def __cinit__(self, Graph G):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _RandomNodeEdgeScore(G._this)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.sparsification.RandomNodeEdgeScore.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":519
 * 		self._this = new _RandomNodeEdgeScore(G._this)
 * 
 * 	cdef bool_t isDoubleValue(self):             # <<<<<<<<<<<<<<
 * 		return True
 * 
 */

static bool __pyx_f_9networkit_14sparsification_19RandomNodeEdgeScore_isDoubleValue(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_RandomNodeEdgeScore *__pyx_v_self) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isDoubleValue", 0);

  /* "networkit/sparsification.pyx":520
 * 
 * 	cdef bool_t isDoubleValue(self):
 * 		return True             # <<<<<<<<<<<<<<
 * 
 * ctypedef fused DoubleInt:
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":519
 * 		self._this = new _RandomNodeEdgeScore(G._this)
 * 
 * 	cdef bool_t isDoubleValue(self):             # <<<<<<<<<<<<<<
 * 		return True
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_19RandomNodeEdgeScore_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_14sparsification_19RandomNodeEdgeScore_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_19RandomNodeEdgeScore_2__reduce_cython__(((struct __pyx_obj_9networkit_14sparsification_RandomNodeEdgeScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_19RandomNodeEdgeScore_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_RandomNodeEdgeScore *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.sparsification.RandomNodeEdgeScore.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_19RandomNodeEdgeScore_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_14sparsification_19RandomNodeEdgeScore_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_19RandomNodeEdgeScore_4__setstate_cython__(((struct __pyx_obj_9networkit_14sparsification_RandomNodeEdgeScore *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_19RandomNodeEdgeScore_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_RandomNodeEdgeScore *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__38, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.sparsification.RandomNodeEdgeScore.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":553
 * 	cdef vector[double] _a
 * 
 * 	def __cinit__(self, Graph G, vector[double] a, bool_t logarithmic = True):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._a = a
 */

/* Python wrapper */
static int __pyx_pw_9networkit_14sparsification_16LocalFilterScore_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_14sparsification_16LocalFilterScore_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  std::vector<double>  __pyx_v_a;
  bool __pyx_v_logarithmic;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_a,&__pyx_n_s_logarithmic,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, 1); __PYX_ERR(0, 553, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_logarithmic);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 553, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_a = __pyx_convert_vector_from_py_double(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 553, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_logarithmic = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_logarithmic == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 553, __pyx_L3_error)
    } else {
      __pyx_v_logarithmic = ((bool)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 553, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.LocalFilterScore.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 553, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_14sparsification_16LocalFilterScore___cinit__(((struct __pyx_obj_9networkit_14sparsification_LocalFilterScore *)__pyx_v_self), __pyx_v_G, __pyx_v_a, __pyx_v_logarithmic);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_14sparsification_16LocalFilterScore___cinit__(struct __pyx_obj_9networkit_14sparsification_LocalFilterScore *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, std::vector<double>  __pyx_v_a, bool __pyx_v_logarithmic) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::LocalFilterScore<double> *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/sparsification.pyx":554
 * 
 * 	def __cinit__(self, Graph G, vector[double] a, bool_t logarithmic = True):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._a = a
 * 		self._this = new _LocalFilterScoreDouble(G._this, self._a, logarithmic)
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base._G));
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/sparsification.pyx":555
 * 	def __cinit__(self, Graph G, vector[double] a, bool_t logarithmic = True):
 * 		self._G = G
 * 		self._a = a             # <<<<<<<<<<<<<<
 * 		self._this = new _LocalFilterScoreDouble(G._this, self._a, logarithmic)
 * 
 */
  __pyx_v_self->_a = __pyx_v_a;

  /* "networkit/sparsification.pyx":556
 * 		self._G = G
 * 		self._a = a
 * 		self._this = new _LocalFilterScoreDouble(G._this, self._a, logarithmic)             # <<<<<<<<<<<<<<
 * 
 * 	cdef bool_t isDoubleValue(self):
 */
  try {
    __pyx_t_1 = new NetworKit::LocalFilterScore<double>(__pyx_v_G->_this, __pyx_v_self->_a, __pyx_v_logarithmic);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 556, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/sparsification.pyx":553
 * 	cdef vector[double] _a
 * 
 * 	def __cinit__(self, Graph G, vector[double] a, bool_t logarithmic = True):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._a = a
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.sparsification.LocalFilterScore.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":558
 * 		self._this = new _LocalFilterScoreDouble(G._this, self._a, logarithmic)
 * 
 * 	cdef bool_t isDoubleValue(self):             # <<<<<<<<<<<<<<
 * 		return True
 * 
 */

static bool __pyx_f_9networkit_14sparsification_16LocalFilterScore_isDoubleValue(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_LocalFilterScore *__pyx_v_self) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isDoubleValue", 0);

  /* "networkit/sparsification.pyx":559
 * 
 * 	cdef bool_t isDoubleValue(self):
 * 		return True             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/sparsification/ChanceCorrectedTriangleScore.hpp>":
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":558
 * 		self._this = new _LocalFilterScoreDouble(G._this, self._a, logarithmic)
 * 
 * 	cdef bool_t isDoubleValue(self):             # <<<<<<<<<<<<<<
 * 		return True
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_16LocalFilterScore_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_14sparsification_16LocalFilterScore_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_16LocalFilterScore_2__reduce_cython__(((struct __pyx_obj_9networkit_14sparsification_LocalFilterScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_16LocalFilterScore_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_LocalFilterScore *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__39, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.sparsification.LocalFilterScore.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_16LocalFilterScore_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_14sparsification_16LocalFilterScore_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_16LocalFilterScore_4__setstate_cython__(((struct __pyx_obj_9networkit_14sparsification_LocalFilterScore *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_16LocalFilterScore_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_LocalFilterScore *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__40, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.sparsification.LocalFilterScore.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":579
 * 	cdef vector[count] _triangles
 * 
 * 	def __cinit__(self, Graph G, vector[count] triangles):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._triangles = triangles
 */

/* Python wrapper */
static int __pyx_pw_9networkit_14sparsification_28ChanceCorrectedTriangleScore_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_14sparsification_28ChanceCorrectedTriangleScore_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  std::vector<__pyx_t_9networkit_14sparsification_count>  __pyx_v_triangles;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_triangles,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_triangles)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(0, 579, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 579, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_triangles = __pyx_convert_vector_from_py___pyx_t_9networkit_14sparsification_count(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 579, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 579, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.ChanceCorrectedTriangleScore.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 579, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_14sparsification_28ChanceCorrectedTriangleScore___cinit__(((struct __pyx_obj_9networkit_14sparsification_ChanceCorrectedTriangleScore *)__pyx_v_self), __pyx_v_G, __pyx_v_triangles);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_14sparsification_28ChanceCorrectedTriangleScore___cinit__(struct __pyx_obj_9networkit_14sparsification_ChanceCorrectedTriangleScore *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, std::vector<__pyx_t_9networkit_14sparsification_count>  __pyx_v_triangles) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::ChanceCorrectedTriangleScore *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/sparsification.pyx":580
 * 
 * 	def __cinit__(self, Graph G, vector[count] triangles):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._triangles = triangles
 * 		self._this = new _ChanceCorrectedTriangleScore(G._this, self._triangles)
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base._G));
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/sparsification.pyx":581
 * 	def __cinit__(self, Graph G, vector[count] triangles):
 * 		self._G = G
 * 		self._triangles = triangles             # <<<<<<<<<<<<<<
 * 		self._this = new _ChanceCorrectedTriangleScore(G._this, self._triangles)
 * 
 */
  __pyx_v_self->_triangles = __pyx_v_triangles;

  /* "networkit/sparsification.pyx":582
 * 		self._G = G
 * 		self._triangles = triangles
 * 		self._this = new _ChanceCorrectedTriangleScore(G._this, self._triangles)             # <<<<<<<<<<<<<<
 * 
 * 	cdef bool_t isDoubleValue(self):
 */
  try {
    __pyx_t_1 = new NetworKit::ChanceCorrectedTriangleScore(__pyx_v_G->_this, __pyx_v_self->_triangles);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 582, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/sparsification.pyx":579
 * 	cdef vector[count] _triangles
 * 
 * 	def __cinit__(self, Graph G, vector[count] triangles):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._triangles = triangles
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.sparsification.ChanceCorrectedTriangleScore.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":584
 * 		self._this = new _ChanceCorrectedTriangleScore(G._this, self._triangles)
 * 
 * 	cdef bool_t isDoubleValue(self):             # <<<<<<<<<<<<<<
 * 		return True
 * 
 */

static bool __pyx_f_9networkit_14sparsification_28ChanceCorrectedTriangleScore_isDoubleValue(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_ChanceCorrectedTriangleScore *__pyx_v_self) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isDoubleValue", 0);

  /* "networkit/sparsification.pyx":585
 * 
 * 	cdef bool_t isDoubleValue(self):
 * 		return True             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/sparsification/SCANStructuralSimilarityScore.hpp>":
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":584
 * 		self._this = new _ChanceCorrectedTriangleScore(G._this, self._triangles)
 * 
 * 	cdef bool_t isDoubleValue(self):             # <<<<<<<<<<<<<<
 * 		return True
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_28ChanceCorrectedTriangleScore_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_14sparsification_28ChanceCorrectedTriangleScore_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_28ChanceCorrectedTriangleScore_2__reduce_cython__(((struct __pyx_obj_9networkit_14sparsification_ChanceCorrectedTriangleScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_28ChanceCorrectedTriangleScore_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_ChanceCorrectedTriangleScore *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.sparsification.ChanceCorrectedTriangleScore.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_28ChanceCorrectedTriangleScore_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_14sparsification_28ChanceCorrectedTriangleScore_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_28ChanceCorrectedTriangleScore_4__setstate_cython__(((struct __pyx_obj_9networkit_14sparsification_ChanceCorrectedTriangleScore *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_28ChanceCorrectedTriangleScore_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_ChanceCorrectedTriangleScore *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.sparsification.ChanceCorrectedTriangleScore.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":605
 * 	cdef vector[count] _triangles
 * 
 * 	def __cinit__(self, Graph G, vector[count] triangles):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._triangles = triangles
 */

/* Python wrapper */
static int __pyx_pw_9networkit_14sparsification_29SCANStructuralSimilarityScore_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_14sparsification_29SCANStructuralSimilarityScore_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  std::vector<__pyx_t_9networkit_14sparsification_count>  __pyx_v_triangles;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_triangles,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_triangles)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(0, 605, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 605, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_triangles = __pyx_convert_vector_from_py___pyx_t_9networkit_14sparsification_count(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 605, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 605, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.SCANStructuralSimilarityScore.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 605, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_14sparsification_29SCANStructuralSimilarityScore___cinit__(((struct __pyx_obj_9networkit_14sparsification_SCANStructuralSimilarityScore *)__pyx_v_self), __pyx_v_G, __pyx_v_triangles);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_14sparsification_29SCANStructuralSimilarityScore___cinit__(struct __pyx_obj_9networkit_14sparsification_SCANStructuralSimilarityScore *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, std::vector<__pyx_t_9networkit_14sparsification_count>  __pyx_v_triangles) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::SCANStructuralSimilarityScore *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/sparsification.pyx":606
 * 
 * 	def __cinit__(self, Graph G, vector[count] triangles):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._triangles = triangles
 * 		self._this = new _SCANStructuralSimilarityScore(G._this, self._triangles)
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base._G));
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/sparsification.pyx":607
 * 	def __cinit__(self, Graph G, vector[count] triangles):
 * 		self._G = G
 * 		self._triangles = triangles             # <<<<<<<<<<<<<<
 * 		self._this = new _SCANStructuralSimilarityScore(G._this, self._triangles)
 * 
 */
  __pyx_v_self->_triangles = __pyx_v_triangles;

  /* "networkit/sparsification.pyx":608
 * 		self._G = G
 * 		self._triangles = triangles
 * 		self._this = new _SCANStructuralSimilarityScore(G._this, self._triangles)             # <<<<<<<<<<<<<<
 * 
 * 	cdef bool_t isDoubleValue(self):
 */
  try {
    __pyx_t_1 = new NetworKit::SCANStructuralSimilarityScore(__pyx_v_G->_this, __pyx_v_self->_triangles);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 608, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/sparsification.pyx":605
 * 	cdef vector[count] _triangles
 * 
 * 	def __cinit__(self, Graph G, vector[count] triangles):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._triangles = triangles
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.sparsification.SCANStructuralSimilarityScore.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":610
 * 		self._this = new _SCANStructuralSimilarityScore(G._this, self._triangles)
 * 
 * 	cdef bool_t isDoubleValue(self):             # <<<<<<<<<<<<<<
 * 		return True
 * 
 */

static bool __pyx_f_9networkit_14sparsification_29SCANStructuralSimilarityScore_isDoubleValue(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_SCANStructuralSimilarityScore *__pyx_v_self) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isDoubleValue", 0);

  /* "networkit/sparsification.pyx":611
 * 
 * 	cdef bool_t isDoubleValue(self):
 * 		return True             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/sparsification/GlobalThresholdFilter.hpp>":
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":610
 * 		self._this = new _SCANStructuralSimilarityScore(G._this, self._triangles)
 * 
 * 	cdef bool_t isDoubleValue(self):             # <<<<<<<<<<<<<<
 * 		return True
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_29SCANStructuralSimilarityScore_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_14sparsification_29SCANStructuralSimilarityScore_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_29SCANStructuralSimilarityScore_2__reduce_cython__(((struct __pyx_obj_9networkit_14sparsification_SCANStructuralSimilarityScore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_29SCANStructuralSimilarityScore_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_SCANStructuralSimilarityScore *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__43, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.sparsification.SCANStructuralSimilarityScore.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_29SCANStructuralSimilarityScore_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_14sparsification_29SCANStructuralSimilarityScore_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_29SCANStructuralSimilarityScore_4__setstate_cython__(((struct __pyx_obj_9networkit_14sparsification_SCANStructuralSimilarityScore *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_29SCANStructuralSimilarityScore_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_SCANStructuralSimilarityScore *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__44, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.sparsification.SCANStructuralSimilarityScore.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":640
 * 	cdef vector[double] _attribute
 * 
 * 	def __cinit__(self, Graph G not None, vector[double] attribute, double e, bool_t above):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._attribute = attribute
 */

/* Python wrapper */
static int __pyx_pw_9networkit_14sparsification_21GlobalThresholdFilter_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_14sparsification_21GlobalThresholdFilter_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  std::vector<double>  __pyx_v_attribute;
  double __pyx_v_e;
  bool __pyx_v_above;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_attribute,&__pyx_n_s_e,&__pyx_n_s_above,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attribute)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 4, 4, 1); __PYX_ERR(0, 640, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_e)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 4, 4, 2); __PYX_ERR(0, 640, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_above)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 4, 4, 3); __PYX_ERR(0, 640, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 640, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_attribute = __pyx_convert_vector_from_py_double(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 640, __pyx_L3_error)
    __pyx_v_e = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_e == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 640, __pyx_L3_error)
    __pyx_v_above = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_above == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 640, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 640, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.GlobalThresholdFilter.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 0, "G", 0))) __PYX_ERR(0, 640, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_14sparsification_21GlobalThresholdFilter___cinit__(((struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *)__pyx_v_self), __pyx_v_G, __pyx_v_attribute, __pyx_v_e, __pyx_v_above);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_14sparsification_21GlobalThresholdFilter___cinit__(struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, std::vector<double>  __pyx_v_attribute, double __pyx_v_e, bool __pyx_v_above) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::GlobalThresholdFilter *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/sparsification.pyx":641
 * 
 * 	def __cinit__(self, Graph G not None, vector[double] attribute, double e, bool_t above):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._attribute = attribute
 * 		self._this = new _GlobalThresholdFilter(G._this, self._attribute, e, above)
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->_G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_G));
  __pyx_v_self->_G = __pyx_v_G;

  /* "networkit/sparsification.pyx":642
 * 	def __cinit__(self, Graph G not None, vector[double] attribute, double e, bool_t above):
 * 		self._G = G
 * 		self._attribute = attribute             # <<<<<<<<<<<<<<
 * 		self._this = new _GlobalThresholdFilter(G._this, self._attribute, e, above)
 * 
 */
  __pyx_v_self->_attribute = __pyx_v_attribute;

  /* "networkit/sparsification.pyx":643
 * 		self._G = G
 * 		self._attribute = attribute
 * 		self._this = new _GlobalThresholdFilter(G._this, self._attribute, e, above)             # <<<<<<<<<<<<<<
 * 
 * 	def __dealloc__(self):
 */
  try {
    __pyx_t_1 = new NetworKit::GlobalThresholdFilter(__pyx_v_G->_this, __pyx_v_self->_attribute, __pyx_v_e, __pyx_v_above);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 643, __pyx_L1_error)
  }
  __pyx_v_self->_this = __pyx_t_1;

  /* "networkit/sparsification.pyx":640
 * 	cdef vector[double] _attribute
 * 
 * 	def __cinit__(self, Graph G not None, vector[double] attribute, double e, bool_t above):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._attribute = attribute
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.sparsification.GlobalThresholdFilter.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":645
 * 		self._this = new _GlobalThresholdFilter(G._this, self._attribute, e, above)
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		del self._this
 * 
 */

/* Python wrapper */
static void __pyx_pw_9networkit_14sparsification_21GlobalThresholdFilter_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_9networkit_14sparsification_21GlobalThresholdFilter_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_9networkit_14sparsification_21GlobalThresholdFilter_2__dealloc__(((struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_9networkit_14sparsification_21GlobalThresholdFilter_2__dealloc__(struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "networkit/sparsification.pyx":646
 * 
 * 	def __dealloc__(self):
 * 		del self._this             # <<<<<<<<<<<<<<
 * 
 * 	def calculate(self):
 */
  delete __pyx_v_self->_this;

  /* "networkit/sparsification.pyx":645
 * 		self._this = new _GlobalThresholdFilter(G._this, self._attribute, e, above)
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		del self._this
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "networkit/sparsification.pyx":648
 * 		del self._this
 * 
 * 	def calculate(self):             # <<<<<<<<<<<<<<
 * 		return Graph().setThis(self._this.calculate())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_21GlobalThresholdFilter_5calculate(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_14sparsification_21GlobalThresholdFilter_5calculate(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculate (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_21GlobalThresholdFilter_4calculate(((struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_21GlobalThresholdFilter_4calculate(struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  NetworKit::Graph __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calculate", 0);

  /* "networkit/sparsification.pyx":649
 * 
 * 	def calculate(self):
 * 		return Graph().setThis(self._this.calculate())             # <<<<<<<<<<<<<<
 * 
 * _ABS_ZERO = 1e-7
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9networkit_5graph_Graph)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  try {
    __pyx_t_2 = __pyx_v_self->_this->calculate();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 649, __pyx_L1_error)
  }
  __pyx_t_3 = ((struct __pyx_vtabstruct_9networkit_5graph_Graph *)((struct __pyx_obj_9networkit_5graph_Graph *)__pyx_t_1)->__pyx_vtab)->setThis(((struct __pyx_obj_9networkit_5graph_Graph *)__pyx_t_1), __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":648
 * 		del self._this
 * 
 * 	def calculate(self):             # <<<<<<<<<<<<<<
 * 		return Graph().setThis(self._this.calculate())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.sparsification.GlobalThresholdFilter.calculate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_21GlobalThresholdFilter_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_14sparsification_21GlobalThresholdFilter_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_21GlobalThresholdFilter_6__reduce_cython__(((struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_21GlobalThresholdFilter_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.sparsification.GlobalThresholdFilter.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_21GlobalThresholdFilter_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_14sparsification_21GlobalThresholdFilter_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_21GlobalThresholdFilter_8__setstate_cython__(((struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_21GlobalThresholdFilter_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__46, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.sparsification.GlobalThresholdFilter.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":657
 * 	uses only one parameter to determine the degree of filtering. """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute. (To be implemented by derived class)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_10Sparsifier_1scores(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_14sparsification_10Sparsifier_scores[] = " Returns an edge attribute. (To be implemented by derived class)\n\n\t\tKeyword arguments:\n\t\tG -- the input graph\n\t\t";
static PyMethodDef __pyx_mdef_9networkit_14sparsification_10Sparsifier_1scores = {"scores", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_10Sparsifier_1scores, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_14sparsification_10Sparsifier_scores};
static PyObject *__pyx_pw_9networkit_14sparsification_10Sparsifier_1scores(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  CYTHON_UNUSED PyObject *__pyx_v_G = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scores (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_G,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scores", 1, 2, 2, 1); __PYX_ERR(0, 657, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "scores") < 0)) __PYX_ERR(0, 657, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_G = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("scores", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 657, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.Sparsifier.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_10Sparsifier_scores(__pyx_self, __pyx_v_self, __pyx_v_G);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_10Sparsifier_scores(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_G) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("scores", 0);

  /* "networkit/sparsification.pyx":663
 * 		G -- the input graph
 * 		"""
 * 		raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 */
  __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
  __PYX_ERR(0, 663, __pyx_L1_error)

  /* "networkit/sparsification.pyx":657
 * 	uses only one parameter to determine the degree of filtering. """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute. (To be implemented by derived class)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.sparsification.Sparsifier.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":665
 * 		raise NotImplementedError
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		""" The actual implementation of the sparsification.
 * 		(To be implemented in the derived class.)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_10Sparsifier_3_getSparsifiedGraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_14sparsification_10Sparsifier_2_getSparsifiedGraph[] = " The actual implementation of the sparsification.\n\t\t(To be implemented in the derived class.)\n\n\t\tKeyword arguments:\n\t\tG -- the input graph\n\t\tedgeRatio -- the target edge ratio\n\t\tattribute -- a previously calculated edge attribute.\n\t\t";
static PyMethodDef __pyx_mdef_9networkit_14sparsification_10Sparsifier_3_getSparsifiedGraph = {"_getSparsifiedGraph", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_10Sparsifier_3_getSparsifiedGraph, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_14sparsification_10Sparsifier_2_getSparsifiedGraph};
static PyObject *__pyx_pw_9networkit_14sparsification_10Sparsifier_3_getSparsifiedGraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  CYTHON_UNUSED PyObject *__pyx_v_G = 0;
  CYTHON_UNUSED PyObject *__pyx_v_parameter = 0;
  CYTHON_UNUSED PyObject *__pyx_v_attribute = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getSparsifiedGraph (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_G,&__pyx_n_s_parameter,&__pyx_n_s_attribute,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 1); __PYX_ERR(0, 665, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parameter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 2); __PYX_ERR(0, 665, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attribute)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 3); __PYX_ERR(0, 665, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_getSparsifiedGraph") < 0)) __PYX_ERR(0, 665, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_self = values[0];
    __pyx_v_G = values[1];
    __pyx_v_parameter = values[2];
    __pyx_v_attribute = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 665, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.Sparsifier._getSparsifiedGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_10Sparsifier_2_getSparsifiedGraph(__pyx_self, __pyx_v_self, __pyx_v_G, __pyx_v_parameter, __pyx_v_attribute);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_10Sparsifier_2_getSparsifiedGraph(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_G, CYTHON_UNUSED PyObject *__pyx_v_parameter, CYTHON_UNUSED PyObject *__pyx_v_attribute) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getSparsifiedGraph", 0);

  /* "networkit/sparsification.pyx":674
 * 		attribute -- a previously calculated edge attribute.
 * 		"""
 * 		raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 * 	def _getParameterizationAlgorithm(self):
 */
  __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
  __PYX_ERR(0, 674, __pyx_L1_error)

  /* "networkit/sparsification.pyx":665
 * 		raise NotImplementedError
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		""" The actual implementation of the sparsification.
 * 		(To be implemented in the derived class.)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.sparsification.Sparsifier._getSparsifiedGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":676
 * 		raise NotImplementedError
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		""" Returns an appropriate parameterization algorithm for this sparsifier.
 * 		(To be implemented in the derived class.)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_10Sparsifier_5_getParameterizationAlgorithm(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_9networkit_14sparsification_10Sparsifier_4_getParameterizationAlgorithm[] = " Returns an appropriate parameterization algorithm for this sparsifier.\n\t\t(To be implemented in the derived class.)\n\t\t";
static PyMethodDef __pyx_mdef_9networkit_14sparsification_10Sparsifier_5_getParameterizationAlgorithm = {"_getParameterizationAlgorithm", (PyCFunction)__pyx_pw_9networkit_14sparsification_10Sparsifier_5_getParameterizationAlgorithm, METH_O, __pyx_doc_9networkit_14sparsification_10Sparsifier_4_getParameterizationAlgorithm};
static PyObject *__pyx_pw_9networkit_14sparsification_10Sparsifier_5_getParameterizationAlgorithm(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getParameterizationAlgorithm (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_10Sparsifier_4_getParameterizationAlgorithm(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_10Sparsifier_4_getParameterizationAlgorithm(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getParameterizationAlgorithm", 0);

  /* "networkit/sparsification.pyx":680
 * 		(To be implemented in the derived class.)
 * 		"""
 * 		return SimpleParameterization()             # <<<<<<<<<<<<<<
 * 
 * 	def getSparsifiedGraph(self, G, parameter, attribute=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_SimpleParameterization); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":676
 * 		raise NotImplementedError
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		""" Returns an appropriate parameterization algorithm for this sparsifier.
 * 		(To be implemented in the derived class.)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.sparsification.Sparsifier._getParameterizationAlgorithm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":682
 * 		return SimpleParameterization()
 * 
 * 	def getSparsifiedGraph(self, G, parameter, attribute=None):             # <<<<<<<<<<<<<<
 * 		"""Returns a sparsified version of the given input graph.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_10Sparsifier_7getSparsifiedGraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_14sparsification_10Sparsifier_6getSparsifiedGraph[] = "Returns a sparsified version of the given input graph.\n\n\t\tKeyword arguments:\n\t\tG -- the input graph\n\t\tparameter -- a parameter value that determines the degree of sparsification\n\t\tattribute -- (optional) a previously calculated edge attribute. If none is provided, we will try to calculate it.\n\t\t";
static PyMethodDef __pyx_mdef_9networkit_14sparsification_10Sparsifier_7getSparsifiedGraph = {"getSparsifiedGraph", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_10Sparsifier_7getSparsifiedGraph, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_14sparsification_10Sparsifier_6getSparsifiedGraph};
static PyObject *__pyx_pw_9networkit_14sparsification_10Sparsifier_7getSparsifiedGraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_G = 0;
  PyObject *__pyx_v_parameter = 0;
  PyObject *__pyx_v_attribute = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getSparsifiedGraph (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_G,&__pyx_n_s_parameter,&__pyx_n_s_attribute,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = ((PyObject *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getSparsifiedGraph", 0, 3, 4, 1); __PYX_ERR(0, 682, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parameter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getSparsifiedGraph", 0, 3, 4, 2); __PYX_ERR(0, 682, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attribute);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getSparsifiedGraph") < 0)) __PYX_ERR(0, 682, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_G = values[1];
    __pyx_v_parameter = values[2];
    __pyx_v_attribute = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getSparsifiedGraph", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 682, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.Sparsifier.getSparsifiedGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_10Sparsifier_6getSparsifiedGraph(__pyx_self, __pyx_v_self, __pyx_v_G, __pyx_v_parameter, __pyx_v_attribute);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_10Sparsifier_6getSparsifiedGraph(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_G, PyObject *__pyx_v_parameter, PyObject *__pyx_v_attribute) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSparsifiedGraph", 0);
  __Pyx_INCREF(__pyx_v_attribute);

  /* "networkit/sparsification.pyx":691
 * 		"""
 * 
 * 		if attribute is None:             # <<<<<<<<<<<<<<
 * 			attribute = self.scores(G)
 * 
 */
  __pyx_t_1 = (__pyx_v_attribute == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "networkit/sparsification.pyx":692
 * 
 * 		if attribute is None:
 * 			attribute = self.scores(G)             # <<<<<<<<<<<<<<
 * 
 * 		return self._getSparsifiedGraph(G, parameter, attribute)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_scores); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 692, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_G) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_G);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 692, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_attribute, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "networkit/sparsification.pyx":691
 * 		"""
 * 
 * 		if attribute is None:             # <<<<<<<<<<<<<<
 * 			attribute = self.scores(G)
 * 
 */
  }

  /* "networkit/sparsification.pyx":694
 * 			attribute = self.scores(G)
 * 
 * 		return self._getSparsifiedGraph(G, parameter, attribute)             # <<<<<<<<<<<<<<
 * 
 * 	def getSparsifiedGraphOfSize(self, G, edgeRatio, attribute=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_getSparsifiedGraph); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 694, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_G, __pyx_v_parameter, __pyx_v_attribute};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 694, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_G, __pyx_v_parameter, __pyx_v_attribute};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 694, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 694, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_G);
    __Pyx_GIVEREF(__pyx_v_G);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_G);
    __Pyx_INCREF(__pyx_v_parameter);
    __Pyx_GIVEREF(__pyx_v_parameter);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_parameter);
    __Pyx_INCREF(__pyx_v_attribute);
    __Pyx_GIVEREF(__pyx_v_attribute);
    PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_v_attribute);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 694, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":682
 * 		return SimpleParameterization()
 * 
 * 	def getSparsifiedGraph(self, G, parameter, attribute=None):             # <<<<<<<<<<<<<<
 * 		"""Returns a sparsified version of the given input graph.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("networkit.sparsification.Sparsifier.getSparsifiedGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_attribute);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":696
 * 		return self._getSparsifiedGraph(G, parameter, attribute)
 * 
 * 	def getSparsifiedGraphOfSize(self, G, edgeRatio, attribute=None):             # <<<<<<<<<<<<<<
 * 		"""This is a convenience function that applies an appropriate parameterization
 * 		algorithm (if available) to obtain a parameter value that yields a sparsified
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_10Sparsifier_9getSparsifiedGraphOfSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_14sparsification_10Sparsifier_8getSparsifiedGraphOfSize[] = "This is a convenience function that applies an appropriate parameterization\n\t\talgorithm (if available) to obtain a parameter value that yields a sparsified\n\t\tgraph of the desired size and then calls getSparsifiedGraph(...) with that parameter value.\n\n\t\tKeyword arguments:\n\t\tG -- the input graph\n\t\tedgeRatio -- the target edge ratio\n\t\tattribute -- (optional) a previously calculated edge attribute. If none is provided,\n\t\twe will try to calculate it.\n\t\t";
static PyMethodDef __pyx_mdef_9networkit_14sparsification_10Sparsifier_9getSparsifiedGraphOfSize = {"getSparsifiedGraphOfSize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_10Sparsifier_9getSparsifiedGraphOfSize, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_14sparsification_10Sparsifier_8getSparsifiedGraphOfSize};
static PyObject *__pyx_pw_9networkit_14sparsification_10Sparsifier_9getSparsifiedGraphOfSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_G = 0;
  PyObject *__pyx_v_edgeRatio = 0;
  PyObject *__pyx_v_attribute = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getSparsifiedGraphOfSize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_G,&__pyx_n_s_edgeRatio,&__pyx_n_s_attribute,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = ((PyObject *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getSparsifiedGraphOfSize", 0, 3, 4, 1); __PYX_ERR(0, 696, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_edgeRatio)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getSparsifiedGraphOfSize", 0, 3, 4, 2); __PYX_ERR(0, 696, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attribute);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getSparsifiedGraphOfSize") < 0)) __PYX_ERR(0, 696, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_G = values[1];
    __pyx_v_edgeRatio = values[2];
    __pyx_v_attribute = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getSparsifiedGraphOfSize", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 696, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.Sparsifier.getSparsifiedGraphOfSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_10Sparsifier_8getSparsifiedGraphOfSize(__pyx_self, __pyx_v_self, __pyx_v_G, __pyx_v_edgeRatio, __pyx_v_attribute);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_10Sparsifier_8getSparsifiedGraphOfSize(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_G, PyObject *__pyx_v_edgeRatio, PyObject *__pyx_v_attribute) {
  PyObject *__pyx_v_parameter = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSparsifiedGraphOfSize", 0);
  __Pyx_INCREF(__pyx_v_attribute);

  /* "networkit/sparsification.pyx":707
 * 		we will try to calculate it.
 * 		"""
 * 		if attribute is None:             # <<<<<<<<<<<<<<
 * 			attribute = self.scores(G)
 * 
 */
  __pyx_t_1 = (__pyx_v_attribute == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "networkit/sparsification.pyx":708
 * 		"""
 * 		if attribute is None:
 * 			attribute = self.scores(G)             # <<<<<<<<<<<<<<
 * 
 * 		parameter = self.getParameter(G, edgeRatio, attribute)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_scores); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 708, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_G) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_G);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 708, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_attribute, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "networkit/sparsification.pyx":707
 * 		we will try to calculate it.
 * 		"""
 * 		if attribute is None:             # <<<<<<<<<<<<<<
 * 			attribute = self.scores(G)
 * 
 */
  }

  /* "networkit/sparsification.pyx":710
 * 			attribute = self.scores(G)
 * 
 * 		parameter = self.getParameter(G, edgeRatio, attribute)             # <<<<<<<<<<<<<<
 * 
 * 		return self.getSparsifiedGraph(G, parameter, attribute)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_getParameter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_G, __pyx_v_edgeRatio, __pyx_v_attribute};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 710, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_G, __pyx_v_edgeRatio, __pyx_v_attribute};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 710, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 710, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_G);
    __Pyx_GIVEREF(__pyx_v_G);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_G);
    __Pyx_INCREF(__pyx_v_edgeRatio);
    __Pyx_GIVEREF(__pyx_v_edgeRatio);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_edgeRatio);
    __Pyx_INCREF(__pyx_v_attribute);
    __Pyx_GIVEREF(__pyx_v_attribute);
    PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_v_attribute);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 710, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_parameter = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "networkit/sparsification.pyx":712
 * 		parameter = self.getParameter(G, edgeRatio, attribute)
 * 
 * 		return self.getSparsifiedGraph(G, parameter, attribute)             # <<<<<<<<<<<<<<
 * 
 * 	def getParameter(self, G, edgeRatio, attribute=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_getSparsifiedGraph_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 712, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_G, __pyx_v_parameter, __pyx_v_attribute};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 712, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_v_G, __pyx_v_parameter, __pyx_v_attribute};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 712, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 712, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_INCREF(__pyx_v_G);
    __Pyx_GIVEREF(__pyx_v_G);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_6, __pyx_v_G);
    __Pyx_INCREF(__pyx_v_parameter);
    __Pyx_GIVEREF(__pyx_v_parameter);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_6, __pyx_v_parameter);
    __Pyx_INCREF(__pyx_v_attribute);
    __Pyx_GIVEREF(__pyx_v_attribute);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_6, __pyx_v_attribute);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 712, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":696
 * 		return self._getSparsifiedGraph(G, parameter, attribute)
 * 
 * 	def getSparsifiedGraphOfSize(self, G, edgeRatio, attribute=None):             # <<<<<<<<<<<<<<
 * 		"""This is a convenience function that applies an appropriate parameterization
 * 		algorithm (if available) to obtain a parameter value that yields a sparsified
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("networkit.sparsification.Sparsifier.getSparsifiedGraphOfSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_parameter);
  __Pyx_XDECREF(__pyx_v_attribute);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":714
 * 		return self.getSparsifiedGraph(G, parameter, attribute)
 * 
 * 	def getParameter(self, G, edgeRatio, attribute=None):             # <<<<<<<<<<<<<<
 * 		""" This is a convenience function that applies an appropriate parameterization
 * 		algorithm (if available) to obtain a parameter value that yields a sparsified
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_10Sparsifier_11getParameter(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_14sparsification_10Sparsifier_10getParameter[] = " This is a convenience function that applies an appropriate parameterization\n\t\talgorithm (if available) to obtain a parameter value that yields a sparsified\n\t\tgraph of the desired size. ";
static PyMethodDef __pyx_mdef_9networkit_14sparsification_10Sparsifier_11getParameter = {"getParameter", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_10Sparsifier_11getParameter, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_14sparsification_10Sparsifier_10getParameter};
static PyObject *__pyx_pw_9networkit_14sparsification_10Sparsifier_11getParameter(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_G = 0;
  PyObject *__pyx_v_edgeRatio = 0;
  PyObject *__pyx_v_attribute = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getParameter (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_G,&__pyx_n_s_edgeRatio,&__pyx_n_s_attribute,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = ((PyObject *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getParameter", 0, 3, 4, 1); __PYX_ERR(0, 714, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_edgeRatio)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getParameter", 0, 3, 4, 2); __PYX_ERR(0, 714, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attribute);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getParameter") < 0)) __PYX_ERR(0, 714, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_G = values[1];
    __pyx_v_edgeRatio = values[2];
    __pyx_v_attribute = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getParameter", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 714, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.Sparsifier.getParameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_10Sparsifier_10getParameter(__pyx_self, __pyx_v_self, __pyx_v_G, __pyx_v_edgeRatio, __pyx_v_attribute);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_10Sparsifier_10getParameter(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_G, PyObject *__pyx_v_edgeRatio, PyObject *__pyx_v_attribute) {
  PyObject *__pyx_v_paramAlgorithm = NULL;
  PyObject *__pyx_v_parameter = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getParameter", 0);
  __Pyx_INCREF(__pyx_v_attribute);

  /* "networkit/sparsification.pyx":718
 * 		algorithm (if available) to obtain a parameter value that yields a sparsified
 * 		graph of the desired size. """
 * 		if attribute is None:             # <<<<<<<<<<<<<<
 * 			attribute = self.scores(G)
 * 
 */
  __pyx_t_1 = (__pyx_v_attribute == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "networkit/sparsification.pyx":719
 * 		graph of the desired size. """
 * 		if attribute is None:
 * 			attribute = self.scores(G)             # <<<<<<<<<<<<<<
 * 
 * 		paramAlgorithm = self._getParameterizationAlgorithm()
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_scores); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 719, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_G) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_G);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 719, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_attribute, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "networkit/sparsification.pyx":718
 * 		algorithm (if available) to obtain a parameter value that yields a sparsified
 * 		graph of the desired size. """
 * 		if attribute is None:             # <<<<<<<<<<<<<<
 * 			attribute = self.scores(G)
 * 
 */
  }

  /* "networkit/sparsification.pyx":721
 * 			attribute = self.scores(G)
 * 
 * 		paramAlgorithm = self._getParameterizationAlgorithm()             # <<<<<<<<<<<<<<
 * 		parameter = paramAlgorithm.parameterize(self, G, attribute, edgeRatio)
 * 		return parameter
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_getParameterizationAlgorithm); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_paramAlgorithm = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "networkit/sparsification.pyx":722
 * 
 * 		paramAlgorithm = self._getParameterizationAlgorithm()
 * 		parameter = paramAlgorithm.parameterize(self, G, attribute, edgeRatio)             # <<<<<<<<<<<<<<
 * 		return parameter
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_paramAlgorithm, __pyx_n_s_parameterize); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 722, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_5, __pyx_v_self, __pyx_v_G, __pyx_v_attribute, __pyx_v_edgeRatio};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 4+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 722, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_5, __pyx_v_self, __pyx_v_G, __pyx_v_attribute, __pyx_v_edgeRatio};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 4+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 722, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(4+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 722, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self);
    __Pyx_GIVEREF(__pyx_v_self);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_self);
    __Pyx_INCREF(__pyx_v_G);
    __Pyx_GIVEREF(__pyx_v_G);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_G);
    __Pyx_INCREF(__pyx_v_attribute);
    __Pyx_GIVEREF(__pyx_v_attribute);
    PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_v_attribute);
    __Pyx_INCREF(__pyx_v_edgeRatio);
    __Pyx_GIVEREF(__pyx_v_edgeRatio);
    PyTuple_SET_ITEM(__pyx_t_7, 3+__pyx_t_6, __pyx_v_edgeRatio);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 722, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_parameter = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "networkit/sparsification.pyx":723
 * 		paramAlgorithm = self._getParameterizationAlgorithm()
 * 		parameter = paramAlgorithm.parameterize(self, G, attribute, edgeRatio)
 * 		return parameter             # <<<<<<<<<<<<<<
 * 
 * class SimpleParameterization:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_parameter);
  __pyx_r = __pyx_v_parameter;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":714
 * 		return self.getSparsifiedGraph(G, parameter, attribute)
 * 
 * 	def getParameter(self, G, edgeRatio, attribute=None):             # <<<<<<<<<<<<<<
 * 		""" This is a convenience function that applies an appropriate parameterization
 * 		algorithm (if available) to obtain a parameter value that yields a sparsified
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("networkit.sparsification.Sparsifier.getParameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_paramAlgorithm);
  __Pyx_XDECREF(__pyx_v_parameter);
  __Pyx_XDECREF(__pyx_v_attribute);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":731
 * 	result. """
 * 
 * 	def parameterize(self, algorithm, G, attribute, edgeRatio):             # <<<<<<<<<<<<<<
 * 		""" Parameterize the given sparsifier for the given input graph with the
 * 		given target edge ratio. (To be implemented by derived class.)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_22SimpleParameterization_1parameterize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_14sparsification_22SimpleParameterization_parameterize[] = " Parameterize the given sparsifier for the given input graph with the\n\t\tgiven target edge ratio. (To be implemented by derived class.)\n\n\t\tKeyword arguments:\n\t\talgorithm -- the sparsification algorithm\n\t\tG -- the input graph\n\t\tattribute -- precalculated edge attribute\n\t\tedgeRatio -- target edge ratio the resulting parameter value should yield\n\t\t";
static PyMethodDef __pyx_mdef_9networkit_14sparsification_22SimpleParameterization_1parameterize = {"parameterize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_22SimpleParameterization_1parameterize, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_14sparsification_22SimpleParameterization_parameterize};
static PyObject *__pyx_pw_9networkit_14sparsification_22SimpleParameterization_1parameterize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  CYTHON_UNUSED PyObject *__pyx_v_algorithm = 0;
  CYTHON_UNUSED PyObject *__pyx_v_G = 0;
  CYTHON_UNUSED PyObject *__pyx_v_attribute = 0;
  PyObject *__pyx_v_edgeRatio = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("parameterize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_algorithm,&__pyx_n_s_G,&__pyx_n_s_attribute,&__pyx_n_s_edgeRatio,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_algorithm)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("parameterize", 1, 5, 5, 1); __PYX_ERR(0, 731, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("parameterize", 1, 5, 5, 2); __PYX_ERR(0, 731, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attribute)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("parameterize", 1, 5, 5, 3); __PYX_ERR(0, 731, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_edgeRatio)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("parameterize", 1, 5, 5, 4); __PYX_ERR(0, 731, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "parameterize") < 0)) __PYX_ERR(0, 731, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_self = values[0];
    __pyx_v_algorithm = values[1];
    __pyx_v_G = values[2];
    __pyx_v_attribute = values[3];
    __pyx_v_edgeRatio = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("parameterize", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 731, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.SimpleParameterization.parameterize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_22SimpleParameterization_parameterize(__pyx_self, __pyx_v_self, __pyx_v_algorithm, __pyx_v_G, __pyx_v_attribute, __pyx_v_edgeRatio);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_22SimpleParameterization_parameterize(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_algorithm, CYTHON_UNUSED PyObject *__pyx_v_G, CYTHON_UNUSED PyObject *__pyx_v_attribute, PyObject *__pyx_v_edgeRatio) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("parameterize", 0);

  /* "networkit/sparsification.pyx":741
 * 		edgeRatio -- target edge ratio the resulting parameter value should yield
 * 		"""
 * 		return edgeRatio             # <<<<<<<<<<<<<<
 * 
 * class BinarySearchParameterization:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_edgeRatio);
  __pyx_r = __pyx_v_edgeRatio;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":731
 * 	result. """
 * 
 * 	def parameterize(self, algorithm, G, attribute, edgeRatio):             # <<<<<<<<<<<<<<
 * 		""" Parameterize the given sparsifier for the given input graph with the
 * 		given target edge ratio. (To be implemented by derived class.)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":746
 * 	""" Parameterizes a sparsification algorithm using binary search. """
 * 
 * 	def __init__(self, sizeIncreasesWithParameter, lowerParameterBound, upperParameterBound, maxSteps):             # <<<<<<<<<<<<<<
 * 		""" Creates a new instance of a binary search parameterizer.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_28BinarySearchParameterization_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_14sparsification_28BinarySearchParameterization___init__[] = " Creates a new instance of a binary search parameterizer.\n\n\t\tKeyword arguments:\n\t\tsizeIncreasesWithParameter -- set to True if the size of the sparsified graph increases with increasing parameter value\n\t\tlowerParameterBound -- lower bound of the parameter domain (inclusive)\n\t\tupperParameterBound -- upper bound of the parameter domain (inclusive)\n\t\tmaxSteps -- the maximum number of steps to perform during binary search\n\t\t";
static PyMethodDef __pyx_mdef_9networkit_14sparsification_28BinarySearchParameterization_1__init__ = {"__init__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_28BinarySearchParameterization_1__init__, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_14sparsification_28BinarySearchParameterization___init__};
static PyObject *__pyx_pw_9networkit_14sparsification_28BinarySearchParameterization_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_sizeIncreasesWithParameter = 0;
  PyObject *__pyx_v_lowerParameterBound = 0;
  PyObject *__pyx_v_upperParameterBound = 0;
  PyObject *__pyx_v_maxSteps = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_sizeIncreasesWithParameter,&__pyx_n_s_lowerParameterBound,&__pyx_n_s_upperParameterBound,&__pyx_n_s_maxSteps,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sizeIncreasesWithParameter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, 1); __PYX_ERR(0, 746, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lowerParameterBound)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, 2); __PYX_ERR(0, 746, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_upperParameterBound)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, 3); __PYX_ERR(0, 746, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_maxSteps)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, 4); __PYX_ERR(0, 746, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 746, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_self = values[0];
    __pyx_v_sizeIncreasesWithParameter = values[1];
    __pyx_v_lowerParameterBound = values[2];
    __pyx_v_upperParameterBound = values[3];
    __pyx_v_maxSteps = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 746, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.BinarySearchParameterization.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_28BinarySearchParameterization___init__(__pyx_self, __pyx_v_self, __pyx_v_sizeIncreasesWithParameter, __pyx_v_lowerParameterBound, __pyx_v_upperParameterBound, __pyx_v_maxSteps);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_28BinarySearchParameterization___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_sizeIncreasesWithParameter, PyObject *__pyx_v_lowerParameterBound, PyObject *__pyx_v_upperParameterBound, PyObject *__pyx_v_maxSteps) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "networkit/sparsification.pyx":755
 * 		maxSteps -- the maximum number of steps to perform during binary search
 * 		"""
 * 		self.sizeIncreasesWithParameter = sizeIncreasesWithParameter             # <<<<<<<<<<<<<<
 * 		self.lowerParameterBound = lowerParameterBound
 * 		self.upperParameterBound = upperParameterBound
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_sizeIncreasesWithParameter, __pyx_v_sizeIncreasesWithParameter) < 0) __PYX_ERR(0, 755, __pyx_L1_error)

  /* "networkit/sparsification.pyx":756
 * 		"""
 * 		self.sizeIncreasesWithParameter = sizeIncreasesWithParameter
 * 		self.lowerParameterBound = lowerParameterBound             # <<<<<<<<<<<<<<
 * 		self.upperParameterBound = upperParameterBound
 * 		self.maxSteps = maxSteps
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_lowerParameterBound, __pyx_v_lowerParameterBound) < 0) __PYX_ERR(0, 756, __pyx_L1_error)

  /* "networkit/sparsification.pyx":757
 * 		self.sizeIncreasesWithParameter = sizeIncreasesWithParameter
 * 		self.lowerParameterBound = lowerParameterBound
 * 		self.upperParameterBound = upperParameterBound             # <<<<<<<<<<<<<<
 * 		self.maxSteps = maxSteps
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_upperParameterBound, __pyx_v_upperParameterBound) < 0) __PYX_ERR(0, 757, __pyx_L1_error)

  /* "networkit/sparsification.pyx":758
 * 		self.lowerParameterBound = lowerParameterBound
 * 		self.upperParameterBound = upperParameterBound
 * 		self.maxSteps = maxSteps             # <<<<<<<<<<<<<<
 * 
 * 	def parameterize(self, algorithm, G, attribute, edgeRatio):
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_maxSteps, __pyx_v_maxSteps) < 0) __PYX_ERR(0, 758, __pyx_L1_error)

  /* "networkit/sparsification.pyx":746
 * 	""" Parameterizes a sparsification algorithm using binary search. """
 * 
 * 	def __init__(self, sizeIncreasesWithParameter, lowerParameterBound, upperParameterBound, maxSteps):             # <<<<<<<<<<<<<<
 * 		""" Creates a new instance of a binary search parameterizer.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.sparsification.BinarySearchParameterization.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":760
 * 		self.maxSteps = maxSteps
 * 
 * 	def parameterize(self, algorithm, G, attribute, edgeRatio):             # <<<<<<<<<<<<<<
 * 		lowerBound = self.lowerParameterBound
 * 		upperBound = self.upperParameterBound
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_28BinarySearchParameterization_3parameterize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_14sparsification_28BinarySearchParameterization_3parameterize = {"parameterize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_28BinarySearchParameterization_3parameterize, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_14sparsification_28BinarySearchParameterization_3parameterize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_algorithm = 0;
  PyObject *__pyx_v_G = 0;
  PyObject *__pyx_v_attribute = 0;
  PyObject *__pyx_v_edgeRatio = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("parameterize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_algorithm,&__pyx_n_s_G,&__pyx_n_s_attribute,&__pyx_n_s_edgeRatio,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_algorithm)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("parameterize", 1, 5, 5, 1); __PYX_ERR(0, 760, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("parameterize", 1, 5, 5, 2); __PYX_ERR(0, 760, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attribute)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("parameterize", 1, 5, 5, 3); __PYX_ERR(0, 760, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_edgeRatio)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("parameterize", 1, 5, 5, 4); __PYX_ERR(0, 760, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "parameterize") < 0)) __PYX_ERR(0, 760, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_self = values[0];
    __pyx_v_algorithm = values[1];
    __pyx_v_G = values[2];
    __pyx_v_attribute = values[3];
    __pyx_v_edgeRatio = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("parameterize", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 760, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.BinarySearchParameterization.parameterize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_28BinarySearchParameterization_2parameterize(__pyx_self, __pyx_v_self, __pyx_v_algorithm, __pyx_v_G, __pyx_v_attribute, __pyx_v_edgeRatio);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_28BinarySearchParameterization_2parameterize(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_algorithm, PyObject *__pyx_v_G, PyObject *__pyx_v_attribute, PyObject *__pyx_v_edgeRatio) {
  PyObject *__pyx_v_lowerBound = NULL;
  PyObject *__pyx_v_upperBound = NULL;
  PyObject *__pyx_v_estimation = NULL;
  PyObject *__pyx_v_bestParameter = NULL;
  PyObject *__pyx_v_minDistance = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_sparsified = NULL;
  PyObject *__pyx_v_currentEdgeRatio = NULL;
  PyObject *__pyx_v_distance = NULL;
  PyObject *__pyx_v_increase = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("parameterize", 0);

  /* "networkit/sparsification.pyx":761
 * 
 * 	def parameterize(self, algorithm, G, attribute, edgeRatio):
 * 		lowerBound = self.lowerParameterBound             # <<<<<<<<<<<<<<
 * 		upperBound = self.upperParameterBound
 * 		estimation = self.lowerParameterBound
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_lowerParameterBound); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 761, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_lowerBound = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":762
 * 	def parameterize(self, algorithm, G, attribute, edgeRatio):
 * 		lowerBound = self.lowerParameterBound
 * 		upperBound = self.upperParameterBound             # <<<<<<<<<<<<<<
 * 		estimation = self.lowerParameterBound
 * 		bestParameter = self.lowerParameterBound
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_upperParameterBound); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 762, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_upperBound = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":763
 * 		lowerBound = self.lowerParameterBound
 * 		upperBound = self.upperParameterBound
 * 		estimation = self.lowerParameterBound             # <<<<<<<<<<<<<<
 * 		bestParameter = self.lowerParameterBound
 * 		minDistance = self.upperParameterBound
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_lowerParameterBound); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 763, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_estimation = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":764
 * 		upperBound = self.upperParameterBound
 * 		estimation = self.lowerParameterBound
 * 		bestParameter = self.lowerParameterBound             # <<<<<<<<<<<<<<
 * 		minDistance = self.upperParameterBound
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_lowerParameterBound); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 764, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_bestParameter = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":765
 * 		estimation = self.lowerParameterBound
 * 		bestParameter = self.lowerParameterBound
 * 		minDistance = self.upperParameterBound             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(0, self.maxSteps):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_upperParameterBound); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 765, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_minDistance = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":767
 * 		minDistance = self.upperParameterBound
 * 
 * 		for i in range(0, self.maxSteps):             # <<<<<<<<<<<<<<
 * 			estimation = (lowerBound + upperBound) / 2.0
 * 			sparsified = algorithm._getSparsifiedGraph(G, estimation, attribute)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_maxSteps); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 767, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 767, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 767, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 767, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 767, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 767, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 767, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 767, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 767, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 767, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "networkit/sparsification.pyx":768
 * 
 * 		for i in range(0, self.maxSteps):
 * 			estimation = (lowerBound + upperBound) / 2.0             # <<<<<<<<<<<<<<
 * 			sparsified = algorithm._getSparsifiedGraph(G, estimation, attribute)
 * 			currentEdgeRatio = sparsified.numberOfEdges() / G.numberOfEdges()
 */
    __pyx_t_1 = PyNumber_Add(__pyx_v_lowerBound, __pyx_v_upperBound); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 768, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyFloat_TrueDivideObjC(__pyx_t_1, __pyx_float_2_0, 2.0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 768, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_estimation, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "networkit/sparsification.pyx":769
 * 		for i in range(0, self.maxSteps):
 * 			estimation = (lowerBound + upperBound) / 2.0
 * 			sparsified = algorithm._getSparsifiedGraph(G, estimation, attribute)             # <<<<<<<<<<<<<<
 * 			currentEdgeRatio = sparsified.numberOfEdges() / G.numberOfEdges()
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_algorithm, __pyx_n_s_getSparsifiedGraph); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 769, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_v_G, __pyx_v_estimation, __pyx_v_attribute};
      __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 769, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_v_G, __pyx_v_estimation, __pyx_v_attribute};
      __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 769, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(3+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 769, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_6) {
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
      }
      __Pyx_INCREF(__pyx_v_G);
      __Pyx_GIVEREF(__pyx_v_G);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_v_G);
      __Pyx_INCREF(__pyx_v_estimation);
      __Pyx_GIVEREF(__pyx_v_estimation);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_estimation);
      __Pyx_INCREF(__pyx_v_attribute);
      __Pyx_GIVEREF(__pyx_v_attribute);
      PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_7, __pyx_v_attribute);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 769, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_sparsified, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "networkit/sparsification.pyx":770
 * 			estimation = (lowerBound + upperBound) / 2.0
 * 			sparsified = algorithm._getSparsifiedGraph(G, estimation, attribute)
 * 			currentEdgeRatio = sparsified.numberOfEdges() / G.numberOfEdges()             # <<<<<<<<<<<<<<
 * 
 * 			distance = abs(currentEdgeRatio - edgeRatio)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_sparsified, __pyx_n_s_numberOfEdges); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_5 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_G, __pyx_n_s_numberOfEdges); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyNumber_Divide(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_currentEdgeRatio, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "networkit/sparsification.pyx":772
 * 			currentEdgeRatio = sparsified.numberOfEdges() / G.numberOfEdges()
 * 
 * 			distance = abs(currentEdgeRatio - edgeRatio)             # <<<<<<<<<<<<<<
 * 
 * 			if distance < minDistance and abs(currentEdgeRatio) > _ABS_ZERO:
 */
    __pyx_t_8 = PyNumber_Subtract(__pyx_v_currentEdgeRatio, __pyx_v_edgeRatio); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 772, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_1 = __Pyx_PyNumber_Absolute(__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 772, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF_SET(__pyx_v_distance, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "networkit/sparsification.pyx":774
 * 			distance = abs(currentEdgeRatio - edgeRatio)
 * 
 * 			if distance < minDistance and abs(currentEdgeRatio) > _ABS_ZERO:             # <<<<<<<<<<<<<<
 * 				minDistance = distance
 * 				bestParameter = estimation
 */
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_distance, __pyx_v_minDistance, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 774, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 774, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_10) {
    } else {
      __pyx_t_9 = __pyx_t_10;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_1 = __Pyx_PyNumber_Absolute(__pyx_v_currentEdgeRatio); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 774, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_ABS_ZERO); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 774, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_1, __pyx_t_8, Py_GT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 774, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 774, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_9 = __pyx_t_10;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_9) {

      /* "networkit/sparsification.pyx":775
 * 
 * 			if distance < minDistance and abs(currentEdgeRatio) > _ABS_ZERO:
 * 				minDistance = distance             # <<<<<<<<<<<<<<
 * 				bestParameter = estimation
 * 
 */
      __Pyx_INCREF(__pyx_v_distance);
      __Pyx_DECREF_SET(__pyx_v_minDistance, __pyx_v_distance);

      /* "networkit/sparsification.pyx":776
 * 			if distance < minDistance and abs(currentEdgeRatio) > _ABS_ZERO:
 * 				minDistance = distance
 * 				bestParameter = estimation             # <<<<<<<<<<<<<<
 * 
 * 				#"Exact" hit?
 */
      __Pyx_INCREF(__pyx_v_estimation);
      __Pyx_DECREF_SET(__pyx_v_bestParameter, __pyx_v_estimation);

      /* "networkit/sparsification.pyx":779
 * 
 * 				#"Exact" hit?
 * 				if abs(currentEdgeRatio - edgeRatio) < _ABS_ZERO:             # <<<<<<<<<<<<<<
 * 					break;
 * 
 */
      __pyx_t_5 = PyNumber_Subtract(__pyx_v_currentEdgeRatio, __pyx_v_edgeRatio); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 779, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_8 = __Pyx_PyNumber_Absolute(__pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 779, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_ABS_ZERO); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 779, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 = PyObject_RichCompare(__pyx_t_8, __pyx_t_5, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 779, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 779, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (__pyx_t_9) {

        /* "networkit/sparsification.pyx":780
 * 				#"Exact" hit?
 * 				if abs(currentEdgeRatio - edgeRatio) < _ABS_ZERO:
 * 					break;             # <<<<<<<<<<<<<<
 * 
 * 			increase = (currentEdgeRatio < edgeRatio)
 */
        goto __pyx_L4_break;

        /* "networkit/sparsification.pyx":779
 * 
 * 				#"Exact" hit?
 * 				if abs(currentEdgeRatio - edgeRatio) < _ABS_ZERO:             # <<<<<<<<<<<<<<
 * 					break;
 * 
 */
      }

      /* "networkit/sparsification.pyx":774
 * 			distance = abs(currentEdgeRatio - edgeRatio)
 * 
 * 			if distance < minDistance and abs(currentEdgeRatio) > _ABS_ZERO:             # <<<<<<<<<<<<<<
 * 				minDistance = distance
 * 				bestParameter = estimation
 */
    }

    /* "networkit/sparsification.pyx":782
 * 					break;
 * 
 * 			increase = (currentEdgeRatio < edgeRatio)             # <<<<<<<<<<<<<<
 * 			if not self.sizeIncreasesWithParameter:
 * 				increase = not increase
 */
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_currentEdgeRatio, __pyx_v_edgeRatio, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 782, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_increase, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "networkit/sparsification.pyx":783
 * 
 * 			increase = (currentEdgeRatio < edgeRatio)
 * 			if not self.sizeIncreasesWithParameter:             # <<<<<<<<<<<<<<
 * 				increase = not increase
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_sizeIncreasesWithParameter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 783, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 783, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_10 = ((!__pyx_t_9) != 0);
    if (__pyx_t_10) {

      /* "networkit/sparsification.pyx":784
 * 			increase = (currentEdgeRatio < edgeRatio)
 * 			if not self.sizeIncreasesWithParameter:
 * 				increase = not increase             # <<<<<<<<<<<<<<
 * 
 * 			if increase:
 */
      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_v_increase); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 784, __pyx_L1_error)
      __pyx_t_1 = __Pyx_PyBool_FromLong((!__pyx_t_10)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 784, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF_SET(__pyx_v_increase, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "networkit/sparsification.pyx":783
 * 
 * 			increase = (currentEdgeRatio < edgeRatio)
 * 			if not self.sizeIncreasesWithParameter:             # <<<<<<<<<<<<<<
 * 				increase = not increase
 * 
 */
    }

    /* "networkit/sparsification.pyx":786
 * 				increase = not increase
 * 
 * 			if increase:             # <<<<<<<<<<<<<<
 * 				lowerBound = estimation
 * 			else:
 */
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_v_increase); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 786, __pyx_L1_error)
    if (__pyx_t_10) {

      /* "networkit/sparsification.pyx":787
 * 
 * 			if increase:
 * 				lowerBound = estimation             # <<<<<<<<<<<<<<
 * 			else:
 * 				upperBound = estimation
 */
      __Pyx_INCREF(__pyx_v_estimation);
      __Pyx_DECREF_SET(__pyx_v_lowerBound, __pyx_v_estimation);

      /* "networkit/sparsification.pyx":786
 * 				increase = not increase
 * 
 * 			if increase:             # <<<<<<<<<<<<<<
 * 				lowerBound = estimation
 * 			else:
 */
      goto __pyx_L10;
    }

    /* "networkit/sparsification.pyx":789
 * 				lowerBound = estimation
 * 			else:
 * 				upperBound = estimation             # <<<<<<<<<<<<<<
 * 
 * 		return bestParameter
 */
    /*else*/ {
      __Pyx_INCREF(__pyx_v_estimation);
      __Pyx_DECREF_SET(__pyx_v_upperBound, __pyx_v_estimation);
    }
    __pyx_L10:;

    /* "networkit/sparsification.pyx":767
 * 		minDistance = self.upperParameterBound
 * 
 * 		for i in range(0, self.maxSteps):             # <<<<<<<<<<<<<<
 * 			estimation = (lowerBound + upperBound) / 2.0
 * 			sparsified = algorithm._getSparsifiedGraph(G, estimation, attribute)
 */
  }
  __pyx_L4_break:;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/sparsification.pyx":791
 * 				upperBound = estimation
 * 
 * 		return bestParameter             # <<<<<<<<<<<<<<
 * 
 * class CompleteSearchParameterization:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_bestParameter);
  __pyx_r = __pyx_v_bestParameter;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":760
 * 		self.maxSteps = maxSteps
 * 
 * 	def parameterize(self, algorithm, G, attribute, edgeRatio):             # <<<<<<<<<<<<<<
 * 		lowerBound = self.lowerParameterBound
 * 		upperBound = self.upperParameterBound
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("networkit.sparsification.BinarySearchParameterization.parameterize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_lowerBound);
  __Pyx_XDECREF(__pyx_v_upperBound);
  __Pyx_XDECREF(__pyx_v_estimation);
  __Pyx_XDECREF(__pyx_v_bestParameter);
  __Pyx_XDECREF(__pyx_v_minDistance);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_sparsified);
  __Pyx_XDECREF(__pyx_v_currentEdgeRatio);
  __Pyx_XDECREF(__pyx_v_distance);
  __Pyx_XDECREF(__pyx_v_increase);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":798
 * 	set of possible values) """
 * 
 * 	def __init__(self, lowerParameterBound, upperParameterBound):             # <<<<<<<<<<<<<<
 * 		""" Creates a new instance of a complete search parameterizer.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_30CompleteSearchParameterization_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_14sparsification_30CompleteSearchParameterization___init__[] = " Creates a new instance of a complete search parameterizer.\n\n\t\tKeyword arguments:\n\t\tlowerParameterBound -- lower bound of the parameter domain (inclusive, integer)\n\t\tupperParameterBound -- upper bound of the parameter domain (inclusive, integer) ";
static PyMethodDef __pyx_mdef_9networkit_14sparsification_30CompleteSearchParameterization_1__init__ = {"__init__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_30CompleteSearchParameterization_1__init__, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_14sparsification_30CompleteSearchParameterization___init__};
static PyObject *__pyx_pw_9networkit_14sparsification_30CompleteSearchParameterization_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_lowerParameterBound = 0;
  PyObject *__pyx_v_upperParameterBound = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_lowerParameterBound,&__pyx_n_s_upperParameterBound,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lowerParameterBound)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 1); __PYX_ERR(0, 798, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_upperParameterBound)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 2); __PYX_ERR(0, 798, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 798, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_lowerParameterBound = values[1];
    __pyx_v_upperParameterBound = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 798, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.CompleteSearchParameterization.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_30CompleteSearchParameterization___init__(__pyx_self, __pyx_v_self, __pyx_v_lowerParameterBound, __pyx_v_upperParameterBound);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_30CompleteSearchParameterization___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_lowerParameterBound, PyObject *__pyx_v_upperParameterBound) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "networkit/sparsification.pyx":804
 * 		lowerParameterBound -- lower bound of the parameter domain (inclusive, integer)
 * 		upperParameterBound -- upper bound of the parameter domain (inclusive, integer) """
 * 		self.lowerParameterBound = lowerParameterBound             # <<<<<<<<<<<<<<
 * 		self.upperParameterBound = upperParameterBound
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_lowerParameterBound, __pyx_v_lowerParameterBound) < 0) __PYX_ERR(0, 804, __pyx_L1_error)

  /* "networkit/sparsification.pyx":805
 * 		upperParameterBound -- upper bound of the parameter domain (inclusive, integer) """
 * 		self.lowerParameterBound = lowerParameterBound
 * 		self.upperParameterBound = upperParameterBound             # <<<<<<<<<<<<<<
 * 
 * 	def parameterize(self, algorithm, G, attribute, edgeRatio):
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_upperParameterBound, __pyx_v_upperParameterBound) < 0) __PYX_ERR(0, 805, __pyx_L1_error)

  /* "networkit/sparsification.pyx":798
 * 	set of possible values) """
 * 
 * 	def __init__(self, lowerParameterBound, upperParameterBound):             # <<<<<<<<<<<<<<
 * 		""" Creates a new instance of a complete search parameterizer.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.sparsification.CompleteSearchParameterization.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":807
 * 		self.upperParameterBound = upperParameterBound
 * 
 * 	def parameterize(self, algorithm, G, attribute, edgeRatio):             # <<<<<<<<<<<<<<
 * 		bestParameter = self.lowerParameterBound
 * 		bestRatio = 0.0
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_30CompleteSearchParameterization_3parameterize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_14sparsification_30CompleteSearchParameterization_3parameterize = {"parameterize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_30CompleteSearchParameterization_3parameterize, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_14sparsification_30CompleteSearchParameterization_3parameterize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_algorithm = 0;
  PyObject *__pyx_v_G = 0;
  PyObject *__pyx_v_attribute = 0;
  PyObject *__pyx_v_edgeRatio = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("parameterize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_algorithm,&__pyx_n_s_G,&__pyx_n_s_attribute,&__pyx_n_s_edgeRatio,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_algorithm)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("parameterize", 1, 5, 5, 1); __PYX_ERR(0, 807, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("parameterize", 1, 5, 5, 2); __PYX_ERR(0, 807, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attribute)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("parameterize", 1, 5, 5, 3); __PYX_ERR(0, 807, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_edgeRatio)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("parameterize", 1, 5, 5, 4); __PYX_ERR(0, 807, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "parameterize") < 0)) __PYX_ERR(0, 807, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_self = values[0];
    __pyx_v_algorithm = values[1];
    __pyx_v_G = values[2];
    __pyx_v_attribute = values[3];
    __pyx_v_edgeRatio = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("parameterize", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 807, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.CompleteSearchParameterization.parameterize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_30CompleteSearchParameterization_2parameterize(__pyx_self, __pyx_v_self, __pyx_v_algorithm, __pyx_v_G, __pyx_v_attribute, __pyx_v_edgeRatio);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_30CompleteSearchParameterization_2parameterize(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_algorithm, PyObject *__pyx_v_G, PyObject *__pyx_v_attribute, PyObject *__pyx_v_edgeRatio) {
  PyObject *__pyx_v_bestParameter = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_bestRatio = NULL;
  PyObject *__pyx_v_minDistance = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_sparsified = NULL;
  PyObject *__pyx_v_currentEdgeRatio = NULL;
  PyObject *__pyx_v_distance = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("parameterize", 0);

  /* "networkit/sparsification.pyx":808
 * 
 * 	def parameterize(self, algorithm, G, attribute, edgeRatio):
 * 		bestParameter = self.lowerParameterBound             # <<<<<<<<<<<<<<
 * 		bestRatio = 0.0
 * 		minDistance = 100.0
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_lowerParameterBound); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 808, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_bestParameter = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":809
 * 	def parameterize(self, algorithm, G, attribute, edgeRatio):
 * 		bestParameter = self.lowerParameterBound
 * 		bestRatio = 0.0             # <<<<<<<<<<<<<<
 * 		minDistance = 100.0
 * 
 */
  __Pyx_INCREF(__pyx_float_0_0);
  __pyx_v_bestRatio = __pyx_float_0_0;

  /* "networkit/sparsification.pyx":810
 * 		bestParameter = self.lowerParameterBound
 * 		bestRatio = 0.0
 * 		minDistance = 100.0             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(self.lowerParameterBound, self.upperParameterBound + 1):
 */
  __Pyx_INCREF(__pyx_float_100_0);
  __pyx_v_minDistance = __pyx_float_100_0;

  /* "networkit/sparsification.pyx":812
 * 		minDistance = 100.0
 * 
 * 		for i in range(self.lowerParameterBound, self.upperParameterBound + 1):             # <<<<<<<<<<<<<<
 * 			sparsified = algorithm._getSparsifiedGraph(G, i, attribute)
 * 			currentEdgeRatio = sparsified.numberOfEdges() / G.numberOfEdges()
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_lowerParameterBound); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_upperParameterBound); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 812, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 812, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 812, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 812, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 812, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 812, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 812, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "networkit/sparsification.pyx":813
 * 
 * 		for i in range(self.lowerParameterBound, self.upperParameterBound + 1):
 * 			sparsified = algorithm._getSparsifiedGraph(G, i, attribute)             # <<<<<<<<<<<<<<
 * 			currentEdgeRatio = sparsified.numberOfEdges() / G.numberOfEdges()
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_algorithm, __pyx_n_s_getSparsifiedGraph); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 813, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_v_G, __pyx_v_i, __pyx_v_attribute};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 813, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_v_G, __pyx_v_i, __pyx_v_attribute};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 813, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(3+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 813, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_6) {
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
      }
      __Pyx_INCREF(__pyx_v_G);
      __Pyx_GIVEREF(__pyx_v_G);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_v_G);
      __Pyx_INCREF(__pyx_v_i);
      __Pyx_GIVEREF(__pyx_v_i);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_i);
      __Pyx_INCREF(__pyx_v_attribute);
      __Pyx_GIVEREF(__pyx_v_attribute);
      PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_7, __pyx_v_attribute);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 813, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_sparsified, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "networkit/sparsification.pyx":814
 * 		for i in range(self.lowerParameterBound, self.upperParameterBound + 1):
 * 			sparsified = algorithm._getSparsifiedGraph(G, i, attribute)
 * 			currentEdgeRatio = sparsified.numberOfEdges() / G.numberOfEdges()             # <<<<<<<<<<<<<<
 * 
 * 			distance = abs(currentEdgeRatio - edgeRatio)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_sparsified, __pyx_n_s_numberOfEdges); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 814, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_3 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 814, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_G, __pyx_n_s_numberOfEdges); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 814, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 814, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 814, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_currentEdgeRatio, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "networkit/sparsification.pyx":816
 * 			currentEdgeRatio = sparsified.numberOfEdges() / G.numberOfEdges()
 * 
 * 			distance = abs(currentEdgeRatio - edgeRatio)             # <<<<<<<<<<<<<<
 * 			if distance < minDistance and abs(currentEdgeRatio) > _ABS_ZERO:
 * 				minDistance = distance
 */
    __pyx_t_8 = PyNumber_Subtract(__pyx_v_currentEdgeRatio, __pyx_v_edgeRatio); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 816, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_1 = __Pyx_PyNumber_Absolute(__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 816, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF_SET(__pyx_v_distance, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "networkit/sparsification.pyx":817
 * 
 * 			distance = abs(currentEdgeRatio - edgeRatio)
 * 			if distance < minDistance and abs(currentEdgeRatio) > _ABS_ZERO:             # <<<<<<<<<<<<<<
 * 				minDistance = distance
 * 				bestParameter = i
 */
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_distance, __pyx_v_minDistance, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 817, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 817, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_10) {
    } else {
      __pyx_t_9 = __pyx_t_10;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_1 = __Pyx_PyNumber_Absolute(__pyx_v_currentEdgeRatio); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 817, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_ABS_ZERO); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 817, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_8, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 817, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 817, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_9 = __pyx_t_10;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_9) {

      /* "networkit/sparsification.pyx":818
 * 			distance = abs(currentEdgeRatio - edgeRatio)
 * 			if distance < minDistance and abs(currentEdgeRatio) > _ABS_ZERO:
 * 				minDistance = distance             # <<<<<<<<<<<<<<
 * 				bestParameter = i
 * 				bestRatio = currentEdgeRatio
 */
      __Pyx_INCREF(__pyx_v_distance);
      __Pyx_DECREF_SET(__pyx_v_minDistance, __pyx_v_distance);

      /* "networkit/sparsification.pyx":819
 * 			if distance < minDistance and abs(currentEdgeRatio) > _ABS_ZERO:
 * 				minDistance = distance
 * 				bestParameter = i             # <<<<<<<<<<<<<<
 * 				bestRatio = currentEdgeRatio
 * 
 */
      __Pyx_INCREF(__pyx_v_i);
      __Pyx_DECREF_SET(__pyx_v_bestParameter, __pyx_v_i);

      /* "networkit/sparsification.pyx":820
 * 				minDistance = distance
 * 				bestParameter = i
 * 				bestRatio = currentEdgeRatio             # <<<<<<<<<<<<<<
 * 
 * 		return bestParameter
 */
      __Pyx_INCREF(__pyx_v_currentEdgeRatio);
      __Pyx_DECREF_SET(__pyx_v_bestRatio, __pyx_v_currentEdgeRatio);

      /* "networkit/sparsification.pyx":817
 * 
 * 			distance = abs(currentEdgeRatio - edgeRatio)
 * 			if distance < minDistance and abs(currentEdgeRatio) > _ABS_ZERO:             # <<<<<<<<<<<<<<
 * 				minDistance = distance
 * 				bestParameter = i
 */
    }

    /* "networkit/sparsification.pyx":812
 * 		minDistance = 100.0
 * 
 * 		for i in range(self.lowerParameterBound, self.upperParameterBound + 1):             # <<<<<<<<<<<<<<
 * 			sparsified = algorithm._getSparsifiedGraph(G, i, attribute)
 * 			currentEdgeRatio = sparsified.numberOfEdges() / G.numberOfEdges()
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/sparsification.pyx":822
 * 				bestRatio = currentEdgeRatio
 * 
 * 		return bestParameter             # <<<<<<<<<<<<<<
 * 
 * def getRankAttribute(attribute, reverse = False):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_bestParameter);
  __pyx_r = __pyx_v_bestParameter;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":807
 * 		self.upperParameterBound = upperParameterBound
 * 
 * 	def parameterize(self, algorithm, G, attribute, edgeRatio):             # <<<<<<<<<<<<<<
 * 		bestParameter = self.lowerParameterBound
 * 		bestRatio = 0.0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("networkit.sparsification.CompleteSearchParameterization.parameterize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_bestParameter);
  __Pyx_XDECREF(__pyx_v_bestRatio);
  __Pyx_XDECREF(__pyx_v_minDistance);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_sparsified);
  __Pyx_XDECREF(__pyx_v_currentEdgeRatio);
  __Pyx_XDECREF(__pyx_v_distance);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":824
 * 		return bestParameter
 * 
 * def getRankAttribute(attribute, reverse = False):             # <<<<<<<<<<<<<<
 * 	""" Takes as input an attribute (node or edge) and returns an attribute where
 * 	each node is assigned its rank among all others according to the attribute values.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_1getRankAttribute(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_14sparsification_getRankAttribute[] = " Takes as input an attribute (node or edge) and returns an attribute where\n\teach node is assigned its rank among all others according to the attribute values.\n\tThe node/edge with lowest input value is assigned 0, the one with second-lowest\n\tvalue 1, and so on.\n\n\tKeyword arguments:\n\tattribute -- the input node/edge attribute\n\treverse -- reverses the ranking, if set to True\n\n\t";
static PyMethodDef __pyx_mdef_9networkit_14sparsification_1getRankAttribute = {"getRankAttribute", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_1getRankAttribute, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_14sparsification_getRankAttribute};
static PyObject *__pyx_pw_9networkit_14sparsification_1getRankAttribute(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_attribute = 0;
  PyObject *__pyx_v_reverse = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getRankAttribute (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_attribute,&__pyx_n_s_reverse,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attribute)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_reverse);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getRankAttribute") < 0)) __PYX_ERR(0, 824, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_attribute = values[0];
    __pyx_v_reverse = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getRankAttribute", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 824, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.getRankAttribute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_getRankAttribute(__pyx_self, __pyx_v_attribute, __pyx_v_reverse);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":840
 * 
 * 	_attribute = zip([x for x in range(0, len(attribute))], attribute)
 * 	_attribute = sorted(_attribute, key=lambda x: x[1], reverse=reverse)             # <<<<<<<<<<<<<<
 * 
 * 	_index = 0
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_16getRankAttribute_lambda(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_14sparsification_16getRankAttribute_lambda = {"lambda", (PyCFunction)__pyx_pw_9networkit_14sparsification_16getRankAttribute_lambda, METH_O, 0};
static PyObject *__pyx_pw_9networkit_14sparsification_16getRankAttribute_lambda(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda(__pyx_self, ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_x, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 840, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.sparsification.getRankAttribute.lambda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":824
 * 		return bestParameter
 * 
 * def getRankAttribute(attribute, reverse = False):             # <<<<<<<<<<<<<<
 * 	""" Takes as input an attribute (node or edge) and returns an attribute where
 * 	each node is assigned its rank among all others according to the attribute values.
 */

static PyObject *__pyx_pf_9networkit_14sparsification_getRankAttribute(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_attribute, PyObject *__pyx_v_reverse) {
  PyObject *__pyx_v__attribute = NULL;
  PyObject *__pyx_v__index = NULL;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_i = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_v = NULL;
  Py_ssize_t __pyx_7genexpr__pyx_v_x;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getRankAttribute", 0);

  /* "networkit/sparsification.pyx":839
 * 	#Example output: [1, 0, 3, 2]
 * 
 * 	_attribute = zip([x for x in range(0, len(attribute))], attribute)             # <<<<<<<<<<<<<<
 * 	_attribute = sorted(_attribute, key=lambda x: x[1], reverse=reverse)
 * 
 */
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 839, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_Length(__pyx_v_attribute); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 839, __pyx_L1_error)
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_7genexpr__pyx_v_x = __pyx_t_4;
      __pyx_t_5 = PyInt_FromSsize_t(__pyx_7genexpr__pyx_v_x); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 839, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 839, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  } /* exit inner scope */
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_attribute);
  __Pyx_GIVEREF(__pyx_v_attribute);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_attribute);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v__attribute = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":840
 * 
 * 	_attribute = zip([x for x in range(0, len(attribute))], attribute)
 * 	_attribute = sorted(_attribute, key=lambda x: x[1], reverse=reverse)             # <<<<<<<<<<<<<<
 * 
 * 	_index = 0
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 840, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v__attribute);
  __Pyx_GIVEREF(__pyx_v__attribute);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__attribute);
  __pyx_t_5 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 840, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_16getRankAttribute_lambda, 0, __pyx_n_s_getRankAttribute_locals_lambda, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 840, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_key, __pyx_t_6) < 0) __PYX_ERR(0, 840, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_reverse, __pyx_v_reverse) < 0) __PYX_ERR(0, 840, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 840, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF_SET(__pyx_v__attribute, __pyx_t_6);
  __pyx_t_6 = 0;

  /* "networkit/sparsification.pyx":842
 * 	_attribute = sorted(_attribute, key=lambda x: x[1], reverse=reverse)
 * 
 * 	_index = 0             # <<<<<<<<<<<<<<
 * 	result = [0] * len(attribute)
 * 	for (i, v) in _attribute:
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v__index = __pyx_int_0;

  /* "networkit/sparsification.pyx":843
 * 
 * 	_index = 0
 * 	result = [0] * len(attribute)             # <<<<<<<<<<<<<<
 * 	for (i, v) in _attribute:
 * 		result[i] = _index
 */
  __pyx_t_2 = PyObject_Length(__pyx_v_attribute); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 843, __pyx_L1_error)
  __pyx_t_6 = PyList_New(1 * ((__pyx_t_2<0) ? 0:__pyx_t_2)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  { Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < __pyx_t_2; __pyx_temp++) {
      __Pyx_INCREF(__pyx_int_0);
      __Pyx_GIVEREF(__pyx_int_0);
      PyList_SET_ITEM(__pyx_t_6, __pyx_temp, __pyx_int_0);
    }
  }
  __pyx_v_result = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "networkit/sparsification.pyx":844
 * 	_index = 0
 * 	result = [0] * len(attribute)
 * 	for (i, v) in _attribute:             # <<<<<<<<<<<<<<
 * 		result[i] = _index
 * 		_index = _index + 1
 */
  if (likely(PyList_CheckExact(__pyx_v__attribute)) || PyTuple_CheckExact(__pyx_v__attribute)) {
    __pyx_t_6 = __pyx_v__attribute; __Pyx_INCREF(__pyx_t_6); __pyx_t_2 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_v__attribute); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 844, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 844, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_6))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_2); __Pyx_INCREF(__pyx_t_5); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 844, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_6, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 844, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_2); __Pyx_INCREF(__pyx_t_5); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 844, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_6, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 844, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_7(__pyx_t_6);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 844, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
      PyObject* sequence = __pyx_t_5;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 844, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_8);
      #else
      __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 844, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 844, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      #endif
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_9 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 844, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_10 = Py_TYPE(__pyx_t_9)->tp_iternext;
      index = 0; __pyx_t_1 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_1)) goto __pyx_L7_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_1);
      index = 1; __pyx_t_8 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_8)) goto __pyx_L7_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_8);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 2) < 0) __PYX_ERR(0, 844, __pyx_L1_error)
      __pyx_t_10 = NULL;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L8_unpacking_done;
      __pyx_L7_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 844, __pyx_L1_error)
      __pyx_L8_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "networkit/sparsification.pyx":845
 * 	result = [0] * len(attribute)
 * 	for (i, v) in _attribute:
 * 		result[i] = _index             # <<<<<<<<<<<<<<
 * 		_index = _index + 1
 * 
 */
    if (unlikely(PyObject_SetItem(__pyx_v_result, __pyx_v_i, __pyx_v__index) < 0)) __PYX_ERR(0, 845, __pyx_L1_error)

    /* "networkit/sparsification.pyx":846
 * 	for (i, v) in _attribute:
 * 		result[i] = _index
 * 		_index = _index + 1             # <<<<<<<<<<<<<<
 * 
 * 	return result
 */
    __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_v__index, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 846, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF_SET(__pyx_v__index, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "networkit/sparsification.pyx":844
 * 	_index = 0
 * 	result = [0] * len(attribute)
 * 	for (i, v) in _attribute:             # <<<<<<<<<<<<<<
 * 		result[i] = _index
 * 		_index = _index + 1
 */
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/sparsification.pyx":848
 * 		_index = _index + 1
 * 
 * 	return result             # <<<<<<<<<<<<<<
 * 
 * class SimmelianSparsifierParametric(Sparsifier):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":824
 * 		return bestParameter
 * 
 * def getRankAttribute(attribute, reverse = False):             # <<<<<<<<<<<<<<
 * 	""" Takes as input an attribute (node or edge) and returns an attribute where
 * 	each node is assigned its rank among all others according to the attribute values.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("networkit.sparsification.getRankAttribute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v__attribute);
  __Pyx_XDECREF(__pyx_v__index);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":855
 * 	 introduced by Nick et al. """
 * 
 * 	def __init__(self, maxRank):             # <<<<<<<<<<<<<<
 * 		self.maxRank = maxRank
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_29SimmelianSparsifierParametric_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_14sparsification_29SimmelianSparsifierParametric_1__init__ = {"__init__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_29SimmelianSparsifierParametric_1__init__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_14sparsification_29SimmelianSparsifierParametric_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_maxRank = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_maxRank,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_maxRank)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(0, 855, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 855, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_maxRank = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 855, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.SimmelianSparsifierParametric.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_29SimmelianSparsifierParametric___init__(__pyx_self, __pyx_v_self, __pyx_v_maxRank);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_29SimmelianSparsifierParametric___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_maxRank) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "networkit/sparsification.pyx":856
 * 
 * 	def __init__(self, maxRank):
 * 		self.maxRank = maxRank             # <<<<<<<<<<<<<<
 * 
 * 	def scores(self, G):
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_maxRank, __pyx_v_maxRank) < 0) __PYX_ERR(0, 856, __pyx_L1_error)

  /* "networkit/sparsification.pyx":855
 * 	 introduced by Nick et al. """
 * 
 * 	def __init__(self, maxRank):             # <<<<<<<<<<<<<<
 * 		self.maxRank = maxRank
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.sparsification.SimmelianSparsifierParametric.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":858
 * 		self.maxRank = maxRank
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the minimum parameter value
 * 		such that the edge is contained in the sparsified graph.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_29SimmelianSparsifierParametric_3scores(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_14sparsification_29SimmelianSparsifierParametric_2scores[] = " Returns an edge attribute that holds for each edge the minimum parameter value\n\t\tsuch that the edge is contained in the sparsified graph.\n\n\t\tKeyword arguments:\n\t\tG -- the input graph\n\t\t";
static PyMethodDef __pyx_mdef_9networkit_14sparsification_29SimmelianSparsifierParametric_3scores = {"scores", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_29SimmelianSparsifierParametric_3scores, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_14sparsification_29SimmelianSparsifierParametric_2scores};
static PyObject *__pyx_pw_9networkit_14sparsification_29SimmelianSparsifierParametric_3scores(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_G = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scores (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_G,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scores", 1, 2, 2, 1); __PYX_ERR(0, 858, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "scores") < 0)) __PYX_ERR(0, 858, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_G = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("scores", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 858, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.SimmelianSparsifierParametric.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_29SimmelianSparsifierParametric_2scores(__pyx_self, __pyx_v_self, __pyx_v_G);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_29SimmelianSparsifierParametric_2scores(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_G) {
  PyObject *__pyx_v_triangles = NULL;
  struct __pyx_obj_9networkit_14sparsification_SimmelianOverlapScore *__pyx_v_simmelianOverlap = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("scores", 0);

  /* "networkit/sparsification.pyx":865
 * 		G -- the input graph
 * 		"""
 * 		triangles = TriangleEdgeScore(G).run().scores()             # <<<<<<<<<<<<<<
 * 
 * 		simmelianOverlap = SimmelianOverlapScore(G, triangles, self.maxRank)
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_9networkit_14sparsification_TriangleEdgeScore), __pyx_v_G); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 865, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_run); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 865, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 865, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_scores); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 865, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 865, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_triangles = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":867
 * 		triangles = TriangleEdgeScore(G).run().scores()
 * 
 * 		simmelianOverlap = SimmelianOverlapScore(G, triangles, self.maxRank)             # <<<<<<<<<<<<<<
 * 		simmelianOverlap.run()
 * 		return simmelianOverlap.scores()
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_maxRank); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 867, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 867, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_G);
  __Pyx_GIVEREF(__pyx_v_G);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_G);
  __Pyx_INCREF(__pyx_v_triangles);
  __Pyx_GIVEREF(__pyx_v_triangles);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_triangles);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9networkit_14sparsification_SimmelianOverlapScore), __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 867, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_simmelianOverlap = ((struct __pyx_obj_9networkit_14sparsification_SimmelianOverlapScore *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":868
 * 
 * 		simmelianOverlap = SimmelianOverlapScore(G, triangles, self.maxRank)
 * 		simmelianOverlap.run()             # <<<<<<<<<<<<<<
 * 		return simmelianOverlap.scores()
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_simmelianOverlap), __pyx_n_s_run); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 868, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 868, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":869
 * 		simmelianOverlap = SimmelianOverlapScore(G, triangles, self.maxRank)
 * 		simmelianOverlap.run()
 * 		return simmelianOverlap.scores()             # <<<<<<<<<<<<<<
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_simmelianOverlap), __pyx_n_s_scores); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 869, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 869, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":858
 * 		self.maxRank = maxRank
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the minimum parameter value
 * 		such that the edge is contained in the sparsified graph.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("networkit.sparsification.SimmelianSparsifierParametric.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_triangles);
  __Pyx_XDECREF((PyObject *)__pyx_v_simmelianOverlap);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":871
 * 		return simmelianOverlap.scores()
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_29SimmelianSparsifierParametric_5_getSparsifiedGraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_14sparsification_29SimmelianSparsifierParametric_5_getSparsifiedGraph = {"_getSparsifiedGraph", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_29SimmelianSparsifierParametric_5_getSparsifiedGraph, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_14sparsification_29SimmelianSparsifierParametric_5_getSparsifiedGraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_G = 0;
  PyObject *__pyx_v_parameter = 0;
  PyObject *__pyx_v_attribute = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getSparsifiedGraph (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_G,&__pyx_n_s_parameter,&__pyx_n_s_attribute,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 1); __PYX_ERR(0, 871, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parameter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 2); __PYX_ERR(0, 871, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attribute)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 3); __PYX_ERR(0, 871, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_getSparsifiedGraph") < 0)) __PYX_ERR(0, 871, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_self = values[0];
    __pyx_v_G = values[1];
    __pyx_v_parameter = values[2];
    __pyx_v_attribute = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 871, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.SimmelianSparsifierParametric._getSparsifiedGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_29SimmelianSparsifierParametric_4_getSparsifiedGraph(__pyx_self, __pyx_v_self, __pyx_v_G, __pyx_v_parameter, __pyx_v_attribute);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_29SimmelianSparsifierParametric_4_getSparsifiedGraph(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G, PyObject *__pyx_v_parameter, PyObject *__pyx_v_attribute) {
  struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *__pyx_v_gf = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getSparsifiedGraph", 0);

  /* "networkit/sparsification.pyx":872
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)             # <<<<<<<<<<<<<<
 * 		return gf.calculate()
 * 
 */
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 872, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_G);
  __Pyx_GIVEREF(__pyx_v_G);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_G);
  __Pyx_INCREF(__pyx_v_attribute);
  __Pyx_GIVEREF(__pyx_v_attribute);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_attribute);
  __Pyx_INCREF(__pyx_v_parameter);
  __Pyx_GIVEREF(__pyx_v_parameter);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_parameter);
  __Pyx_INCREF(Py_True);
  __Pyx_GIVEREF(Py_True);
  PyTuple_SET_ITEM(__pyx_t_1, 3, Py_True);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9networkit_14sparsification_GlobalThresholdFilter), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 872, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_gf = ((struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "networkit/sparsification.pyx":873
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()             # <<<<<<<<<<<<<<
 * 
 * 	def _getParameterizationAlgorithm(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_gf), __pyx_n_s_calculate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 873, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 873, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":871
 * 		return simmelianOverlap.scores()
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.sparsification.SimmelianSparsifierParametric._getSparsifiedGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_gf);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":875
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return CompleteSearchParameterization(0, self.maxRank)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_29SimmelianSparsifierParametric_7_getParameterizationAlgorithm(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_14sparsification_29SimmelianSparsifierParametric_7_getParameterizationAlgorithm = {"_getParameterizationAlgorithm", (PyCFunction)__pyx_pw_9networkit_14sparsification_29SimmelianSparsifierParametric_7_getParameterizationAlgorithm, METH_O, 0};
static PyObject *__pyx_pw_9networkit_14sparsification_29SimmelianSparsifierParametric_7_getParameterizationAlgorithm(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getParameterizationAlgorithm (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_29SimmelianSparsifierParametric_6_getParameterizationAlgorithm(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_29SimmelianSparsifierParametric_6_getParameterizationAlgorithm(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getParameterizationAlgorithm", 0);

  /* "networkit/sparsification.pyx":876
 * 
 * 	def _getParameterizationAlgorithm(self):
 * 		return CompleteSearchParameterization(0, self.maxRank)             # <<<<<<<<<<<<<<
 * 
 * class SimmelianSparsifierNonParametric(Sparsifier):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_CompleteSearchParameterization); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 876, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_maxRank); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 876, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_int_0, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 876, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_int_0, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 876, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 876, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_int_0);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 876, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":875
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return CompleteSearchParameterization(0, self.maxRank)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("networkit.sparsification.SimmelianSparsifierParametric._getParameterizationAlgorithm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":883
 * 	introduced by Nick et al. """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the minimum jaccard filter value
 * 		such that the edge is contained in the sparsified graph.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_32SimmelianSparsifierNonParametric_1scores(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_14sparsification_32SimmelianSparsifierNonParametric_scores[] = " Returns an edge attribute that holds for each edge the minimum jaccard filter value\n\t\tsuch that the edge is contained in the sparsified graph.\n\n\t\tKeyword arguments:\n\t\tG -- the input graph\n\t\t";
static PyMethodDef __pyx_mdef_9networkit_14sparsification_32SimmelianSparsifierNonParametric_1scores = {"scores", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_32SimmelianSparsifierNonParametric_1scores, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_14sparsification_32SimmelianSparsifierNonParametric_scores};
static PyObject *__pyx_pw_9networkit_14sparsification_32SimmelianSparsifierNonParametric_1scores(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_G = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scores (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_G,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scores", 1, 2, 2, 1); __PYX_ERR(0, 883, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "scores") < 0)) __PYX_ERR(0, 883, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_G = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("scores", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 883, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.SimmelianSparsifierNonParametric.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_32SimmelianSparsifierNonParametric_scores(__pyx_self, __pyx_v_self, __pyx_v_G);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_32SimmelianSparsifierNonParametric_scores(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G) {
  PyObject *__pyx_v_triangles = NULL;
  PyObject *__pyx_v_a_sj = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("scores", 0);

  /* "networkit/sparsification.pyx":890
 * 		G -- the input graph
 * 		"""
 * 		triangles = TriangleEdgeScore(G).run().scores()             # <<<<<<<<<<<<<<
 * 		a_sj = PrefixJaccardScore(G, triangles).run().scores()
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_9networkit_14sparsification_TriangleEdgeScore), __pyx_v_G); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_run); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_scores); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_triangles = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":891
 * 		"""
 * 		triangles = TriangleEdgeScore(G).run().scores()
 * 		a_sj = PrefixJaccardScore(G, triangles).run().scores()             # <<<<<<<<<<<<<<
 * 
 * 		return a_sj
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_G);
  __Pyx_GIVEREF(__pyx_v_G);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_G);
  __Pyx_INCREF(__pyx_v_triangles);
  __Pyx_GIVEREF(__pyx_v_triangles);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_triangles);
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9networkit_14sparsification_PrefixJaccardScore), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_run); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_4 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_scores); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_a_sj = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":893
 * 		a_sj = PrefixJaccardScore(G, triangles).run().scores()
 * 
 * 		return a_sj             # <<<<<<<<<<<<<<
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_a_sj);
  __pyx_r = __pyx_v_a_sj;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":883
 * 	introduced by Nick et al. """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the minimum jaccard filter value
 * 		such that the edge is contained in the sparsified graph.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("networkit.sparsification.SimmelianSparsifierNonParametric.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_triangles);
  __Pyx_XDECREF(__pyx_v_a_sj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":895
 * 		return a_sj
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_32SimmelianSparsifierNonParametric_3_getSparsifiedGraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_14sparsification_32SimmelianSparsifierNonParametric_3_getSparsifiedGraph = {"_getSparsifiedGraph", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_32SimmelianSparsifierNonParametric_3_getSparsifiedGraph, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_14sparsification_32SimmelianSparsifierNonParametric_3_getSparsifiedGraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_G = 0;
  PyObject *__pyx_v_parameter = 0;
  PyObject *__pyx_v_attribute = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getSparsifiedGraph (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_G,&__pyx_n_s_parameter,&__pyx_n_s_attribute,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 1); __PYX_ERR(0, 895, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parameter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 2); __PYX_ERR(0, 895, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attribute)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 3); __PYX_ERR(0, 895, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_getSparsifiedGraph") < 0)) __PYX_ERR(0, 895, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_self = values[0];
    __pyx_v_G = values[1];
    __pyx_v_parameter = values[2];
    __pyx_v_attribute = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 895, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.SimmelianSparsifierNonParametric._getSparsifiedGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_32SimmelianSparsifierNonParametric_2_getSparsifiedGraph(__pyx_self, __pyx_v_self, __pyx_v_G, __pyx_v_parameter, __pyx_v_attribute);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_32SimmelianSparsifierNonParametric_2_getSparsifiedGraph(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G, PyObject *__pyx_v_parameter, PyObject *__pyx_v_attribute) {
  struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *__pyx_v_gf = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getSparsifiedGraph", 0);

  /* "networkit/sparsification.pyx":896
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)             # <<<<<<<<<<<<<<
 * 		return gf.calculate()
 * 
 */
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 896, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_G);
  __Pyx_GIVEREF(__pyx_v_G);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_G);
  __Pyx_INCREF(__pyx_v_attribute);
  __Pyx_GIVEREF(__pyx_v_attribute);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_attribute);
  __Pyx_INCREF(__pyx_v_parameter);
  __Pyx_GIVEREF(__pyx_v_parameter);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_parameter);
  __Pyx_INCREF(Py_True);
  __Pyx_GIVEREF(Py_True);
  PyTuple_SET_ITEM(__pyx_t_1, 3, Py_True);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9networkit_14sparsification_GlobalThresholdFilter), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 896, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_gf = ((struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "networkit/sparsification.pyx":897
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()             # <<<<<<<<<<<<<<
 * 
 * 	def _getParameterizationAlgorithm(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_gf), __pyx_n_s_calculate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 897, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 897, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":895
 * 		return a_sj
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.sparsification.SimmelianSparsifierNonParametric._getSparsifiedGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_gf);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":899
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_32SimmelianSparsifierNonParametric_5_getParameterizationAlgorithm(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_14sparsification_32SimmelianSparsifierNonParametric_5_getParameterizationAlgorithm = {"_getParameterizationAlgorithm", (PyCFunction)__pyx_pw_9networkit_14sparsification_32SimmelianSparsifierNonParametric_5_getParameterizationAlgorithm, METH_O, 0};
static PyObject *__pyx_pw_9networkit_14sparsification_32SimmelianSparsifierNonParametric_5_getParameterizationAlgorithm(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getParameterizationAlgorithm (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_32SimmelianSparsifierNonParametric_4_getParameterizationAlgorithm(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_32SimmelianSparsifierNonParametric_4_getParameterizationAlgorithm(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getParameterizationAlgorithm", 0);

  /* "networkit/sparsification.pyx":900
 * 
 * 	def _getParameterizationAlgorithm(self):
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)             # <<<<<<<<<<<<<<
 * 
 * class QuadrilateralSimmelianSparsifier(Sparsifier):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_BinarySearchParameterization); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 900, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 900, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":899
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.sparsification.SimmelianSparsifierNonParametric._getParameterizationAlgorithm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":905
 * 	""" An implementation of the Simmelian Sparsifiers based on quadrangles. """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns an edge scoring attribute that can be used for global filtering.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_32QuadrilateralSimmelianSparsifier_1scores(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_14sparsification_32QuadrilateralSimmelianSparsifier_scores[] = "\n\t\tReturns an edge scoring attribute that can be used for global filtering.\n\n\t\tKeyword arguments:\n\t\tG -- the input graph\n\t\t";
static PyMethodDef __pyx_mdef_9networkit_14sparsification_32QuadrilateralSimmelianSparsifier_1scores = {"scores", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_32QuadrilateralSimmelianSparsifier_1scores, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_14sparsification_32QuadrilateralSimmelianSparsifier_scores};
static PyObject *__pyx_pw_9networkit_14sparsification_32QuadrilateralSimmelianSparsifier_1scores(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_G = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scores (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_G,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scores", 1, 2, 2, 1); __PYX_ERR(0, 905, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "scores") < 0)) __PYX_ERR(0, 905, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_G = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("scores", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 905, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.QuadrilateralSimmelianSparsifier.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_32QuadrilateralSimmelianSparsifier_scores(__pyx_self, __pyx_v_self, __pyx_v_G);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_32QuadrilateralSimmelianSparsifier_scores(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G) {
  PyObject *__pyx_v_quadrangles = NULL;
  PyObject *__pyx_v_meanQuadrangles = NULL;
  PyObject *__pyx_v_quadranglePrefixJaccard = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("scores", 0);

  /* "networkit/sparsification.pyx":912
 * 		G -- the input graph
 * 		"""
 * 		quadrangles = ChibaNishizekiQuadrangleEdgeScore(G).run().scores()             # <<<<<<<<<<<<<<
 * 		meanQuadrangles = GeometricMeanScore(G, quadrangles).run().scores()
 * 		quadranglePrefixJaccard = PrefixJaccardScore(G, meanQuadrangles).run().scores()
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_9networkit_14sparsification_ChibaNishizekiQuadrangleEdgeScore), __pyx_v_G); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_run); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_scores); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_quadrangles = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":913
 * 		"""
 * 		quadrangles = ChibaNishizekiQuadrangleEdgeScore(G).run().scores()
 * 		meanQuadrangles = GeometricMeanScore(G, quadrangles).run().scores()             # <<<<<<<<<<<<<<
 * 		quadranglePrefixJaccard = PrefixJaccardScore(G, meanQuadrangles).run().scores()
 * 		return quadranglePrefixJaccard
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_G);
  __Pyx_GIVEREF(__pyx_v_G);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_G);
  __Pyx_INCREF(__pyx_v_quadrangles);
  __Pyx_GIVEREF(__pyx_v_quadrangles);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_quadrangles);
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9networkit_14sparsification_GeometricMeanScore), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_run); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_4 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_scores); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_meanQuadrangles = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":914
 * 		quadrangles = ChibaNishizekiQuadrangleEdgeScore(G).run().scores()
 * 		meanQuadrangles = GeometricMeanScore(G, quadrangles).run().scores()
 * 		quadranglePrefixJaccard = PrefixJaccardScore(G, meanQuadrangles).run().scores()             # <<<<<<<<<<<<<<
 * 		return quadranglePrefixJaccard
 * 
 */
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_G);
  __Pyx_GIVEREF(__pyx_v_G);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_G);
  __Pyx_INCREF(__pyx_v_meanQuadrangles);
  __Pyx_GIVEREF(__pyx_v_meanQuadrangles);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_meanQuadrangles);
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9networkit_14sparsification_PrefixJaccardScore), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_run); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_scores); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_quadranglePrefixJaccard = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":915
 * 		meanQuadrangles = GeometricMeanScore(G, quadrangles).run().scores()
 * 		quadranglePrefixJaccard = PrefixJaccardScore(G, meanQuadrangles).run().scores()
 * 		return quadranglePrefixJaccard             # <<<<<<<<<<<<<<
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_quadranglePrefixJaccard);
  __pyx_r = __pyx_v_quadranglePrefixJaccard;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":905
 * 	""" An implementation of the Simmelian Sparsifiers based on quadrangles. """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns an edge scoring attribute that can be used for global filtering.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("networkit.sparsification.QuadrilateralSimmelianSparsifier.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_quadrangles);
  __Pyx_XDECREF(__pyx_v_meanQuadrangles);
  __Pyx_XDECREF(__pyx_v_quadranglePrefixJaccard);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":917
 * 		return quadranglePrefixJaccard
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_32QuadrilateralSimmelianSparsifier_3_getSparsifiedGraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_14sparsification_32QuadrilateralSimmelianSparsifier_3_getSparsifiedGraph = {"_getSparsifiedGraph", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_32QuadrilateralSimmelianSparsifier_3_getSparsifiedGraph, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_14sparsification_32QuadrilateralSimmelianSparsifier_3_getSparsifiedGraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_G = 0;
  PyObject *__pyx_v_parameter = 0;
  PyObject *__pyx_v_attribute = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getSparsifiedGraph (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_G,&__pyx_n_s_parameter,&__pyx_n_s_attribute,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 1); __PYX_ERR(0, 917, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parameter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 2); __PYX_ERR(0, 917, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attribute)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 3); __PYX_ERR(0, 917, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_getSparsifiedGraph") < 0)) __PYX_ERR(0, 917, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_self = values[0];
    __pyx_v_G = values[1];
    __pyx_v_parameter = values[2];
    __pyx_v_attribute = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 917, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.QuadrilateralSimmelianSparsifier._getSparsifiedGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_32QuadrilateralSimmelianSparsifier_2_getSparsifiedGraph(__pyx_self, __pyx_v_self, __pyx_v_G, __pyx_v_parameter, __pyx_v_attribute);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_32QuadrilateralSimmelianSparsifier_2_getSparsifiedGraph(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G, PyObject *__pyx_v_parameter, PyObject *__pyx_v_attribute) {
  struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *__pyx_v_gf = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getSparsifiedGraph", 0);

  /* "networkit/sparsification.pyx":918
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)             # <<<<<<<<<<<<<<
 * 		return gf.calculate()
 * 
 */
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_G);
  __Pyx_GIVEREF(__pyx_v_G);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_G);
  __Pyx_INCREF(__pyx_v_attribute);
  __Pyx_GIVEREF(__pyx_v_attribute);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_attribute);
  __Pyx_INCREF(__pyx_v_parameter);
  __Pyx_GIVEREF(__pyx_v_parameter);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_parameter);
  __Pyx_INCREF(Py_True);
  __Pyx_GIVEREF(Py_True);
  PyTuple_SET_ITEM(__pyx_t_1, 3, Py_True);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9networkit_14sparsification_GlobalThresholdFilter), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_gf = ((struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "networkit/sparsification.pyx":919
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()             # <<<<<<<<<<<<<<
 * 
 * 	def _getParameterizationAlgorithm(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_gf), __pyx_n_s_calculate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 919, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 919, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":917
 * 		return quadranglePrefixJaccard
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.sparsification.QuadrilateralSimmelianSparsifier._getSparsifiedGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_gf);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":921
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_32QuadrilateralSimmelianSparsifier_5_getParameterizationAlgorithm(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_14sparsification_32QuadrilateralSimmelianSparsifier_5_getParameterizationAlgorithm = {"_getParameterizationAlgorithm", (PyCFunction)__pyx_pw_9networkit_14sparsification_32QuadrilateralSimmelianSparsifier_5_getParameterizationAlgorithm, METH_O, 0};
static PyObject *__pyx_pw_9networkit_14sparsification_32QuadrilateralSimmelianSparsifier_5_getParameterizationAlgorithm(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getParameterizationAlgorithm (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_32QuadrilateralSimmelianSparsifier_4_getParameterizationAlgorithm(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_32QuadrilateralSimmelianSparsifier_4_getParameterizationAlgorithm(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getParameterizationAlgorithm", 0);

  /* "networkit/sparsification.pyx":922
 * 
 * 	def _getParameterizationAlgorithm(self):
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)             # <<<<<<<<<<<<<<
 * 
 * class SimmelianMultiscaleSparsifier(Sparsifier):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_BinarySearchParameterization); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 922, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 922, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":921
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.sparsification.QuadrilateralSimmelianSparsifier._getParameterizationAlgorithm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":928
 * 	""" Multiscale Sparsifier that uses triangle counts as input edge weight. """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the maximum parameter value
 * 		such that the edge is contained in the sparsified graph.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_29SimmelianMultiscaleSparsifier_1scores(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_14sparsification_29SimmelianMultiscaleSparsifier_scores[] = " Returns an edge attribute that holds for each edge the maximum parameter value\n\t\tsuch that the edge is contained in the sparsified graph.\n\n\t\tKeyword arguments:\n\t\tG -- the input graph\n\t\t";
static PyMethodDef __pyx_mdef_9networkit_14sparsification_29SimmelianMultiscaleSparsifier_1scores = {"scores", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_29SimmelianMultiscaleSparsifier_1scores, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_14sparsification_29SimmelianMultiscaleSparsifier_scores};
static PyObject *__pyx_pw_9networkit_14sparsification_29SimmelianMultiscaleSparsifier_1scores(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_G = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scores (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_G,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scores", 1, 2, 2, 1); __PYX_ERR(0, 928, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "scores") < 0)) __PYX_ERR(0, 928, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_G = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("scores", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 928, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.SimmelianMultiscaleSparsifier.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_29SimmelianMultiscaleSparsifier_scores(__pyx_self, __pyx_v_self, __pyx_v_G);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_29SimmelianMultiscaleSparsifier_scores(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G) {
  PyObject *__pyx_v_triangles = NULL;
  struct __pyx_obj_9networkit_14sparsification_MultiscaleScore *__pyx_v_ms = NULL;
  PyObject *__pyx_v_a_ms = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("scores", 0);

  /* "networkit/sparsification.pyx":935
 * 		G -- the input graph
 * 		"""
 * 		triangles = TriangleEdgeScore(G).run().scores()             # <<<<<<<<<<<<<<
 * 		ms = MultiscaleScore(G, triangles)
 * 		ms.run()
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_9networkit_14sparsification_TriangleEdgeScore), __pyx_v_G); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 935, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_run); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 935, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 935, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_scores); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 935, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 935, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_triangles = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":936
 * 		"""
 * 		triangles = TriangleEdgeScore(G).run().scores()
 * 		ms = MultiscaleScore(G, triangles)             # <<<<<<<<<<<<<<
 * 		ms.run()
 * 		a_ms = ms.scores()
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 936, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_G);
  __Pyx_GIVEREF(__pyx_v_G);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_G);
  __Pyx_INCREF(__pyx_v_triangles);
  __Pyx_GIVEREF(__pyx_v_triangles);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_triangles);
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9networkit_14sparsification_MultiscaleScore), __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 936, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_ms = ((struct __pyx_obj_9networkit_14sparsification_MultiscaleScore *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":937
 * 		triangles = TriangleEdgeScore(G).run().scores()
 * 		ms = MultiscaleScore(G, triangles)
 * 		ms.run()             # <<<<<<<<<<<<<<
 * 		a_ms = ms.scores()
 * 		return a_ms
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ms), __pyx_n_s_run); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":938
 * 		ms = MultiscaleScore(G, triangles)
 * 		ms.run()
 * 		a_ms = ms.scores()             # <<<<<<<<<<<<<<
 * 		return a_ms
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ms), __pyx_n_s_scores); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 938, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 938, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_a_ms = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":939
 * 		ms.run()
 * 		a_ms = ms.scores()
 * 		return a_ms             # <<<<<<<<<<<<<<
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_a_ms);
  __pyx_r = __pyx_v_a_ms;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":928
 * 	""" Multiscale Sparsifier that uses triangle counts as input edge weight. """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the maximum parameter value
 * 		such that the edge is contained in the sparsified graph.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("networkit.sparsification.SimmelianMultiscaleSparsifier.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_triangles);
  __Pyx_XDECREF((PyObject *)__pyx_v_ms);
  __Pyx_XDECREF(__pyx_v_a_ms);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":941
 * 		return a_ms
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_29SimmelianMultiscaleSparsifier_3_getSparsifiedGraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_14sparsification_29SimmelianMultiscaleSparsifier_3_getSparsifiedGraph = {"_getSparsifiedGraph", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_29SimmelianMultiscaleSparsifier_3_getSparsifiedGraph, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_14sparsification_29SimmelianMultiscaleSparsifier_3_getSparsifiedGraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_G = 0;
  PyObject *__pyx_v_parameter = 0;
  PyObject *__pyx_v_attribute = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getSparsifiedGraph (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_G,&__pyx_n_s_parameter,&__pyx_n_s_attribute,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 1); __PYX_ERR(0, 941, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parameter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 2); __PYX_ERR(0, 941, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attribute)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 3); __PYX_ERR(0, 941, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_getSparsifiedGraph") < 0)) __PYX_ERR(0, 941, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_self = values[0];
    __pyx_v_G = values[1];
    __pyx_v_parameter = values[2];
    __pyx_v_attribute = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 941, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.SimmelianMultiscaleSparsifier._getSparsifiedGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_29SimmelianMultiscaleSparsifier_2_getSparsifiedGraph(__pyx_self, __pyx_v_self, __pyx_v_G, __pyx_v_parameter, __pyx_v_attribute);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_29SimmelianMultiscaleSparsifier_2_getSparsifiedGraph(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G, PyObject *__pyx_v_parameter, PyObject *__pyx_v_attribute) {
  struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *__pyx_v_gf = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getSparsifiedGraph", 0);

  /* "networkit/sparsification.pyx":942
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)             # <<<<<<<<<<<<<<
 * 		return gf.calculate()
 * 
 */
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 942, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_G);
  __Pyx_GIVEREF(__pyx_v_G);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_G);
  __Pyx_INCREF(__pyx_v_attribute);
  __Pyx_GIVEREF(__pyx_v_attribute);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_attribute);
  __Pyx_INCREF(__pyx_v_parameter);
  __Pyx_GIVEREF(__pyx_v_parameter);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_parameter);
  __Pyx_INCREF(Py_True);
  __Pyx_GIVEREF(Py_True);
  PyTuple_SET_ITEM(__pyx_t_1, 3, Py_True);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9networkit_14sparsification_GlobalThresholdFilter), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 942, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_gf = ((struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "networkit/sparsification.pyx":943
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()             # <<<<<<<<<<<<<<
 * 
 * 	def _getParameterizationAlgorithm(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_gf), __pyx_n_s_calculate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 943, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 943, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":941
 * 		return a_ms
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.sparsification.SimmelianMultiscaleSparsifier._getSparsifiedGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_gf);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":945
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_29SimmelianMultiscaleSparsifier_5_getParameterizationAlgorithm(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_14sparsification_29SimmelianMultiscaleSparsifier_5_getParameterizationAlgorithm = {"_getParameterizationAlgorithm", (PyCFunction)__pyx_pw_9networkit_14sparsification_29SimmelianMultiscaleSparsifier_5_getParameterizationAlgorithm, METH_O, 0};
static PyObject *__pyx_pw_9networkit_14sparsification_29SimmelianMultiscaleSparsifier_5_getParameterizationAlgorithm(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getParameterizationAlgorithm (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_29SimmelianMultiscaleSparsifier_4_getParameterizationAlgorithm(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_29SimmelianMultiscaleSparsifier_4_getParameterizationAlgorithm(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getParameterizationAlgorithm", 0);

  /* "networkit/sparsification.pyx":946
 * 
 * 	def _getParameterizationAlgorithm(self):
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)             # <<<<<<<<<<<<<<
 * 
 * class DegreeMultiscaleSparsifier(Sparsifier):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_BinarySearchParameterization); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 946, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 946, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":945
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.sparsification.SimmelianMultiscaleSparsifier._getParameterizationAlgorithm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":951
 * 	""" Multiscale Sparsifier that uses node degrees (mapped to edges) as input edge weight. """
 * 
 * 	def __init__(self, degsToAttrValue):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Creates a new instance of the Degree Multiscale sparsifier.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_26DegreeMultiscaleSparsifier_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_14sparsification_26DegreeMultiscaleSparsifier___init__[] = "\n\t\tCreates a new instance of the Degree Multiscale sparsifier.\n\t\tKeyword arguments:\n\t\tdegsToAttrValue -- function that maps two node degrees to an edge score.\n\t\t";
static PyMethodDef __pyx_mdef_9networkit_14sparsification_26DegreeMultiscaleSparsifier_1__init__ = {"__init__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_26DegreeMultiscaleSparsifier_1__init__, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_14sparsification_26DegreeMultiscaleSparsifier___init__};
static PyObject *__pyx_pw_9networkit_14sparsification_26DegreeMultiscaleSparsifier_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_degsToAttrValue = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_degsToAttrValue,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_degsToAttrValue)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(0, 951, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 951, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_degsToAttrValue = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 951, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.DegreeMultiscaleSparsifier.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_26DegreeMultiscaleSparsifier___init__(__pyx_self, __pyx_v_self, __pyx_v_degsToAttrValue);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_26DegreeMultiscaleSparsifier___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_degsToAttrValue) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "networkit/sparsification.pyx":957
 * 		degsToAttrValue -- function that maps two node degrees to an edge score.
 * 		"""
 * 		self.degsToAttrValue = degsToAttrValue             # <<<<<<<<<<<<<<
 * 
 * 	def scores(self, G):
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_degsToAttrValue, __pyx_v_degsToAttrValue) < 0) __PYX_ERR(0, 957, __pyx_L1_error)

  /* "networkit/sparsification.pyx":951
 * 	""" Multiscale Sparsifier that uses node degrees (mapped to edges) as input edge weight. """
 * 
 * 	def __init__(self, degsToAttrValue):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Creates a new instance of the Degree Multiscale sparsifier.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.sparsification.DegreeMultiscaleSparsifier.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":959
 * 		self.degsToAttrValue = degsToAttrValue
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the maximum parameter value
 * 		such that the edge is contained in the sparsified graph.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_26DegreeMultiscaleSparsifier_3scores(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_14sparsification_26DegreeMultiscaleSparsifier_2scores[] = " Returns an edge attribute that holds for each edge the maximum parameter value\n\t\tsuch that the edge is contained in the sparsified graph.\n\n\t\tKeyword arguments:\n\t\tG -- the input graph\n\t\t";
static PyMethodDef __pyx_mdef_9networkit_14sparsification_26DegreeMultiscaleSparsifier_3scores = {"scores", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_26DegreeMultiscaleSparsifier_3scores, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_14sparsification_26DegreeMultiscaleSparsifier_2scores};
static PyObject *__pyx_pw_9networkit_14sparsification_26DegreeMultiscaleSparsifier_3scores(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_G = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scores (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_G,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scores", 1, 2, 2, 1); __PYX_ERR(0, 959, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "scores") < 0)) __PYX_ERR(0, 959, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_G = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("scores", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 959, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.DegreeMultiscaleSparsifier.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_26DegreeMultiscaleSparsifier_2scores(__pyx_self, __pyx_v_self, __pyx_v_G);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_26DegreeMultiscaleSparsifier_2scores(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_G) {
  PyObject *__pyx_v_inputAttribute = NULL;
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_y = NULL;
  struct __pyx_obj_9networkit_14sparsification_MultiscaleScore *__pyx_v_ms = NULL;
  PyObject *__pyx_v_a_ms = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("scores", 0);

  /* "networkit/sparsification.pyx":967
 * 		"""
 * 
 * 		inputAttribute = [0] * G.upperEdgeIdBound()             # <<<<<<<<<<<<<<
 * 		for x, y in G.iterEdges():
 * 			inputAttribute[G.edgeId(x,y)] = self.degsToAttrValue(G.degree(x), G.degree(y))
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_G, __pyx_n_s_upperEdgeIdBound); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 967, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 967, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 967, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_int_0);
  { PyObject* __pyx_temp = PyNumber_InPlaceMultiply(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_temp)) __PYX_ERR(0, 967, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_temp);
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_temp;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_inputAttribute = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "networkit/sparsification.pyx":968
 * 
 * 		inputAttribute = [0] * G.upperEdgeIdBound()
 * 		for x, y in G.iterEdges():             # <<<<<<<<<<<<<<
 * 			inputAttribute[G.edgeId(x,y)] = self.degsToAttrValue(G.degree(x), G.degree(y))
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_G, __pyx_n_s_iterEdges); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 968, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 968, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 968, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 968, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 968, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 968, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 968, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 968, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 968, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 968, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 968, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 968, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 968, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_3)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 968, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 968, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_y, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "networkit/sparsification.pyx":969
 * 		inputAttribute = [0] * G.upperEdgeIdBound()
 * 		for x, y in G.iterEdges():
 * 			inputAttribute[G.edgeId(x,y)] = self.degsToAttrValue(G.degree(x), G.degree(y))             # <<<<<<<<<<<<<<
 * 
 * 		ms = MultiscaleScore(G, inputAttribute)
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_degsToAttrValue); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 969, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_G, __pyx_n_s_degree); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 969, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_3 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_9, __pyx_v_x) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_x);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 969, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_G, __pyx_n_s_degree); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 969, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_7 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_10, __pyx_v_y) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_y);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 969, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = NULL;
    __pyx_t_11 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_11 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_3, __pyx_t_7};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 969, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_3, __pyx_t_7};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 969, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    {
      __pyx_t_10 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 969, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      if (__pyx_t_9) {
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9); __pyx_t_9 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_11, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_11, __pyx_t_7);
      __pyx_t_3 = 0;
      __pyx_t_7 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_10, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 969, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_G, __pyx_n_s_edgeId); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 969, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_7 = NULL;
    __pyx_t_11 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_10);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_10, function);
        __pyx_t_11 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_10)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_v_x, __pyx_v_y};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 969, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_6);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_v_x, __pyx_v_y};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 969, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_6);
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 969, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_INCREF(__pyx_v_x);
      __Pyx_GIVEREF(__pyx_v_x);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_11, __pyx_v_x);
      __Pyx_INCREF(__pyx_v_y);
      __Pyx_GIVEREF(__pyx_v_y);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_11, __pyx_v_y);
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 969, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(PyObject_SetItem(__pyx_v_inputAttribute, __pyx_t_6, __pyx_t_2) < 0)) __PYX_ERR(0, 969, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "networkit/sparsification.pyx":968
 * 
 * 		inputAttribute = [0] * G.upperEdgeIdBound()
 * 		for x, y in G.iterEdges():             # <<<<<<<<<<<<<<
 * 			inputAttribute[G.edgeId(x,y)] = self.degsToAttrValue(G.degree(x), G.degree(y))
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":971
 * 			inputAttribute[G.edgeId(x,y)] = self.degsToAttrValue(G.degree(x), G.degree(y))
 * 
 * 		ms = MultiscaleScore(G, inputAttribute)             # <<<<<<<<<<<<<<
 * 		ms.run()
 * 		a_ms = ms.scores()
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 971, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_G);
  __Pyx_GIVEREF(__pyx_v_G);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_G);
  __Pyx_INCREF(__pyx_v_inputAttribute);
  __Pyx_GIVEREF(__pyx_v_inputAttribute);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_inputAttribute);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9networkit_14sparsification_MultiscaleScore), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 971, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_ms = ((struct __pyx_obj_9networkit_14sparsification_MultiscaleScore *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "networkit/sparsification.pyx":972
 * 
 * 		ms = MultiscaleScore(G, inputAttribute)
 * 		ms.run()             # <<<<<<<<<<<<<<
 * 		a_ms = ms.scores()
 * 		return a_ms
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ms), __pyx_n_s_run); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 972, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 972, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/sparsification.pyx":973
 * 		ms = MultiscaleScore(G, inputAttribute)
 * 		ms.run()
 * 		a_ms = ms.scores()             # <<<<<<<<<<<<<<
 * 		return a_ms
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ms), __pyx_n_s_scores); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 973, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 973, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_a_ms = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "networkit/sparsification.pyx":974
 * 		ms.run()
 * 		a_ms = ms.scores()
 * 		return a_ms             # <<<<<<<<<<<<<<
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_a_ms);
  __pyx_r = __pyx_v_a_ms;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":959
 * 		self.degsToAttrValue = degsToAttrValue
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the maximum parameter value
 * 		such that the edge is contained in the sparsified graph.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("networkit.sparsification.DegreeMultiscaleSparsifier.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_inputAttribute);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_XDECREF((PyObject *)__pyx_v_ms);
  __Pyx_XDECREF(__pyx_v_a_ms);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":976
 * 		return a_ms
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_26DegreeMultiscaleSparsifier_5_getSparsifiedGraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_14sparsification_26DegreeMultiscaleSparsifier_5_getSparsifiedGraph = {"_getSparsifiedGraph", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_26DegreeMultiscaleSparsifier_5_getSparsifiedGraph, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_14sparsification_26DegreeMultiscaleSparsifier_5_getSparsifiedGraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_G = 0;
  PyObject *__pyx_v_parameter = 0;
  PyObject *__pyx_v_attribute = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getSparsifiedGraph (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_G,&__pyx_n_s_parameter,&__pyx_n_s_attribute,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 1); __PYX_ERR(0, 976, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parameter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 2); __PYX_ERR(0, 976, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attribute)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 3); __PYX_ERR(0, 976, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_getSparsifiedGraph") < 0)) __PYX_ERR(0, 976, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_self = values[0];
    __pyx_v_G = values[1];
    __pyx_v_parameter = values[2];
    __pyx_v_attribute = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 976, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.DegreeMultiscaleSparsifier._getSparsifiedGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_26DegreeMultiscaleSparsifier_4_getSparsifiedGraph(__pyx_self, __pyx_v_self, __pyx_v_G, __pyx_v_parameter, __pyx_v_attribute);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_26DegreeMultiscaleSparsifier_4_getSparsifiedGraph(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G, PyObject *__pyx_v_parameter, PyObject *__pyx_v_attribute) {
  struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *__pyx_v_gf = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getSparsifiedGraph", 0);

  /* "networkit/sparsification.pyx":977
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)             # <<<<<<<<<<<<<<
 * 		return gf.calculate()
 * 
 */
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 977, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_G);
  __Pyx_GIVEREF(__pyx_v_G);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_G);
  __Pyx_INCREF(__pyx_v_attribute);
  __Pyx_GIVEREF(__pyx_v_attribute);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_attribute);
  __Pyx_INCREF(__pyx_v_parameter);
  __Pyx_GIVEREF(__pyx_v_parameter);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_parameter);
  __Pyx_INCREF(Py_True);
  __Pyx_GIVEREF(Py_True);
  PyTuple_SET_ITEM(__pyx_t_1, 3, Py_True);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9networkit_14sparsification_GlobalThresholdFilter), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 977, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_gf = ((struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "networkit/sparsification.pyx":978
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()             # <<<<<<<<<<<<<<
 * 
 * 	def _getParameterizationAlgorithm(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_gf), __pyx_n_s_calculate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":976
 * 		return a_ms
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.sparsification.DegreeMultiscaleSparsifier._getSparsifiedGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_gf);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":980
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_26DegreeMultiscaleSparsifier_7_getParameterizationAlgorithm(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_14sparsification_26DegreeMultiscaleSparsifier_7_getParameterizationAlgorithm = {"_getParameterizationAlgorithm", (PyCFunction)__pyx_pw_9networkit_14sparsification_26DegreeMultiscaleSparsifier_7_getParameterizationAlgorithm, METH_O, 0};
static PyObject *__pyx_pw_9networkit_14sparsification_26DegreeMultiscaleSparsifier_7_getParameterizationAlgorithm(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getParameterizationAlgorithm (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_26DegreeMultiscaleSparsifier_6_getParameterizationAlgorithm(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_26DegreeMultiscaleSparsifier_6_getParameterizationAlgorithm(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getParameterizationAlgorithm", 0);

  /* "networkit/sparsification.pyx":981
 * 
 * 	def _getParameterizationAlgorithm(self):
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)             # <<<<<<<<<<<<<<
 * 
 * class JaccardSimilaritySparsifier(Sparsifier):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_BinarySearchParameterization); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 981, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 981, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":980
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.sparsification.DegreeMultiscaleSparsifier._getParameterizationAlgorithm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":986
 * 	""" An implementation of the Jaccard Similarity sparsification approach introduced by Satuluri et al. """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns the jaccard coefficient of the neighborhoods of the two incident nodes """
 * 		triangles = TriangleEdgeScore(G).run().scores()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_27JaccardSimilaritySparsifier_1scores(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_14sparsification_27JaccardSimilaritySparsifier_scores[] = " Returns the jaccard coefficient of the neighborhoods of the two incident nodes ";
static PyMethodDef __pyx_mdef_9networkit_14sparsification_27JaccardSimilaritySparsifier_1scores = {"scores", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_27JaccardSimilaritySparsifier_1scores, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_14sparsification_27JaccardSimilaritySparsifier_scores};
static PyObject *__pyx_pw_9networkit_14sparsification_27JaccardSimilaritySparsifier_1scores(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_G = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scores (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_G,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scores", 1, 2, 2, 1); __PYX_ERR(0, 986, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "scores") < 0)) __PYX_ERR(0, 986, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_G = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("scores", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 986, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.JaccardSimilaritySparsifier.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_27JaccardSimilaritySparsifier_scores(__pyx_self, __pyx_v_self, __pyx_v_G);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_27JaccardSimilaritySparsifier_scores(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G) {
  PyObject *__pyx_v_triangles = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("scores", 0);

  /* "networkit/sparsification.pyx":988
 * 	def scores(self, G):
 * 		""" Returns the jaccard coefficient of the neighborhoods of the two incident nodes """
 * 		triangles = TriangleEdgeScore(G).run().scores()             # <<<<<<<<<<<<<<
 * 		return JaccardSimilarityAttributizer(G, triangles).getAttribute()
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_9networkit_14sparsification_TriangleEdgeScore), __pyx_v_G); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 988, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_run); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 988, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 988, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_scores); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 988, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 988, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_triangles = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":989
 * 		""" Returns the jaccard coefficient of the neighborhoods of the two incident nodes """
 * 		triangles = TriangleEdgeScore(G).run().scores()
 * 		return JaccardSimilarityAttributizer(G, triangles).getAttribute()             # <<<<<<<<<<<<<<
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_JaccardSimilarityAttributizer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 989, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_G, __pyx_v_triangles};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 989, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_G, __pyx_v_triangles};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 989, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 989, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_G);
    __Pyx_GIVEREF(__pyx_v_G);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_G);
    __Pyx_INCREF(__pyx_v_triangles);
    __Pyx_GIVEREF(__pyx_v_triangles);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_triangles);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 989, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_getAttribute); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 989, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 989, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":986
 * 	""" An implementation of the Jaccard Similarity sparsification approach introduced by Satuluri et al. """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns the jaccard coefficient of the neighborhoods of the two incident nodes """
 * 		triangles = TriangleEdgeScore(G).run().scores()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("networkit.sparsification.JaccardSimilaritySparsifier.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_triangles);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":991
 * 		return JaccardSimilarityAttributizer(G, triangles).getAttribute()
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_27JaccardSimilaritySparsifier_3_getSparsifiedGraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_14sparsification_27JaccardSimilaritySparsifier_3_getSparsifiedGraph = {"_getSparsifiedGraph", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_27JaccardSimilaritySparsifier_3_getSparsifiedGraph, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_14sparsification_27JaccardSimilaritySparsifier_3_getSparsifiedGraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_G = 0;
  PyObject *__pyx_v_parameter = 0;
  PyObject *__pyx_v_attribute = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getSparsifiedGraph (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_G,&__pyx_n_s_parameter,&__pyx_n_s_attribute,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 1); __PYX_ERR(0, 991, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parameter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 2); __PYX_ERR(0, 991, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attribute)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 3); __PYX_ERR(0, 991, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_getSparsifiedGraph") < 0)) __PYX_ERR(0, 991, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_self = values[0];
    __pyx_v_G = values[1];
    __pyx_v_parameter = values[2];
    __pyx_v_attribute = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 991, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.JaccardSimilaritySparsifier._getSparsifiedGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_27JaccardSimilaritySparsifier_2_getSparsifiedGraph(__pyx_self, __pyx_v_self, __pyx_v_G, __pyx_v_parameter, __pyx_v_attribute);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_27JaccardSimilaritySparsifier_2_getSparsifiedGraph(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G, PyObject *__pyx_v_parameter, PyObject *__pyx_v_attribute) {
  struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *__pyx_v_gf = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getSparsifiedGraph", 0);

  /* "networkit/sparsification.pyx":992
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)             # <<<<<<<<<<<<<<
 * 		return gf.calculate()
 * 
 */
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 992, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_G);
  __Pyx_GIVEREF(__pyx_v_G);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_G);
  __Pyx_INCREF(__pyx_v_attribute);
  __Pyx_GIVEREF(__pyx_v_attribute);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_attribute);
  __Pyx_INCREF(__pyx_v_parameter);
  __Pyx_GIVEREF(__pyx_v_parameter);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_parameter);
  __Pyx_INCREF(Py_True);
  __Pyx_GIVEREF(Py_True);
  PyTuple_SET_ITEM(__pyx_t_1, 3, Py_True);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9networkit_14sparsification_GlobalThresholdFilter), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 992, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_gf = ((struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "networkit/sparsification.pyx":993
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()             # <<<<<<<<<<<<<<
 * 
 * 	def _getParameterizationAlgorithm(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_gf), __pyx_n_s_calculate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 993, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 993, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":991
 * 		return JaccardSimilarityAttributizer(G, triangles).getAttribute()
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.sparsification.JaccardSimilaritySparsifier._getSparsifiedGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_gf);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":995
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_27JaccardSimilaritySparsifier_5_getParameterizationAlgorithm(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_14sparsification_27JaccardSimilaritySparsifier_5_getParameterizationAlgorithm = {"_getParameterizationAlgorithm", (PyCFunction)__pyx_pw_9networkit_14sparsification_27JaccardSimilaritySparsifier_5_getParameterizationAlgorithm, METH_O, 0};
static PyObject *__pyx_pw_9networkit_14sparsification_27JaccardSimilaritySparsifier_5_getParameterizationAlgorithm(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getParameterizationAlgorithm (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_27JaccardSimilaritySparsifier_4_getParameterizationAlgorithm(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_27JaccardSimilaritySparsifier_4_getParameterizationAlgorithm(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getParameterizationAlgorithm", 0);

  /* "networkit/sparsification.pyx":996
 * 
 * 	def _getParameterizationAlgorithm(self):
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_BinarySearchParameterization); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 996, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 996, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":995
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.sparsification.JaccardSimilaritySparsifier._getParameterizationAlgorithm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":1003
 * 	""" An implementation of the Local Similarity sparsification approach introduced by Satuluri et al. """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the minimum parameter value
 * 		such that the edge is contained in the sparsified graph.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_25LocalSimilaritySparsifier_1scores(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_14sparsification_25LocalSimilaritySparsifier_scores[] = " Returns an edge attribute that holds for each edge the minimum parameter value\n\t\tsuch that the edge is contained in the sparsified graph.\n\n\t\tKeyword arguments:\n\t\tG -- the input graph\n\t\t";
static PyMethodDef __pyx_mdef_9networkit_14sparsification_25LocalSimilaritySparsifier_1scores = {"scores", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_25LocalSimilaritySparsifier_1scores, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_14sparsification_25LocalSimilaritySparsifier_scores};
static PyObject *__pyx_pw_9networkit_14sparsification_25LocalSimilaritySparsifier_1scores(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_G = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scores (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_G,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scores", 1, 2, 2, 1); __PYX_ERR(0, 1003, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "scores") < 0)) __PYX_ERR(0, 1003, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_G = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("scores", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1003, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.LocalSimilaritySparsifier.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_25LocalSimilaritySparsifier_scores(__pyx_self, __pyx_v_self, __pyx_v_G);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_25LocalSimilaritySparsifier_scores(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G) {
  PyObject *__pyx_v_triangles = NULL;
  struct __pyx_obj_9networkit_14sparsification_LocalSimilarityScore *__pyx_v_localSimScore = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("scores", 0);

  /* "networkit/sparsification.pyx":1010
 * 		G -- the input graph
 * 		"""
 * 		triangles = TriangleEdgeScore(G).run().scores()             # <<<<<<<<<<<<<<
 * 		localSimScore = LocalSimilarityScore(G, triangles)
 * 		localSimScore.run()
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_9networkit_14sparsification_TriangleEdgeScore), __pyx_v_G); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1010, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_run); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1010, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1010, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_scores); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1010, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1010, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_triangles = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":1011
 * 		"""
 * 		triangles = TriangleEdgeScore(G).run().scores()
 * 		localSimScore = LocalSimilarityScore(G, triangles)             # <<<<<<<<<<<<<<
 * 		localSimScore.run()
 * 		return localSimScore.scores()
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1011, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_G);
  __Pyx_GIVEREF(__pyx_v_G);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_G);
  __Pyx_INCREF(__pyx_v_triangles);
  __Pyx_GIVEREF(__pyx_v_triangles);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_triangles);
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9networkit_14sparsification_LocalSimilarityScore), __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1011, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_localSimScore = ((struct __pyx_obj_9networkit_14sparsification_LocalSimilarityScore *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":1012
 * 		triangles = TriangleEdgeScore(G).run().scores()
 * 		localSimScore = LocalSimilarityScore(G, triangles)
 * 		localSimScore.run()             # <<<<<<<<<<<<<<
 * 		return localSimScore.scores()
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_localSimScore), __pyx_n_s_run); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":1013
 * 		localSimScore = LocalSimilarityScore(G, triangles)
 * 		localSimScore.run()
 * 		return localSimScore.scores()             # <<<<<<<<<<<<<<
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_localSimScore), __pyx_n_s_scores); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":1003
 * 	""" An implementation of the Local Similarity sparsification approach introduced by Satuluri et al. """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the minimum parameter value
 * 		such that the edge is contained in the sparsified graph.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("networkit.sparsification.LocalSimilaritySparsifier.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_triangles);
  __Pyx_XDECREF((PyObject *)__pyx_v_localSimScore);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":1015
 * 		return localSimScore.scores()
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_25LocalSimilaritySparsifier_3_getSparsifiedGraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_14sparsification_25LocalSimilaritySparsifier_3_getSparsifiedGraph = {"_getSparsifiedGraph", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_25LocalSimilaritySparsifier_3_getSparsifiedGraph, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_14sparsification_25LocalSimilaritySparsifier_3_getSparsifiedGraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_G = 0;
  PyObject *__pyx_v_parameter = 0;
  PyObject *__pyx_v_attribute = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getSparsifiedGraph (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_G,&__pyx_n_s_parameter,&__pyx_n_s_attribute,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 1); __PYX_ERR(0, 1015, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parameter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 2); __PYX_ERR(0, 1015, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attribute)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 3); __PYX_ERR(0, 1015, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_getSparsifiedGraph") < 0)) __PYX_ERR(0, 1015, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_self = values[0];
    __pyx_v_G = values[1];
    __pyx_v_parameter = values[2];
    __pyx_v_attribute = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1015, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.LocalSimilaritySparsifier._getSparsifiedGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_25LocalSimilaritySparsifier_2_getSparsifiedGraph(__pyx_self, __pyx_v_self, __pyx_v_G, __pyx_v_parameter, __pyx_v_attribute);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_25LocalSimilaritySparsifier_2_getSparsifiedGraph(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G, PyObject *__pyx_v_parameter, PyObject *__pyx_v_attribute) {
  struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *__pyx_v_gf = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getSparsifiedGraph", 0);

  /* "networkit/sparsification.pyx":1016
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)             # <<<<<<<<<<<<<<
 * 		return gf.calculate()
 * 
 */
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1016, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_G);
  __Pyx_GIVEREF(__pyx_v_G);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_G);
  __Pyx_INCREF(__pyx_v_attribute);
  __Pyx_GIVEREF(__pyx_v_attribute);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_attribute);
  __Pyx_INCREF(__pyx_v_parameter);
  __Pyx_GIVEREF(__pyx_v_parameter);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_parameter);
  __Pyx_INCREF(Py_True);
  __Pyx_GIVEREF(Py_True);
  PyTuple_SET_ITEM(__pyx_t_1, 3, Py_True);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9networkit_14sparsification_GlobalThresholdFilter), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1016, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_gf = ((struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "networkit/sparsification.pyx":1017
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()             # <<<<<<<<<<<<<<
 * 
 * 	def _getParameterizationAlgorithm(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_gf), __pyx_n_s_calculate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1017, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1017, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":1015
 * 		return localSimScore.scores()
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.sparsification.LocalSimilaritySparsifier._getSparsifiedGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_gf);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":1019
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_25LocalSimilaritySparsifier_5_getParameterizationAlgorithm(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_14sparsification_25LocalSimilaritySparsifier_5_getParameterizationAlgorithm = {"_getParameterizationAlgorithm", (PyCFunction)__pyx_pw_9networkit_14sparsification_25LocalSimilaritySparsifier_5_getParameterizationAlgorithm, METH_O, 0};
static PyObject *__pyx_pw_9networkit_14sparsification_25LocalSimilaritySparsifier_5_getParameterizationAlgorithm(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getParameterizationAlgorithm (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_25LocalSimilaritySparsifier_4_getParameterizationAlgorithm(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_25LocalSimilaritySparsifier_4_getParameterizationAlgorithm(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getParameterizationAlgorithm", 0);

  /* "networkit/sparsification.pyx":1020
 * 
 * 	def _getParameterizationAlgorithm(self):
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)             # <<<<<<<<<<<<<<
 * 
 * class MultiscaleSparsifier(Sparsifier):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_BinarySearchParameterization); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1020, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1020, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":1019
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.sparsification.LocalSimilaritySparsifier._getParameterizationAlgorithm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":1026
 * 	""" An implementation of the Multiscale backbone approach introduced by Serrano et al. """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the minimum parameter value
 * 		such that the edge is contained in the sparsified graph.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_20MultiscaleSparsifier_1scores(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_14sparsification_20MultiscaleSparsifier_scores[] = " Returns an edge attribute that holds for each edge the minimum parameter value\n\t\tsuch that the edge is contained in the sparsified graph.\n\n\t\tKeyword arguments:\n\t\tG -- the input graph\n\t\t";
static PyMethodDef __pyx_mdef_9networkit_14sparsification_20MultiscaleSparsifier_1scores = {"scores", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_20MultiscaleSparsifier_1scores, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_14sparsification_20MultiscaleSparsifier_scores};
static PyObject *__pyx_pw_9networkit_14sparsification_20MultiscaleSparsifier_1scores(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_G = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scores (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_G,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scores", 1, 2, 2, 1); __PYX_ERR(0, 1026, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "scores") < 0)) __PYX_ERR(0, 1026, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_G = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("scores", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1026, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.MultiscaleSparsifier.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_20MultiscaleSparsifier_scores(__pyx_self, __pyx_v_self, __pyx_v_G);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_20MultiscaleSparsifier_scores(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G) {
  PyObject *__pyx_v_inputAttribute = NULL;
  PyObject *__pyx_v_u = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_v_w = NULL;
  PyObject *__pyx_v_edgeId = NULL;
  struct __pyx_obj_9networkit_14sparsification_MultiscaleScore *__pyx_v_scorer = NULL;
  PyObject *__pyx_v_scores = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("scores", 0);

  /* "networkit/sparsification.pyx":1034
 * 		"""
 * 
 * 		inputAttribute = [0.0] * G.upperEdgeIdBound()             # <<<<<<<<<<<<<<
 * 		for u, v, w in G.iterEdgesWeights():
 * 			edgeId = G.edgeId(u, v)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_G, __pyx_n_s_upperEdgeIdBound); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1034, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1034, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1034, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_float_0_0);
  { PyObject* __pyx_temp = PyNumber_InPlaceMultiply(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_temp)) __PYX_ERR(0, 1034, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_temp);
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_temp;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_inputAttribute = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "networkit/sparsification.pyx":1035
 * 
 * 		inputAttribute = [0.0] * G.upperEdgeIdBound()
 * 		for u, v, w in G.iterEdgesWeights():             # <<<<<<<<<<<<<<
 * 			edgeId = G.edgeId(u, v)
 * 			inputAttribute[edgeId] = w
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_G, __pyx_n_s_iterEdgesWeights); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1035, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1035, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1035, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1035, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 1035, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1035, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 1035, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1035, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1035, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 3)) {
        if (size > 3) __Pyx_RaiseTooManyValuesError(3);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1035, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 2); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 2); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1035, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1035, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1035, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1035, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_3)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_6 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      index = 2; __pyx_t_7 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 3) < 0) __PYX_ERR(0, 1035, __pyx_L1_error)
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1035, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_u, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_w, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "networkit/sparsification.pyx":1036
 * 		inputAttribute = [0.0] * G.upperEdgeIdBound()
 * 		for u, v, w in G.iterEdgesWeights():
 * 			edgeId = G.edgeId(u, v)             # <<<<<<<<<<<<<<
 * 			inputAttribute[edgeId] = w
 * 
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_G, __pyx_n_s_edgeId); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1036, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_10 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_v_u, __pyx_v_v};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1036, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_v_u, __pyx_v_v};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1036, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1036, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_6) {
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6); __pyx_t_6 = NULL;
      }
      __Pyx_INCREF(__pyx_v_u);
      __Pyx_GIVEREF(__pyx_v_u);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_10, __pyx_v_u);
      __Pyx_INCREF(__pyx_v_v);
      __Pyx_GIVEREF(__pyx_v_v);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_10, __pyx_v_v);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1036, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_edgeId, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "networkit/sparsification.pyx":1037
 * 		for u, v, w in G.iterEdgesWeights():
 * 			edgeId = G.edgeId(u, v)
 * 			inputAttribute[edgeId] = w             # <<<<<<<<<<<<<<
 * 
 * 		scorer = MultiscaleScore(G, inputAttribute)
 */
    if (unlikely(PyObject_SetItem(__pyx_v_inputAttribute, __pyx_v_edgeId, __pyx_v_w) < 0)) __PYX_ERR(0, 1037, __pyx_L1_error)

    /* "networkit/sparsification.pyx":1035
 * 
 * 		inputAttribute = [0.0] * G.upperEdgeIdBound()
 * 		for u, v, w in G.iterEdgesWeights():             # <<<<<<<<<<<<<<
 * 			edgeId = G.edgeId(u, v)
 * 			inputAttribute[edgeId] = w
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":1039
 * 			inputAttribute[edgeId] = w
 * 
 * 		scorer = MultiscaleScore(G, inputAttribute)             # <<<<<<<<<<<<<<
 * 		scorer.run()
 * 		scores = scorer.scores()
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1039, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_G);
  __Pyx_GIVEREF(__pyx_v_G);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_G);
  __Pyx_INCREF(__pyx_v_inputAttribute);
  __Pyx_GIVEREF(__pyx_v_inputAttribute);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_inputAttribute);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9networkit_14sparsification_MultiscaleScore), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1039, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_scorer = ((struct __pyx_obj_9networkit_14sparsification_MultiscaleScore *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "networkit/sparsification.pyx":1040
 * 
 * 		scorer = MultiscaleScore(G, inputAttribute)
 * 		scorer.run()             # <<<<<<<<<<<<<<
 * 		scores = scorer.scores()
 * 		return scores
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_scorer), __pyx_n_s_run); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1040, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1040, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/sparsification.pyx":1041
 * 		scorer = MultiscaleScore(G, inputAttribute)
 * 		scorer.run()
 * 		scores = scorer.scores()             # <<<<<<<<<<<<<<
 * 		return scores
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_scorer), __pyx_n_s_scores); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1041, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1041, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_scores = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "networkit/sparsification.pyx":1042
 * 		scorer.run()
 * 		scores = scorer.scores()
 * 		return scores             # <<<<<<<<<<<<<<
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_scores);
  __pyx_r = __pyx_v_scores;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":1026
 * 	""" An implementation of the Multiscale backbone approach introduced by Serrano et al. """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the minimum parameter value
 * 		such that the edge is contained in the sparsified graph.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("networkit.sparsification.MultiscaleSparsifier.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_inputAttribute);
  __Pyx_XDECREF(__pyx_v_u);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XDECREF(__pyx_v_w);
  __Pyx_XDECREF(__pyx_v_edgeId);
  __Pyx_XDECREF((PyObject *)__pyx_v_scorer);
  __Pyx_XDECREF(__pyx_v_scores);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":1044
 * 		return scores
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_20MultiscaleSparsifier_3_getSparsifiedGraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_14sparsification_20MultiscaleSparsifier_3_getSparsifiedGraph = {"_getSparsifiedGraph", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_20MultiscaleSparsifier_3_getSparsifiedGraph, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_14sparsification_20MultiscaleSparsifier_3_getSparsifiedGraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_G = 0;
  PyObject *__pyx_v_parameter = 0;
  PyObject *__pyx_v_attribute = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getSparsifiedGraph (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_G,&__pyx_n_s_parameter,&__pyx_n_s_attribute,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 1); __PYX_ERR(0, 1044, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parameter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 2); __PYX_ERR(0, 1044, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attribute)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 3); __PYX_ERR(0, 1044, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_getSparsifiedGraph") < 0)) __PYX_ERR(0, 1044, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_self = values[0];
    __pyx_v_G = values[1];
    __pyx_v_parameter = values[2];
    __pyx_v_attribute = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1044, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.MultiscaleSparsifier._getSparsifiedGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_20MultiscaleSparsifier_2_getSparsifiedGraph(__pyx_self, __pyx_v_self, __pyx_v_G, __pyx_v_parameter, __pyx_v_attribute);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_20MultiscaleSparsifier_2_getSparsifiedGraph(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G, PyObject *__pyx_v_parameter, PyObject *__pyx_v_attribute) {
  struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *__pyx_v_gf = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getSparsifiedGraph", 0);

  /* "networkit/sparsification.pyx":1045
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)             # <<<<<<<<<<<<<<
 * 		return gf.calculate()
 * 
 */
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1045, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_G);
  __Pyx_GIVEREF(__pyx_v_G);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_G);
  __Pyx_INCREF(__pyx_v_attribute);
  __Pyx_GIVEREF(__pyx_v_attribute);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_attribute);
  __Pyx_INCREF(__pyx_v_parameter);
  __Pyx_GIVEREF(__pyx_v_parameter);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_parameter);
  __Pyx_INCREF(Py_True);
  __Pyx_GIVEREF(Py_True);
  PyTuple_SET_ITEM(__pyx_t_1, 3, Py_True);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9networkit_14sparsification_GlobalThresholdFilter), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1045, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_gf = ((struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "networkit/sparsification.pyx":1046
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()             # <<<<<<<<<<<<<<
 * 
 * 	def _getParameterizationAlgorithm(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_gf), __pyx_n_s_calculate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1046, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1046, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":1044
 * 		return scores
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.sparsification.MultiscaleSparsifier._getSparsifiedGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_gf);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":1048
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_20MultiscaleSparsifier_5_getParameterizationAlgorithm(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_14sparsification_20MultiscaleSparsifier_5_getParameterizationAlgorithm = {"_getParameterizationAlgorithm", (PyCFunction)__pyx_pw_9networkit_14sparsification_20MultiscaleSparsifier_5_getParameterizationAlgorithm, METH_O, 0};
static PyObject *__pyx_pw_9networkit_14sparsification_20MultiscaleSparsifier_5_getParameterizationAlgorithm(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getParameterizationAlgorithm (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_20MultiscaleSparsifier_4_getParameterizationAlgorithm(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_20MultiscaleSparsifier_4_getParameterizationAlgorithm(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getParameterizationAlgorithm", 0);

  /* "networkit/sparsification.pyx":1049
 * 
 * 	def _getParameterizationAlgorithm(self):
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)             # <<<<<<<<<<<<<<
 * 
 * class RandomEdgeSparsifier(Sparsifier):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_BinarySearchParameterization); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1049, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1049, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":1048
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.sparsification.MultiscaleSparsifier._getParameterizationAlgorithm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":1055
 * 	""" Random Edge sampling. Edges to keep in the sparsified graph are selected uniformly at random. """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the minimum parameter value
 * 		such that the edge is contained in the sparsified graph.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_20RandomEdgeSparsifier_1scores(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_14sparsification_20RandomEdgeSparsifier_scores[] = " Returns an edge attribute that holds for each edge the minimum parameter value\n\t\tsuch that the edge is contained in the sparsified graph.\n\n\t\tKeyword arguments:\n\t\tG -- the input graph\n\t\t";
static PyMethodDef __pyx_mdef_9networkit_14sparsification_20RandomEdgeSparsifier_1scores = {"scores", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_20RandomEdgeSparsifier_1scores, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_14sparsification_20RandomEdgeSparsifier_scores};
static PyObject *__pyx_pw_9networkit_14sparsification_20RandomEdgeSparsifier_1scores(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_G = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scores (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_G,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scores", 1, 2, 2, 1); __PYX_ERR(0, 1055, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "scores") < 0)) __PYX_ERR(0, 1055, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_G = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("scores", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1055, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.RandomEdgeSparsifier.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_20RandomEdgeSparsifier_scores(__pyx_self, __pyx_v_self, __pyx_v_G);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_20RandomEdgeSparsifier_scores(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G) {
  struct __pyx_obj_9networkit_14sparsification_RandomEdgeScore *__pyx_v_reScore = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("scores", 0);

  /* "networkit/sparsification.pyx":1063
 * 		"""
 * 
 * 		reScore = RandomEdgeScore(G)             # <<<<<<<<<<<<<<
 * 		reScore.run()
 * 		return reScore.scores()
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_9networkit_14sparsification_RandomEdgeScore), __pyx_v_G); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1063, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_reScore = ((struct __pyx_obj_9networkit_14sparsification_RandomEdgeScore *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":1064
 * 
 * 		reScore = RandomEdgeScore(G)
 * 		reScore.run()             # <<<<<<<<<<<<<<
 * 		return reScore.scores()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_reScore), __pyx_n_s_run); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1064, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1064, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":1065
 * 		reScore = RandomEdgeScore(G)
 * 		reScore.run()
 * 		return reScore.scores()             # <<<<<<<<<<<<<<
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_reScore), __pyx_n_s_scores); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1065, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1065, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":1055
 * 	""" Random Edge sampling. Edges to keep in the sparsified graph are selected uniformly at random. """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the minimum parameter value
 * 		such that the edge is contained in the sparsified graph.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.sparsification.RandomEdgeSparsifier.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_reScore);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":1067
 * 		return reScore.scores()
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, False)
 * 		return gf.calculate()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_20RandomEdgeSparsifier_3_getSparsifiedGraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_14sparsification_20RandomEdgeSparsifier_3_getSparsifiedGraph = {"_getSparsifiedGraph", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_20RandomEdgeSparsifier_3_getSparsifiedGraph, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_14sparsification_20RandomEdgeSparsifier_3_getSparsifiedGraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_G = 0;
  PyObject *__pyx_v_parameter = 0;
  PyObject *__pyx_v_attribute = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getSparsifiedGraph (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_G,&__pyx_n_s_parameter,&__pyx_n_s_attribute,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 1); __PYX_ERR(0, 1067, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parameter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 2); __PYX_ERR(0, 1067, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attribute)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 3); __PYX_ERR(0, 1067, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_getSparsifiedGraph") < 0)) __PYX_ERR(0, 1067, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_self = values[0];
    __pyx_v_G = values[1];
    __pyx_v_parameter = values[2];
    __pyx_v_attribute = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1067, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.RandomEdgeSparsifier._getSparsifiedGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_20RandomEdgeSparsifier_2_getSparsifiedGraph(__pyx_self, __pyx_v_self, __pyx_v_G, __pyx_v_parameter, __pyx_v_attribute);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_20RandomEdgeSparsifier_2_getSparsifiedGraph(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G, PyObject *__pyx_v_parameter, PyObject *__pyx_v_attribute) {
  struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *__pyx_v_gf = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getSparsifiedGraph", 0);

  /* "networkit/sparsification.pyx":1068
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, False)             # <<<<<<<<<<<<<<
 * 		return gf.calculate()
 * 
 */
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1068, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_G);
  __Pyx_GIVEREF(__pyx_v_G);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_G);
  __Pyx_INCREF(__pyx_v_attribute);
  __Pyx_GIVEREF(__pyx_v_attribute);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_attribute);
  __Pyx_INCREF(__pyx_v_parameter);
  __Pyx_GIVEREF(__pyx_v_parameter);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_parameter);
  __Pyx_INCREF(Py_False);
  __Pyx_GIVEREF(Py_False);
  PyTuple_SET_ITEM(__pyx_t_1, 3, Py_False);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9networkit_14sparsification_GlobalThresholdFilter), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1068, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_gf = ((struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "networkit/sparsification.pyx":1069
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, False)
 * 		return gf.calculate()             # <<<<<<<<<<<<<<
 * 
 * 	def _getParameterizationAlgorithm(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_gf), __pyx_n_s_calculate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":1067
 * 		return reScore.scores()
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, False)
 * 		return gf.calculate()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.sparsification.RandomEdgeSparsifier._getSparsifiedGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_gf);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":1071
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return SimpleParameterization()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_20RandomEdgeSparsifier_5_getParameterizationAlgorithm(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_14sparsification_20RandomEdgeSparsifier_5_getParameterizationAlgorithm = {"_getParameterizationAlgorithm", (PyCFunction)__pyx_pw_9networkit_14sparsification_20RandomEdgeSparsifier_5_getParameterizationAlgorithm, METH_O, 0};
static PyObject *__pyx_pw_9networkit_14sparsification_20RandomEdgeSparsifier_5_getParameterizationAlgorithm(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getParameterizationAlgorithm (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_20RandomEdgeSparsifier_4_getParameterizationAlgorithm(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_20RandomEdgeSparsifier_4_getParameterizationAlgorithm(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getParameterizationAlgorithm", 0);

  /* "networkit/sparsification.pyx":1072
 * 
 * 	def _getParameterizationAlgorithm(self):
 * 		return SimpleParameterization()             # <<<<<<<<<<<<<<
 * 
 * class RandomNodeEdgeSparsifier(Sparsifier):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_SimpleParameterization); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1072, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1072, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":1071
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return SimpleParameterization()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.sparsification.RandomEdgeSparsifier._getParameterizationAlgorithm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":1077
 * 	""" [TODO not yet documented] """
 * 
 * 	def __init__(self, above = True):             # <<<<<<<<<<<<<<
 * 		self.above = above
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_24RandomNodeEdgeSparsifier_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_14sparsification_24RandomNodeEdgeSparsifier_1__init__ = {"__init__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_24RandomNodeEdgeSparsifier_1__init__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_14sparsification_24RandomNodeEdgeSparsifier_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_above = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_above,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)((PyObject *)Py_True));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_above);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 1077, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_above = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1077, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.RandomNodeEdgeSparsifier.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_24RandomNodeEdgeSparsifier___init__(__pyx_self, __pyx_v_self, __pyx_v_above);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_24RandomNodeEdgeSparsifier___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_above) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "networkit/sparsification.pyx":1078
 * 
 * 	def __init__(self, above = True):
 * 		self.above = above             # <<<<<<<<<<<<<<
 * 
 * 	def scores(self, G):
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_above, __pyx_v_above) < 0) __PYX_ERR(0, 1078, __pyx_L1_error)

  /* "networkit/sparsification.pyx":1077
 * 	""" [TODO not yet documented] """
 * 
 * 	def __init__(self, above = True):             # <<<<<<<<<<<<<<
 * 		self.above = above
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.sparsification.RandomNodeEdgeSparsifier.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":1080
 * 		self.above = above
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the minimum parameter value
 * 		such that the edge is contained in the sparsified graph.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_24RandomNodeEdgeSparsifier_3scores(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_14sparsification_24RandomNodeEdgeSparsifier_2scores[] = " Returns an edge attribute that holds for each edge the minimum parameter value\n\t\tsuch that the edge is contained in the sparsified graph.\n\n\t\tKeyword arguments:\n\t\tG -- the input graph\n\t\t";
static PyMethodDef __pyx_mdef_9networkit_14sparsification_24RandomNodeEdgeSparsifier_3scores = {"scores", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_24RandomNodeEdgeSparsifier_3scores, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_14sparsification_24RandomNodeEdgeSparsifier_2scores};
static PyObject *__pyx_pw_9networkit_14sparsification_24RandomNodeEdgeSparsifier_3scores(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_G = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scores (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_G,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scores", 1, 2, 2, 1); __PYX_ERR(0, 1080, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "scores") < 0)) __PYX_ERR(0, 1080, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_G = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("scores", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1080, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.RandomNodeEdgeSparsifier.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_24RandomNodeEdgeSparsifier_2scores(__pyx_self, __pyx_v_self, __pyx_v_G);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_24RandomNodeEdgeSparsifier_2scores(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G) {
  struct __pyx_obj_9networkit_14sparsification_RandomNodeEdgeScore *__pyx_v_rneScore = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("scores", 0);

  /* "networkit/sparsification.pyx":1088
 * 		"""
 * 
 * 		rneScore = RandomNodeEdgeScore(G)             # <<<<<<<<<<<<<<
 * 		rneScore.run()
 * 		return rneScore.scores()
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_9networkit_14sparsification_RandomNodeEdgeScore), __pyx_v_G); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1088, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_rneScore = ((struct __pyx_obj_9networkit_14sparsification_RandomNodeEdgeScore *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":1089
 * 
 * 		rneScore = RandomNodeEdgeScore(G)
 * 		rneScore.run()             # <<<<<<<<<<<<<<
 * 		return rneScore.scores()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_rneScore), __pyx_n_s_run); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1089, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1089, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":1090
 * 		rneScore = RandomNodeEdgeScore(G)
 * 		rneScore.run()
 * 		return rneScore.scores()             # <<<<<<<<<<<<<<
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_rneScore), __pyx_n_s_scores); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1090, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1090, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":1080
 * 		self.above = above
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the minimum parameter value
 * 		such that the edge is contained in the sparsified graph.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.sparsification.RandomNodeEdgeSparsifier.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_rneScore);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":1092
 * 		return rneScore.scores()
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, self.above)
 * 		return gf.calculate()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_24RandomNodeEdgeSparsifier_5_getSparsifiedGraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_14sparsification_24RandomNodeEdgeSparsifier_5_getSparsifiedGraph = {"_getSparsifiedGraph", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_24RandomNodeEdgeSparsifier_5_getSparsifiedGraph, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_14sparsification_24RandomNodeEdgeSparsifier_5_getSparsifiedGraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_G = 0;
  PyObject *__pyx_v_parameter = 0;
  PyObject *__pyx_v_attribute = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getSparsifiedGraph (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_G,&__pyx_n_s_parameter,&__pyx_n_s_attribute,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 1); __PYX_ERR(0, 1092, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parameter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 2); __PYX_ERR(0, 1092, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attribute)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 3); __PYX_ERR(0, 1092, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_getSparsifiedGraph") < 0)) __PYX_ERR(0, 1092, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_self = values[0];
    __pyx_v_G = values[1];
    __pyx_v_parameter = values[2];
    __pyx_v_attribute = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1092, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.RandomNodeEdgeSparsifier._getSparsifiedGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_24RandomNodeEdgeSparsifier_4_getSparsifiedGraph(__pyx_self, __pyx_v_self, __pyx_v_G, __pyx_v_parameter, __pyx_v_attribute);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_24RandomNodeEdgeSparsifier_4_getSparsifiedGraph(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_G, PyObject *__pyx_v_parameter, PyObject *__pyx_v_attribute) {
  struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *__pyx_v_gf = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getSparsifiedGraph", 0);

  /* "networkit/sparsification.pyx":1093
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, self.above)             # <<<<<<<<<<<<<<
 * 		return gf.calculate()
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_above); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1093, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1093, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_G);
  __Pyx_GIVEREF(__pyx_v_G);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_G);
  __Pyx_INCREF(__pyx_v_attribute);
  __Pyx_GIVEREF(__pyx_v_attribute);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_attribute);
  __Pyx_INCREF(__pyx_v_parameter);
  __Pyx_GIVEREF(__pyx_v_parameter);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_parameter);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9networkit_14sparsification_GlobalThresholdFilter), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1093, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_gf = ((struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":1094
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, self.above)
 * 		return gf.calculate()             # <<<<<<<<<<<<<<
 * 
 * 	def _getParameterizationAlgorithm(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_gf), __pyx_n_s_calculate); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1094, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1094, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":1092
 * 		return rneScore.scores()
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, self.above)
 * 		return gf.calculate()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.sparsification.RandomNodeEdgeSparsifier._getSparsifiedGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_gf);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":1096
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization((not self.above), 0.0, 1.0, 20)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_24RandomNodeEdgeSparsifier_7_getParameterizationAlgorithm(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_14sparsification_24RandomNodeEdgeSparsifier_7_getParameterizationAlgorithm = {"_getParameterizationAlgorithm", (PyCFunction)__pyx_pw_9networkit_14sparsification_24RandomNodeEdgeSparsifier_7_getParameterizationAlgorithm, METH_O, 0};
static PyObject *__pyx_pw_9networkit_14sparsification_24RandomNodeEdgeSparsifier_7_getParameterizationAlgorithm(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getParameterizationAlgorithm (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_24RandomNodeEdgeSparsifier_6_getParameterizationAlgorithm(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_24RandomNodeEdgeSparsifier_6_getParameterizationAlgorithm(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getParameterizationAlgorithm", 0);

  /* "networkit/sparsification.pyx":1097
 * 
 * 	def _getParameterizationAlgorithm(self):
 * 		return BinarySearchParameterization((not self.above), 0.0, 1.0, 20)             # <<<<<<<<<<<<<<
 * 
 * class ForestFireSparsifier(Sparsifier):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_BinarySearchParameterization); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_above); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1097, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyBool_FromLong((!__pyx_t_4)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_5, __pyx_t_3, __pyx_float_0_0, __pyx_float_1_0, __pyx_int_20};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 4+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1097, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_5, __pyx_t_3, __pyx_float_0_0, __pyx_float_1_0, __pyx_int_20};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 4+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1097, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(4+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1097, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_3);
    __Pyx_INCREF(__pyx_float_0_0);
    __Pyx_GIVEREF(__pyx_float_0_0);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_float_0_0);
    __Pyx_INCREF(__pyx_float_1_0);
    __Pyx_GIVEREF(__pyx_float_1_0);
    PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_float_1_0);
    __Pyx_INCREF(__pyx_int_20);
    __Pyx_GIVEREF(__pyx_int_20);
    PyTuple_SET_ITEM(__pyx_t_7, 3+__pyx_t_6, __pyx_int_20);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1097, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":1096
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization((not self.above), 0.0, 1.0, 20)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("networkit.sparsification.RandomNodeEdgeSparsifier._getParameterizationAlgorithm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":1103
 * 	""" A variant of the Forest Fire sparsification approach proposed by Leskovec et al. """
 * 
 * 	def __init__(self, burnProbability, targetBurntRatio):             # <<<<<<<<<<<<<<
 * 		""" Creates a new instance of the Edge Forest Fire sparsification algorithm.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_20ForestFireSparsifier_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_14sparsification_20ForestFireSparsifier___init__[] = " Creates a new instance of the Edge Forest Fire sparsification algorithm.\n\n\t\tKeyword arguments:\n\t\tburnProbability -- the probability that the neighbor of a burnt node gets burnt as well.\n\t\tedgeRatio -- the fires will stop when a edgeRatio * edgeCount edges have been burnt.\n\t\t";
static PyMethodDef __pyx_mdef_9networkit_14sparsification_20ForestFireSparsifier_1__init__ = {"__init__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_20ForestFireSparsifier_1__init__, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_14sparsification_20ForestFireSparsifier___init__};
static PyObject *__pyx_pw_9networkit_14sparsification_20ForestFireSparsifier_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_burnProbability = 0;
  PyObject *__pyx_v_targetBurntRatio = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_burnProbability,&__pyx_n_s_targetBurntRatio,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_burnProbability)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 1); __PYX_ERR(0, 1103, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_targetBurntRatio)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 2); __PYX_ERR(0, 1103, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 1103, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_burnProbability = values[1];
    __pyx_v_targetBurntRatio = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1103, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.ForestFireSparsifier.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_20ForestFireSparsifier___init__(__pyx_self, __pyx_v_self, __pyx_v_burnProbability, __pyx_v_targetBurntRatio);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_20ForestFireSparsifier___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_burnProbability, PyObject *__pyx_v_targetBurntRatio) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "networkit/sparsification.pyx":1110
 * 		edgeRatio -- the fires will stop when a edgeRatio * edgeCount edges have been burnt.
 * 		"""
 * 		self.burnProbability = burnProbability             # <<<<<<<<<<<<<<
 * 		self.targetBurntRatio = targetBurntRatio
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_burnProbability, __pyx_v_burnProbability) < 0) __PYX_ERR(0, 1110, __pyx_L1_error)

  /* "networkit/sparsification.pyx":1111
 * 		"""
 * 		self.burnProbability = burnProbability
 * 		self.targetBurntRatio = targetBurntRatio             # <<<<<<<<<<<<<<
 * 
 * 	def scores(self, G):
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_targetBurntRatio, __pyx_v_targetBurntRatio) < 0) __PYX_ERR(0, 1111, __pyx_L1_error)

  /* "networkit/sparsification.pyx":1103
 * 	""" A variant of the Forest Fire sparsification approach proposed by Leskovec et al. """
 * 
 * 	def __init__(self, burnProbability, targetBurntRatio):             # <<<<<<<<<<<<<<
 * 		""" Creates a new instance of the Edge Forest Fire sparsification algorithm.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.sparsification.ForestFireSparsifier.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":1113
 * 		self.targetBurntRatio = targetBurntRatio
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the maximum parameter value
 * 		such that the edge is contained in the sparsified graph.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_20ForestFireSparsifier_3scores(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_14sparsification_20ForestFireSparsifier_2scores[] = " Returns an edge attribute that holds for each edge the maximum parameter value\n\t\tsuch that the edge is contained in the sparsified graph.\n\n\t\tKeyword arguments:\n\t\tG -- the input graph\n\t\t";
static PyMethodDef __pyx_mdef_9networkit_14sparsification_20ForestFireSparsifier_3scores = {"scores", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_20ForestFireSparsifier_3scores, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_14sparsification_20ForestFireSparsifier_2scores};
static PyObject *__pyx_pw_9networkit_14sparsification_20ForestFireSparsifier_3scores(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_G = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scores (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_G,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scores", 1, 2, 2, 1); __PYX_ERR(0, 1113, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "scores") < 0)) __PYX_ERR(0, 1113, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_G = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("scores", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1113, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.ForestFireSparsifier.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_20ForestFireSparsifier_2scores(__pyx_self, __pyx_v_self, __pyx_v_G);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_20ForestFireSparsifier_2scores(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_G) {
  struct __pyx_obj_9networkit_14sparsification_ForestFireScore *__pyx_v_ffScore = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("scores", 0);

  /* "networkit/sparsification.pyx":1121
 * 		"""
 * 
 * 		ffScore = ForestFireScore(G, self.burnProbability, self.targetBurntRatio)             # <<<<<<<<<<<<<<
 * 		ffScore.run()
 * 		return ffScore.scores()
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_burnProbability); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_targetBurntRatio); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_G);
  __Pyx_GIVEREF(__pyx_v_G);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_G);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9networkit_14sparsification_ForestFireScore), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_ffScore = ((struct __pyx_obj_9networkit_14sparsification_ForestFireScore *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "networkit/sparsification.pyx":1122
 * 
 * 		ffScore = ForestFireScore(G, self.burnProbability, self.targetBurntRatio)
 * 		ffScore.run()             # <<<<<<<<<<<<<<
 * 		return ffScore.scores()
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ffScore), __pyx_n_s_run); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/sparsification.pyx":1123
 * 		ffScore = ForestFireScore(G, self.burnProbability, self.targetBurntRatio)
 * 		ffScore.run()
 * 		return ffScore.scores()             # <<<<<<<<<<<<<<
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ffScore), __pyx_n_s_scores); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":1113
 * 		self.targetBurntRatio = targetBurntRatio
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the maximum parameter value
 * 		such that the edge is contained in the sparsified graph.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.sparsification.ForestFireSparsifier.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ffScore);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":1125
 * 		return ffScore.scores()
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_20ForestFireSparsifier_5_getSparsifiedGraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_14sparsification_20ForestFireSparsifier_5_getSparsifiedGraph = {"_getSparsifiedGraph", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_20ForestFireSparsifier_5_getSparsifiedGraph, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_14sparsification_20ForestFireSparsifier_5_getSparsifiedGraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_G = 0;
  PyObject *__pyx_v_parameter = 0;
  PyObject *__pyx_v_attribute = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getSparsifiedGraph (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_G,&__pyx_n_s_parameter,&__pyx_n_s_attribute,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 1); __PYX_ERR(0, 1125, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parameter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 2); __PYX_ERR(0, 1125, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attribute)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 3); __PYX_ERR(0, 1125, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_getSparsifiedGraph") < 0)) __PYX_ERR(0, 1125, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_self = values[0];
    __pyx_v_G = values[1];
    __pyx_v_parameter = values[2];
    __pyx_v_attribute = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1125, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.ForestFireSparsifier._getSparsifiedGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_20ForestFireSparsifier_4_getSparsifiedGraph(__pyx_self, __pyx_v_self, __pyx_v_G, __pyx_v_parameter, __pyx_v_attribute);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_20ForestFireSparsifier_4_getSparsifiedGraph(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G, PyObject *__pyx_v_parameter, PyObject *__pyx_v_attribute) {
  struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *__pyx_v_gf = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getSparsifiedGraph", 0);

  /* "networkit/sparsification.pyx":1126
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)             # <<<<<<<<<<<<<<
 * 		return gf.calculate()
 * 
 */
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_G);
  __Pyx_GIVEREF(__pyx_v_G);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_G);
  __Pyx_INCREF(__pyx_v_attribute);
  __Pyx_GIVEREF(__pyx_v_attribute);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_attribute);
  __Pyx_INCREF(__pyx_v_parameter);
  __Pyx_GIVEREF(__pyx_v_parameter);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_parameter);
  __Pyx_INCREF(Py_True);
  __Pyx_GIVEREF(Py_True);
  PyTuple_SET_ITEM(__pyx_t_1, 3, Py_True);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9networkit_14sparsification_GlobalThresholdFilter), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_gf = ((struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "networkit/sparsification.pyx":1127
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()             # <<<<<<<<<<<<<<
 * 
 * 	def _getParameterizationAlgorithm(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_gf), __pyx_n_s_calculate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":1125
 * 		return ffScore.scores()
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.sparsification.ForestFireSparsifier._getSparsifiedGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_gf);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":1129
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_20ForestFireSparsifier_7_getParameterizationAlgorithm(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_14sparsification_20ForestFireSparsifier_7_getParameterizationAlgorithm = {"_getParameterizationAlgorithm", (PyCFunction)__pyx_pw_9networkit_14sparsification_20ForestFireSparsifier_7_getParameterizationAlgorithm, METH_O, 0};
static PyObject *__pyx_pw_9networkit_14sparsification_20ForestFireSparsifier_7_getParameterizationAlgorithm(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getParameterizationAlgorithm (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_20ForestFireSparsifier_6_getParameterizationAlgorithm(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_20ForestFireSparsifier_6_getParameterizationAlgorithm(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getParameterizationAlgorithm", 0);

  /* "networkit/sparsification.pyx":1130
 * 
 * 	def _getParameterizationAlgorithm(self):
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)             # <<<<<<<<<<<<<<
 * 
 * class LocalDegreeSparsifier(Sparsifier):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_BinarySearchParameterization); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":1129
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.sparsification.ForestFireSparsifier._getParameterizationAlgorithm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":1136
 * 	""" An implementation of the Local Degree sparsification algorithm. """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge score that holds for each edge the minimum parameter value
 * 		such that the edge is contained in the sparsified graph.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_21LocalDegreeSparsifier_1scores(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_14sparsification_21LocalDegreeSparsifier_scores[] = " Returns an edge score that holds for each edge the minimum parameter value\n\t\tsuch that the edge is contained in the sparsified graph.\n\n\t\tKeyword arguments:\n\t\tG -- the input graph\n\t\t";
static PyMethodDef __pyx_mdef_9networkit_14sparsification_21LocalDegreeSparsifier_1scores = {"scores", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_21LocalDegreeSparsifier_1scores, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_14sparsification_21LocalDegreeSparsifier_scores};
static PyObject *__pyx_pw_9networkit_14sparsification_21LocalDegreeSparsifier_1scores(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_G = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scores (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_G,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scores", 1, 2, 2, 1); __PYX_ERR(0, 1136, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "scores") < 0)) __PYX_ERR(0, 1136, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_G = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("scores", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1136, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.LocalDegreeSparsifier.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_21LocalDegreeSparsifier_scores(__pyx_self, __pyx_v_self, __pyx_v_G);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_21LocalDegreeSparsifier_scores(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G) {
  struct __pyx_obj_9networkit_14sparsification_LocalDegreeScore *__pyx_v_localDegree = NULL;
  PyObject *__pyx_v_localDegreeScore = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("scores", 0);

  /* "networkit/sparsification.pyx":1144
 * 		"""
 * 
 * 		localDegree = LocalDegreeScore(G)             # <<<<<<<<<<<<<<
 * 		localDegree.run()
 * 		localDegreeScore = localDegree.scores()
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_9networkit_14sparsification_LocalDegreeScore), __pyx_v_G); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_localDegree = ((struct __pyx_obj_9networkit_14sparsification_LocalDegreeScore *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":1145
 * 
 * 		localDegree = LocalDegreeScore(G)
 * 		localDegree.run()             # <<<<<<<<<<<<<<
 * 		localDegreeScore = localDegree.scores()
 * 		return localDegreeScore
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_localDegree), __pyx_n_s_run); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":1146
 * 		localDegree = LocalDegreeScore(G)
 * 		localDegree.run()
 * 		localDegreeScore = localDegree.scores()             # <<<<<<<<<<<<<<
 * 		return localDegreeScore
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_localDegree), __pyx_n_s_scores); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_localDegreeScore = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":1147
 * 		localDegree.run()
 * 		localDegreeScore = localDegree.scores()
 * 		return localDegreeScore             # <<<<<<<<<<<<<<
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_localDegreeScore);
  __pyx_r = __pyx_v_localDegreeScore;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":1136
 * 	""" An implementation of the Local Degree sparsification algorithm. """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge score that holds for each edge the minimum parameter value
 * 		such that the edge is contained in the sparsified graph.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.sparsification.LocalDegreeSparsifier.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_localDegree);
  __Pyx_XDECREF(__pyx_v_localDegreeScore);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":1149
 * 		return localDegreeScore
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_21LocalDegreeSparsifier_3_getSparsifiedGraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_14sparsification_21LocalDegreeSparsifier_3_getSparsifiedGraph = {"_getSparsifiedGraph", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_21LocalDegreeSparsifier_3_getSparsifiedGraph, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_14sparsification_21LocalDegreeSparsifier_3_getSparsifiedGraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_G = 0;
  PyObject *__pyx_v_parameter = 0;
  PyObject *__pyx_v_attribute = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getSparsifiedGraph (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_G,&__pyx_n_s_parameter,&__pyx_n_s_attribute,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 1); __PYX_ERR(0, 1149, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parameter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 2); __PYX_ERR(0, 1149, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attribute)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 3); __PYX_ERR(0, 1149, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_getSparsifiedGraph") < 0)) __PYX_ERR(0, 1149, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_self = values[0];
    __pyx_v_G = values[1];
    __pyx_v_parameter = values[2];
    __pyx_v_attribute = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1149, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.LocalDegreeSparsifier._getSparsifiedGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_21LocalDegreeSparsifier_2_getSparsifiedGraph(__pyx_self, __pyx_v_self, __pyx_v_G, __pyx_v_parameter, __pyx_v_attribute);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_21LocalDegreeSparsifier_2_getSparsifiedGraph(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G, PyObject *__pyx_v_parameter, PyObject *__pyx_v_attribute) {
  struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *__pyx_v_gf = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getSparsifiedGraph", 0);

  /* "networkit/sparsification.pyx":1150
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)             # <<<<<<<<<<<<<<
 * 		return gf.calculate()
 * 
 */
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_G);
  __Pyx_GIVEREF(__pyx_v_G);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_G);
  __Pyx_INCREF(__pyx_v_attribute);
  __Pyx_GIVEREF(__pyx_v_attribute);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_attribute);
  __Pyx_INCREF(__pyx_v_parameter);
  __Pyx_GIVEREF(__pyx_v_parameter);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_parameter);
  __Pyx_INCREF(Py_True);
  __Pyx_GIVEREF(Py_True);
  PyTuple_SET_ITEM(__pyx_t_1, 3, Py_True);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9networkit_14sparsification_GlobalThresholdFilter), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_gf = ((struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "networkit/sparsification.pyx":1151
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()             # <<<<<<<<<<<<<<
 * 
 * 	def _getParameterizationAlgorithm(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_gf), __pyx_n_s_calculate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":1149
 * 		return localDegreeScore
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.sparsification.LocalDegreeSparsifier._getSparsifiedGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_gf);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":1153
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_21LocalDegreeSparsifier_5_getParameterizationAlgorithm(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_14sparsification_21LocalDegreeSparsifier_5_getParameterizationAlgorithm = {"_getParameterizationAlgorithm", (PyCFunction)__pyx_pw_9networkit_14sparsification_21LocalDegreeSparsifier_5_getParameterizationAlgorithm, METH_O, 0};
static PyObject *__pyx_pw_9networkit_14sparsification_21LocalDegreeSparsifier_5_getParameterizationAlgorithm(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getParameterizationAlgorithm (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_21LocalDegreeSparsifier_4_getParameterizationAlgorithm(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_21LocalDegreeSparsifier_4_getParameterizationAlgorithm(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getParameterizationAlgorithm", 0);

  /* "networkit/sparsification.pyx":1154
 * 
 * 	def _getParameterizationAlgorithm(self):
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)             # <<<<<<<<<<<<<<
 * 
 * class SCANSparsifier(Sparsifier):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_BinarySearchParameterization); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":1153
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.sparsification.LocalDegreeSparsifier._getParameterizationAlgorithm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":1160
 * 	""" A sparsifiier dervived from 'SCAN: a structural clustering algorithm for networks' """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the minimum parameter value
 * 		such that the edge is contained in the sparsified graph.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_14SCANSparsifier_1scores(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_14sparsification_14SCANSparsifier_scores[] = " Returns an edge attribute that holds for each edge the minimum parameter value\n\t\tsuch that the edge is contained in the sparsified graph.\n\n\t\tKeyword arguments:\n\t\tG -- the input graph\n\t\t";
static PyMethodDef __pyx_mdef_9networkit_14sparsification_14SCANSparsifier_1scores = {"scores", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_14SCANSparsifier_1scores, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_14sparsification_14SCANSparsifier_scores};
static PyObject *__pyx_pw_9networkit_14sparsification_14SCANSparsifier_1scores(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_G = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scores (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_G,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scores", 1, 2, 2, 1); __PYX_ERR(0, 1160, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "scores") < 0)) __PYX_ERR(0, 1160, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_G = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("scores", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1160, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.SCANSparsifier.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_14SCANSparsifier_scores(__pyx_self, __pyx_v_self, __pyx_v_G);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_14SCANSparsifier_scores(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G) {
  PyObject *__pyx_v_a_triangles = NULL;
  struct __pyx_obj_9networkit_14sparsification_SCANStructuralSimilarityScore *__pyx_v_scanScore = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("scores", 0);

  /* "networkit/sparsification.pyx":1167
 * 		G -- the input graph
 * 		"""
 * 		a_triangles = TriangleEdgeScore(G).run().scores()             # <<<<<<<<<<<<<<
 * 
 * 		scanScore = SCANStructuralSimilarityScore(G, a_triangles)
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_9networkit_14sparsification_TriangleEdgeScore), __pyx_v_G); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_run); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_scores); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_a_triangles = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":1169
 * 		a_triangles = TriangleEdgeScore(G).run().scores()
 * 
 * 		scanScore = SCANStructuralSimilarityScore(G, a_triangles)             # <<<<<<<<<<<<<<
 * 		scanScore.run()
 * 
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_G);
  __Pyx_GIVEREF(__pyx_v_G);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_G);
  __Pyx_INCREF(__pyx_v_a_triangles);
  __Pyx_GIVEREF(__pyx_v_a_triangles);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_a_triangles);
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9networkit_14sparsification_SCANStructuralSimilarityScore), __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_scanScore = ((struct __pyx_obj_9networkit_14sparsification_SCANStructuralSimilarityScore *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":1170
 * 
 * 		scanScore = SCANStructuralSimilarityScore(G, a_triangles)
 * 		scanScore.run()             # <<<<<<<<<<<<<<
 * 
 * 		return scanScore.scores()
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_scanScore), __pyx_n_s_run); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":1172
 * 		scanScore.run()
 * 
 * 		return scanScore.scores()             # <<<<<<<<<<<<<<
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_scanScore), __pyx_n_s_scores); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":1160
 * 	""" A sparsifiier dervived from 'SCAN: a structural clustering algorithm for networks' """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the minimum parameter value
 * 		such that the edge is contained in the sparsified graph.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("networkit.sparsification.SCANSparsifier.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_a_triangles);
  __Pyx_XDECREF((PyObject *)__pyx_v_scanScore);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":1174
 * 		return scanScore.scores()
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_14SCANSparsifier_3_getSparsifiedGraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_14sparsification_14SCANSparsifier_3_getSparsifiedGraph = {"_getSparsifiedGraph", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_14SCANSparsifier_3_getSparsifiedGraph, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_14sparsification_14SCANSparsifier_3_getSparsifiedGraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_G = 0;
  PyObject *__pyx_v_parameter = 0;
  PyObject *__pyx_v_attribute = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getSparsifiedGraph (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_G,&__pyx_n_s_parameter,&__pyx_n_s_attribute,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 1); __PYX_ERR(0, 1174, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parameter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 2); __PYX_ERR(0, 1174, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attribute)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 3); __PYX_ERR(0, 1174, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_getSparsifiedGraph") < 0)) __PYX_ERR(0, 1174, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_self = values[0];
    __pyx_v_G = values[1];
    __pyx_v_parameter = values[2];
    __pyx_v_attribute = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1174, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.SCANSparsifier._getSparsifiedGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_14SCANSparsifier_2_getSparsifiedGraph(__pyx_self, __pyx_v_self, __pyx_v_G, __pyx_v_parameter, __pyx_v_attribute);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_14SCANSparsifier_2_getSparsifiedGraph(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G, PyObject *__pyx_v_parameter, PyObject *__pyx_v_attribute) {
  struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *__pyx_v_gf = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getSparsifiedGraph", 0);

  /* "networkit/sparsification.pyx":1175
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)             # <<<<<<<<<<<<<<
 * 		return gf.calculate()
 * 
 */
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_G);
  __Pyx_GIVEREF(__pyx_v_G);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_G);
  __Pyx_INCREF(__pyx_v_attribute);
  __Pyx_GIVEREF(__pyx_v_attribute);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_attribute);
  __Pyx_INCREF(__pyx_v_parameter);
  __Pyx_GIVEREF(__pyx_v_parameter);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_parameter);
  __Pyx_INCREF(Py_True);
  __Pyx_GIVEREF(Py_True);
  PyTuple_SET_ITEM(__pyx_t_1, 3, Py_True);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9networkit_14sparsification_GlobalThresholdFilter), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_gf = ((struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "networkit/sparsification.pyx":1176
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()             # <<<<<<<<<<<<<<
 * 
 * 	def _getParameterizationAlgorithm(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_gf), __pyx_n_s_calculate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":1174
 * 		return scanScore.scores()
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.sparsification.SCANSparsifier._getSparsifiedGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_gf);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":1178
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_14SCANSparsifier_5_getParameterizationAlgorithm(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_14sparsification_14SCANSparsifier_5_getParameterizationAlgorithm = {"_getParameterizationAlgorithm", (PyCFunction)__pyx_pw_9networkit_14sparsification_14SCANSparsifier_5_getParameterizationAlgorithm, METH_O, 0};
static PyObject *__pyx_pw_9networkit_14sparsification_14SCANSparsifier_5_getParameterizationAlgorithm(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getParameterizationAlgorithm (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_14SCANSparsifier_4_getParameterizationAlgorithm(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_14SCANSparsifier_4_getParameterizationAlgorithm(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getParameterizationAlgorithm", 0);

  /* "networkit/sparsification.pyx":1179
 * 
 * 	def _getParameterizationAlgorithm(self):
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)             # <<<<<<<<<<<<<<
 * 
 * class TriangleSparsifier(Sparsifier):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_BinarySearchParameterization); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":1178
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.sparsification.SCANSparsifier._getParameterizationAlgorithm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":1184
 * 	"""  Allows for global filtering with respect to triangle counts. """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns the triangle counts of the input graph. """
 * 		triangleScore = TriangleEdgeScore(G)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_18TriangleSparsifier_1scores(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_14sparsification_18TriangleSparsifier_scores[] = " Returns the triangle counts of the input graph. ";
static PyMethodDef __pyx_mdef_9networkit_14sparsification_18TriangleSparsifier_1scores = {"scores", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_18TriangleSparsifier_1scores, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_14sparsification_18TriangleSparsifier_scores};
static PyObject *__pyx_pw_9networkit_14sparsification_18TriangleSparsifier_1scores(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_G = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scores (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_G,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scores", 1, 2, 2, 1); __PYX_ERR(0, 1184, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "scores") < 0)) __PYX_ERR(0, 1184, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_G = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("scores", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1184, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.TriangleSparsifier.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_18TriangleSparsifier_scores(__pyx_self, __pyx_v_self, __pyx_v_G);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_18TriangleSparsifier_scores(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G) {
  struct __pyx_obj_9networkit_14sparsification_TriangleEdgeScore *__pyx_v_triangleScore = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("scores", 0);

  /* "networkit/sparsification.pyx":1186
 * 	def scores(self, G):
 * 		""" Returns the triangle counts of the input graph. """
 * 		triangleScore = TriangleEdgeScore(G)             # <<<<<<<<<<<<<<
 * 		triangleScore.run()
 * 		return triangleScore.scores()
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_9networkit_14sparsification_TriangleEdgeScore), __pyx_v_G); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_triangleScore = ((struct __pyx_obj_9networkit_14sparsification_TriangleEdgeScore *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":1187
 * 		""" Returns the triangle counts of the input graph. """
 * 		triangleScore = TriangleEdgeScore(G)
 * 		triangleScore.run()             # <<<<<<<<<<<<<<
 * 		return triangleScore.scores()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_triangleScore), __pyx_n_s_run); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":1188
 * 		triangleScore = TriangleEdgeScore(G)
 * 		triangleScore.run()
 * 		return triangleScore.scores()             # <<<<<<<<<<<<<<
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_triangleScore), __pyx_n_s_scores); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":1184
 * 	"""  Allows for global filtering with respect to triangle counts. """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns the triangle counts of the input graph. """
 * 		triangleScore = TriangleEdgeScore(G)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.sparsification.TriangleSparsifier.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_triangleScore);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":1190
 * 		return triangleScore.scores()
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_18TriangleSparsifier_3_getSparsifiedGraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_14sparsification_18TriangleSparsifier_3_getSparsifiedGraph = {"_getSparsifiedGraph", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_18TriangleSparsifier_3_getSparsifiedGraph, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_14sparsification_18TriangleSparsifier_3_getSparsifiedGraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_G = 0;
  PyObject *__pyx_v_parameter = 0;
  PyObject *__pyx_v_attribute = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getSparsifiedGraph (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_G,&__pyx_n_s_parameter,&__pyx_n_s_attribute,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 1); __PYX_ERR(0, 1190, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parameter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 2); __PYX_ERR(0, 1190, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attribute)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 3); __PYX_ERR(0, 1190, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_getSparsifiedGraph") < 0)) __PYX_ERR(0, 1190, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_self = values[0];
    __pyx_v_G = values[1];
    __pyx_v_parameter = values[2];
    __pyx_v_attribute = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1190, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.TriangleSparsifier._getSparsifiedGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_18TriangleSparsifier_2_getSparsifiedGraph(__pyx_self, __pyx_v_self, __pyx_v_G, __pyx_v_parameter, __pyx_v_attribute);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_18TriangleSparsifier_2_getSparsifiedGraph(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G, PyObject *__pyx_v_parameter, PyObject *__pyx_v_attribute) {
  struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *__pyx_v_gf = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getSparsifiedGraph", 0);

  /* "networkit/sparsification.pyx":1191
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)             # <<<<<<<<<<<<<<
 * 		return gf.calculate()
 * 
 */
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_G);
  __Pyx_GIVEREF(__pyx_v_G);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_G);
  __Pyx_INCREF(__pyx_v_attribute);
  __Pyx_GIVEREF(__pyx_v_attribute);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_attribute);
  __Pyx_INCREF(__pyx_v_parameter);
  __Pyx_GIVEREF(__pyx_v_parameter);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_parameter);
  __Pyx_INCREF(Py_True);
  __Pyx_GIVEREF(Py_True);
  PyTuple_SET_ITEM(__pyx_t_1, 3, Py_True);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9networkit_14sparsification_GlobalThresholdFilter), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_gf = ((struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "networkit/sparsification.pyx":1192
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()             # <<<<<<<<<<<<<<
 * 
 * 	def _getParameterizationAlgorithm(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_gf), __pyx_n_s_calculate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":1190
 * 		return triangleScore.scores()
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.sparsification.TriangleSparsifier._getSparsifiedGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_gf);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":1194
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		raise NotImplementedError("parameterization method not yet implemented.")
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_18TriangleSparsifier_5_getParameterizationAlgorithm(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_14sparsification_18TriangleSparsifier_5_getParameterizationAlgorithm = {"_getParameterizationAlgorithm", (PyCFunction)__pyx_pw_9networkit_14sparsification_18TriangleSparsifier_5_getParameterizationAlgorithm, METH_O, 0};
static PyObject *__pyx_pw_9networkit_14sparsification_18TriangleSparsifier_5_getParameterizationAlgorithm(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getParameterizationAlgorithm (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_18TriangleSparsifier_4_getParameterizationAlgorithm(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_18TriangleSparsifier_4_getParameterizationAlgorithm(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getParameterizationAlgorithm", 0);

  /* "networkit/sparsification.pyx":1195
 * 
 * 	def _getParameterizationAlgorithm(self):
 * 		raise NotImplementedError("parameterization method not yet implemented.")             # <<<<<<<<<<<<<<
 * 
 * class AlgebraicDistanceSparsifier(Sparsifier):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__48, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 1195, __pyx_L1_error)

  /* "networkit/sparsification.pyx":1194
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		raise NotImplementedError("parameterization method not yet implemented.")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.sparsification.TriangleSparsifier._getParameterizationAlgorithm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":1200
 * 	""" Allows for global filtering with respect to (inverted) algebraic distances. """
 * 
 * 	def __init__(self, numberSystems=10, numberIterations=30, omega=0.5, norm=0):             # <<<<<<<<<<<<<<
 * 		self.numberSystems = numberSystems
 * 		self.numberIterations = numberIterations
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_27AlgebraicDistanceSparsifier_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_14sparsification_27AlgebraicDistanceSparsifier_1__init__ = {"__init__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_27AlgebraicDistanceSparsifier_1__init__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_14sparsification_27AlgebraicDistanceSparsifier_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_numberSystems = 0;
  PyObject *__pyx_v_numberIterations = 0;
  PyObject *__pyx_v_omega = 0;
  PyObject *__pyx_v_norm = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_numberSystems,&__pyx_n_s_numberIterations,&__pyx_n_s_omega,&__pyx_n_s_norm,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[1] = ((PyObject *)((PyObject *)__pyx_int_10));
    values[2] = ((PyObject *)((PyObject *)__pyx_int_30));
    values[3] = ((PyObject *)((PyObject*)__pyx_float_0_5));
    values[4] = ((PyObject *)((PyObject *)__pyx_int_0));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_numberSystems);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_numberIterations);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_omega);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_norm);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 1200, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_numberSystems = values[1];
    __pyx_v_numberIterations = values[2];
    __pyx_v_omega = values[3];
    __pyx_v_norm = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1200, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.AlgebraicDistanceSparsifier.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_27AlgebraicDistanceSparsifier___init__(__pyx_self, __pyx_v_self, __pyx_v_numberSystems, __pyx_v_numberIterations, __pyx_v_omega, __pyx_v_norm);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_27AlgebraicDistanceSparsifier___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_numberSystems, PyObject *__pyx_v_numberIterations, PyObject *__pyx_v_omega, PyObject *__pyx_v_norm) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "networkit/sparsification.pyx":1201
 * 
 * 	def __init__(self, numberSystems=10, numberIterations=30, omega=0.5, norm=0):
 * 		self.numberSystems = numberSystems             # <<<<<<<<<<<<<<
 * 		self.numberIterations = numberIterations
 * 		self.omega = omega
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_numberSystems, __pyx_v_numberSystems) < 0) __PYX_ERR(0, 1201, __pyx_L1_error)

  /* "networkit/sparsification.pyx":1202
 * 	def __init__(self, numberSystems=10, numberIterations=30, omega=0.5, norm=0):
 * 		self.numberSystems = numberSystems
 * 		self.numberIterations = numberIterations             # <<<<<<<<<<<<<<
 * 		self.omega = omega
 * 		self.norm = norm
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_numberIterations, __pyx_v_numberIterations) < 0) __PYX_ERR(0, 1202, __pyx_L1_error)

  /* "networkit/sparsification.pyx":1203
 * 		self.numberSystems = numberSystems
 * 		self.numberIterations = numberIterations
 * 		self.omega = omega             # <<<<<<<<<<<<<<
 * 		self.norm = norm
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_omega, __pyx_v_omega) < 0) __PYX_ERR(0, 1203, __pyx_L1_error)

  /* "networkit/sparsification.pyx":1204
 * 		self.numberIterations = numberIterations
 * 		self.omega = omega
 * 		self.norm = norm             # <<<<<<<<<<<<<<
 * 
 * 	def scores(self, G):
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_norm, __pyx_v_norm) < 0) __PYX_ERR(0, 1204, __pyx_L1_error)

  /* "networkit/sparsification.pyx":1200
 * 	""" Allows for global filtering with respect to (inverted) algebraic distances. """
 * 
 * 	def __init__(self, numberSystems=10, numberIterations=30, omega=0.5, norm=0):             # <<<<<<<<<<<<<<
 * 		self.numberSystems = numberSystems
 * 		self.numberIterations = numberIterations
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.sparsification.AlgebraicDistanceSparsifier.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":1206
 * 		self.norm = norm
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns the inverted algebraic distance score of the input graph. """
 * 		algDist = distance.AlgebraicDistance(G, self.numberSystems, self.numberIterations, self.omega, self.norm, withEdgeScores=True)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_27AlgebraicDistanceSparsifier_3scores(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_14sparsification_27AlgebraicDistanceSparsifier_2scores[] = " Returns the inverted algebraic distance score of the input graph. ";
static PyMethodDef __pyx_mdef_9networkit_14sparsification_27AlgebraicDistanceSparsifier_3scores = {"scores", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_27AlgebraicDistanceSparsifier_3scores, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_14sparsification_27AlgebraicDistanceSparsifier_2scores};
static PyObject *__pyx_pw_9networkit_14sparsification_27AlgebraicDistanceSparsifier_3scores(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_G = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scores (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_G,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scores", 1, 2, 2, 1); __PYX_ERR(0, 1206, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "scores") < 0)) __PYX_ERR(0, 1206, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_G = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("scores", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1206, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.AlgebraicDistanceSparsifier.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_27AlgebraicDistanceSparsifier_2scores(__pyx_self, __pyx_v_self, __pyx_v_G);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_27AlgebraicDistanceSparsifier_2scores(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_G) {
  PyObject *__pyx_v_algDist = NULL;
  PyObject *__pyx_8genexpr1__pyx_v_d = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("scores", 0);

  /* "networkit/sparsification.pyx":1208
 * 	def scores(self, G):
 * 		""" Returns the inverted algebraic distance score of the input graph. """
 * 		algDist = distance.AlgebraicDistance(G, self.numberSystems, self.numberIterations, self.omega, self.norm, withEdgeScores=True)             # <<<<<<<<<<<<<<
 * 		algDist.preprocess()
 * 		return [1.0 - d for d in algDist.getEdgeScores()]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_distance); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_AlgebraicDistance); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_numberSystems); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_numberIterations); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_omega); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_norm); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyTuple_New(5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_v_G);
  __Pyx_GIVEREF(__pyx_v_G);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_G);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 4, __pyx_t_5);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_withEdgeScores, Py_True) < 0) __PYX_ERR(0, 1208, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_algDist = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":1209
 * 		""" Returns the inverted algebraic distance score of the input graph. """
 * 		algDist = distance.AlgebraicDistance(G, self.numberSystems, self.numberIterations, self.omega, self.norm, withEdgeScores=True)
 * 		algDist.preprocess()             # <<<<<<<<<<<<<<
 * 		return [1.0 - d for d in algDist.getEdgeScores()]
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_algDist, __pyx_n_s_preprocess); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":1210
 * 		algDist = distance.AlgebraicDistance(G, self.numberSystems, self.numberIterations, self.omega, self.norm, withEdgeScores=True)
 * 		algDist.preprocess()
 * 		return [1.0 - d for d in algDist.getEdgeScores()]             # <<<<<<<<<<<<<<
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1210, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_algDist, __pyx_n_s_getEdgeScores); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1210, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1210, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
      __pyx_t_6 = __pyx_t_5; __Pyx_INCREF(__pyx_t_6); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
    } else {
      __pyx_t_7 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1210, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1210, __pyx_L5_error)
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    for (;;) {
      if (likely(!__pyx_t_8)) {
        if (likely(PyList_CheckExact(__pyx_t_6))) {
          if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_6)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_7); __Pyx_INCREF(__pyx_t_5); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 1210, __pyx_L5_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_6, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1210, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_7); __Pyx_INCREF(__pyx_t_5); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 1210, __pyx_L5_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_6, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1210, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_8(__pyx_t_6);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1210, __pyx_L5_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_d, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyFloat_SubtractCObj(__pyx_float_1_0, __pyx_8genexpr1__pyx_v_d, 1.0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1210, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 1210, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_d); __pyx_8genexpr1__pyx_v_d = 0;
    goto __pyx_L8_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_d); __pyx_8genexpr1__pyx_v_d = 0;
    goto __pyx_L1_error;
    __pyx_L8_exit_scope:;
  } /* exit inner scope */
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":1206
 * 		self.norm = norm
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns the inverted algebraic distance score of the input graph. """
 * 		algDist = distance.AlgebraicDistance(G, self.numberSystems, self.numberIterations, self.omega, self.norm, withEdgeScores=True)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("networkit.sparsification.AlgebraicDistanceSparsifier.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_algDist);
  __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_d);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":1212
 * 		return [1.0 - d for d in algDist.getEdgeScores()]
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_27AlgebraicDistanceSparsifier_5_getSparsifiedGraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_14sparsification_27AlgebraicDistanceSparsifier_5_getSparsifiedGraph = {"_getSparsifiedGraph", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_27AlgebraicDistanceSparsifier_5_getSparsifiedGraph, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_14sparsification_27AlgebraicDistanceSparsifier_5_getSparsifiedGraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_G = 0;
  PyObject *__pyx_v_parameter = 0;
  PyObject *__pyx_v_attribute = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getSparsifiedGraph (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_G,&__pyx_n_s_parameter,&__pyx_n_s_attribute,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 1); __PYX_ERR(0, 1212, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parameter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 2); __PYX_ERR(0, 1212, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attribute)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 3); __PYX_ERR(0, 1212, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_getSparsifiedGraph") < 0)) __PYX_ERR(0, 1212, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_self = values[0];
    __pyx_v_G = values[1];
    __pyx_v_parameter = values[2];
    __pyx_v_attribute = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1212, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.AlgebraicDistanceSparsifier._getSparsifiedGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_27AlgebraicDistanceSparsifier_4_getSparsifiedGraph(__pyx_self, __pyx_v_self, __pyx_v_G, __pyx_v_parameter, __pyx_v_attribute);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_27AlgebraicDistanceSparsifier_4_getSparsifiedGraph(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G, PyObject *__pyx_v_parameter, PyObject *__pyx_v_attribute) {
  struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *__pyx_v_gf = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getSparsifiedGraph", 0);

  /* "networkit/sparsification.pyx":1213
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)             # <<<<<<<<<<<<<<
 * 		return gf.calculate()
 * 
 */
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_G);
  __Pyx_GIVEREF(__pyx_v_G);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_G);
  __Pyx_INCREF(__pyx_v_attribute);
  __Pyx_GIVEREF(__pyx_v_attribute);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_attribute);
  __Pyx_INCREF(__pyx_v_parameter);
  __Pyx_GIVEREF(__pyx_v_parameter);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_parameter);
  __Pyx_INCREF(Py_True);
  __Pyx_GIVEREF(Py_True);
  PyTuple_SET_ITEM(__pyx_t_1, 3, Py_True);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9networkit_14sparsification_GlobalThresholdFilter), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_gf = ((struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "networkit/sparsification.pyx":1214
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()             # <<<<<<<<<<<<<<
 * 
 * 	def _getParameterizationAlgorithm(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_gf), __pyx_n_s_calculate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":1212
 * 		return [1.0 - d for d in algDist.getEdgeScores()]
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.sparsification.AlgebraicDistanceSparsifier._getSparsifiedGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_gf);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":1216
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_27AlgebraicDistanceSparsifier_7_getParameterizationAlgorithm(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_14sparsification_27AlgebraicDistanceSparsifier_7_getParameterizationAlgorithm = {"_getParameterizationAlgorithm", (PyCFunction)__pyx_pw_9networkit_14sparsification_27AlgebraicDistanceSparsifier_7_getParameterizationAlgorithm, METH_O, 0};
static PyObject *__pyx_pw_9networkit_14sparsification_27AlgebraicDistanceSparsifier_7_getParameterizationAlgorithm(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getParameterizationAlgorithm (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_27AlgebraicDistanceSparsifier_6_getParameterizationAlgorithm(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_27AlgebraicDistanceSparsifier_6_getParameterizationAlgorithm(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getParameterizationAlgorithm", 0);

  /* "networkit/sparsification.pyx":1217
 * 
 * 	def _getParameterizationAlgorithm(self):
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)             # <<<<<<<<<<<<<<
 * 
 * class LocalSparsifier(Sparsifier):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_BinarySearchParameterization); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":1216
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.sparsification.AlgebraicDistanceSparsifier._getParameterizationAlgorithm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":1220
 * 
 * class LocalSparsifier(Sparsifier):
 * 	def __init__(self, sparsifier):             # <<<<<<<<<<<<<<
 * 		self.sparsifier = sparsifier
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_15LocalSparsifier_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_14sparsification_15LocalSparsifier_1__init__ = {"__init__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_15LocalSparsifier_1__init__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_14sparsification_15LocalSparsifier_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_sparsifier = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_sparsifier,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sparsifier)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(0, 1220, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 1220, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_sparsifier = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1220, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.LocalSparsifier.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_15LocalSparsifier___init__(__pyx_self, __pyx_v_self, __pyx_v_sparsifier);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_15LocalSparsifier___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_sparsifier) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "networkit/sparsification.pyx":1221
 * class LocalSparsifier(Sparsifier):
 * 	def __init__(self, sparsifier):
 * 		self.sparsifier = sparsifier             # <<<<<<<<<<<<<<
 * 
 * 	def scores(self, G):
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_sparsifier, __pyx_v_sparsifier) < 0) __PYX_ERR(0, 1221, __pyx_L1_error)

  /* "networkit/sparsification.pyx":1220
 * 
 * class LocalSparsifier(Sparsifier):
 * 	def __init__(self, sparsifier):             # <<<<<<<<<<<<<<
 * 		self.sparsifier = sparsifier
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.sparsification.LocalSparsifier.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":1223
 * 		self.sparsifier = sparsifier
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge 1 - the minimum parameter value
 *                	such that the edge is contained in the sparsified graph.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_15LocalSparsifier_3scores(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_14sparsification_15LocalSparsifier_2scores[] = " Returns an edge attribute that holds for each edge 1 - the minimum parameter value\n               \tsuch that the edge is contained in the sparsified graph.\n\n               \tNote that - like for all sparsifiers - edges with the highest score are the most important ones.\n\n               \tKeyword arguments:\n               \tG -- the input graph\n               \t";
static PyMethodDef __pyx_mdef_9networkit_14sparsification_15LocalSparsifier_3scores = {"scores", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_15LocalSparsifier_3scores, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_14sparsification_15LocalSparsifier_2scores};
static PyObject *__pyx_pw_9networkit_14sparsification_15LocalSparsifier_3scores(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_G = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scores (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_G,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scores", 1, 2, 2, 1); __PYX_ERR(0, 1223, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "scores") < 0)) __PYX_ERR(0, 1223, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_G = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("scores", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1223, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.LocalSparsifier.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_15LocalSparsifier_2scores(__pyx_self, __pyx_v_self, __pyx_v_G);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_15LocalSparsifier_2scores(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_G) {
  PyObject *__pyx_v_originalScores = NULL;
  struct __pyx_obj_9networkit_14sparsification_LocalFilterScore *__pyx_v_localFilterScore = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("scores", 0);

  /* "networkit/sparsification.pyx":1232
 *                	G -- the input graph
 *                	"""
 * 		originalScores = self.sparsifier.scores(G)             # <<<<<<<<<<<<<<
 * 		localFilterScore = LocalFilterScore(G, originalScores)
 * 		localFilterScore.run()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_sparsifier); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_scores); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_v_G) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_G);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_originalScores = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":1233
 *                	"""
 * 		originalScores = self.sparsifier.scores(G)
 * 		localFilterScore = LocalFilterScore(G, originalScores)             # <<<<<<<<<<<<<<
 * 		localFilterScore.run()
 * 
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_G);
  __Pyx_GIVEREF(__pyx_v_G);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_G);
  __Pyx_INCREF(__pyx_v_originalScores);
  __Pyx_GIVEREF(__pyx_v_originalScores);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_originalScores);
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9networkit_14sparsification_LocalFilterScore), __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_localFilterScore = ((struct __pyx_obj_9networkit_14sparsification_LocalFilterScore *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "networkit/sparsification.pyx":1234
 * 		originalScores = self.sparsifier.scores(G)
 * 		localFilterScore = LocalFilterScore(G, originalScores)
 * 		localFilterScore.run()             # <<<<<<<<<<<<<<
 * 
 * 		return localFilterScore.scores()
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_localFilterScore), __pyx_n_s_run); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "networkit/sparsification.pyx":1236
 * 		localFilterScore.run()
 * 
 * 		return localFilterScore.scores()             # <<<<<<<<<<<<<<
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_localFilterScore), __pyx_n_s_scores); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":1223
 * 		self.sparsifier = sparsifier
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge 1 - the minimum parameter value
 *                	such that the edge is contained in the sparsified graph.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.sparsification.LocalSparsifier.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_originalScores);
  __Pyx_XDECREF((PyObject *)__pyx_v_localFilterScore);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":1238
 * 		return localFilterScore.scores()
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_15LocalSparsifier_5_getSparsifiedGraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_14sparsification_15LocalSparsifier_5_getSparsifiedGraph = {"_getSparsifiedGraph", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_15LocalSparsifier_5_getSparsifiedGraph, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_14sparsification_15LocalSparsifier_5_getSparsifiedGraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_G = 0;
  PyObject *__pyx_v_parameter = 0;
  PyObject *__pyx_v_attribute = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getSparsifiedGraph (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_G,&__pyx_n_s_parameter,&__pyx_n_s_attribute,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 1); __PYX_ERR(0, 1238, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parameter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 2); __PYX_ERR(0, 1238, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attribute)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, 3); __PYX_ERR(0, 1238, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_getSparsifiedGraph") < 0)) __PYX_ERR(0, 1238, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_self = values[0];
    __pyx_v_G = values[1];
    __pyx_v_parameter = values[2];
    __pyx_v_attribute = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_getSparsifiedGraph", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1238, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.LocalSparsifier._getSparsifiedGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_15LocalSparsifier_4_getSparsifiedGraph(__pyx_self, __pyx_v_self, __pyx_v_G, __pyx_v_parameter, __pyx_v_attribute);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_15LocalSparsifier_4_getSparsifiedGraph(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G, PyObject *__pyx_v_parameter, PyObject *__pyx_v_attribute) {
  struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *__pyx_v_gf = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getSparsifiedGraph", 0);

  /* "networkit/sparsification.pyx":1239
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)             # <<<<<<<<<<<<<<
 * 		return gf.calculate()
 * 
 */
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_G);
  __Pyx_GIVEREF(__pyx_v_G);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_G);
  __Pyx_INCREF(__pyx_v_attribute);
  __Pyx_GIVEREF(__pyx_v_attribute);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_attribute);
  __Pyx_INCREF(__pyx_v_parameter);
  __Pyx_GIVEREF(__pyx_v_parameter);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_parameter);
  __Pyx_INCREF(Py_True);
  __Pyx_GIVEREF(Py_True);
  PyTuple_SET_ITEM(__pyx_t_1, 3, Py_True);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9networkit_14sparsification_GlobalThresholdFilter), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_gf = ((struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "networkit/sparsification.pyx":1240
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()             # <<<<<<<<<<<<<<
 * 
 * 	def _getParameterizationAlgorithm(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_gf), __pyx_n_s_calculate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":1238
 * 		return localFilterScore.scores()
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.sparsification.LocalSparsifier._getSparsifiedGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_gf);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":1242
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_15LocalSparsifier_7_getParameterizationAlgorithm(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_14sparsification_15LocalSparsifier_7_getParameterizationAlgorithm = {"_getParameterizationAlgorithm", (PyCFunction)__pyx_pw_9networkit_14sparsification_15LocalSparsifier_7_getParameterizationAlgorithm, METH_O, 0};
static PyObject *__pyx_pw_9networkit_14sparsification_15LocalSparsifier_7_getParameterizationAlgorithm(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getParameterizationAlgorithm (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_14sparsification_15LocalSparsifier_6_getParameterizationAlgorithm(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_15LocalSparsifier_6_getParameterizationAlgorithm(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getParameterizationAlgorithm", 0);

  /* "networkit/sparsification.pyx":1243
 * 
 * 	def _getParameterizationAlgorithm(self):
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_BinarySearchParameterization); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":1242
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.sparsification.LocalSparsifier._getParameterizationAlgorithm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":1250
 * 	"""  """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the minimum parameter value
 * 		such that the edge is contained in the sparsified graph.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_24ModularityPartitionScore_1scores(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_14sparsification_24ModularityPartitionScore_scores[] = " Returns an edge attribute that holds for each edge the minimum parameter value\n\t\tsuch that the edge is contained in the sparsified graph.\n\n\t\tKeyword arguments:\n\t\tG -- the input graph\n\t\t";
static PyMethodDef __pyx_mdef_9networkit_14sparsification_24ModularityPartitionScore_1scores = {"scores", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_24ModularityPartitionScore_1scores, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_14sparsification_24ModularityPartitionScore_scores};
static PyObject *__pyx_pw_9networkit_14sparsification_24ModularityPartitionScore_1scores(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_G = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scores (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_G,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scores", 1, 2, 2, 1); __PYX_ERR(0, 1250, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "scores") < 0)) __PYX_ERR(0, 1250, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_G = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("scores", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1250, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.ModularityPartitionScore.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_24ModularityPartitionScore_scores(__pyx_self, __pyx_v_self, __pyx_v_G);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":1262
 * 		partition = cdAlgo.getPartition()
 * 
 * 		def together(u, v):             # <<<<<<<<<<<<<<
 * 			if (partition[u] == partition[v]):
 * 				return 1.0
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_24ModularityPartitionScore_6scores_1together(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_14sparsification_24ModularityPartitionScore_6scores_1together = {"together", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_24ModularityPartitionScore_6scores_1together, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_14sparsification_24ModularityPartitionScore_6scores_1together(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_u = 0;
  PyObject *__pyx_v_v = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("together (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_u,&__pyx_n_s_v,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_u)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("together", 1, 2, 2, 1); __PYX_ERR(0, 1262, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "together") < 0)) __PYX_ERR(0, 1262, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_u = values[0];
    __pyx_v_v = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("together", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1262, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.ModularityPartitionScore.scores.together", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_24ModularityPartitionScore_6scores_together(__pyx_self, __pyx_v_u, __pyx_v_v);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_24ModularityPartitionScore_6scores_together(PyObject *__pyx_self, PyObject *__pyx_v_u, PyObject *__pyx_v_v) {
  struct __pyx_obj_9networkit_14sparsification___pyx_scope_struct__scores *__pyx_cur_scope;
  struct __pyx_obj_9networkit_14sparsification___pyx_scope_struct__scores *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("together", 0);
  __pyx_outer_scope = (struct __pyx_obj_9networkit_14sparsification___pyx_scope_struct__scores *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "networkit/sparsification.pyx":1263
 * 
 * 		def together(u, v):
 * 			if (partition[u] == partition[v]):             # <<<<<<<<<<<<<<
 * 				return 1.0
 * 			else:
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_partition)) { __Pyx_RaiseClosureNameError("partition"); __PYX_ERR(0, 1263, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_cur_scope->__pyx_v_partition, __pyx_v_u); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(!__pyx_cur_scope->__pyx_v_partition)) { __Pyx_RaiseClosureNameError("partition"); __PYX_ERR(0, 1263, __pyx_L1_error) }
  __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_cur_scope->__pyx_v_partition, __pyx_v_v); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1263, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1263, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "networkit/sparsification.pyx":1264
 * 		def together(u, v):
 * 			if (partition[u] == partition[v]):
 * 				return 1.0             # <<<<<<<<<<<<<<
 * 			else:
 * 				return 0.0
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_float_1_0);
    __pyx_r = __pyx_float_1_0;
    goto __pyx_L0;

    /* "networkit/sparsification.pyx":1263
 * 
 * 		def together(u, v):
 * 			if (partition[u] == partition[v]):             # <<<<<<<<<<<<<<
 * 				return 1.0
 * 			else:
 */
  }

  /* "networkit/sparsification.pyx":1266
 * 				return 1.0
 * 			else:
 * 				return 0.0             # <<<<<<<<<<<<<<
 * 
 * 		edgeScores = [None for i in range(G.upperEdgeIdBound())]
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_float_0_0);
    __pyx_r = __pyx_float_0_0;
    goto __pyx_L0;
  }

  /* "networkit/sparsification.pyx":1262
 * 		partition = cdAlgo.getPartition()
 * 
 * 		def together(u, v):             # <<<<<<<<<<<<<<
 * 			if (partition[u] == partition[v]):
 * 				return 1.0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.sparsification.ModularityPartitionScore.scores.together", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":1269
 * 
 * 		edgeScores = [None for i in range(G.upperEdgeIdBound())]
 * 		G.forEdges(lambda u, v, w, eid: edgeScores.__setitem__(eid, together(u, v)))             # <<<<<<<<<<<<<<
 * 		return edgeScores
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_24ModularityPartitionScore_6scores_2lambda1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_14sparsification_24ModularityPartitionScore_6scores_2lambda1 = {"lambda1", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_24ModularityPartitionScore_6scores_2lambda1, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_14sparsification_24ModularityPartitionScore_6scores_2lambda1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_u = 0;
  PyObject *__pyx_v_v = 0;
  CYTHON_UNUSED PyObject *__pyx_v_w = 0;
  PyObject *__pyx_v_eid = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda1 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_u,&__pyx_n_s_v,&__pyx_n_s_w,&__pyx_n_s_eid,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_u)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("lambda1", 1, 4, 4, 1); __PYX_ERR(0, 1269, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("lambda1", 1, 4, 4, 2); __PYX_ERR(0, 1269, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_eid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("lambda1", 1, 4, 4, 3); __PYX_ERR(0, 1269, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "lambda1") < 0)) __PYX_ERR(0, 1269, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_u = values[0];
    __pyx_v_v = values[1];
    __pyx_v_w = values[2];
    __pyx_v_eid = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lambda1", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1269, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.ModularityPartitionScore.scores.lambda1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_lambda_funcdef_lambda1(__pyx_self, __pyx_v_u, __pyx_v_v, __pyx_v_w, __pyx_v_eid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda1(PyObject *__pyx_self, PyObject *__pyx_v_u, PyObject *__pyx_v_v, CYTHON_UNUSED PyObject *__pyx_v_w, PyObject *__pyx_v_eid) {
  struct __pyx_obj_9networkit_14sparsification___pyx_scope_struct__scores *__pyx_cur_scope;
  struct __pyx_obj_9networkit_14sparsification___pyx_scope_struct__scores *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda1", 0);
  __pyx_outer_scope = (struct __pyx_obj_9networkit_14sparsification___pyx_scope_struct__scores *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_v_edgeScores)) { __Pyx_RaiseClosureNameError("edgeScores"); __PYX_ERR(0, 1269, __pyx_L1_error) }
  if (unlikely(!__pyx_cur_scope->__pyx_v_together)) { __Pyx_RaiseClosureNameError("together"); __PYX_ERR(0, 1269, __pyx_L1_error) }
  __pyx_t_1 = __pyx_pf_9networkit_14sparsification_24ModularityPartitionScore_6scores_together(__pyx_cur_scope->__pyx_v_together, __pyx_v_u, __pyx_v_v); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_CallUnboundCMethod2(&__pyx_umethod_PyList_Type___setitem, __pyx_cur_scope->__pyx_v_edgeScores, __pyx_v_eid, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.sparsification.ModularityPartitionScore.scores.lambda1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":1250
 * 	"""  """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the minimum parameter value
 * 		such that the edge is contained in the sparsified graph.
 */

static PyObject *__pyx_pf_9networkit_14sparsification_24ModularityPartitionScore_scores(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_G) {
  struct __pyx_obj_9networkit_14sparsification___pyx_scope_struct__scores *__pyx_cur_scope;
  PyObject *__pyx_v_cdAlgo = NULL;
  CYTHON_UNUSED PyObject *__pyx_8genexpr2__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("scores", 0);
  __pyx_cur_scope = (struct __pyx_obj_9networkit_14sparsification___pyx_scope_struct__scores *)__pyx_tp_new_9networkit_14sparsification___pyx_scope_struct__scores(__pyx_ptype_9networkit_14sparsification___pyx_scope_struct__scores, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_9networkit_14sparsification___pyx_scope_struct__scores *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1250, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }

  /* "networkit/sparsification.pyx":1258
 * 		"""
 * 
 * 		cdAlgo = community.PLM(G, par="none randomized", refine=True, turbo=True)             # <<<<<<<<<<<<<<
 * 		cdAlgo.run()
 * 		partition = cdAlgo.getPartition()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_community); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PLM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_G);
  __Pyx_GIVEREF(__pyx_v_G);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_G);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_par, __pyx_kp_u_none_randomized) < 0) __PYX_ERR(0, 1258, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_refine, Py_True) < 0) __PYX_ERR(0, 1258, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_turbo, Py_True) < 0) __PYX_ERR(0, 1258, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_cdAlgo = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":1259
 * 
 * 		cdAlgo = community.PLM(G, par="none randomized", refine=True, turbo=True)
 * 		cdAlgo.run()             # <<<<<<<<<<<<<<
 * 		partition = cdAlgo.getPartition()
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_cdAlgo, __pyx_n_s_run); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_4 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":1260
 * 		cdAlgo = community.PLM(G, par="none randomized", refine=True, turbo=True)
 * 		cdAlgo.run()
 * 		partition = cdAlgo.getPartition()             # <<<<<<<<<<<<<<
 * 
 * 		def together(u, v):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_cdAlgo, __pyx_n_s_getPartition); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_4 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_cur_scope->__pyx_v_partition = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":1262
 * 		partition = cdAlgo.getPartition()
 * 
 * 		def together(u, v):             # <<<<<<<<<<<<<<
 * 			if (partition[u] == partition[v]):
 * 				return 1.0
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_24ModularityPartitionScore_6scores_1together, 0, __pyx_n_s_ModularityPartitionScore_scores, ((PyObject*)__pyx_cur_scope), __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__50)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_cur_scope->__pyx_v_together = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":1268
 * 				return 0.0
 * 
 * 		edgeScores = [None for i in range(G.upperEdgeIdBound())]             # <<<<<<<<<<<<<<
 * 		G.forEdges(lambda u, v, w, eid: edgeScores.__setitem__(eid, together(u, v)))
 * 		return edgeScores
 */
  { /* enter inner scope */
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1268, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_G, __pyx_n_s_upperEdgeIdBound); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1268, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1268, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1268, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1268, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1268, __pyx_L5_error)
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1268, __pyx_L5_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1268, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1268, __pyx_L5_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1268, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        }
      } else {
        __pyx_t_1 = __pyx_t_6(__pyx_t_3);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1268, __pyx_L5_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr2__pyx_v_i, __pyx_t_1);
      __pyx_t_1 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)Py_None))) __PYX_ERR(0, 1268, __pyx_L5_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_i); __pyx_8genexpr2__pyx_v_i = 0;
    goto __pyx_L8_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_i); __pyx_8genexpr2__pyx_v_i = 0;
    goto __pyx_L1_error;
    __pyx_L8_exit_scope:;
  } /* exit inner scope */
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_cur_scope->__pyx_v_edgeScores = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":1269
 * 
 * 		edgeScores = [None for i in range(G.upperEdgeIdBound())]
 * 		G.forEdges(lambda u, v, w, eid: edgeScores.__setitem__(eid, together(u, v)))             # <<<<<<<<<<<<<<
 * 		return edgeScores
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_G, __pyx_n_s_forEdges); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_24ModularityPartitionScore_6scores_2lambda1, 0, __pyx_n_s_ModularityPartitionScore_scores_2, ((PyObject*)__pyx_cur_scope), __pyx_n_s_networkit_sparsification, __pyx_d, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_4 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":1270
 * 		edgeScores = [None for i in range(G.upperEdgeIdBound())]
 * 		G.forEdges(lambda u, v, w, eid: edgeScores.__setitem__(eid, together(u, v)))
 * 		return edgeScores             # <<<<<<<<<<<<<<
 * 
 * class ConstantScore():
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_edgeScores);
  __pyx_r = __pyx_cur_scope->__pyx_v_edgeScores;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":1250
 * 	"""  """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the minimum parameter value
 * 		such that the edge is contained in the sparsified graph.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("networkit.sparsification.ModularityPartitionScore.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cdAlgo);
  __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_i);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":1275
 * 	""" Assigns as an attribute the same value to each edge (for sanity checks) """
 * 
 * 	def __init__(self, constValue = 1.0):             # <<<<<<<<<<<<<<
 * 		""" Creates a new instance of an attributizer that always
 * 		 returns the given value as edge attribute value.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_13ConstantScore_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_14sparsification_13ConstantScore___init__[] = " Creates a new instance of an attributizer that always\n\t\t returns the given value as edge attribute value.\n\t\t";
static PyMethodDef __pyx_mdef_9networkit_14sparsification_13ConstantScore_1__init__ = {"__init__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_13ConstantScore_1__init__, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_14sparsification_13ConstantScore___init__};
static PyObject *__pyx_pw_9networkit_14sparsification_13ConstantScore_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_constValue = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_constValue,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)((PyObject*)__pyx_float_1_0));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_constValue);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 1275, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_constValue = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1275, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.ConstantScore.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_13ConstantScore___init__(__pyx_self, __pyx_v_self, __pyx_v_constValue);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_13ConstantScore___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_constValue) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "networkit/sparsification.pyx":1279
 * 		 returns the given value as edge attribute value.
 * 		"""
 * 		self.constValue = constValue             # <<<<<<<<<<<<<<
 * 
 * 	def scores(self, G):
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_constValue, __pyx_v_constValue) < 0) __PYX_ERR(0, 1279, __pyx_L1_error)

  /* "networkit/sparsification.pyx":1275
 * 	""" Assigns as an attribute the same value to each edge (for sanity checks) """
 * 
 * 	def __init__(self, constValue = 1.0):             # <<<<<<<<<<<<<<
 * 		""" Creates a new instance of an attributizer that always
 * 		 returns the given value as edge attribute value.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.sparsification.ConstantScore.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/sparsification.pyx":1281
 * 		self.constValue = constValue
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the constant value given
 * 		in the constructor.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_14sparsification_13ConstantScore_3scores(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_14sparsification_13ConstantScore_2scores[] = " Returns an edge attribute that holds for each edge the constant value given\n\t\tin the constructor.\n\t\t";
static PyMethodDef __pyx_mdef_9networkit_14sparsification_13ConstantScore_3scores = {"scores", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_13ConstantScore_3scores, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_14sparsification_13ConstantScore_2scores};
static PyObject *__pyx_pw_9networkit_14sparsification_13ConstantScore_3scores(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  CYTHON_UNUSED PyObject *__pyx_v_G = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scores (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_G,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scores", 1, 2, 2, 1); __PYX_ERR(0, 1281, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "scores") < 0)) __PYX_ERR(0, 1281, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_G = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("scores", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1281, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.sparsification.ConstantScore.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_14sparsification_13ConstantScore_2scores(__pyx_self, __pyx_v_self, __pyx_v_G);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_14sparsification_13ConstantScore_2scores(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_G) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("scores", 0);

  /* "networkit/sparsification.pyx":1285
 * 		in the constructor.
 * 		"""
 * 		return self.constValue             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_constValue); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "networkit/sparsification.pyx":1281
 * 		self.constValue = constValue
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the constant value given
 * 		in the constructor.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.sparsification.ConstantScore.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_double")
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<double>  __pyx_convert_vector_from_py_double(PyObject *__pyx_v_o) {
  std::vector<double>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<double>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_double", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_item); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((double)__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_double")
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static std::vector<bool>  __pyx_convert_vector_from_py_bool(PyObject *__pyx_v_o) {
  std::vector<bool>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<bool>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_bool", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_bool(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_item); if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((bool)__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_bool(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_bool")
 * cdef vector[X] __pyx_convert_vector_from_py_bool(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_bool", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static std::vector<__pyx_t_9networkit_14sparsification_count>  __pyx_convert_vector_from_py___pyx_t_9networkit_14sparsification_count(PyObject *__pyx_v_o) {
  std::vector<__pyx_t_9networkit_14sparsification_count>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<__pyx_t_9networkit_14sparsification_count>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  __pyx_t_9networkit_14sparsification_count __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py___pyx_t_9networkit_14sparsification_count", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py___pyx_t_9networkit_14sparsification_count(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_As_uint64_t(__pyx_v_item); if (unlikely((__pyx_t_5 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((__pyx_t_9networkit_14sparsification_count)__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py___pyx_t_9networkit_14sparsification_count(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py___pyx_t_9networkit_14sparsification_count")
 * cdef vector[X] __pyx_convert_vector_from_py___pyx_t_9networkit_14sparsification_count(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py___pyx_t_9networkit_14sparsification_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_double(const std::vector<double>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_double", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = PyFloat_FromDouble((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py___pyx_t_9networkit_14sparsification_count(const std::vector<__pyx_t_9networkit_14sparsification_count>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py___pyx_t_9networkit_14sparsification_count", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py___pyx_t_9networkit_14sparsification_count")
 * cdef object __pyx_convert_vector_to_py___pyx_t_9networkit_14sparsification_count(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __Pyx_PyInt_From_uint64_t((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py___pyx_t_9networkit_14sparsification_count")
 * cdef object __pyx_convert_vector_to_py___pyx_t_9networkit_14sparsification_count(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py___pyx_t_9networkit_14sparsification_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScore __pyx_vtable_9networkit_14sparsification_EdgeScore;

static PyObject *__pyx_tp_new_9networkit_14sparsification_EdgeScore(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_14sparsification_EdgeScore *p;
  PyObject *o = __pyx_ptype_9networkit_4base_Algorithm->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_14sparsification_EdgeScore *)o);
  p->__pyx_vtab = __pyx_vtabptr_9networkit_14sparsification_EdgeScore;
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_9networkit_14sparsification_EdgeScore(PyObject *o) {
  struct __pyx_obj_9networkit_14sparsification_EdgeScore *p = (struct __pyx_obj_9networkit_14sparsification_EdgeScore *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_9networkit_14sparsification_9EdgeScore_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->_G);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) __pyx_ptype_9networkit_4base_Algorithm->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_9networkit_14sparsification_EdgeScore);
}

static int __pyx_tp_traverse_9networkit_14sparsification_EdgeScore(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_14sparsification_EdgeScore *p = (struct __pyx_obj_9networkit_14sparsification_EdgeScore *)o;
  e = ((likely(__pyx_ptype_9networkit_4base_Algorithm)) ? ((__pyx_ptype_9networkit_4base_Algorithm->tp_traverse) ? __pyx_ptype_9networkit_4base_Algorithm->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9networkit_14sparsification_EdgeScore)); if (e) return e;
  if (p->_G) {
    e = (*v)(((PyObject *)p->_G), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_14sparsification_EdgeScore(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_14sparsification_EdgeScore *p = (struct __pyx_obj_9networkit_14sparsification_EdgeScore *)o;
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) { if (__pyx_ptype_9networkit_4base_Algorithm->tp_clear) __pyx_ptype_9networkit_4base_Algorithm->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9networkit_14sparsification_EdgeScore);
  tmp = ((PyObject*)p->_G);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9networkit_14sparsification_EdgeScore[] = {
  {"score", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_14sparsification_9EdgeScore_5score, METH_VARARGS|METH_KEYWORDS, 0},
  {"scores", (PyCFunction)__pyx_pw_9networkit_14sparsification_9EdgeScore_7scores, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_14sparsification_9EdgeScore_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_14sparsification_9EdgeScore_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_14sparsification_EdgeScore = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.sparsification.EdgeScore", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_14sparsification_EdgeScore), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_14sparsification_EdgeScore, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n\tTODO DOCSTIRNG\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_14sparsification_EdgeScore, /*tp_traverse*/
  __pyx_tp_clear_9networkit_14sparsification_EdgeScore, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_14sparsification_EdgeScore, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_9networkit_14sparsification_9EdgeScore_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_14sparsification_EdgeScore, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_9networkit_14sparsification_ChibaNishizekiTriangleEdgeScore __pyx_vtable_9networkit_14sparsification_ChibaNishizekiTriangleEdgeScore;

static PyObject *__pyx_tp_new_9networkit_14sparsification_ChibaNishizekiTriangleEdgeScore(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_14sparsification_ChibaNishizekiTriangleEdgeScore *p;
  PyObject *o = __pyx_tp_new_9networkit_14sparsification_EdgeScore(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_14sparsification_ChibaNishizekiTriangleEdgeScore *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScore*)__pyx_vtabptr_9networkit_14sparsification_ChibaNishizekiTriangleEdgeScore;
  if (unlikely(__pyx_pw_9networkit_14sparsification_31ChibaNishizekiTriangleEdgeScore_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9networkit_14sparsification_ChibaNishizekiTriangleEdgeScore[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_14sparsification_31ChibaNishizekiTriangleEdgeScore_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_14sparsification_31ChibaNishizekiTriangleEdgeScore_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_14sparsification_ChibaNishizekiTriangleEdgeScore = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.sparsification.ChibaNishizekiTriangleEdgeScore", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_14sparsification_ChibaNishizekiTriangleEdgeScore), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_14sparsification_EdgeScore, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n\tCalculates for each edge the number of triangles it is embedded in.\n\n\tParameters:\n\t-----------\n\tG : networkit.Graph\n\t\tThe graph to count triangles on.\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_14sparsification_EdgeScore, /*tp_traverse*/
  __pyx_tp_clear_9networkit_14sparsification_EdgeScore, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_14sparsification_ChibaNishizekiTriangleEdgeScore, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_9networkit_14sparsification_9EdgeScore_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_14sparsification_ChibaNishizekiTriangleEdgeScore, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_9networkit_14sparsification_ChibaNishizekiQuadrangleEdgeScore __pyx_vtable_9networkit_14sparsification_ChibaNishizekiQuadrangleEdgeScore;

static PyObject *__pyx_tp_new_9networkit_14sparsification_ChibaNishizekiQuadrangleEdgeScore(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_14sparsification_ChibaNishizekiQuadrangleEdgeScore *p;
  PyObject *o = __pyx_tp_new_9networkit_14sparsification_EdgeScore(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_14sparsification_ChibaNishizekiQuadrangleEdgeScore *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScore*)__pyx_vtabptr_9networkit_14sparsification_ChibaNishizekiQuadrangleEdgeScore;
  if (unlikely(__pyx_pw_9networkit_14sparsification_33ChibaNishizekiQuadrangleEdgeScore_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9networkit_14sparsification_ChibaNishizekiQuadrangleEdgeScore[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_14sparsification_33ChibaNishizekiQuadrangleEdgeScore_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_14sparsification_33ChibaNishizekiQuadrangleEdgeScore_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_14sparsification_ChibaNishizekiQuadrangleEdgeScore = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.sparsification.ChibaNishizekiQuadrangleEdgeScore", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_14sparsification_ChibaNishizekiQuadrangleEdgeScore), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_14sparsification_EdgeScore, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n\tCalculates for each edge the number of quadrangles (circles of length 4) it is embedded in.\n\n\tParameters:\n\t-----------\n\tG : networkit.Graph\n\t\tThe graph to count quadrangles on.\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_14sparsification_EdgeScore, /*tp_traverse*/
  __pyx_tp_clear_9networkit_14sparsification_EdgeScore, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_14sparsification_ChibaNishizekiQuadrangleEdgeScore, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_9networkit_14sparsification_9EdgeScore_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_14sparsification_ChibaNishizekiQuadrangleEdgeScore, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_9networkit_14sparsification_TriangleEdgeScore __pyx_vtable_9networkit_14sparsification_TriangleEdgeScore;

static PyObject *__pyx_tp_new_9networkit_14sparsification_TriangleEdgeScore(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_14sparsification_TriangleEdgeScore *p;
  PyObject *o = __pyx_tp_new_9networkit_14sparsification_EdgeScore(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_14sparsification_TriangleEdgeScore *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScore*)__pyx_vtabptr_9networkit_14sparsification_TriangleEdgeScore;
  if (unlikely(__pyx_pw_9networkit_14sparsification_17TriangleEdgeScore_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9networkit_14sparsification_TriangleEdgeScore[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_14sparsification_17TriangleEdgeScore_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_14sparsification_17TriangleEdgeScore_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_14sparsification_TriangleEdgeScore = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.sparsification.TriangleEdgeScore", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_14sparsification_TriangleEdgeScore), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_14sparsification_EdgeScore, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n\tTriangle counting.\n\n\tParameters:\n\t-----------\n\tG : networkit.Graph\n\t\tThe graph to count triangles on.\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_14sparsification_EdgeScore, /*tp_traverse*/
  __pyx_tp_clear_9networkit_14sparsification_EdgeScore, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_14sparsification_TriangleEdgeScore, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_9networkit_14sparsification_9EdgeScore_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_14sparsification_TriangleEdgeScore, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScoreLinearizer __pyx_vtable_9networkit_14sparsification_EdgeScoreLinearizer;

static PyObject *__pyx_tp_new_9networkit_14sparsification_EdgeScoreLinearizer(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_14sparsification_EdgeScoreLinearizer *p;
  PyObject *o = __pyx_tp_new_9networkit_14sparsification_EdgeScore(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_14sparsification_EdgeScoreLinearizer *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScore*)__pyx_vtabptr_9networkit_14sparsification_EdgeScoreLinearizer;
  new((void*)&(p->_score)) std::vector<double> ();
  if (unlikely(__pyx_pw_9networkit_14sparsification_19EdgeScoreLinearizer_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_14sparsification_EdgeScoreLinearizer(PyObject *o) {
  struct __pyx_obj_9networkit_14sparsification_EdgeScoreLinearizer *p = (struct __pyx_obj_9networkit_14sparsification_EdgeScoreLinearizer *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->_score);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_9networkit_14sparsification_EdgeScore(o);
}

static PyMethodDef __pyx_methods_9networkit_14sparsification_EdgeScoreLinearizer[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_14sparsification_19EdgeScoreLinearizer_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_14sparsification_19EdgeScoreLinearizer_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_14sparsification_EdgeScoreLinearizer = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.sparsification.EdgeScoreLinearizer", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_14sparsification_EdgeScoreLinearizer), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_14sparsification_EdgeScoreLinearizer, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n\tLinearizes a score such that values are evenly distributed between 0 and 1.\n\n\tParameters:\n\t-----------\n\tG : networkit.Graph\n\t\tThe input graph.\n\ta : vector[double]\n\t\tEdge score that shall be linearized.\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_14sparsification_EdgeScore, /*tp_traverse*/
  __pyx_tp_clear_9networkit_14sparsification_EdgeScore, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_14sparsification_EdgeScoreLinearizer, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_9networkit_14sparsification_9EdgeScore_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_14sparsification_EdgeScoreLinearizer, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScoreNormalizer __pyx_vtable_9networkit_14sparsification_EdgeScoreNormalizer;

static PyObject *__pyx_tp_new_9networkit_14sparsification_EdgeScoreNormalizer(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_14sparsification_EdgeScoreNormalizer *p;
  PyObject *o = __pyx_tp_new_9networkit_14sparsification_EdgeScore(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_14sparsification_EdgeScoreNormalizer *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScore*)__pyx_vtabptr_9networkit_14sparsification_EdgeScoreNormalizer;
  new((void*)&(p->_inScoreDouble)) std::vector<double> ();
  new((void*)&(p->_inScoreCount)) std::vector<__pyx_t_9networkit_14sparsification_count> ();
  if (unlikely(__pyx_pw_9networkit_14sparsification_19EdgeScoreNormalizer_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_14sparsification_EdgeScoreNormalizer(PyObject *o) {
  struct __pyx_obj_9networkit_14sparsification_EdgeScoreNormalizer *p = (struct __pyx_obj_9networkit_14sparsification_EdgeScoreNormalizer *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->_inScoreDouble);
  __Pyx_call_destructor(p->_inScoreCount);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_9networkit_14sparsification_EdgeScore(o);
}

static PyMethodDef __pyx_methods_9networkit_14sparsification_EdgeScoreNormalizer[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_14sparsification_19EdgeScoreNormalizer_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_14sparsification_19EdgeScoreNormalizer_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_14sparsification_EdgeScoreNormalizer = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.sparsification.EdgeScoreNormalizer", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_14sparsification_EdgeScoreNormalizer), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_14sparsification_EdgeScoreNormalizer, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n\tNormalize an edge score such that it is in a certain range.\n\n\tParameters:\n\t-----------\n\tG : networkit.Graph\n\t\tThe graph the edge score is defined on.\n\tscore : vector[double]\n\t\tThe edge score to normalize.\n\tinverse\n\t\tSet to True in order to inverse the resulting score.\n\tlower\n\t\tLower bound of the target range.\n\tupper\n\t\tUpper bound of the target range.\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_14sparsification_EdgeScore, /*tp_traverse*/
  __pyx_tp_clear_9networkit_14sparsification_EdgeScore, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_14sparsification_EdgeScoreNormalizer, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_9networkit_14sparsification_9EdgeScore_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_14sparsification_EdgeScoreNormalizer, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScoreBlender __pyx_vtable_9networkit_14sparsification_EdgeScoreBlender;

static PyObject *__pyx_tp_new_9networkit_14sparsification_EdgeScoreBlender(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_14sparsification_EdgeScoreBlender *p;
  PyObject *o = __pyx_tp_new_9networkit_14sparsification_EdgeScore(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_14sparsification_EdgeScoreBlender *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScore*)__pyx_vtabptr_9networkit_14sparsification_EdgeScoreBlender;
  new((void*)&(p->_attribute0)) std::vector<double> ();
  new((void*)&(p->_attribute1)) std::vector<double> ();
  new((void*)&(p->_selection)) std::vector<bool> ();
  if (unlikely(__pyx_pw_9networkit_14sparsification_16EdgeScoreBlender_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_14sparsification_EdgeScoreBlender(PyObject *o) {
  struct __pyx_obj_9networkit_14sparsification_EdgeScoreBlender *p = (struct __pyx_obj_9networkit_14sparsification_EdgeScoreBlender *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->_attribute0);
  __Pyx_call_destructor(p->_attribute1);
  __Pyx_call_destructor(p->_selection);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_9networkit_14sparsification_EdgeScore(o);
}

static PyMethodDef __pyx_methods_9networkit_14sparsification_EdgeScoreBlender[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_14sparsification_16EdgeScoreBlender_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_14sparsification_16EdgeScoreBlender_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_14sparsification_EdgeScoreBlender = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.sparsification.EdgeScoreBlender", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_14sparsification_EdgeScoreBlender), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_14sparsification_EdgeScoreBlender, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n\tBlends two attribute vectors, the value is chosen depending on the supplied bool vector\n\n\tParameters:\n\t-----------\n\tG : networkit.Graph\n\t\tThe graph for which the attribute shall be blended\n\tattribute0 : vector[double]\n\t\tThe first attribute (chosen for selection[eid] == false)\n\tattribute1 : vector[double]\n\t\tThe second attribute (chosen for selection[eid] == true)\n\tselection : vector[bool]\n\t\tThe selection vector\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_14sparsification_EdgeScore, /*tp_traverse*/
  __pyx_tp_clear_9networkit_14sparsification_EdgeScore, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_14sparsification_EdgeScoreBlender, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_9networkit_14sparsification_9EdgeScore_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_14sparsification_EdgeScoreBlender, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_9networkit_14sparsification_GeometricMeanScore __pyx_vtable_9networkit_14sparsification_GeometricMeanScore;

static PyObject *__pyx_tp_new_9networkit_14sparsification_GeometricMeanScore(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_14sparsification_GeometricMeanScore *p;
  PyObject *o = __pyx_tp_new_9networkit_14sparsification_EdgeScore(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_14sparsification_GeometricMeanScore *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScore*)__pyx_vtabptr_9networkit_14sparsification_GeometricMeanScore;
  new((void*)&(p->_attribute)) std::vector<double> ();
  if (unlikely(__pyx_pw_9networkit_14sparsification_18GeometricMeanScore_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_14sparsification_GeometricMeanScore(PyObject *o) {
  struct __pyx_obj_9networkit_14sparsification_GeometricMeanScore *p = (struct __pyx_obj_9networkit_14sparsification_GeometricMeanScore *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->_attribute);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_9networkit_14sparsification_EdgeScore(o);
}

static PyMethodDef __pyx_methods_9networkit_14sparsification_GeometricMeanScore[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_14sparsification_18GeometricMeanScore_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_14sparsification_18GeometricMeanScore_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_14sparsification_GeometricMeanScore = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.sparsification.GeometricMeanScore", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_14sparsification_GeometricMeanScore), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_14sparsification_GeometricMeanScore, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n\tNormalizes the given edge attribute by the geometric average of the sum of the attributes of the incident edges of the incident nodes.\n\n\tParameters:\n\t-----------\n\tG : networkit.Graph\n\t\tThe input graph.\n\ta : vector[double]\n\t\tEdge attribute that shall be normalized.\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_14sparsification_EdgeScore, /*tp_traverse*/
  __pyx_tp_clear_9networkit_14sparsification_EdgeScore, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_14sparsification_GeometricMeanScore, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_9networkit_14sparsification_9EdgeScore_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_14sparsification_GeometricMeanScore, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_9networkit_14sparsification_EdgeScoreAsWeight(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_14sparsification_EdgeScoreAsWeight *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_14sparsification_EdgeScoreAsWeight *)o);
  new((void*)&(p->_score)) std::vector<double> ();
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_9networkit_14sparsification_17EdgeScoreAsWeight_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_14sparsification_EdgeScoreAsWeight(PyObject *o) {
  struct __pyx_obj_9networkit_14sparsification_EdgeScoreAsWeight *p = (struct __pyx_obj_9networkit_14sparsification_EdgeScoreAsWeight *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_9networkit_14sparsification_17EdgeScoreAsWeight_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  __Pyx_call_destructor(p->_score);
  Py_CLEAR(p->_G);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_9networkit_14sparsification_EdgeScoreAsWeight(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_14sparsification_EdgeScoreAsWeight *p = (struct __pyx_obj_9networkit_14sparsification_EdgeScoreAsWeight *)o;
  if (p->_G) {
    e = (*v)(((PyObject *)p->_G), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_14sparsification_EdgeScoreAsWeight(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_14sparsification_EdgeScoreAsWeight *p = (struct __pyx_obj_9networkit_14sparsification_EdgeScoreAsWeight *)o;
  tmp = ((PyObject*)p->_G);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9networkit_14sparsification_EdgeScoreAsWeight[] = {
  {"getWeightedGraph", (PyCFunction)__pyx_pw_9networkit_14sparsification_17EdgeScoreAsWeight_5getWeightedGraph, METH_NOARGS, __pyx_doc_9networkit_14sparsification_17EdgeScoreAsWeight_4getWeightedGraph},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_14sparsification_17EdgeScoreAsWeight_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_14sparsification_17EdgeScoreAsWeight_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_14sparsification_EdgeScoreAsWeight = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.sparsification.EdgeScoreAsWeight", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_14sparsification_EdgeScoreAsWeight), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_14sparsification_EdgeScoreAsWeight, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n\tAssigns an edge score as edge weight of a graph.\n\n\tParameters:\n\t-----------\n\tG : networkit.Graph\n\t\tThe graph to assign edge weights to.\n\tscore : vector[double]\n\t\tThe input edge score.\n\tsquared : bool\n\t\tEdge weights will be squared if set to True.\n\toffset : edgeweight\n\t\tThis offset will be added to each edge weight.\n\tfactor : edgeweight\n\t\tEach edge weight will be multiplied by this factor.\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_14sparsification_EdgeScoreAsWeight, /*tp_traverse*/
  __pyx_tp_clear_9networkit_14sparsification_EdgeScoreAsWeight, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_14sparsification_EdgeScoreAsWeight, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_14sparsification_EdgeScoreAsWeight, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_9networkit_14sparsification_SimmelianOverlapScore __pyx_vtable_9networkit_14sparsification_SimmelianOverlapScore;

static PyObject *__pyx_tp_new_9networkit_14sparsification_SimmelianOverlapScore(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_14sparsification_SimmelianOverlapScore *p;
  PyObject *o = __pyx_tp_new_9networkit_14sparsification_EdgeScore(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_14sparsification_SimmelianOverlapScore *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScore*)__pyx_vtabptr_9networkit_14sparsification_SimmelianOverlapScore;
  new((void*)&(p->_triangles)) std::vector<__pyx_t_9networkit_14sparsification_count> ();
  if (unlikely(__pyx_pw_9networkit_14sparsification_21SimmelianOverlapScore_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_14sparsification_SimmelianOverlapScore(PyObject *o) {
  struct __pyx_obj_9networkit_14sparsification_SimmelianOverlapScore *p = (struct __pyx_obj_9networkit_14sparsification_SimmelianOverlapScore *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->_triangles);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_9networkit_14sparsification_EdgeScore(o);
}

static PyMethodDef __pyx_methods_9networkit_14sparsification_SimmelianOverlapScore[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_14sparsification_21SimmelianOverlapScore_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_14sparsification_21SimmelianOverlapScore_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_14sparsification_SimmelianOverlapScore = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.sparsification.SimmelianOverlapScore", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_14sparsification_SimmelianOverlapScore), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_14sparsification_SimmelianOverlapScore, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9networkit_14sparsification_EdgeScore, /*tp_traverse*/
  __pyx_tp_clear_9networkit_14sparsification_EdgeScore, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_14sparsification_SimmelianOverlapScore, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_9networkit_14sparsification_9EdgeScore_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_14sparsification_SimmelianOverlapScore, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_9networkit_14sparsification_PrefixJaccardScore __pyx_vtable_9networkit_14sparsification_PrefixJaccardScore;

static PyObject *__pyx_tp_new_9networkit_14sparsification_PrefixJaccardScore(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_14sparsification_PrefixJaccardScore *p;
  PyObject *o = __pyx_tp_new_9networkit_14sparsification_EdgeScore(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_14sparsification_PrefixJaccardScore *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScore*)__pyx_vtabptr_9networkit_14sparsification_PrefixJaccardScore;
  new((void*)&(p->_attribute)) std::vector<double> ();
  if (unlikely(__pyx_pw_9networkit_14sparsification_18PrefixJaccardScore_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_14sparsification_PrefixJaccardScore(PyObject *o) {
  struct __pyx_obj_9networkit_14sparsification_PrefixJaccardScore *p = (struct __pyx_obj_9networkit_14sparsification_PrefixJaccardScore *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->_attribute);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_9networkit_14sparsification_EdgeScore(o);
}

static PyMethodDef __pyx_methods_9networkit_14sparsification_PrefixJaccardScore[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_14sparsification_18PrefixJaccardScore_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_14sparsification_18PrefixJaccardScore_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_14sparsification_PrefixJaccardScore = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.sparsification.PrefixJaccardScore", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_14sparsification_PrefixJaccardScore), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_14sparsification_PrefixJaccardScore, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9networkit_14sparsification_EdgeScore, /*tp_traverse*/
  __pyx_tp_clear_9networkit_14sparsification_EdgeScore, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_14sparsification_PrefixJaccardScore, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_9networkit_14sparsification_9EdgeScore_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_14sparsification_PrefixJaccardScore, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_9networkit_14sparsification_MultiscaleScore __pyx_vtable_9networkit_14sparsification_MultiscaleScore;

static PyObject *__pyx_tp_new_9networkit_14sparsification_MultiscaleScore(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_14sparsification_MultiscaleScore *p;
  PyObject *o = __pyx_tp_new_9networkit_14sparsification_EdgeScore(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_14sparsification_MultiscaleScore *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScore*)__pyx_vtabptr_9networkit_14sparsification_MultiscaleScore;
  new((void*)&(p->_attribute)) std::vector<double> ();
  if (unlikely(__pyx_pw_9networkit_14sparsification_15MultiscaleScore_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_14sparsification_MultiscaleScore(PyObject *o) {
  struct __pyx_obj_9networkit_14sparsification_MultiscaleScore *p = (struct __pyx_obj_9networkit_14sparsification_MultiscaleScore *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->_attribute);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_9networkit_14sparsification_EdgeScore(o);
}

static PyMethodDef __pyx_methods_9networkit_14sparsification_MultiscaleScore[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_14sparsification_15MultiscaleScore_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_14sparsification_15MultiscaleScore_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_14sparsification_MultiscaleScore = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.sparsification.MultiscaleScore", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_14sparsification_MultiscaleScore), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_14sparsification_MultiscaleScore, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n\tAn implementation of the Multiscale Backbone. Calculates for each edge the minimum\n\tparameter value such that the edge is still contained in the sparsified graph.\n\n\tParameters:\n\t-----------\n\tG : networkit.Graph\n\t\tThe graph to apply the Multiscale algorithm to.\n\tattribute : vector[double]\n\t\tThe edge attribute the Multiscale algorithm is to be applied to.\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_14sparsification_EdgeScore, /*tp_traverse*/
  __pyx_tp_clear_9networkit_14sparsification_EdgeScore, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_14sparsification_MultiscaleScore, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_9networkit_14sparsification_9EdgeScore_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_14sparsification_MultiscaleScore, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_9networkit_14sparsification_RandomEdgeScore __pyx_vtable_9networkit_14sparsification_RandomEdgeScore;

static PyObject *__pyx_tp_new_9networkit_14sparsification_RandomEdgeScore(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_14sparsification_RandomEdgeScore *p;
  PyObject *o = __pyx_tp_new_9networkit_14sparsification_EdgeScore(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_14sparsification_RandomEdgeScore *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScore*)__pyx_vtabptr_9networkit_14sparsification_RandomEdgeScore;
  if (unlikely(__pyx_pw_9networkit_14sparsification_15RandomEdgeScore_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9networkit_14sparsification_RandomEdgeScore[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_14sparsification_15RandomEdgeScore_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_14sparsification_15RandomEdgeScore_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_14sparsification_RandomEdgeScore = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.sparsification.RandomEdgeScore", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_14sparsification_RandomEdgeScore), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_14sparsification_EdgeScore, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n\tGenerates a random edge attribute. Each edge is assigned a random value in [0,1].\n\n\tParameters:\n\t-----------\n\tG : networkit.Graph\n\t\tThe graph to calculate the Random Edge attribute for.\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_14sparsification_EdgeScore, /*tp_traverse*/
  __pyx_tp_clear_9networkit_14sparsification_EdgeScore, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_14sparsification_RandomEdgeScore, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_9networkit_14sparsification_9EdgeScore_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_14sparsification_RandomEdgeScore, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_9networkit_14sparsification_LocalSimilarityScore __pyx_vtable_9networkit_14sparsification_LocalSimilarityScore;

static PyObject *__pyx_tp_new_9networkit_14sparsification_LocalSimilarityScore(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_14sparsification_LocalSimilarityScore *p;
  PyObject *o = __pyx_tp_new_9networkit_14sparsification_EdgeScore(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_14sparsification_LocalSimilarityScore *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScore*)__pyx_vtabptr_9networkit_14sparsification_LocalSimilarityScore;
  new((void*)&(p->_triangles)) std::vector<__pyx_t_9networkit_14sparsification_count> ();
  if (unlikely(__pyx_pw_9networkit_14sparsification_20LocalSimilarityScore_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_14sparsification_LocalSimilarityScore(PyObject *o) {
  struct __pyx_obj_9networkit_14sparsification_LocalSimilarityScore *p = (struct __pyx_obj_9networkit_14sparsification_LocalSimilarityScore *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->_triangles);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_9networkit_14sparsification_EdgeScore(o);
}

static PyMethodDef __pyx_methods_9networkit_14sparsification_LocalSimilarityScore[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_14sparsification_20LocalSimilarityScore_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_14sparsification_20LocalSimilarityScore_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_14sparsification_LocalSimilarityScore = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.sparsification.LocalSimilarityScore", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_14sparsification_LocalSimilarityScore), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_14sparsification_LocalSimilarityScore, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n\tAn implementation of the Local Simlarity sparsification approach.\n\tThis attributizer calculates for each edge the maximum parameter value\n\tsuch that the edge is still contained in the sparsified graph.\n\n\tParameters:\n\t-----------\n\tG : networkit.Graph\n\t\tThe graph to apply the Local Similarity algorithm to.\n\ttriangles : vector[count]\n\t\tPreviously calculated edge triangle counts.\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_14sparsification_EdgeScore, /*tp_traverse*/
  __pyx_tp_clear_9networkit_14sparsification_EdgeScore, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_14sparsification_LocalSimilarityScore, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_9networkit_14sparsification_9EdgeScore_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_14sparsification_LocalSimilarityScore, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_9networkit_14sparsification_ForestFireScore __pyx_vtable_9networkit_14sparsification_ForestFireScore;

static PyObject *__pyx_tp_new_9networkit_14sparsification_ForestFireScore(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_14sparsification_ForestFireScore *p;
  PyObject *o = __pyx_tp_new_9networkit_14sparsification_EdgeScore(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_14sparsification_ForestFireScore *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScore*)__pyx_vtabptr_9networkit_14sparsification_ForestFireScore;
  if (unlikely(__pyx_pw_9networkit_14sparsification_15ForestFireScore_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9networkit_14sparsification_ForestFireScore[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_14sparsification_15ForestFireScore_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_14sparsification_15ForestFireScore_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_14sparsification_ForestFireScore = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.sparsification.ForestFireScore", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_14sparsification_ForestFireScore), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_14sparsification_EdgeScore, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n\tA variant of the Forest Fire sparsification approach that is based on random walks.\n\tThis attributizer calculates for each edge the minimum parameter value\n\tsuch that the edge is still contained in the sparsified graph.\n\n\tParameters:\n\t-----------\n\tG : networkit.Graph\n\t\tThe graph to apply the Forest Fire algorithm to.\n\tpf : double\n\t\tThe probability for neighbor nodes to get burned aswell.\n\ttebr : double\n\t\tThe Forest Fire will burn until tebr * numberOfEdges edges have been burnt.\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_14sparsification_EdgeScore, /*tp_traverse*/
  __pyx_tp_clear_9networkit_14sparsification_EdgeScore, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_14sparsification_ForestFireScore, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_9networkit_14sparsification_9EdgeScore_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_14sparsification_ForestFireScore, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_9networkit_14sparsification_LocalDegreeScore __pyx_vtable_9networkit_14sparsification_LocalDegreeScore;

static PyObject *__pyx_tp_new_9networkit_14sparsification_LocalDegreeScore(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_14sparsification_LocalDegreeScore *p;
  PyObject *o = __pyx_tp_new_9networkit_14sparsification_EdgeScore(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_14sparsification_LocalDegreeScore *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScore*)__pyx_vtabptr_9networkit_14sparsification_LocalDegreeScore;
  if (unlikely(__pyx_pw_9networkit_14sparsification_16LocalDegreeScore_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9networkit_14sparsification_LocalDegreeScore[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_14sparsification_16LocalDegreeScore_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_14sparsification_16LocalDegreeScore_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_14sparsification_LocalDegreeScore = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.sparsification.LocalDegreeScore", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_14sparsification_LocalDegreeScore), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_14sparsification_EdgeScore, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n\tThe LocalDegree sparsification approach is based on the idea of hub nodes.\n\tThis attributizer calculates for each edge the maximum parameter value\n\tsuch that the edge is still contained in the sparsified graph.\n\n\tParameters:\n\t-----------\n\tG : networkit.Graph\n\t\tThe graph to apply the Local Degree  algorithm to.\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_14sparsification_EdgeScore, /*tp_traverse*/
  __pyx_tp_clear_9networkit_14sparsification_EdgeScore, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_14sparsification_LocalDegreeScore, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_9networkit_14sparsification_9EdgeScore_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_14sparsification_LocalDegreeScore, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_9networkit_14sparsification_RandomNodeEdgeScore __pyx_vtable_9networkit_14sparsification_RandomNodeEdgeScore;

static PyObject *__pyx_tp_new_9networkit_14sparsification_RandomNodeEdgeScore(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_14sparsification_RandomNodeEdgeScore *p;
  PyObject *o = __pyx_tp_new_9networkit_14sparsification_EdgeScore(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_14sparsification_RandomNodeEdgeScore *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScore*)__pyx_vtabptr_9networkit_14sparsification_RandomNodeEdgeScore;
  if (unlikely(__pyx_pw_9networkit_14sparsification_19RandomNodeEdgeScore_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9networkit_14sparsification_RandomNodeEdgeScore[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_14sparsification_19RandomNodeEdgeScore_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_14sparsification_19RandomNodeEdgeScore_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_14sparsification_RandomNodeEdgeScore = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.sparsification.RandomNodeEdgeScore", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_14sparsification_RandomNodeEdgeScore), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_14sparsification_EdgeScore, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n\tRandom Edge sampling. This attributizer returns edge attributes where\n\teach value is selected uniformly at random from [0,1].\n\n\tParameters:\n\t-----------\n\tG : networkit.Graph\n\t\tThe graph to calculate the Random Edge attribute for.\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_14sparsification_EdgeScore, /*tp_traverse*/
  __pyx_tp_clear_9networkit_14sparsification_EdgeScore, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_14sparsification_RandomNodeEdgeScore, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_9networkit_14sparsification_9EdgeScore_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_14sparsification_RandomNodeEdgeScore, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_9networkit_14sparsification_LocalFilterScore __pyx_vtable_9networkit_14sparsification_LocalFilterScore;

static PyObject *__pyx_tp_new_9networkit_14sparsification_LocalFilterScore(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_14sparsification_LocalFilterScore *p;
  PyObject *o = __pyx_tp_new_9networkit_14sparsification_EdgeScore(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_14sparsification_LocalFilterScore *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScore*)__pyx_vtabptr_9networkit_14sparsification_LocalFilterScore;
  new((void*)&(p->_a)) std::vector<double> ();
  if (unlikely(__pyx_pw_9networkit_14sparsification_16LocalFilterScore_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_14sparsification_LocalFilterScore(PyObject *o) {
  struct __pyx_obj_9networkit_14sparsification_LocalFilterScore *p = (struct __pyx_obj_9networkit_14sparsification_LocalFilterScore *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->_a);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_9networkit_14sparsification_EdgeScore(o);
}

static PyMethodDef __pyx_methods_9networkit_14sparsification_LocalFilterScore[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_14sparsification_16LocalFilterScore_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_14sparsification_16LocalFilterScore_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_14sparsification_LocalFilterScore = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.sparsification.LocalFilterScore", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_14sparsification_LocalFilterScore), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_14sparsification_LocalFilterScore, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n\tLocal filtering edge scoring. Edges with high score are more important.\n\n\tEdges are ranked locally, the top d^e (logarithmic, default) or 1+e*(d-1) edges (non-logarithmic) are kept.\n\tFor equal attribute values, neighbors of low degree are preferred.\n\tIf bothRequired is set (default: false), both neighbors need to indicate that they want to keep the edge.\n\n\tParameters:\n\t-----------\n\tG : networkit.Graph\n\t\tThe input graph\n\ta : list\n\t\tThe input attribute according to which the edges shall be fitlered locally.\n\tlogarithmic : bool\n\t\tIf the score shall be logarithmic in the rank (then d^e edges are kept). Linear otherwise.\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_14sparsification_EdgeScore, /*tp_traverse*/
  __pyx_tp_clear_9networkit_14sparsification_EdgeScore, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_14sparsification_LocalFilterScore, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_9networkit_14sparsification_9EdgeScore_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_14sparsification_LocalFilterScore, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_9networkit_14sparsification_ChanceCorrectedTriangleScore __pyx_vtable_9networkit_14sparsification_ChanceCorrectedTriangleScore;

static PyObject *__pyx_tp_new_9networkit_14sparsification_ChanceCorrectedTriangleScore(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_14sparsification_ChanceCorrectedTriangleScore *p;
  PyObject *o = __pyx_tp_new_9networkit_14sparsification_EdgeScore(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_14sparsification_ChanceCorrectedTriangleScore *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScore*)__pyx_vtabptr_9networkit_14sparsification_ChanceCorrectedTriangleScore;
  new((void*)&(p->_triangles)) std::vector<__pyx_t_9networkit_14sparsification_count> ();
  if (unlikely(__pyx_pw_9networkit_14sparsification_28ChanceCorrectedTriangleScore_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_14sparsification_ChanceCorrectedTriangleScore(PyObject *o) {
  struct __pyx_obj_9networkit_14sparsification_ChanceCorrectedTriangleScore *p = (struct __pyx_obj_9networkit_14sparsification_ChanceCorrectedTriangleScore *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->_triangles);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_9networkit_14sparsification_EdgeScore(o);
}

static PyMethodDef __pyx_methods_9networkit_14sparsification_ChanceCorrectedTriangleScore[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_14sparsification_28ChanceCorrectedTriangleScore_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_14sparsification_28ChanceCorrectedTriangleScore_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_14sparsification_ChanceCorrectedTriangleScore = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.sparsification.ChanceCorrectedTriangleScore", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_14sparsification_ChanceCorrectedTriangleScore), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_14sparsification_ChanceCorrectedTriangleScore, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n\tDivide the number of triangles per edge by the expected number of triangles given a random edge distribution.\n\n\tParameters:\n\t-----------\n\tG : networkit.Graph\n\t\tThe input graph.\n\ttriangles : vector[count]\n\t\tTriangle count.\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_14sparsification_EdgeScore, /*tp_traverse*/
  __pyx_tp_clear_9networkit_14sparsification_EdgeScore, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_14sparsification_ChanceCorrectedTriangleScore, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_9networkit_14sparsification_9EdgeScore_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_14sparsification_ChanceCorrectedTriangleScore, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_9networkit_14sparsification_SCANStructuralSimilarityScore __pyx_vtable_9networkit_14sparsification_SCANStructuralSimilarityScore;

static PyObject *__pyx_tp_new_9networkit_14sparsification_SCANStructuralSimilarityScore(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_14sparsification_SCANStructuralSimilarityScore *p;
  PyObject *o = __pyx_tp_new_9networkit_14sparsification_EdgeScore(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_14sparsification_SCANStructuralSimilarityScore *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9networkit_14sparsification_EdgeScore*)__pyx_vtabptr_9networkit_14sparsification_SCANStructuralSimilarityScore;
  new((void*)&(p->_triangles)) std::vector<__pyx_t_9networkit_14sparsification_count> ();
  if (unlikely(__pyx_pw_9networkit_14sparsification_29SCANStructuralSimilarityScore_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_14sparsification_SCANStructuralSimilarityScore(PyObject *o) {
  struct __pyx_obj_9networkit_14sparsification_SCANStructuralSimilarityScore *p = (struct __pyx_obj_9networkit_14sparsification_SCANStructuralSimilarityScore *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->_triangles);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_9networkit_14sparsification_EdgeScore(o);
}

static PyMethodDef __pyx_methods_9networkit_14sparsification_SCANStructuralSimilarityScore[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_14sparsification_29SCANStructuralSimilarityScore_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_14sparsification_29SCANStructuralSimilarityScore_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_14sparsification_SCANStructuralSimilarityScore = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.sparsification.SCANStructuralSimilarityScore", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_14sparsification_SCANStructuralSimilarityScore), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_14sparsification_SCANStructuralSimilarityScore, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n\tAn implementation of the SCANStructuralSimilarityScore algorithm.\n\n\tParameters:\n\t-----------\n\tG : networkit.Graph\n\t\tThe graph to apply the Local Similarity algorithm to.\n\ttriangles : vector[count]\n\t\tPreviously calculated edge triangle counts.\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_14sparsification_EdgeScore, /*tp_traverse*/
  __pyx_tp_clear_9networkit_14sparsification_EdgeScore, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_14sparsification_SCANStructuralSimilarityScore, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_9networkit_14sparsification_9EdgeScore_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_14sparsification_SCANStructuralSimilarityScore, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_9networkit_14sparsification_GlobalThresholdFilter(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *)o);
  new((void*)&(p->_attribute)) std::vector<double> ();
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_9networkit_14sparsification_21GlobalThresholdFilter_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_14sparsification_GlobalThresholdFilter(PyObject *o) {
  struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *p = (struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_9networkit_14sparsification_21GlobalThresholdFilter_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  __Pyx_call_destructor(p->_attribute);
  Py_CLEAR(p->_G);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_9networkit_14sparsification_GlobalThresholdFilter(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *p = (struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *)o;
  if (p->_G) {
    e = (*v)(((PyObject *)p->_G), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_14sparsification_GlobalThresholdFilter(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *p = (struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter *)o;
  tmp = ((PyObject*)p->_G);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9networkit_14sparsification_GlobalThresholdFilter[] = {
  {"calculate", (PyCFunction)__pyx_pw_9networkit_14sparsification_21GlobalThresholdFilter_5calculate, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_14sparsification_21GlobalThresholdFilter_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_14sparsification_21GlobalThresholdFilter_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_14sparsification_GlobalThresholdFilter = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.sparsification.GlobalThresholdFilter", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_14sparsification_GlobalThresholdFilter), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_14sparsification_GlobalThresholdFilter, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n\tCalculates a sparsified graph by filtering globally using a constant threshold value\n\tand a given edge attribute.\n\n\tParameters:\n\t-----------\n\tG : networkit.Graph\n\t\tThe graph to sparsify.\n\tattribute : vector[double]\n\t\tThe edge attribute to consider for filtering.\n\te : double\n\t\tThreshold value.\n\tabove : bool\n\t\tIf set to True (False), all edges with an attribute value equal to or above (below)\n\t\twill be kept in the sparsified graph.\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_14sparsification_GlobalThresholdFilter, /*tp_traverse*/
  __pyx_tp_clear_9networkit_14sparsification_GlobalThresholdFilter, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_14sparsification_GlobalThresholdFilter, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_14sparsification_GlobalThresholdFilter, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_9networkit_14sparsification___pyx_scope_struct__scores *__pyx_freelist_9networkit_14sparsification___pyx_scope_struct__scores[8];
static int __pyx_freecount_9networkit_14sparsification___pyx_scope_struct__scores = 0;

static PyObject *__pyx_tp_new_9networkit_14sparsification___pyx_scope_struct__scores(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_9networkit_14sparsification___pyx_scope_struct__scores > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_9networkit_14sparsification___pyx_scope_struct__scores)))) {
    o = (PyObject*)__pyx_freelist_9networkit_14sparsification___pyx_scope_struct__scores[--__pyx_freecount_9networkit_14sparsification___pyx_scope_struct__scores];
    memset(o, 0, sizeof(struct __pyx_obj_9networkit_14sparsification___pyx_scope_struct__scores));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9networkit_14sparsification___pyx_scope_struct__scores(PyObject *o) {
  struct __pyx_obj_9networkit_14sparsification___pyx_scope_struct__scores *p = (struct __pyx_obj_9networkit_14sparsification___pyx_scope_struct__scores *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_edgeScores);
  Py_CLEAR(p->__pyx_v_partition);
  Py_CLEAR(p->__pyx_v_together);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_9networkit_14sparsification___pyx_scope_struct__scores < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9networkit_14sparsification___pyx_scope_struct__scores)))) {
    __pyx_freelist_9networkit_14sparsification___pyx_scope_struct__scores[__pyx_freecount_9networkit_14sparsification___pyx_scope_struct__scores++] = ((struct __pyx_obj_9networkit_14sparsification___pyx_scope_struct__scores *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_9networkit_14sparsification___pyx_scope_struct__scores(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_14sparsification___pyx_scope_struct__scores *p = (struct __pyx_obj_9networkit_14sparsification___pyx_scope_struct__scores *)o;
  if (p->__pyx_v_edgeScores) {
    e = (*v)(p->__pyx_v_edgeScores, a); if (e) return e;
  }
  if (p->__pyx_v_partition) {
    e = (*v)(p->__pyx_v_partition, a); if (e) return e;
  }
  if (p->__pyx_v_together) {
    e = (*v)(p->__pyx_v_together, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_14sparsification___pyx_scope_struct__scores(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_14sparsification___pyx_scope_struct__scores *p = (struct __pyx_obj_9networkit_14sparsification___pyx_scope_struct__scores *)o;
  tmp = ((PyObject*)p->__pyx_v_edgeScores);
  p->__pyx_v_edgeScores = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_partition);
  p->__pyx_v_partition = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_together);
  p->__pyx_v_together = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_9networkit_14sparsification___pyx_scope_struct__scores = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.sparsification.__pyx_scope_struct__scores", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_14sparsification___pyx_scope_struct__scores), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_14sparsification___pyx_scope_struct__scores, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9networkit_14sparsification___pyx_scope_struct__scores, /*tp_traverse*/
  __pyx_tp_clear_9networkit_14sparsification___pyx_scope_struct__scores, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_14sparsification___pyx_scope_struct__scores, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_sparsification(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_sparsification},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "sparsification",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_ABS_ZERO, __pyx_k_ABS_ZERO, sizeof(__pyx_k_ABS_ZERO), 0, 0, 1, 1},
  {&__pyx_kp_s_A_parameterization_algorithm_re, __pyx_k_A_parameterization_algorithm_re, sizeof(__pyx_k_A_parameterization_algorithm_re), 0, 0, 1, 0},
  {&__pyx_kp_s_A_sparsifiier_dervived_from_SCA, __pyx_k_A_sparsifiier_dervived_from_SCA, sizeof(__pyx_k_A_sparsifiier_dervived_from_SCA), 0, 0, 1, 0},
  {&__pyx_kp_s_A_variant_of_the_Forest_Fire_sp, __pyx_k_A_variant_of_the_Forest_Fire_sp, sizeof(__pyx_k_A_variant_of_the_Forest_Fire_sp), 0, 0, 1, 0},
  {&__pyx_kp_s_Abstract_base_class_representin, __pyx_k_Abstract_base_class_representin, sizeof(__pyx_k_Abstract_base_class_representin), 0, 0, 1, 0},
  {&__pyx_n_s_AdamicAdarDistance, __pyx_k_AdamicAdarDistance, sizeof(__pyx_k_AdamicAdarDistance), 0, 0, 1, 1},
  {&__pyx_n_s_AlgebraicDistance, __pyx_k_AlgebraicDistance, sizeof(__pyx_k_AlgebraicDistance), 0, 0, 1, 1},
  {&__pyx_n_s_AlgebraicDistanceSparsifier, __pyx_k_AlgebraicDistanceSparsifier, sizeof(__pyx_k_AlgebraicDistanceSparsifier), 0, 0, 1, 1},
  {&__pyx_n_s_AlgebraicDistanceSparsifier___in, __pyx_k_AlgebraicDistanceSparsifier___in, sizeof(__pyx_k_AlgebraicDistanceSparsifier___in), 0, 0, 1, 1},
  {&__pyx_n_s_AlgebraicDistanceSparsifier__get, __pyx_k_AlgebraicDistanceSparsifier__get, sizeof(__pyx_k_AlgebraicDistanceSparsifier__get), 0, 0, 1, 1},
  {&__pyx_n_s_AlgebraicDistanceSparsifier__get_2, __pyx_k_AlgebraicDistanceSparsifier__get_2, sizeof(__pyx_k_AlgebraicDistanceSparsifier__get_2), 0, 0, 1, 1},
  {&__pyx_n_s_AlgebraicDistanceSparsifier_scor, __pyx_k_AlgebraicDistanceSparsifier_scor, sizeof(__pyx_k_AlgebraicDistanceSparsifier_scor), 0, 0, 1, 1},
  {&__pyx_kp_s_Allows_for_global_filtering_wit, __pyx_k_Allows_for_global_filtering_wit, sizeof(__pyx_k_Allows_for_global_filtering_wit), 0, 0, 1, 0},
  {&__pyx_kp_s_Allows_for_global_filtering_wit_2, __pyx_k_Allows_for_global_filtering_wit_2, sizeof(__pyx_k_Allows_for_global_filtering_wit_2), 0, 0, 1, 0},
  {&__pyx_kp_s_An_implementation_of_the_Jaccar, __pyx_k_An_implementation_of_the_Jaccar, sizeof(__pyx_k_An_implementation_of_the_Jaccar), 0, 0, 1, 0},
  {&__pyx_kp_s_An_implementation_of_the_Local, __pyx_k_An_implementation_of_the_Local, sizeof(__pyx_k_An_implementation_of_the_Local), 0, 0, 1, 0},
  {&__pyx_kp_s_An_implementation_of_the_Local_2, __pyx_k_An_implementation_of_the_Local_2, sizeof(__pyx_k_An_implementation_of_the_Local_2), 0, 0, 1, 0},
  {&__pyx_kp_s_An_implementation_of_the_Multis, __pyx_k_An_implementation_of_the_Multis, sizeof(__pyx_k_An_implementation_of_the_Multis), 0, 0, 1, 0},
  {&__pyx_kp_s_An_implementation_of_the_Non_pa, __pyx_k_An_implementation_of_the_Non_pa, sizeof(__pyx_k_An_implementation_of_the_Non_pa), 0, 0, 1, 0},
  {&__pyx_kp_s_An_implementation_of_the_Parame, __pyx_k_An_implementation_of_the_Parame, sizeof(__pyx_k_An_implementation_of_the_Parame), 0, 0, 1, 0},
  {&__pyx_kp_s_An_implementation_of_the_Simmel, __pyx_k_An_implementation_of_the_Simmel, sizeof(__pyx_k_An_implementation_of_the_Simmel), 0, 0, 1, 0},
  {&__pyx_kp_s_Assigns_as_an_attribute_the_sam, __pyx_k_Assigns_as_an_attribute_the_sam, sizeof(__pyx_k_Assigns_as_an_attribute_the_sam), 0, 0, 1, 0},
  {&__pyx_n_s_BinarySearchParameterization, __pyx_k_BinarySearchParameterization, sizeof(__pyx_k_BinarySearchParameterization), 0, 0, 1, 1},
  {&__pyx_n_s_BinarySearchParameterization___i, __pyx_k_BinarySearchParameterization___i, sizeof(__pyx_k_BinarySearchParameterization___i), 0, 0, 1, 1},
  {&__pyx_n_s_BinarySearchParameterization_par, __pyx_k_BinarySearchParameterization_par, sizeof(__pyx_k_BinarySearchParameterization_par), 0, 0, 1, 1},
  {&__pyx_n_s_ChanceCorrectedTriangleScore, __pyx_k_ChanceCorrectedTriangleScore, sizeof(__pyx_k_ChanceCorrectedTriangleScore), 0, 0, 1, 1},
  {&__pyx_n_s_ChibaNishizekiQuadrangleEdgeScor, __pyx_k_ChibaNishizekiQuadrangleEdgeScor, sizeof(__pyx_k_ChibaNishizekiQuadrangleEdgeScor), 0, 0, 1, 1},
  {&__pyx_n_s_ChibaNishizekiTriangleEdgeScore, __pyx_k_ChibaNishizekiTriangleEdgeScore, sizeof(__pyx_k_ChibaNishizekiTriangleEdgeScore), 0, 0, 1, 1},
  {&__pyx_n_s_CompleteSearchParameterization, __pyx_k_CompleteSearchParameterization, sizeof(__pyx_k_CompleteSearchParameterization), 0, 0, 1, 1},
  {&__pyx_n_s_CompleteSearchParameterization_2, __pyx_k_CompleteSearchParameterization_2, sizeof(__pyx_k_CompleteSearchParameterization_2), 0, 0, 1, 1},
  {&__pyx_n_s_CompleteSearchParameterization_p, __pyx_k_CompleteSearchParameterization_p, sizeof(__pyx_k_CompleteSearchParameterization_p), 0, 0, 1, 1},
  {&__pyx_n_s_ConstantScore, __pyx_k_ConstantScore, sizeof(__pyx_k_ConstantScore), 0, 0, 1, 1},
  {&__pyx_n_s_ConstantScore___init, __pyx_k_ConstantScore___init, sizeof(__pyx_k_ConstantScore___init), 0, 0, 1, 1},
  {&__pyx_n_s_ConstantScore_scores, __pyx_k_ConstantScore_scores, sizeof(__pyx_k_ConstantScore_scores), 0, 0, 1, 1},
  {&__pyx_n_s_DegreeMultiscaleSparsifier, __pyx_k_DegreeMultiscaleSparsifier, sizeof(__pyx_k_DegreeMultiscaleSparsifier), 0, 0, 1, 1},
  {&__pyx_n_s_DegreeMultiscaleSparsifier___ini, __pyx_k_DegreeMultiscaleSparsifier___ini, sizeof(__pyx_k_DegreeMultiscaleSparsifier___ini), 0, 0, 1, 1},
  {&__pyx_n_s_DegreeMultiscaleSparsifier__getP, __pyx_k_DegreeMultiscaleSparsifier__getP, sizeof(__pyx_k_DegreeMultiscaleSparsifier__getP), 0, 0, 1, 1},
  {&__pyx_n_s_DegreeMultiscaleSparsifier__getS, __pyx_k_DegreeMultiscaleSparsifier__getS, sizeof(__pyx_k_DegreeMultiscaleSparsifier__getS), 0, 0, 1, 1},
  {&__pyx_n_s_DegreeMultiscaleSparsifier_score, __pyx_k_DegreeMultiscaleSparsifier_score, sizeof(__pyx_k_DegreeMultiscaleSparsifier_score), 0, 0, 1, 1},
  {&__pyx_n_s_EdgeScore, __pyx_k_EdgeScore, sizeof(__pyx_k_EdgeScore), 0, 0, 1, 1},
  {&__pyx_n_s_EdgeScoreAsWeight, __pyx_k_EdgeScoreAsWeight, sizeof(__pyx_k_EdgeScoreAsWeight), 0, 0, 1, 1},
  {&__pyx_n_s_EdgeScoreBlender, __pyx_k_EdgeScoreBlender, sizeof(__pyx_k_EdgeScoreBlender), 0, 0, 1, 1},
  {&__pyx_n_s_EdgeScoreLinearizer, __pyx_k_EdgeScoreLinearizer, sizeof(__pyx_k_EdgeScoreLinearizer), 0, 0, 1, 1},
  {&__pyx_n_s_EdgeScoreNormalizer, __pyx_k_EdgeScoreNormalizer, sizeof(__pyx_k_EdgeScoreNormalizer), 0, 0, 1, 1},
  {&__pyx_kp_u_Error_you_may_not_use_EdgeScore, __pyx_k_Error_you_may_not_use_EdgeScore, sizeof(__pyx_k_Error_you_may_not_use_EdgeScore), 0, 1, 0, 0},
  {&__pyx_n_s_ForestFireScore, __pyx_k_ForestFireScore, sizeof(__pyx_k_ForestFireScore), 0, 0, 1, 1},
  {&__pyx_n_s_ForestFireSparsifier, __pyx_k_ForestFireSparsifier, sizeof(__pyx_k_ForestFireSparsifier), 0, 0, 1, 1},
  {&__pyx_n_s_ForestFireSparsifier___init, __pyx_k_ForestFireSparsifier___init, sizeof(__pyx_k_ForestFireSparsifier___init), 0, 0, 1, 1},
  {&__pyx_n_s_ForestFireSparsifier__getParamet, __pyx_k_ForestFireSparsifier__getParamet, sizeof(__pyx_k_ForestFireSparsifier__getParamet), 0, 0, 1, 1},
  {&__pyx_n_s_ForestFireSparsifier__getSparsif, __pyx_k_ForestFireSparsifier__getSparsif, sizeof(__pyx_k_ForestFireSparsifier__getSparsif), 0, 0, 1, 1},
  {&__pyx_n_s_ForestFireSparsifier_scores, __pyx_k_ForestFireSparsifier_scores, sizeof(__pyx_k_ForestFireSparsifier_scores), 0, 0, 1, 1},
  {&__pyx_n_s_G, __pyx_k_G, sizeof(__pyx_k_G), 0, 0, 1, 1},
  {&__pyx_n_s_GeometricMeanScore, __pyx_k_GeometricMeanScore, sizeof(__pyx_k_GeometricMeanScore), 0, 0, 1, 1},
  {&__pyx_n_s_GlobalThresholdFilter, __pyx_k_GlobalThresholdFilter, sizeof(__pyx_k_GlobalThresholdFilter), 0, 0, 1, 1},
  {&__pyx_kp_u_Implement_in_subclass, __pyx_k_Implement_in_subclass, sizeof(__pyx_k_Implement_in_subclass), 0, 1, 0, 0},
  {&__pyx_n_s_JaccardSimilarityAttributizer, __pyx_k_JaccardSimilarityAttributizer, sizeof(__pyx_k_JaccardSimilarityAttributizer), 0, 0, 1, 1},
  {&__pyx_n_s_JaccardSimilaritySparsifier, __pyx_k_JaccardSimilaritySparsifier, sizeof(__pyx_k_JaccardSimilaritySparsifier), 0, 0, 1, 1},
  {&__pyx_n_s_JaccardSimilaritySparsifier__get, __pyx_k_JaccardSimilaritySparsifier__get, sizeof(__pyx_k_JaccardSimilaritySparsifier__get), 0, 0, 1, 1},
  {&__pyx_n_s_JaccardSimilaritySparsifier__get_2, __pyx_k_JaccardSimilaritySparsifier__get_2, sizeof(__pyx_k_JaccardSimilaritySparsifier__get_2), 0, 0, 1, 1},
  {&__pyx_n_s_JaccardSimilaritySparsifier_scor, __pyx_k_JaccardSimilaritySparsifier_scor, sizeof(__pyx_k_JaccardSimilaritySparsifier_scor), 0, 0, 1, 1},
  {&__pyx_n_s_LocalDegreeScore, __pyx_k_LocalDegreeScore, sizeof(__pyx_k_LocalDegreeScore), 0, 0, 1, 1},
  {&__pyx_n_s_LocalDegreeSparsifier, __pyx_k_LocalDegreeSparsifier, sizeof(__pyx_k_LocalDegreeSparsifier), 0, 0, 1, 1},
  {&__pyx_n_s_LocalDegreeSparsifier__getParame, __pyx_k_LocalDegreeSparsifier__getParame, sizeof(__pyx_k_LocalDegreeSparsifier__getParame), 0, 0, 1, 1},
  {&__pyx_n_s_LocalDegreeSparsifier__getSparsi, __pyx_k_LocalDegreeSparsifier__getSparsi, sizeof(__pyx_k_LocalDegreeSparsifier__getSparsi), 0, 0, 1, 1},
  {&__pyx_n_s_LocalDegreeSparsifier_scores, __pyx_k_LocalDegreeSparsifier_scores, sizeof(__pyx_k_LocalDegreeSparsifier_scores), 0, 0, 1, 1},
  {&__pyx_n_s_LocalFilterScore, __pyx_k_LocalFilterScore, sizeof(__pyx_k_LocalFilterScore), 0, 0, 1, 1},
  {&__pyx_n_s_LocalSimilarityScore, __pyx_k_LocalSimilarityScore, sizeof(__pyx_k_LocalSimilarityScore), 0, 0, 1, 1},
  {&__pyx_n_s_LocalSimilaritySparsifier, __pyx_k_LocalSimilaritySparsifier, sizeof(__pyx_k_LocalSimilaritySparsifier), 0, 0, 1, 1},
  {&__pyx_n_s_LocalSimilaritySparsifier__getPa, __pyx_k_LocalSimilaritySparsifier__getPa, sizeof(__pyx_k_LocalSimilaritySparsifier__getPa), 0, 0, 1, 1},
  {&__pyx_n_s_LocalSimilaritySparsifier__getSp, __pyx_k_LocalSimilaritySparsifier__getSp, sizeof(__pyx_k_LocalSimilaritySparsifier__getSp), 0, 0, 1, 1},
  {&__pyx_n_s_LocalSimilaritySparsifier_scores, __pyx_k_LocalSimilaritySparsifier_scores, sizeof(__pyx_k_LocalSimilaritySparsifier_scores), 0, 0, 1, 1},
  {&__pyx_n_s_LocalSparsifier, __pyx_k_LocalSparsifier, sizeof(__pyx_k_LocalSparsifier), 0, 0, 1, 1},
  {&__pyx_n_s_LocalSparsifier___init, __pyx_k_LocalSparsifier___init, sizeof(__pyx_k_LocalSparsifier___init), 0, 0, 1, 1},
  {&__pyx_n_s_LocalSparsifier__getParameteriza, __pyx_k_LocalSparsifier__getParameteriza, sizeof(__pyx_k_LocalSparsifier__getParameteriza), 0, 0, 1, 1},
  {&__pyx_n_s_LocalSparsifier__getSparsifiedGr, __pyx_k_LocalSparsifier__getSparsifiedGr, sizeof(__pyx_k_LocalSparsifier__getSparsifiedGr), 0, 0, 1, 1},
  {&__pyx_n_s_LocalSparsifier_scores, __pyx_k_LocalSparsifier_scores, sizeof(__pyx_k_LocalSparsifier_scores), 0, 0, 1, 1},
  {&__pyx_n_s_ModularityPartitionScore, __pyx_k_ModularityPartitionScore, sizeof(__pyx_k_ModularityPartitionScore), 0, 0, 1, 1},
  {&__pyx_n_s_ModularityPartitionScore_scores, __pyx_k_ModularityPartitionScore_scores, sizeof(__pyx_k_ModularityPartitionScore_scores), 0, 0, 1, 1},
  {&__pyx_n_s_ModularityPartitionScore_scores_2, __pyx_k_ModularityPartitionScore_scores_2, sizeof(__pyx_k_ModularityPartitionScore_scores_2), 0, 0, 1, 1},
  {&__pyx_n_s_ModularityPartitionScore_scores_3, __pyx_k_ModularityPartitionScore_scores_3, sizeof(__pyx_k_ModularityPartitionScore_scores_3), 0, 0, 1, 1},
  {&__pyx_n_s_MultiscaleScore, __pyx_k_MultiscaleScore, sizeof(__pyx_k_MultiscaleScore), 0, 0, 1, 1},
  {&__pyx_n_s_MultiscaleSparsifier, __pyx_k_MultiscaleSparsifier, sizeof(__pyx_k_MultiscaleSparsifier), 0, 0, 1, 1},
  {&__pyx_n_s_MultiscaleSparsifier__getParamet, __pyx_k_MultiscaleSparsifier__getParamet, sizeof(__pyx_k_MultiscaleSparsifier__getParamet), 0, 0, 1, 1},
  {&__pyx_n_s_MultiscaleSparsifier__getSparsif, __pyx_k_MultiscaleSparsifier__getSparsif, sizeof(__pyx_k_MultiscaleSparsifier__getSparsif), 0, 0, 1, 1},
  {&__pyx_n_s_MultiscaleSparsifier_scores, __pyx_k_MultiscaleSparsifier_scores, sizeof(__pyx_k_MultiscaleSparsifier_scores), 0, 0, 1, 1},
  {&__pyx_kp_s_Multiscale_Sparsifier_that_uses, __pyx_k_Multiscale_Sparsifier_that_uses, sizeof(__pyx_k_Multiscale_Sparsifier_that_uses), 0, 0, 1, 0},
  {&__pyx_kp_s_Multiscale_Sparsifier_that_uses_2, __pyx_k_Multiscale_Sparsifier_that_uses_2, sizeof(__pyx_k_Multiscale_Sparsifier_that_uses_2), 0, 0, 1, 0},
  {&__pyx_n_s_NotImplementedError, __pyx_k_NotImplementedError, sizeof(__pyx_k_NotImplementedError), 0, 0, 1, 1},
  {&__pyx_n_s_PLM, __pyx_k_PLM, sizeof(__pyx_k_PLM), 0, 0, 1, 1},
  {&__pyx_kp_s_Parameterizes_a_sparsification, __pyx_k_Parameterizes_a_sparsification, sizeof(__pyx_k_Parameterizes_a_sparsification), 0, 0, 1, 0},
  {&__pyx_kp_s_Parameterizes_a_sparsification_2, __pyx_k_Parameterizes_a_sparsification_2, sizeof(__pyx_k_Parameterizes_a_sparsification_2), 0, 0, 1, 0},
  {&__pyx_n_s_PrefixJaccardScore, __pyx_k_PrefixJaccardScore, sizeof(__pyx_k_PrefixJaccardScore), 0, 0, 1, 1},
  {&__pyx_n_s_QuadrilateralSimmelianSparsifier, __pyx_k_QuadrilateralSimmelianSparsifier, sizeof(__pyx_k_QuadrilateralSimmelianSparsifier), 0, 0, 1, 1},
  {&__pyx_n_s_QuadrilateralSimmelianSparsifier_2, __pyx_k_QuadrilateralSimmelianSparsifier_2, sizeof(__pyx_k_QuadrilateralSimmelianSparsifier_2), 0, 0, 1, 1},
  {&__pyx_n_s_QuadrilateralSimmelianSparsifier_3, __pyx_k_QuadrilateralSimmelianSparsifier_3, sizeof(__pyx_k_QuadrilateralSimmelianSparsifier_3), 0, 0, 1, 1},
  {&__pyx_n_s_QuadrilateralSimmelianSparsifier_4, __pyx_k_QuadrilateralSimmelianSparsifier_4, sizeof(__pyx_k_QuadrilateralSimmelianSparsifier_4), 0, 0, 1, 1},
  {&__pyx_n_s_RandomEdgeScore, __pyx_k_RandomEdgeScore, sizeof(__pyx_k_RandomEdgeScore), 0, 0, 1, 1},
  {&__pyx_n_s_RandomEdgeSparsifier, __pyx_k_RandomEdgeSparsifier, sizeof(__pyx_k_RandomEdgeSparsifier), 0, 0, 1, 1},
  {&__pyx_n_s_RandomEdgeSparsifier__getParamet, __pyx_k_RandomEdgeSparsifier__getParamet, sizeof(__pyx_k_RandomEdgeSparsifier__getParamet), 0, 0, 1, 1},
  {&__pyx_n_s_RandomEdgeSparsifier__getSparsif, __pyx_k_RandomEdgeSparsifier__getSparsif, sizeof(__pyx_k_RandomEdgeSparsifier__getSparsif), 0, 0, 1, 1},
  {&__pyx_n_s_RandomEdgeSparsifier_scores, __pyx_k_RandomEdgeSparsifier_scores, sizeof(__pyx_k_RandomEdgeSparsifier_scores), 0, 0, 1, 1},
  {&__pyx_n_s_RandomNodeEdgeScore, __pyx_k_RandomNodeEdgeScore, sizeof(__pyx_k_RandomNodeEdgeScore), 0, 0, 1, 1},
  {&__pyx_n_s_RandomNodeEdgeSparsifier, __pyx_k_RandomNodeEdgeSparsifier, sizeof(__pyx_k_RandomNodeEdgeSparsifier), 0, 0, 1, 1},
  {&__pyx_n_s_RandomNodeEdgeSparsifier___init, __pyx_k_RandomNodeEdgeSparsifier___init, sizeof(__pyx_k_RandomNodeEdgeSparsifier___init), 0, 0, 1, 1},
  {&__pyx_n_s_RandomNodeEdgeSparsifier__getPar, __pyx_k_RandomNodeEdgeSparsifier__getPar, sizeof(__pyx_k_RandomNodeEdgeSparsifier__getPar), 0, 0, 1, 1},
  {&__pyx_n_s_RandomNodeEdgeSparsifier__getSpa, __pyx_k_RandomNodeEdgeSparsifier__getSpa, sizeof(__pyx_k_RandomNodeEdgeSparsifier__getSpa), 0, 0, 1, 1},
  {&__pyx_n_s_RandomNodeEdgeSparsifier_scores, __pyx_k_RandomNodeEdgeSparsifier_scores, sizeof(__pyx_k_RandomNodeEdgeSparsifier_scores), 0, 0, 1, 1},
  {&__pyx_kp_s_Random_Edge_sampling_Edges_to_k, __pyx_k_Random_Edge_sampling_Edges_to_k, sizeof(__pyx_k_Random_Edge_sampling_Edges_to_k), 0, 0, 1, 0},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_SCANSparsifier, __pyx_k_SCANSparsifier, sizeof(__pyx_k_SCANSparsifier), 0, 0, 1, 1},
  {&__pyx_n_s_SCANSparsifier__getParameterizat, __pyx_k_SCANSparsifier__getParameterizat, sizeof(__pyx_k_SCANSparsifier__getParameterizat), 0, 0, 1, 1},
  {&__pyx_n_s_SCANSparsifier__getSparsifiedGra, __pyx_k_SCANSparsifier__getSparsifiedGra, sizeof(__pyx_k_SCANSparsifier__getSparsifiedGra), 0, 0, 1, 1},
  {&__pyx_n_s_SCANSparsifier_scores, __pyx_k_SCANSparsifier_scores, sizeof(__pyx_k_SCANSparsifier_scores), 0, 0, 1, 1},
  {&__pyx_n_s_SCANStructuralSimilarityScore, __pyx_k_SCANStructuralSimilarityScore, sizeof(__pyx_k_SCANStructuralSimilarityScore), 0, 0, 1, 1},
  {&__pyx_n_s_SimmelianMultiscaleSparsifier, __pyx_k_SimmelianMultiscaleSparsifier, sizeof(__pyx_k_SimmelianMultiscaleSparsifier), 0, 0, 1, 1},
  {&__pyx_n_s_SimmelianMultiscaleSparsifier__g, __pyx_k_SimmelianMultiscaleSparsifier__g, sizeof(__pyx_k_SimmelianMultiscaleSparsifier__g), 0, 0, 1, 1},
  {&__pyx_n_s_SimmelianMultiscaleSparsifier__g_2, __pyx_k_SimmelianMultiscaleSparsifier__g_2, sizeof(__pyx_k_SimmelianMultiscaleSparsifier__g_2), 0, 0, 1, 1},
  {&__pyx_n_s_SimmelianMultiscaleSparsifier_sc, __pyx_k_SimmelianMultiscaleSparsifier_sc, sizeof(__pyx_k_SimmelianMultiscaleSparsifier_sc), 0, 0, 1, 1},
  {&__pyx_n_s_SimmelianOverlapScore, __pyx_k_SimmelianOverlapScore, sizeof(__pyx_k_SimmelianOverlapScore), 0, 0, 1, 1},
  {&__pyx_n_s_SimmelianSparsifierNonParametric, __pyx_k_SimmelianSparsifierNonParametric, sizeof(__pyx_k_SimmelianSparsifierNonParametric), 0, 0, 1, 1},
  {&__pyx_n_s_SimmelianSparsifierNonParametric_2, __pyx_k_SimmelianSparsifierNonParametric_2, sizeof(__pyx_k_SimmelianSparsifierNonParametric_2), 0, 0, 1, 1},
  {&__pyx_n_s_SimmelianSparsifierNonParametric_3, __pyx_k_SimmelianSparsifierNonParametric_3, sizeof(__pyx_k_SimmelianSparsifierNonParametric_3), 0, 0, 1, 1},
  {&__pyx_n_s_SimmelianSparsifierNonParametric_4, __pyx_k_SimmelianSparsifierNonParametric_4, sizeof(__pyx_k_SimmelianSparsifierNonParametric_4), 0, 0, 1, 1},
  {&__pyx_n_s_SimmelianSparsifierParametric, __pyx_k_SimmelianSparsifierParametric, sizeof(__pyx_k_SimmelianSparsifierParametric), 0, 0, 1, 1},
  {&__pyx_n_s_SimmelianSparsifierParametric_2, __pyx_k_SimmelianSparsifierParametric_2, sizeof(__pyx_k_SimmelianSparsifierParametric_2), 0, 0, 1, 1},
  {&__pyx_n_s_SimmelianSparsifierParametric__g, __pyx_k_SimmelianSparsifierParametric__g, sizeof(__pyx_k_SimmelianSparsifierParametric__g), 0, 0, 1, 1},
  {&__pyx_n_s_SimmelianSparsifierParametric__g_2, __pyx_k_SimmelianSparsifierParametric__g_2, sizeof(__pyx_k_SimmelianSparsifierParametric__g_2), 0, 0, 1, 1},
  {&__pyx_n_s_SimmelianSparsifierParametric_sc, __pyx_k_SimmelianSparsifierParametric_sc, sizeof(__pyx_k_SimmelianSparsifierParametric_sc), 0, 0, 1, 1},
  {&__pyx_n_s_SimpleParameterization, __pyx_k_SimpleParameterization, sizeof(__pyx_k_SimpleParameterization), 0, 0, 1, 1},
  {&__pyx_n_s_SimpleParameterization_parameter, __pyx_k_SimpleParameterization_parameter, sizeof(__pyx_k_SimpleParameterization_parameter), 0, 0, 1, 1},
  {&__pyx_n_s_Sparsifier, __pyx_k_Sparsifier, sizeof(__pyx_k_Sparsifier), 0, 0, 1, 1},
  {&__pyx_n_s_Sparsifier__getParameterizationA, __pyx_k_Sparsifier__getParameterizationA, sizeof(__pyx_k_Sparsifier__getParameterizationA), 0, 0, 1, 1},
  {&__pyx_n_s_Sparsifier__getSparsifiedGraph, __pyx_k_Sparsifier__getSparsifiedGraph, sizeof(__pyx_k_Sparsifier__getSparsifiedGraph), 0, 0, 1, 1},
  {&__pyx_n_s_Sparsifier_getParameter, __pyx_k_Sparsifier_getParameter, sizeof(__pyx_k_Sparsifier_getParameter), 0, 0, 1, 1},
  {&__pyx_n_s_Sparsifier_getSparsifiedGraph, __pyx_k_Sparsifier_getSparsifiedGraph, sizeof(__pyx_k_Sparsifier_getSparsifiedGraph), 0, 0, 1, 1},
  {&__pyx_n_s_Sparsifier_getSparsifiedGraphOfS, __pyx_k_Sparsifier_getSparsifiedGraphOfS, sizeof(__pyx_k_Sparsifier_getSparsifiedGraphOfS), 0, 0, 1, 1},
  {&__pyx_n_s_Sparsifier_scores, __pyx_k_Sparsifier_scores, sizeof(__pyx_k_Sparsifier_scores), 0, 0, 1, 1},
  {&__pyx_kp_s_TODO_not_yet_documented, __pyx_k_TODO_not_yet_documented, sizeof(__pyx_k_TODO_not_yet_documented), 0, 0, 1, 0},
  {&__pyx_n_s_TriangleEdgeScore, __pyx_k_TriangleEdgeScore, sizeof(__pyx_k_TriangleEdgeScore), 0, 0, 1, 1},
  {&__pyx_n_s_TriangleSparsifier, __pyx_k_TriangleSparsifier, sizeof(__pyx_k_TriangleSparsifier), 0, 0, 1, 1},
  {&__pyx_n_s_TriangleSparsifier__getParameter, __pyx_k_TriangleSparsifier__getParameter, sizeof(__pyx_k_TriangleSparsifier__getParameter), 0, 0, 1, 1},
  {&__pyx_n_s_TriangleSparsifier__getSparsifie, __pyx_k_TriangleSparsifier__getSparsifie, sizeof(__pyx_k_TriangleSparsifier__getSparsifie), 0, 0, 1, 1},
  {&__pyx_n_s_TriangleSparsifier_scores, __pyx_k_TriangleSparsifier_scores, sizeof(__pyx_k_TriangleSparsifier_scores), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s__190, __pyx_k__190, sizeof(__pyx_k__190), 0, 0, 1, 0},
  {&__pyx_n_s__51, __pyx_k__51, sizeof(__pyx_k__51), 0, 0, 1, 1},
  {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
  {&__pyx_n_s_a_ms, __pyx_k_a_ms, sizeof(__pyx_k_a_ms), 0, 0, 1, 1},
  {&__pyx_n_s_a_sj, __pyx_k_a_sj, sizeof(__pyx_k_a_sj), 0, 0, 1, 1},
  {&__pyx_n_s_a_triangles, __pyx_k_a_triangles, sizeof(__pyx_k_a_triangles), 0, 0, 1, 1},
  {&__pyx_n_s_above, __pyx_k_above, sizeof(__pyx_k_above), 0, 0, 1, 1},
  {&__pyx_n_s_algDist, __pyx_k_algDist, sizeof(__pyx_k_algDist), 0, 0, 1, 1},
  {&__pyx_n_s_algorithm, __pyx_k_algorithm, sizeof(__pyx_k_algorithm), 0, 0, 1, 1},
  {&__pyx_n_s_attribute, __pyx_k_attribute, sizeof(__pyx_k_attribute), 0, 0, 1, 1},
  {&__pyx_n_s_attribute0, __pyx_k_attribute0, sizeof(__pyx_k_attribute0), 0, 0, 1, 1},
  {&__pyx_n_s_attribute1, __pyx_k_attribute1, sizeof(__pyx_k_attribute1), 0, 0, 1, 1},
  {&__pyx_n_s_attribute_2, __pyx_k_attribute_2, sizeof(__pyx_k_attribute_2), 0, 0, 1, 1},
  {&__pyx_n_s_bestParameter, __pyx_k_bestParameter, sizeof(__pyx_k_bestParameter), 0, 0, 1, 1},
  {&__pyx_n_s_bestRatio, __pyx_k_bestRatio, sizeof(__pyx_k_bestRatio), 0, 0, 1, 1},
  {&__pyx_n_s_burnProbability, __pyx_k_burnProbability, sizeof(__pyx_k_burnProbability), 0, 0, 1, 1},
  {&__pyx_n_s_calculate, __pyx_k_calculate, sizeof(__pyx_k_calculate), 0, 0, 1, 1},
  {&__pyx_n_s_cdAlgo, __pyx_k_cdAlgo, sizeof(__pyx_k_cdAlgo), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_community, __pyx_k_community, sizeof(__pyx_k_community), 0, 0, 1, 1},
  {&__pyx_n_s_constValue, __pyx_k_constValue, sizeof(__pyx_k_constValue), 0, 0, 1, 1},
  {&__pyx_n_s_currentEdgeRatio, __pyx_k_currentEdgeRatio, sizeof(__pyx_k_currentEdgeRatio), 0, 0, 1, 1},
  {&__pyx_n_s_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 0, 1, 1},
  {&__pyx_n_s_degree, __pyx_k_degree, sizeof(__pyx_k_degree), 0, 0, 1, 1},
  {&__pyx_n_s_degsToAttrValue, __pyx_k_degsToAttrValue, sizeof(__pyx_k_degsToAttrValue), 0, 0, 1, 1},
  {&__pyx_n_s_distance, __pyx_k_distance, sizeof(__pyx_k_distance), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_e, __pyx_k_e, sizeof(__pyx_k_e), 0, 0, 1, 1},
  {&__pyx_n_s_edgeId, __pyx_k_edgeId, sizeof(__pyx_k_edgeId), 0, 0, 1, 1},
  {&__pyx_n_s_edgeRatio, __pyx_k_edgeRatio, sizeof(__pyx_k_edgeRatio), 0, 0, 1, 1},
  {&__pyx_n_s_edgeScores, __pyx_k_edgeScores, sizeof(__pyx_k_edgeScores), 0, 0, 1, 1},
  {&__pyx_n_s_eid, __pyx_k_eid, sizeof(__pyx_k_eid), 0, 0, 1, 1},
  {&__pyx_n_s_estimation, __pyx_k_estimation, sizeof(__pyx_k_estimation), 0, 0, 1, 1},
  {&__pyx_n_s_factor, __pyx_k_factor, sizeof(__pyx_k_factor), 0, 0, 1, 1},
  {&__pyx_n_s_ffScore, __pyx_k_ffScore, sizeof(__pyx_k_ffScore), 0, 0, 1, 1},
  {&__pyx_n_s_forEdges, __pyx_k_forEdges, sizeof(__pyx_k_forEdges), 0, 0, 1, 1},
  {&__pyx_n_s_getAttribute, __pyx_k_getAttribute, sizeof(__pyx_k_getAttribute), 0, 0, 1, 1},
  {&__pyx_n_s_getEdgeScores, __pyx_k_getEdgeScores, sizeof(__pyx_k_getEdgeScores), 0, 0, 1, 1},
  {&__pyx_n_s_getParameter, __pyx_k_getParameter, sizeof(__pyx_k_getParameter), 0, 0, 1, 1},
  {&__pyx_n_s_getParameterizationAlgorithm, __pyx_k_getParameterizationAlgorithm, sizeof(__pyx_k_getParameterizationAlgorithm), 0, 0, 1, 1},
  {&__pyx_n_s_getPartition, __pyx_k_getPartition, sizeof(__pyx_k_getPartition), 0, 0, 1, 1},
  {&__pyx_n_s_getRankAttribute, __pyx_k_getRankAttribute, sizeof(__pyx_k_getRankAttribute), 0, 0, 1, 1},
  {&__pyx_n_s_getRankAttribute_locals_lambda, __pyx_k_getRankAttribute_locals_lambda, sizeof(__pyx_k_getRankAttribute_locals_lambda), 0, 0, 1, 1},
  {&__pyx_n_s_getSparsifiedGraph, __pyx_k_getSparsifiedGraph, sizeof(__pyx_k_getSparsifiedGraph), 0, 0, 1, 1},
  {&__pyx_n_s_getSparsifiedGraphOfSize, __pyx_k_getSparsifiedGraphOfSize, sizeof(__pyx_k_getSparsifiedGraphOfSize), 0, 0, 1, 1},
  {&__pyx_n_s_getSparsifiedGraph_2, __pyx_k_getSparsifiedGraph_2, sizeof(__pyx_k_getSparsifiedGraph_2), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_gf, __pyx_k_gf, sizeof(__pyx_k_gf), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_increase, __pyx_k_increase, sizeof(__pyx_k_increase), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_inputAttribute, __pyx_k_inputAttribute, sizeof(__pyx_k_inputAttribute), 0, 0, 1, 1},
  {&__pyx_n_s_inverse, __pyx_k_inverse, sizeof(__pyx_k_inverse), 0, 0, 1, 1},
  {&__pyx_n_s_iterEdges, __pyx_k_iterEdges, sizeof(__pyx_k_iterEdges), 0, 0, 1, 1},
  {&__pyx_n_s_iterEdgesWeights, __pyx_k_iterEdgesWeights, sizeof(__pyx_k_iterEdgesWeights), 0, 0, 1, 1},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_localDegree, __pyx_k_localDegree, sizeof(__pyx_k_localDegree), 0, 0, 1, 1},
  {&__pyx_n_s_localDegreeScore, __pyx_k_localDegreeScore, sizeof(__pyx_k_localDegreeScore), 0, 0, 1, 1},
  {&__pyx_n_s_localFilterScore, __pyx_k_localFilterScore, sizeof(__pyx_k_localFilterScore), 0, 0, 1, 1},
  {&__pyx_n_s_localSimScore, __pyx_k_localSimScore, sizeof(__pyx_k_localSimScore), 0, 0, 1, 1},
  {&__pyx_n_s_logarithmic, __pyx_k_logarithmic, sizeof(__pyx_k_logarithmic), 0, 0, 1, 1},
  {&__pyx_n_s_lower, __pyx_k_lower, sizeof(__pyx_k_lower), 0, 0, 1, 1},
  {&__pyx_n_s_lowerBound, __pyx_k_lowerBound, sizeof(__pyx_k_lowerBound), 0, 0, 1, 1},
  {&__pyx_n_s_lowerParameterBound, __pyx_k_lowerParameterBound, sizeof(__pyx_k_lowerParameterBound), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_maxRank, __pyx_k_maxRank, sizeof(__pyx_k_maxRank), 0, 0, 1, 1},
  {&__pyx_n_s_maxSteps, __pyx_k_maxSteps, sizeof(__pyx_k_maxSteps), 0, 0, 1, 1},
  {&__pyx_n_s_meanQuadrangles, __pyx_k_meanQuadrangles, sizeof(__pyx_k_meanQuadrangles), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_minDistance, __pyx_k_minDistance, sizeof(__pyx_k_minDistance), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_ms, __pyx_k_ms, sizeof(__pyx_k_ms), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_networkit_sparsification, __pyx_k_networkit_sparsification, sizeof(__pyx_k_networkit_sparsification), 0, 0, 1, 1},
  {&__pyx_kp_s_networkit_sparsification_pyx, __pyx_k_networkit_sparsification_pyx, sizeof(__pyx_k_networkit_sparsification_pyx), 0, 0, 1, 0},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_kp_u_none_randomized, __pyx_k_none_randomized, sizeof(__pyx_k_none_randomized), 0, 1, 0, 0},
  {&__pyx_n_s_norm, __pyx_k_norm, sizeof(__pyx_k_norm), 0, 0, 1, 1},
  {&__pyx_n_s_numberIterations, __pyx_k_numberIterations, sizeof(__pyx_k_numberIterations), 0, 0, 1, 1},
  {&__pyx_n_s_numberOfEdges, __pyx_k_numberOfEdges, sizeof(__pyx_k_numberOfEdges), 0, 0, 1, 1},
  {&__pyx_n_s_numberSystems, __pyx_k_numberSystems, sizeof(__pyx_k_numberSystems), 0, 0, 1, 1},
  {&__pyx_n_s_object, __pyx_k_object, sizeof(__pyx_k_object), 0, 0, 1, 1},
  {&__pyx_n_s_offset, __pyx_k_offset, sizeof(__pyx_k_offset), 0, 0, 1, 1},
  {&__pyx_n_s_omega, __pyx_k_omega, sizeof(__pyx_k_omega), 0, 0, 1, 1},
  {&__pyx_n_s_originalScores, __pyx_k_originalScores, sizeof(__pyx_k_originalScores), 0, 0, 1, 1},
  {&__pyx_n_s_par, __pyx_k_par, sizeof(__pyx_k_par), 0, 0, 1, 1},
  {&__pyx_n_s_paramAlgorithm, __pyx_k_paramAlgorithm, sizeof(__pyx_k_paramAlgorithm), 0, 0, 1, 1},
  {&__pyx_n_s_parameter, __pyx_k_parameter, sizeof(__pyx_k_parameter), 0, 0, 1, 1},
  {&__pyx_kp_u_parameterization_method_not_yet, __pyx_k_parameterization_method_not_yet, sizeof(__pyx_k_parameterization_method_not_yet), 0, 1, 0, 0},
  {&__pyx_n_s_parameterize, __pyx_k_parameterize, sizeof(__pyx_k_parameterize), 0, 0, 1, 1},
  {&__pyx_n_s_partition, __pyx_k_partition, sizeof(__pyx_k_partition), 0, 0, 1, 1},
  {&__pyx_n_s_pf, __pyx_k_pf, sizeof(__pyx_k_pf), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_preprocess, __pyx_k_preprocess, sizeof(__pyx_k_preprocess), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_quadranglePrefixJaccard, __pyx_k_quadranglePrefixJaccard, sizeof(__pyx_k_quadranglePrefixJaccard), 0, 0, 1, 1},
  {&__pyx_n_s_quadrangles, __pyx_k_quadrangles, sizeof(__pyx_k_quadrangles), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reScore, __pyx_k_reScore, sizeof(__pyx_k_reScore), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_refine, __pyx_k_refine, sizeof(__pyx_k_refine), 0, 0, 1, 1},
  {&__pyx_n_s_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
  {&__pyx_n_s_reverse, __pyx_k_reverse, sizeof(__pyx_k_reverse), 0, 0, 1, 1},
  {&__pyx_n_s_rneScore, __pyx_k_rneScore, sizeof(__pyx_k_rneScore), 0, 0, 1, 1},
  {&__pyx_n_s_run, __pyx_k_run, sizeof(__pyx_k_run), 0, 0, 1, 1},
  {&__pyx_n_s_scanScore, __pyx_k_scanScore, sizeof(__pyx_k_scanScore), 0, 0, 1, 1},
  {&__pyx_n_s_score, __pyx_k_score, sizeof(__pyx_k_score), 0, 0, 1, 1},
  {&__pyx_kp_u_score_must_be_either_a_vector_of, __pyx_k_score_must_be_either_a_vector_of, sizeof(__pyx_k_score_must_be_either_a_vector_of), 0, 1, 0, 0},
  {&__pyx_n_s_scorer, __pyx_k_scorer, sizeof(__pyx_k_scorer), 0, 0, 1, 1},
  {&__pyx_n_s_scores, __pyx_k_scores, sizeof(__pyx_k_scores), 0, 0, 1, 1},
  {&__pyx_n_s_selection, __pyx_k_selection, sizeof(__pyx_k_selection), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_kp_s_self__this_cannot_be_converted_t, __pyx_k_self__this_cannot_be_converted_t, sizeof(__pyx_k_self__this_cannot_be_converted_t), 0, 0, 1, 0},
  {&__pyx_n_s_setitem, __pyx_k_setitem, sizeof(__pyx_k_setitem), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_simmelianOverlap, __pyx_k_simmelianOverlap, sizeof(__pyx_k_simmelianOverlap), 0, 0, 1, 1},
  {&__pyx_n_s_sizeIncreasesWithParameter, __pyx_k_sizeIncreasesWithParameter, sizeof(__pyx_k_sizeIncreasesWithParameter), 0, 0, 1, 1},
  {&__pyx_n_s_sorted, __pyx_k_sorted, sizeof(__pyx_k_sorted), 0, 0, 1, 1},
  {&__pyx_n_s_sparsified, __pyx_k_sparsified, sizeof(__pyx_k_sparsified), 0, 0, 1, 1},
  {&__pyx_n_s_sparsifier, __pyx_k_sparsifier, sizeof(__pyx_k_sparsifier), 0, 0, 1, 1},
  {&__pyx_n_s_squared, __pyx_k_squared, sizeof(__pyx_k_squared), 0, 0, 1, 1},
  {&__pyx_n_s_targetBurntRatio, __pyx_k_targetBurntRatio, sizeof(__pyx_k_targetBurntRatio), 0, 0, 1, 1},
  {&__pyx_n_s_tebr, __pyx_k_tebr, sizeof(__pyx_k_tebr), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_together, __pyx_k_together, sizeof(__pyx_k_together), 0, 0, 1, 1},
  {&__pyx_n_s_triangleScore, __pyx_k_triangleScore, sizeof(__pyx_k_triangleScore), 0, 0, 1, 1},
  {&__pyx_n_s_triangles, __pyx_k_triangles, sizeof(__pyx_k_triangles), 0, 0, 1, 1},
  {&__pyx_n_s_turbo, __pyx_k_turbo, sizeof(__pyx_k_turbo), 0, 0, 1, 1},
  {&__pyx_n_s_u, __pyx_k_u, sizeof(__pyx_k_u), 0, 0, 1, 1},
  {&__pyx_n_s_upper, __pyx_k_upper, sizeof(__pyx_k_upper), 0, 0, 1, 1},
  {&__pyx_n_s_upperBound, __pyx_k_upperBound, sizeof(__pyx_k_upperBound), 0, 0, 1, 1},
  {&__pyx_n_s_upperEdgeIdBound, __pyx_k_upperEdgeIdBound, sizeof(__pyx_k_upperEdgeIdBound), 0, 0, 1, 1},
  {&__pyx_n_s_upperParameterBound, __pyx_k_upperParameterBound, sizeof(__pyx_k_upperParameterBound), 0, 0, 1, 1},
  {&__pyx_n_s_v, __pyx_k_v, sizeof(__pyx_k_v), 0, 0, 1, 1},
  {&__pyx_n_s_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 0, 1, 1},
  {&__pyx_n_s_withEdgeScores, __pyx_k_withEdgeScores, sizeof(__pyx_k_withEdgeScores), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_n_s_zip, __pyx_k_zip, sizeof(__pyx_k_zip), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_object = __Pyx_GetBuiltinName(__pyx_n_s_object); if (!__pyx_builtin_object) __PYX_ERR(0, 653, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(0, 39, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) __PYX_ERR(0, 663, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 767, __pyx_L1_error)
  __pyx_builtin_zip = __Pyx_GetBuiltinName(__pyx_n_s_zip); if (!__pyx_builtin_zip) __PYX_ERR(0, 839, __pyx_L1_error)
  __pyx_builtin_sorted = __Pyx_GetBuiltinName(__pyx_n_s_sorted); if (!__pyx_builtin_sorted) __PYX_ERR(0, 840, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "networkit/sparsification.pyx":39
 * 
 * 	cdef bool_t isDoubleValue(self):
 * 		raise RuntimeError("Implement in subclass")             # <<<<<<<<<<<<<<
 * 
 * 	def __init__(self, *args, **namedargs):
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_Implement_in_subclass); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "networkit/sparsification.pyx":43
 * 	def __init__(self, *args, **namedargs):
 * 		if type(self) == EdgeScore:
 * 			raise RuntimeError("Error, you may not use EdgeScore directly, use a sub-class instead")             # <<<<<<<<<<<<<<
 * 
 * 	def __dealloc__(self):
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_Error_you_may_not_use_EdgeScore); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_self__this_cannot_be_converted_t); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "(tree fragment)":4
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_self__this_cannot_be_converted_t); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "networkit/sparsification.pyx":211
 * 				self._this = new _EdgeScoreNormalizer[count](G._this, self._inScoreCount, inverse, lower, upper)
 * 			except TypeError:
 * 				raise TypeError("score must be either a vector of integer or float")             # <<<<<<<<<<<<<<
 * 
 * 	cdef bool_t isDoubleValue(self):
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_u_score_must_be_either_a_vector_of); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "networkit/sparsification.pyx":322
 * 			The weighted result graph.
 * 		"""
 * 		return Graph(0).setThis(self._this.calculate())             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/sparsification/SimmelianOverlapScore.hpp>":
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__40 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__42 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__43 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__44 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__45 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__46 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);

  /* "networkit/sparsification.pyx":900
 * 
 * 	def _getParameterizationAlgorithm(self):
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)             # <<<<<<<<<<<<<<
 * 
 * class QuadrilateralSimmelianSparsifier(Sparsifier):
 */
  __pyx_tuple__47 = PyTuple_Pack(4, Py_False, __pyx_float_0_0, __pyx_float_1_0, __pyx_int_20); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(0, 900, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);

  /* "networkit/sparsification.pyx":1195
 * 
 * 	def _getParameterizationAlgorithm(self):
 * 		raise NotImplementedError("parameterization method not yet implemented.")             # <<<<<<<<<<<<<<
 * 
 * class AlgebraicDistanceSparsifier(Sparsifier):
 */
  __pyx_tuple__48 = PyTuple_Pack(1, __pyx_kp_u_parameterization_method_not_yet); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(0, 1195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);

  /* "networkit/sparsification.pyx":1262
 * 		partition = cdAlgo.getPartition()
 * 
 * 		def together(u, v):             # <<<<<<<<<<<<<<
 * 			if (partition[u] == partition[v]):
 * 				return 1.0
 */
  __pyx_tuple__49 = PyTuple_Pack(2, __pyx_n_s_u, __pyx_n_s_v); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(0, 1262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);
  __pyx_codeobj__50 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__49, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_together, 1262, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__50)) __PYX_ERR(0, 1262, __pyx_L1_error)

  /* "networkit/sparsification.pyx":653
 * _ABS_ZERO = 1e-7
 * 
 * class Sparsifier(object):             # <<<<<<<<<<<<<<
 * 	""" Abstract base class representing a graph sparsification algorithm that
 * 	uses only one parameter to determine the degree of filtering. """
 */
  __pyx_tuple__52 = PyTuple_Pack(1, __pyx_builtin_object); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(0, 653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);

  /* "networkit/sparsification.pyx":657
 * 	uses only one parameter to determine the degree of filtering. """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute. (To be implemented by derived class)
 * 
 */
  __pyx_tuple__53 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_G); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(0, 657, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);
  __pyx_codeobj__54 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__53, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_scores, 657, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__54)) __PYX_ERR(0, 657, __pyx_L1_error)

  /* "networkit/sparsification.pyx":665
 * 		raise NotImplementedError
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		""" The actual implementation of the sparsification.
 * 		(To be implemented in the derived class.)
 */
  __pyx_tuple__55 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_G, __pyx_n_s_parameter, __pyx_n_s_attribute); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(0, 665, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);
  __pyx_codeobj__56 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__55, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_getSparsifiedGraph, 665, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__56)) __PYX_ERR(0, 665, __pyx_L1_error)

  /* "networkit/sparsification.pyx":676
 * 		raise NotImplementedError
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		""" Returns an appropriate parameterization algorithm for this sparsifier.
 * 		(To be implemented in the derived class.)
 */
  __pyx_tuple__57 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(0, 676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);
  __pyx_codeobj__58 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__57, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_getParameterizationAlgorithm, 676, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__58)) __PYX_ERR(0, 676, __pyx_L1_error)

  /* "networkit/sparsification.pyx":682
 * 		return SimpleParameterization()
 * 
 * 	def getSparsifiedGraph(self, G, parameter, attribute=None):             # <<<<<<<<<<<<<<
 * 		"""Returns a sparsified version of the given input graph.
 * 
 */
  __pyx_tuple__59 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_G, __pyx_n_s_parameter, __pyx_n_s_attribute); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(0, 682, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);
  __pyx_codeobj__60 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__59, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_getSparsifiedGraph_2, 682, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__60)) __PYX_ERR(0, 682, __pyx_L1_error)
  __pyx_tuple__61 = PyTuple_Pack(1, ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(0, 682, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);

  /* "networkit/sparsification.pyx":696
 * 		return self._getSparsifiedGraph(G, parameter, attribute)
 * 
 * 	def getSparsifiedGraphOfSize(self, G, edgeRatio, attribute=None):             # <<<<<<<<<<<<<<
 * 		"""This is a convenience function that applies an appropriate parameterization
 * 		algorithm (if available) to obtain a parameter value that yields a sparsified
 */
  __pyx_tuple__62 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_G, __pyx_n_s_edgeRatio, __pyx_n_s_attribute, __pyx_n_s_parameter); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(0, 696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);
  __pyx_codeobj__63 = (PyObject*)__Pyx_PyCode_New(4, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__62, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_getSparsifiedGraphOfSize, 696, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__63)) __PYX_ERR(0, 696, __pyx_L1_error)
  __pyx_tuple__64 = PyTuple_Pack(1, ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(0, 696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);

  /* "networkit/sparsification.pyx":714
 * 		return self.getSparsifiedGraph(G, parameter, attribute)
 * 
 * 	def getParameter(self, G, edgeRatio, attribute=None):             # <<<<<<<<<<<<<<
 * 		""" This is a convenience function that applies an appropriate parameterization
 * 		algorithm (if available) to obtain a parameter value that yields a sparsified
 */
  __pyx_tuple__65 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_G, __pyx_n_s_edgeRatio, __pyx_n_s_attribute, __pyx_n_s_paramAlgorithm, __pyx_n_s_parameter); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(0, 714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);
  __pyx_codeobj__66 = (PyObject*)__Pyx_PyCode_New(4, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__65, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_getParameter, 714, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__66)) __PYX_ERR(0, 714, __pyx_L1_error)
  __pyx_tuple__67 = PyTuple_Pack(1, ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(0, 714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);

  /* "networkit/sparsification.pyx":731
 * 	result. """
 * 
 * 	def parameterize(self, algorithm, G, attribute, edgeRatio):             # <<<<<<<<<<<<<<
 * 		""" Parameterize the given sparsifier for the given input graph with the
 * 		given target edge ratio. (To be implemented by derived class.)
 */
  __pyx_tuple__68 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_algorithm, __pyx_n_s_G, __pyx_n_s_attribute, __pyx_n_s_edgeRatio); if (unlikely(!__pyx_tuple__68)) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);
  __pyx_codeobj__69 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__68, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_parameterize, 731, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__69)) __PYX_ERR(0, 731, __pyx_L1_error)

  /* "networkit/sparsification.pyx":746
 * 	""" Parameterizes a sparsification algorithm using binary search. """
 * 
 * 	def __init__(self, sizeIncreasesWithParameter, lowerParameterBound, upperParameterBound, maxSteps):             # <<<<<<<<<<<<<<
 * 		""" Creates a new instance of a binary search parameterizer.
 * 
 */
  __pyx_tuple__70 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_sizeIncreasesWithParameter, __pyx_n_s_lowerParameterBound, __pyx_n_s_upperParameterBound, __pyx_n_s_maxSteps); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(0, 746, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);
  __pyx_codeobj__71 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__70, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_init, 746, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__71)) __PYX_ERR(0, 746, __pyx_L1_error)

  /* "networkit/sparsification.pyx":760
 * 		self.maxSteps = maxSteps
 * 
 * 	def parameterize(self, algorithm, G, attribute, edgeRatio):             # <<<<<<<<<<<<<<
 * 		lowerBound = self.lowerParameterBound
 * 		upperBound = self.upperParameterBound
 */
  __pyx_tuple__72 = PyTuple_Pack(15, __pyx_n_s_self, __pyx_n_s_algorithm, __pyx_n_s_G, __pyx_n_s_attribute, __pyx_n_s_edgeRatio, __pyx_n_s_lowerBound, __pyx_n_s_upperBound, __pyx_n_s_estimation, __pyx_n_s_bestParameter, __pyx_n_s_minDistance, __pyx_n_s_i, __pyx_n_s_sparsified, __pyx_n_s_currentEdgeRatio, __pyx_n_s_distance, __pyx_n_s_increase); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(0, 760, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);
  __pyx_codeobj__73 = (PyObject*)__Pyx_PyCode_New(5, 0, 15, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__72, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_parameterize, 760, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__73)) __PYX_ERR(0, 760, __pyx_L1_error)

  /* "networkit/sparsification.pyx":798
 * 	set of possible values) """
 * 
 * 	def __init__(self, lowerParameterBound, upperParameterBound):             # <<<<<<<<<<<<<<
 * 		""" Creates a new instance of a complete search parameterizer.
 * 
 */
  __pyx_tuple__74 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_lowerParameterBound, __pyx_n_s_upperParameterBound); if (unlikely(!__pyx_tuple__74)) __PYX_ERR(0, 798, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);
  __pyx_codeobj__75 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_init, 798, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__75)) __PYX_ERR(0, 798, __pyx_L1_error)

  /* "networkit/sparsification.pyx":807
 * 		self.upperParameterBound = upperParameterBound
 * 
 * 	def parameterize(self, algorithm, G, attribute, edgeRatio):             # <<<<<<<<<<<<<<
 * 		bestParameter = self.lowerParameterBound
 * 		bestRatio = 0.0
 */
  __pyx_tuple__76 = PyTuple_Pack(12, __pyx_n_s_self, __pyx_n_s_algorithm, __pyx_n_s_G, __pyx_n_s_attribute, __pyx_n_s_edgeRatio, __pyx_n_s_bestParameter, __pyx_n_s_bestRatio, __pyx_n_s_minDistance, __pyx_n_s_i, __pyx_n_s_sparsified, __pyx_n_s_currentEdgeRatio, __pyx_n_s_distance); if (unlikely(!__pyx_tuple__76)) __PYX_ERR(0, 807, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__76);
  __Pyx_GIVEREF(__pyx_tuple__76);
  __pyx_codeobj__77 = (PyObject*)__Pyx_PyCode_New(5, 0, 12, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__76, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_parameterize, 807, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__77)) __PYX_ERR(0, 807, __pyx_L1_error)

  /* "networkit/sparsification.pyx":824
 * 		return bestParameter
 * 
 * def getRankAttribute(attribute, reverse = False):             # <<<<<<<<<<<<<<
 * 	""" Takes as input an attribute (node or edge) and returns an attribute where
 * 	each node is assigned its rank among all others according to the attribute values.
 */
  __pyx_tuple__78 = PyTuple_Pack(8, __pyx_n_s_attribute, __pyx_n_s_reverse, __pyx_n_s_attribute_2, __pyx_n_s_index, __pyx_n_s_result, __pyx_n_s_i, __pyx_n_s_v, __pyx_n_s_x); if (unlikely(!__pyx_tuple__78)) __PYX_ERR(0, 824, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__78);
  __Pyx_GIVEREF(__pyx_tuple__78);
  __pyx_codeobj__79 = (PyObject*)__Pyx_PyCode_New(2, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__78, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_getRankAttribute, 824, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__79)) __PYX_ERR(0, 824, __pyx_L1_error)

  /* "networkit/sparsification.pyx":855
 * 	 introduced by Nick et al. """
 * 
 * 	def __init__(self, maxRank):             # <<<<<<<<<<<<<<
 * 		self.maxRank = maxRank
 * 
 */
  __pyx_tuple__80 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_maxRank); if (unlikely(!__pyx_tuple__80)) __PYX_ERR(0, 855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__80);
  __Pyx_GIVEREF(__pyx_tuple__80);
  __pyx_codeobj__81 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__80, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_init, 855, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__81)) __PYX_ERR(0, 855, __pyx_L1_error)

  /* "networkit/sparsification.pyx":858
 * 		self.maxRank = maxRank
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the minimum parameter value
 * 		such that the edge is contained in the sparsified graph.
 */
  __pyx_tuple__82 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_G, __pyx_n_s_triangles, __pyx_n_s_simmelianOverlap); if (unlikely(!__pyx_tuple__82)) __PYX_ERR(0, 858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__82);
  __Pyx_GIVEREF(__pyx_tuple__82);
  __pyx_codeobj__83 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__82, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_scores, 858, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__83)) __PYX_ERR(0, 858, __pyx_L1_error)

  /* "networkit/sparsification.pyx":871
 * 		return simmelianOverlap.scores()
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */
  __pyx_tuple__84 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_G, __pyx_n_s_parameter, __pyx_n_s_attribute, __pyx_n_s_gf); if (unlikely(!__pyx_tuple__84)) __PYX_ERR(0, 871, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__84);
  __Pyx_GIVEREF(__pyx_tuple__84);
  __pyx_codeobj__85 = (PyObject*)__Pyx_PyCode_New(4, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__84, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_getSparsifiedGraph, 871, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__85)) __PYX_ERR(0, 871, __pyx_L1_error)

  /* "networkit/sparsification.pyx":875
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return CompleteSearchParameterization(0, self.maxRank)
 * 
 */
  __pyx_tuple__86 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__86)) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__86);
  __Pyx_GIVEREF(__pyx_tuple__86);
  __pyx_codeobj__87 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__86, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_getParameterizationAlgorithm, 875, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__87)) __PYX_ERR(0, 875, __pyx_L1_error)

  /* "networkit/sparsification.pyx":883
 * 	introduced by Nick et al. """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the minimum jaccard filter value
 * 		such that the edge is contained in the sparsified graph.
 */
  __pyx_tuple__88 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_G, __pyx_n_s_triangles, __pyx_n_s_a_sj); if (unlikely(!__pyx_tuple__88)) __PYX_ERR(0, 883, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__88);
  __Pyx_GIVEREF(__pyx_tuple__88);
  __pyx_codeobj__89 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__88, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_scores, 883, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__89)) __PYX_ERR(0, 883, __pyx_L1_error)

  /* "networkit/sparsification.pyx":895
 * 		return a_sj
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */
  __pyx_tuple__90 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_G, __pyx_n_s_parameter, __pyx_n_s_attribute, __pyx_n_s_gf); if (unlikely(!__pyx_tuple__90)) __PYX_ERR(0, 895, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__90);
  __Pyx_GIVEREF(__pyx_tuple__90);
  __pyx_codeobj__91 = (PyObject*)__Pyx_PyCode_New(4, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__90, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_getSparsifiedGraph, 895, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__91)) __PYX_ERR(0, 895, __pyx_L1_error)

  /* "networkit/sparsification.pyx":899
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */
  __pyx_tuple__92 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__92)) __PYX_ERR(0, 899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__92);
  __Pyx_GIVEREF(__pyx_tuple__92);
  __pyx_codeobj__93 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__92, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_getParameterizationAlgorithm, 899, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__93)) __PYX_ERR(0, 899, __pyx_L1_error)

  /* "networkit/sparsification.pyx":905
 * 	""" An implementation of the Simmelian Sparsifiers based on quadrangles. """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns an edge scoring attribute that can be used for global filtering.
 */
  __pyx_tuple__94 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_G, __pyx_n_s_quadrangles, __pyx_n_s_meanQuadrangles, __pyx_n_s_quadranglePrefixJaccard); if (unlikely(!__pyx_tuple__94)) __PYX_ERR(0, 905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__94);
  __Pyx_GIVEREF(__pyx_tuple__94);
  __pyx_codeobj__95 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__94, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_scores, 905, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__95)) __PYX_ERR(0, 905, __pyx_L1_error)

  /* "networkit/sparsification.pyx":917
 * 		return quadranglePrefixJaccard
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */
  __pyx_tuple__96 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_G, __pyx_n_s_parameter, __pyx_n_s_attribute, __pyx_n_s_gf); if (unlikely(!__pyx_tuple__96)) __PYX_ERR(0, 917, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__96);
  __Pyx_GIVEREF(__pyx_tuple__96);
  __pyx_codeobj__97 = (PyObject*)__Pyx_PyCode_New(4, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__96, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_getSparsifiedGraph, 917, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__97)) __PYX_ERR(0, 917, __pyx_L1_error)

  /* "networkit/sparsification.pyx":921
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */
  __pyx_tuple__98 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__98)) __PYX_ERR(0, 921, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__98);
  __Pyx_GIVEREF(__pyx_tuple__98);
  __pyx_codeobj__99 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__98, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_getParameterizationAlgorithm, 921, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__99)) __PYX_ERR(0, 921, __pyx_L1_error)

  /* "networkit/sparsification.pyx":928
 * 	""" Multiscale Sparsifier that uses triangle counts as input edge weight. """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the maximum parameter value
 * 		such that the edge is contained in the sparsified graph.
 */
  __pyx_tuple__100 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_G, __pyx_n_s_triangles, __pyx_n_s_ms, __pyx_n_s_a_ms); if (unlikely(!__pyx_tuple__100)) __PYX_ERR(0, 928, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__100);
  __Pyx_GIVEREF(__pyx_tuple__100);
  __pyx_codeobj__101 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_scores, 928, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__101)) __PYX_ERR(0, 928, __pyx_L1_error)

  /* "networkit/sparsification.pyx":941
 * 		return a_ms
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */
  __pyx_tuple__102 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_G, __pyx_n_s_parameter, __pyx_n_s_attribute, __pyx_n_s_gf); if (unlikely(!__pyx_tuple__102)) __PYX_ERR(0, 941, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__102);
  __Pyx_GIVEREF(__pyx_tuple__102);
  __pyx_codeobj__103 = (PyObject*)__Pyx_PyCode_New(4, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__102, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_getSparsifiedGraph, 941, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__103)) __PYX_ERR(0, 941, __pyx_L1_error)

  /* "networkit/sparsification.pyx":945
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */
  __pyx_tuple__104 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__104)) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__104);
  __Pyx_GIVEREF(__pyx_tuple__104);
  __pyx_codeobj__105 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__104, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_getParameterizationAlgorithm, 945, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__105)) __PYX_ERR(0, 945, __pyx_L1_error)

  /* "networkit/sparsification.pyx":951
 * 	""" Multiscale Sparsifier that uses node degrees (mapped to edges) as input edge weight. """
 * 
 * 	def __init__(self, degsToAttrValue):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Creates a new instance of the Degree Multiscale sparsifier.
 */
  __pyx_tuple__106 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_degsToAttrValue); if (unlikely(!__pyx_tuple__106)) __PYX_ERR(0, 951, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__106);
  __Pyx_GIVEREF(__pyx_tuple__106);
  __pyx_codeobj__107 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_init, 951, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__107)) __PYX_ERR(0, 951, __pyx_L1_error)

  /* "networkit/sparsification.pyx":959
 * 		self.degsToAttrValue = degsToAttrValue
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the maximum parameter value
 * 		such that the edge is contained in the sparsified graph.
 */
  __pyx_tuple__108 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_G, __pyx_n_s_inputAttribute, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_ms, __pyx_n_s_a_ms); if (unlikely(!__pyx_tuple__108)) __PYX_ERR(0, 959, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__108);
  __Pyx_GIVEREF(__pyx_tuple__108);
  __pyx_codeobj__109 = (PyObject*)__Pyx_PyCode_New(2, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__108, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_scores, 959, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__109)) __PYX_ERR(0, 959, __pyx_L1_error)

  /* "networkit/sparsification.pyx":976
 * 		return a_ms
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */
  __pyx_tuple__110 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_G, __pyx_n_s_parameter, __pyx_n_s_attribute, __pyx_n_s_gf); if (unlikely(!__pyx_tuple__110)) __PYX_ERR(0, 976, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__110);
  __Pyx_GIVEREF(__pyx_tuple__110);
  __pyx_codeobj__111 = (PyObject*)__Pyx_PyCode_New(4, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__110, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_getSparsifiedGraph, 976, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__111)) __PYX_ERR(0, 976, __pyx_L1_error)

  /* "networkit/sparsification.pyx":980
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */
  __pyx_tuple__112 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__112)) __PYX_ERR(0, 980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__112);
  __Pyx_GIVEREF(__pyx_tuple__112);
  __pyx_codeobj__113 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__112, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_getParameterizationAlgorithm, 980, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__113)) __PYX_ERR(0, 980, __pyx_L1_error)

  /* "networkit/sparsification.pyx":986
 * 	""" An implementation of the Jaccard Similarity sparsification approach introduced by Satuluri et al. """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns the jaccard coefficient of the neighborhoods of the two incident nodes """
 * 		triangles = TriangleEdgeScore(G).run().scores()
 */
  __pyx_tuple__114 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_G, __pyx_n_s_triangles); if (unlikely(!__pyx_tuple__114)) __PYX_ERR(0, 986, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__114);
  __Pyx_GIVEREF(__pyx_tuple__114);
  __pyx_codeobj__115 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__114, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_scores, 986, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__115)) __PYX_ERR(0, 986, __pyx_L1_error)

  /* "networkit/sparsification.pyx":991
 * 		return JaccardSimilarityAttributizer(G, triangles).getAttribute()
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */
  __pyx_tuple__116 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_G, __pyx_n_s_parameter, __pyx_n_s_attribute, __pyx_n_s_gf); if (unlikely(!__pyx_tuple__116)) __PYX_ERR(0, 991, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__116);
  __Pyx_GIVEREF(__pyx_tuple__116);
  __pyx_codeobj__117 = (PyObject*)__Pyx_PyCode_New(4, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__116, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_getSparsifiedGraph, 991, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__117)) __PYX_ERR(0, 991, __pyx_L1_error)

  /* "networkit/sparsification.pyx":995
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */
  __pyx_tuple__118 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__118)) __PYX_ERR(0, 995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__118);
  __Pyx_GIVEREF(__pyx_tuple__118);
  __pyx_codeobj__119 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__118, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_getParameterizationAlgorithm, 995, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__119)) __PYX_ERR(0, 995, __pyx_L1_error)

  /* "networkit/sparsification.pyx":1003
 * 	""" An implementation of the Local Similarity sparsification approach introduced by Satuluri et al. """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the minimum parameter value
 * 		such that the edge is contained in the sparsified graph.
 */
  __pyx_tuple__120 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_G, __pyx_n_s_triangles, __pyx_n_s_localSimScore); if (unlikely(!__pyx_tuple__120)) __PYX_ERR(0, 1003, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__120);
  __Pyx_GIVEREF(__pyx_tuple__120);
  __pyx_codeobj__121 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__120, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_scores, 1003, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__121)) __PYX_ERR(0, 1003, __pyx_L1_error)

  /* "networkit/sparsification.pyx":1015
 * 		return localSimScore.scores()
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */
  __pyx_tuple__122 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_G, __pyx_n_s_parameter, __pyx_n_s_attribute, __pyx_n_s_gf); if (unlikely(!__pyx_tuple__122)) __PYX_ERR(0, 1015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__122);
  __Pyx_GIVEREF(__pyx_tuple__122);
  __pyx_codeobj__123 = (PyObject*)__Pyx_PyCode_New(4, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__122, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_getSparsifiedGraph, 1015, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__123)) __PYX_ERR(0, 1015, __pyx_L1_error)

  /* "networkit/sparsification.pyx":1019
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */
  __pyx_tuple__124 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__124)) __PYX_ERR(0, 1019, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__124);
  __Pyx_GIVEREF(__pyx_tuple__124);
  __pyx_codeobj__125 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__124, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_getParameterizationAlgorithm, 1019, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__125)) __PYX_ERR(0, 1019, __pyx_L1_error)

  /* "networkit/sparsification.pyx":1026
 * 	""" An implementation of the Multiscale backbone approach introduced by Serrano et al. """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the minimum parameter value
 * 		such that the edge is contained in the sparsified graph.
 */
  __pyx_tuple__126 = PyTuple_Pack(9, __pyx_n_s_self, __pyx_n_s_G, __pyx_n_s_inputAttribute, __pyx_n_s_u, __pyx_n_s_v, __pyx_n_s_w, __pyx_n_s_edgeId, __pyx_n_s_scorer, __pyx_n_s_scores); if (unlikely(!__pyx_tuple__126)) __PYX_ERR(0, 1026, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__126);
  __Pyx_GIVEREF(__pyx_tuple__126);
  __pyx_codeobj__127 = (PyObject*)__Pyx_PyCode_New(2, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__126, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_scores, 1026, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__127)) __PYX_ERR(0, 1026, __pyx_L1_error)

  /* "networkit/sparsification.pyx":1044
 * 		return scores
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */
  __pyx_tuple__128 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_G, __pyx_n_s_parameter, __pyx_n_s_attribute, __pyx_n_s_gf); if (unlikely(!__pyx_tuple__128)) __PYX_ERR(0, 1044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__128);
  __Pyx_GIVEREF(__pyx_tuple__128);
  __pyx_codeobj__129 = (PyObject*)__Pyx_PyCode_New(4, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__128, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_getSparsifiedGraph, 1044, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__129)) __PYX_ERR(0, 1044, __pyx_L1_error)

  /* "networkit/sparsification.pyx":1048
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */
  __pyx_tuple__130 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__130)) __PYX_ERR(0, 1048, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__130);
  __Pyx_GIVEREF(__pyx_tuple__130);
  __pyx_codeobj__131 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__130, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_getParameterizationAlgorithm, 1048, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__131)) __PYX_ERR(0, 1048, __pyx_L1_error)

  /* "networkit/sparsification.pyx":1055
 * 	""" Random Edge sampling. Edges to keep in the sparsified graph are selected uniformly at random. """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the minimum parameter value
 * 		such that the edge is contained in the sparsified graph.
 */
  __pyx_tuple__132 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_G, __pyx_n_s_reScore); if (unlikely(!__pyx_tuple__132)) __PYX_ERR(0, 1055, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__132);
  __Pyx_GIVEREF(__pyx_tuple__132);
  __pyx_codeobj__133 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__132, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_scores, 1055, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__133)) __PYX_ERR(0, 1055, __pyx_L1_error)

  /* "networkit/sparsification.pyx":1067
 * 		return reScore.scores()
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, False)
 * 		return gf.calculate()
 */
  __pyx_tuple__134 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_G, __pyx_n_s_parameter, __pyx_n_s_attribute, __pyx_n_s_gf); if (unlikely(!__pyx_tuple__134)) __PYX_ERR(0, 1067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__134);
  __Pyx_GIVEREF(__pyx_tuple__134);
  __pyx_codeobj__135 = (PyObject*)__Pyx_PyCode_New(4, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__134, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_getSparsifiedGraph, 1067, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__135)) __PYX_ERR(0, 1067, __pyx_L1_error)

  /* "networkit/sparsification.pyx":1071
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return SimpleParameterization()
 * 
 */
  __pyx_tuple__136 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__136)) __PYX_ERR(0, 1071, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__136);
  __Pyx_GIVEREF(__pyx_tuple__136);
  __pyx_codeobj__137 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__136, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_getParameterizationAlgorithm, 1071, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__137)) __PYX_ERR(0, 1071, __pyx_L1_error)

  /* "networkit/sparsification.pyx":1077
 * 	""" [TODO not yet documented] """
 * 
 * 	def __init__(self, above = True):             # <<<<<<<<<<<<<<
 * 		self.above = above
 * 
 */
  __pyx_tuple__138 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_above); if (unlikely(!__pyx_tuple__138)) __PYX_ERR(0, 1077, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__138);
  __Pyx_GIVEREF(__pyx_tuple__138);
  __pyx_codeobj__139 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__138, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_init, 1077, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__139)) __PYX_ERR(0, 1077, __pyx_L1_error)
  __pyx_tuple__140 = PyTuple_Pack(1, ((PyObject *)Py_True)); if (unlikely(!__pyx_tuple__140)) __PYX_ERR(0, 1077, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__140);
  __Pyx_GIVEREF(__pyx_tuple__140);

  /* "networkit/sparsification.pyx":1080
 * 		self.above = above
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the minimum parameter value
 * 		such that the edge is contained in the sparsified graph.
 */
  __pyx_tuple__141 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_G, __pyx_n_s_rneScore); if (unlikely(!__pyx_tuple__141)) __PYX_ERR(0, 1080, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__141);
  __Pyx_GIVEREF(__pyx_tuple__141);
  __pyx_codeobj__142 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__141, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_scores, 1080, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__142)) __PYX_ERR(0, 1080, __pyx_L1_error)

  /* "networkit/sparsification.pyx":1092
 * 		return rneScore.scores()
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, self.above)
 * 		return gf.calculate()
 */
  __pyx_tuple__143 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_G, __pyx_n_s_parameter, __pyx_n_s_attribute, __pyx_n_s_gf); if (unlikely(!__pyx_tuple__143)) __PYX_ERR(0, 1092, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__143);
  __Pyx_GIVEREF(__pyx_tuple__143);
  __pyx_codeobj__144 = (PyObject*)__Pyx_PyCode_New(4, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__143, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_getSparsifiedGraph, 1092, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__144)) __PYX_ERR(0, 1092, __pyx_L1_error)

  /* "networkit/sparsification.pyx":1096
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization((not self.above), 0.0, 1.0, 20)
 * 
 */
  __pyx_tuple__145 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__145)) __PYX_ERR(0, 1096, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__145);
  __Pyx_GIVEREF(__pyx_tuple__145);
  __pyx_codeobj__146 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__145, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_getParameterizationAlgorithm, 1096, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__146)) __PYX_ERR(0, 1096, __pyx_L1_error)

  /* "networkit/sparsification.pyx":1103
 * 	""" A variant of the Forest Fire sparsification approach proposed by Leskovec et al. """
 * 
 * 	def __init__(self, burnProbability, targetBurntRatio):             # <<<<<<<<<<<<<<
 * 		""" Creates a new instance of the Edge Forest Fire sparsification algorithm.
 * 
 */
  __pyx_tuple__147 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_burnProbability, __pyx_n_s_targetBurntRatio); if (unlikely(!__pyx_tuple__147)) __PYX_ERR(0, 1103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__147);
  __Pyx_GIVEREF(__pyx_tuple__147);
  __pyx_codeobj__148 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__147, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_init, 1103, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__148)) __PYX_ERR(0, 1103, __pyx_L1_error)

  /* "networkit/sparsification.pyx":1113
 * 		self.targetBurntRatio = targetBurntRatio
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the maximum parameter value
 * 		such that the edge is contained in the sparsified graph.
 */
  __pyx_tuple__149 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_G, __pyx_n_s_ffScore); if (unlikely(!__pyx_tuple__149)) __PYX_ERR(0, 1113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__149);
  __Pyx_GIVEREF(__pyx_tuple__149);
  __pyx_codeobj__150 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__149, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_scores, 1113, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__150)) __PYX_ERR(0, 1113, __pyx_L1_error)

  /* "networkit/sparsification.pyx":1125
 * 		return ffScore.scores()
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */
  __pyx_tuple__151 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_G, __pyx_n_s_parameter, __pyx_n_s_attribute, __pyx_n_s_gf); if (unlikely(!__pyx_tuple__151)) __PYX_ERR(0, 1125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__151);
  __Pyx_GIVEREF(__pyx_tuple__151);
  __pyx_codeobj__152 = (PyObject*)__Pyx_PyCode_New(4, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__151, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_getSparsifiedGraph, 1125, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__152)) __PYX_ERR(0, 1125, __pyx_L1_error)

  /* "networkit/sparsification.pyx":1129
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */
  __pyx_tuple__153 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__153)) __PYX_ERR(0, 1129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__153);
  __Pyx_GIVEREF(__pyx_tuple__153);
  __pyx_codeobj__154 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__153, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_getParameterizationAlgorithm, 1129, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__154)) __PYX_ERR(0, 1129, __pyx_L1_error)

  /* "networkit/sparsification.pyx":1136
 * 	""" An implementation of the Local Degree sparsification algorithm. """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge score that holds for each edge the minimum parameter value
 * 		such that the edge is contained in the sparsified graph.
 */
  __pyx_tuple__155 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_G, __pyx_n_s_localDegree, __pyx_n_s_localDegreeScore); if (unlikely(!__pyx_tuple__155)) __PYX_ERR(0, 1136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__155);
  __Pyx_GIVEREF(__pyx_tuple__155);
  __pyx_codeobj__156 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__155, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_scores, 1136, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__156)) __PYX_ERR(0, 1136, __pyx_L1_error)

  /* "networkit/sparsification.pyx":1149
 * 		return localDegreeScore
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */
  __pyx_tuple__157 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_G, __pyx_n_s_parameter, __pyx_n_s_attribute, __pyx_n_s_gf); if (unlikely(!__pyx_tuple__157)) __PYX_ERR(0, 1149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__157);
  __Pyx_GIVEREF(__pyx_tuple__157);
  __pyx_codeobj__158 = (PyObject*)__Pyx_PyCode_New(4, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__157, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_getSparsifiedGraph, 1149, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__158)) __PYX_ERR(0, 1149, __pyx_L1_error)

  /* "networkit/sparsification.pyx":1153
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */
  __pyx_tuple__159 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__159)) __PYX_ERR(0, 1153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__159);
  __Pyx_GIVEREF(__pyx_tuple__159);
  __pyx_codeobj__160 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__159, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_getParameterizationAlgorithm, 1153, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__160)) __PYX_ERR(0, 1153, __pyx_L1_error)

  /* "networkit/sparsification.pyx":1160
 * 	""" A sparsifiier dervived from 'SCAN: a structural clustering algorithm for networks' """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the minimum parameter value
 * 		such that the edge is contained in the sparsified graph.
 */
  __pyx_tuple__161 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_G, __pyx_n_s_a_triangles, __pyx_n_s_scanScore); if (unlikely(!__pyx_tuple__161)) __PYX_ERR(0, 1160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__161);
  __Pyx_GIVEREF(__pyx_tuple__161);
  __pyx_codeobj__162 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__161, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_scores, 1160, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__162)) __PYX_ERR(0, 1160, __pyx_L1_error)

  /* "networkit/sparsification.pyx":1174
 * 		return scanScore.scores()
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */
  __pyx_tuple__163 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_G, __pyx_n_s_parameter, __pyx_n_s_attribute, __pyx_n_s_gf); if (unlikely(!__pyx_tuple__163)) __PYX_ERR(0, 1174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__163);
  __Pyx_GIVEREF(__pyx_tuple__163);
  __pyx_codeobj__164 = (PyObject*)__Pyx_PyCode_New(4, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__163, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_getSparsifiedGraph, 1174, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__164)) __PYX_ERR(0, 1174, __pyx_L1_error)

  /* "networkit/sparsification.pyx":1178
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */
  __pyx_tuple__165 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__165)) __PYX_ERR(0, 1178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__165);
  __Pyx_GIVEREF(__pyx_tuple__165);
  __pyx_codeobj__166 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__165, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_getParameterizationAlgorithm, 1178, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__166)) __PYX_ERR(0, 1178, __pyx_L1_error)

  /* "networkit/sparsification.pyx":1184
 * 	"""  Allows for global filtering with respect to triangle counts. """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns the triangle counts of the input graph. """
 * 		triangleScore = TriangleEdgeScore(G)
 */
  __pyx_tuple__167 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_G, __pyx_n_s_triangleScore); if (unlikely(!__pyx_tuple__167)) __PYX_ERR(0, 1184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__167);
  __Pyx_GIVEREF(__pyx_tuple__167);
  __pyx_codeobj__168 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__167, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_scores, 1184, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__168)) __PYX_ERR(0, 1184, __pyx_L1_error)

  /* "networkit/sparsification.pyx":1190
 * 		return triangleScore.scores()
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */
  __pyx_tuple__169 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_G, __pyx_n_s_parameter, __pyx_n_s_attribute, __pyx_n_s_gf); if (unlikely(!__pyx_tuple__169)) __PYX_ERR(0, 1190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__169);
  __Pyx_GIVEREF(__pyx_tuple__169);
  __pyx_codeobj__170 = (PyObject*)__Pyx_PyCode_New(4, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__169, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_getSparsifiedGraph, 1190, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__170)) __PYX_ERR(0, 1190, __pyx_L1_error)

  /* "networkit/sparsification.pyx":1194
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		raise NotImplementedError("parameterization method not yet implemented.")
 * 
 */
  __pyx_tuple__171 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__171)) __PYX_ERR(0, 1194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__171);
  __Pyx_GIVEREF(__pyx_tuple__171);
  __pyx_codeobj__172 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__171, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_getParameterizationAlgorithm, 1194, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__172)) __PYX_ERR(0, 1194, __pyx_L1_error)

  /* "networkit/sparsification.pyx":1200
 * 	""" Allows for global filtering with respect to (inverted) algebraic distances. """
 * 
 * 	def __init__(self, numberSystems=10, numberIterations=30, omega=0.5, norm=0):             # <<<<<<<<<<<<<<
 * 		self.numberSystems = numberSystems
 * 		self.numberIterations = numberIterations
 */
  __pyx_tuple__173 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_numberSystems, __pyx_n_s_numberIterations, __pyx_n_s_omega, __pyx_n_s_norm); if (unlikely(!__pyx_tuple__173)) __PYX_ERR(0, 1200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__173);
  __Pyx_GIVEREF(__pyx_tuple__173);
  __pyx_codeobj__174 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__173, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_init, 1200, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__174)) __PYX_ERR(0, 1200, __pyx_L1_error)
  __pyx_tuple__175 = PyTuple_Pack(4, ((PyObject *)__pyx_int_10), ((PyObject *)__pyx_int_30), ((PyObject*)__pyx_float_0_5), ((PyObject *)__pyx_int_0)); if (unlikely(!__pyx_tuple__175)) __PYX_ERR(0, 1200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__175);
  __Pyx_GIVEREF(__pyx_tuple__175);

  /* "networkit/sparsification.pyx":1206
 * 		self.norm = norm
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns the inverted algebraic distance score of the input graph. """
 * 		algDist = distance.AlgebraicDistance(G, self.numberSystems, self.numberIterations, self.omega, self.norm, withEdgeScores=True)
 */
  __pyx_tuple__176 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_G, __pyx_n_s_algDist, __pyx_n_s_d); if (unlikely(!__pyx_tuple__176)) __PYX_ERR(0, 1206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__176);
  __Pyx_GIVEREF(__pyx_tuple__176);
  __pyx_codeobj__177 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__176, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_scores, 1206, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__177)) __PYX_ERR(0, 1206, __pyx_L1_error)

  /* "networkit/sparsification.pyx":1212
 * 		return [1.0 - d for d in algDist.getEdgeScores()]
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */
  __pyx_tuple__178 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_G, __pyx_n_s_parameter, __pyx_n_s_attribute, __pyx_n_s_gf); if (unlikely(!__pyx_tuple__178)) __PYX_ERR(0, 1212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__178);
  __Pyx_GIVEREF(__pyx_tuple__178);
  __pyx_codeobj__179 = (PyObject*)__Pyx_PyCode_New(4, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__178, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_getSparsifiedGraph, 1212, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__179)) __PYX_ERR(0, 1212, __pyx_L1_error)

  /* "networkit/sparsification.pyx":1216
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */
  __pyx_tuple__180 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__180)) __PYX_ERR(0, 1216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__180);
  __Pyx_GIVEREF(__pyx_tuple__180);
  __pyx_codeobj__181 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__180, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_getParameterizationAlgorithm, 1216, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__181)) __PYX_ERR(0, 1216, __pyx_L1_error)

  /* "networkit/sparsification.pyx":1220
 * 
 * class LocalSparsifier(Sparsifier):
 * 	def __init__(self, sparsifier):             # <<<<<<<<<<<<<<
 * 		self.sparsifier = sparsifier
 * 
 */
  __pyx_tuple__182 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_sparsifier); if (unlikely(!__pyx_tuple__182)) __PYX_ERR(0, 1220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__182);
  __Pyx_GIVEREF(__pyx_tuple__182);
  __pyx_codeobj__183 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__182, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_init, 1220, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__183)) __PYX_ERR(0, 1220, __pyx_L1_error)

  /* "networkit/sparsification.pyx":1223
 * 		self.sparsifier = sparsifier
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge 1 - the minimum parameter value
 *                	such that the edge is contained in the sparsified graph.
 */
  __pyx_tuple__184 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_G, __pyx_n_s_originalScores, __pyx_n_s_localFilterScore); if (unlikely(!__pyx_tuple__184)) __PYX_ERR(0, 1223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__184);
  __Pyx_GIVEREF(__pyx_tuple__184);
  __pyx_codeobj__185 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__184, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_scores, 1223, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__185)) __PYX_ERR(0, 1223, __pyx_L1_error)

  /* "networkit/sparsification.pyx":1238
 * 		return localFilterScore.scores()
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */
  __pyx_tuple__186 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_G, __pyx_n_s_parameter, __pyx_n_s_attribute, __pyx_n_s_gf); if (unlikely(!__pyx_tuple__186)) __PYX_ERR(0, 1238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__186);
  __Pyx_GIVEREF(__pyx_tuple__186);
  __pyx_codeobj__187 = (PyObject*)__Pyx_PyCode_New(4, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__186, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_getSparsifiedGraph, 1238, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__187)) __PYX_ERR(0, 1238, __pyx_L1_error)

  /* "networkit/sparsification.pyx":1242
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */
  __pyx_tuple__188 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__188)) __PYX_ERR(0, 1242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__188);
  __Pyx_GIVEREF(__pyx_tuple__188);
  __pyx_codeobj__189 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__188, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_getParameterizationAlgorithm, 1242, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__189)) __PYX_ERR(0, 1242, __pyx_L1_error)

  /* "networkit/sparsification.pyx":1250
 * 	"""  """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the minimum parameter value
 * 		such that the edge is contained in the sparsified graph.
 */
  __pyx_tuple__191 = PyTuple_Pack(8, __pyx_n_s_self, __pyx_n_s_G, __pyx_n_s_cdAlgo, __pyx_n_s_partition, __pyx_n_s_together, __pyx_n_s_together, __pyx_n_s_edgeScores, __pyx_n_s_i); if (unlikely(!__pyx_tuple__191)) __PYX_ERR(0, 1250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__191);
  __Pyx_GIVEREF(__pyx_tuple__191);
  __pyx_codeobj__192 = (PyObject*)__Pyx_PyCode_New(2, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__191, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_scores, 1250, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__192)) __PYX_ERR(0, 1250, __pyx_L1_error)

  /* "networkit/sparsification.pyx":1275
 * 	""" Assigns as an attribute the same value to each edge (for sanity checks) """
 * 
 * 	def __init__(self, constValue = 1.0):             # <<<<<<<<<<<<<<
 * 		""" Creates a new instance of an attributizer that always
 * 		 returns the given value as edge attribute value.
 */
  __pyx_tuple__193 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_constValue); if (unlikely(!__pyx_tuple__193)) __PYX_ERR(0, 1275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__193);
  __Pyx_GIVEREF(__pyx_tuple__193);
  __pyx_codeobj__194 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__193, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_init, 1275, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__194)) __PYX_ERR(0, 1275, __pyx_L1_error)
  __pyx_tuple__195 = PyTuple_Pack(1, ((PyObject*)__pyx_float_1_0)); if (unlikely(!__pyx_tuple__195)) __PYX_ERR(0, 1275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__195);
  __Pyx_GIVEREF(__pyx_tuple__195);

  /* "networkit/sparsification.pyx":1281
 * 		self.constValue = constValue
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the constant value given
 * 		in the constructor.
 */
  __pyx_tuple__196 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_G); if (unlikely(!__pyx_tuple__196)) __PYX_ERR(0, 1281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__196);
  __Pyx_GIVEREF(__pyx_tuple__196);
  __pyx_codeobj__197 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__196, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_sparsification_pyx, __pyx_n_s_scores, 1281, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__197)) __PYX_ERR(0, 1281, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyList_Type___setitem.type = (PyObject*)&PyList_Type;
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_0_0 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_float_0_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_5 = PyFloat_FromDouble(0.5); if (unlikely(!__pyx_float_0_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1_0 = PyFloat_FromDouble(1.0); if (unlikely(!__pyx_float_1_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_2_0 = PyFloat_FromDouble(2.0); if (unlikely(!__pyx_float_2_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1eneg_7 = PyFloat_FromDouble(1e-7); if (unlikely(!__pyx_float_1eneg_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_100_0 = PyFloat_FromDouble(100.0); if (unlikely(!__pyx_float_100_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_10 = PyInt_FromLong(10); if (unlikely(!__pyx_int_10)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_20 = PyInt_FromLong(20); if (unlikely(!__pyx_int_20)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_30 = PyInt_FromLong(30); if (unlikely(!__pyx_int_30)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_t_1 = PyImport_ImportModule("networkit.base"); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_9networkit_4base_Algorithm = __Pyx_ImportType(__pyx_t_1, "networkit.base", "Algorithm", sizeof(struct __pyx_obj_9networkit_4base_Algorithm), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9networkit_4base_Algorithm) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_9networkit_14sparsification_EdgeScore = &__pyx_vtable_9networkit_14sparsification_EdgeScore;
  __pyx_vtable_9networkit_14sparsification_EdgeScore.isDoubleValue = (bool (*)(struct __pyx_obj_9networkit_14sparsification_EdgeScore *))__pyx_f_9networkit_14sparsification_9EdgeScore_isDoubleValue;
  __pyx_type_9networkit_14sparsification_EdgeScore.tp_base = __pyx_ptype_9networkit_4base_Algorithm;
  if (PyType_Ready(&__pyx_type_9networkit_14sparsification_EdgeScore) < 0) __PYX_ERR(0, 32, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_14sparsification_EdgeScore.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_14sparsification_EdgeScore.tp_dictoffset && __pyx_type_9networkit_14sparsification_EdgeScore.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_14sparsification_EdgeScore.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9networkit_14sparsification_EdgeScore.tp_dict, __pyx_vtabptr_9networkit_14sparsification_EdgeScore) < 0) __PYX_ERR(0, 32, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_EdgeScore, (PyObject *)&__pyx_type_9networkit_14sparsification_EdgeScore) < 0) __PYX_ERR(0, 32, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_14sparsification_EdgeScore) < 0) __PYX_ERR(0, 32, __pyx_L1_error)
  __pyx_ptype_9networkit_14sparsification_EdgeScore = &__pyx_type_9networkit_14sparsification_EdgeScore;
  __pyx_vtabptr_9networkit_14sparsification_ChibaNishizekiTriangleEdgeScore = &__pyx_vtable_9networkit_14sparsification_ChibaNishizekiTriangleEdgeScore;
  __pyx_vtable_9networkit_14sparsification_ChibaNishizekiTriangleEdgeScore.__pyx_base = *__pyx_vtabptr_9networkit_14sparsification_EdgeScore;
  __pyx_vtable_9networkit_14sparsification_ChibaNishizekiTriangleEdgeScore.__pyx_base.isDoubleValue = (bool (*)(struct __pyx_obj_9networkit_14sparsification_EdgeScore *))__pyx_f_9networkit_14sparsification_31ChibaNishizekiTriangleEdgeScore_isDoubleValue;
  __pyx_type_9networkit_14sparsification_ChibaNishizekiTriangleEdgeScore.tp_base = __pyx_ptype_9networkit_14sparsification_EdgeScore;
  if (PyType_Ready(&__pyx_type_9networkit_14sparsification_ChibaNishizekiTriangleEdgeScore) < 0) __PYX_ERR(0, 72, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_14sparsification_ChibaNishizekiTriangleEdgeScore.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_14sparsification_ChibaNishizekiTriangleEdgeScore.tp_dictoffset && __pyx_type_9networkit_14sparsification_ChibaNishizekiTriangleEdgeScore.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_14sparsification_ChibaNishizekiTriangleEdgeScore.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9networkit_14sparsification_ChibaNishizekiTriangleEdgeScore.tp_dict, __pyx_vtabptr_9networkit_14sparsification_ChibaNishizekiTriangleEdgeScore) < 0) __PYX_ERR(0, 72, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ChibaNishizekiTriangleEdgeScore, (PyObject *)&__pyx_type_9networkit_14sparsification_ChibaNishizekiTriangleEdgeScore) < 0) __PYX_ERR(0, 72, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_14sparsification_ChibaNishizekiTriangleEdgeScore) < 0) __PYX_ERR(0, 72, __pyx_L1_error)
  __pyx_ptype_9networkit_14sparsification_ChibaNishizekiTriangleEdgeScore = &__pyx_type_9networkit_14sparsification_ChibaNishizekiTriangleEdgeScore;
  __pyx_vtabptr_9networkit_14sparsification_ChibaNishizekiQuadrangleEdgeScore = &__pyx_vtable_9networkit_14sparsification_ChibaNishizekiQuadrangleEdgeScore;
  __pyx_vtable_9networkit_14sparsification_ChibaNishizekiQuadrangleEdgeScore.__pyx_base = *__pyx_vtabptr_9networkit_14sparsification_EdgeScore;
  __pyx_vtable_9networkit_14sparsification_ChibaNishizekiQuadrangleEdgeScore.__pyx_base.isDoubleValue = (bool (*)(struct __pyx_obj_9networkit_14sparsification_EdgeScore *))__pyx_f_9networkit_14sparsification_33ChibaNishizekiQuadrangleEdgeScore_isDoubleValue;
  __pyx_type_9networkit_14sparsification_ChibaNishizekiQuadrangleEdgeScore.tp_base = __pyx_ptype_9networkit_14sparsification_EdgeScore;
  if (PyType_Ready(&__pyx_type_9networkit_14sparsification_ChibaNishizekiQuadrangleEdgeScore) < 0) __PYX_ERR(0, 98, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_14sparsification_ChibaNishizekiQuadrangleEdgeScore.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_14sparsification_ChibaNishizekiQuadrangleEdgeScore.tp_dictoffset && __pyx_type_9networkit_14sparsification_ChibaNishizekiQuadrangleEdgeScore.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_14sparsification_ChibaNishizekiQuadrangleEdgeScore.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9networkit_14sparsification_ChibaNishizekiQuadrangleEdgeScore.tp_dict, __pyx_vtabptr_9networkit_14sparsification_ChibaNishizekiQuadrangleEdgeScore) < 0) __PYX_ERR(0, 98, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ChibaNishizekiQuadrangleEdgeScor, (PyObject *)&__pyx_type_9networkit_14sparsification_ChibaNishizekiQuadrangleEdgeScore) < 0) __PYX_ERR(0, 98, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_14sparsification_ChibaNishizekiQuadrangleEdgeScore) < 0) __PYX_ERR(0, 98, __pyx_L1_error)
  __pyx_ptype_9networkit_14sparsification_ChibaNishizekiQuadrangleEdgeScore = &__pyx_type_9networkit_14sparsification_ChibaNishizekiQuadrangleEdgeScore;
  __pyx_vtabptr_9networkit_14sparsification_TriangleEdgeScore = &__pyx_vtable_9networkit_14sparsification_TriangleEdgeScore;
  __pyx_vtable_9networkit_14sparsification_TriangleEdgeScore.__pyx_base = *__pyx_vtabptr_9networkit_14sparsification_EdgeScore;
  __pyx_vtable_9networkit_14sparsification_TriangleEdgeScore.__pyx_base.isDoubleValue = (bool (*)(struct __pyx_obj_9networkit_14sparsification_EdgeScore *))__pyx_f_9networkit_14sparsification_17TriangleEdgeScore_isDoubleValue;
  __pyx_type_9networkit_14sparsification_TriangleEdgeScore.tp_base = __pyx_ptype_9networkit_14sparsification_EdgeScore;
  if (PyType_Ready(&__pyx_type_9networkit_14sparsification_TriangleEdgeScore) < 0) __PYX_ERR(0, 126, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_14sparsification_TriangleEdgeScore.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_14sparsification_TriangleEdgeScore.tp_dictoffset && __pyx_type_9networkit_14sparsification_TriangleEdgeScore.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_14sparsification_TriangleEdgeScore.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9networkit_14sparsification_TriangleEdgeScore.tp_dict, __pyx_vtabptr_9networkit_14sparsification_TriangleEdgeScore) < 0) __PYX_ERR(0, 126, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_TriangleEdgeScore, (PyObject *)&__pyx_type_9networkit_14sparsification_TriangleEdgeScore) < 0) __PYX_ERR(0, 126, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_14sparsification_TriangleEdgeScore) < 0) __PYX_ERR(0, 126, __pyx_L1_error)
  __pyx_ptype_9networkit_14sparsification_TriangleEdgeScore = &__pyx_type_9networkit_14sparsification_TriangleEdgeScore;
  __pyx_vtabptr_9networkit_14sparsification_EdgeScoreLinearizer = &__pyx_vtable_9networkit_14sparsification_EdgeScoreLinearizer;
  __pyx_vtable_9networkit_14sparsification_EdgeScoreLinearizer.__pyx_base = *__pyx_vtabptr_9networkit_14sparsification_EdgeScore;
  __pyx_vtable_9networkit_14sparsification_EdgeScoreLinearizer.__pyx_base.isDoubleValue = (bool (*)(struct __pyx_obj_9networkit_14sparsification_EdgeScore *))__pyx_f_9networkit_14sparsification_19EdgeScoreLinearizer_isDoubleValue;
  __pyx_type_9networkit_14sparsification_EdgeScoreLinearizer.tp_base = __pyx_ptype_9networkit_14sparsification_EdgeScore;
  if (PyType_Ready(&__pyx_type_9networkit_14sparsification_EdgeScoreLinearizer) < 0) __PYX_ERR(0, 154, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_14sparsification_EdgeScoreLinearizer.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_14sparsification_EdgeScoreLinearizer.tp_dictoffset && __pyx_type_9networkit_14sparsification_EdgeScoreLinearizer.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_14sparsification_EdgeScoreLinearizer.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9networkit_14sparsification_EdgeScoreLinearizer.tp_dict, __pyx_vtabptr_9networkit_14sparsification_EdgeScoreLinearizer) < 0) __PYX_ERR(0, 154, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_EdgeScoreLinearizer, (PyObject *)&__pyx_type_9networkit_14sparsification_EdgeScoreLinearizer) < 0) __PYX_ERR(0, 154, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_14sparsification_EdgeScoreLinearizer) < 0) __PYX_ERR(0, 154, __pyx_L1_error)
  __pyx_ptype_9networkit_14sparsification_EdgeScoreLinearizer = &__pyx_type_9networkit_14sparsification_EdgeScoreLinearizer;
  __pyx_vtabptr_9networkit_14sparsification_EdgeScoreNormalizer = &__pyx_vtable_9networkit_14sparsification_EdgeScoreNormalizer;
  __pyx_vtable_9networkit_14sparsification_EdgeScoreNormalizer.__pyx_base = *__pyx_vtabptr_9networkit_14sparsification_EdgeScore;
  __pyx_vtable_9networkit_14sparsification_EdgeScoreNormalizer.__pyx_base.isDoubleValue = (bool (*)(struct __pyx_obj_9networkit_14sparsification_EdgeScore *))__pyx_f_9networkit_14sparsification_19EdgeScoreNormalizer_isDoubleValue;
  __pyx_type_9networkit_14sparsification_EdgeScoreNormalizer.tp_base = __pyx_ptype_9networkit_14sparsification_EdgeScore;
  if (PyType_Ready(&__pyx_type_9networkit_14sparsification_EdgeScoreNormalizer) < 0) __PYX_ERR(0, 181, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_14sparsification_EdgeScoreNormalizer.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_14sparsification_EdgeScoreNormalizer.tp_dictoffset && __pyx_type_9networkit_14sparsification_EdgeScoreNormalizer.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_14sparsification_EdgeScoreNormalizer.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9networkit_14sparsification_EdgeScoreNormalizer.tp_dict, __pyx_vtabptr_9networkit_14sparsification_EdgeScoreNormalizer) < 0) __PYX_ERR(0, 181, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_EdgeScoreNormalizer, (PyObject *)&__pyx_type_9networkit_14sparsification_EdgeScoreNormalizer) < 0) __PYX_ERR(0, 181, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_14sparsification_EdgeScoreNormalizer) < 0) __PYX_ERR(0, 181, __pyx_L1_error)
  __pyx_ptype_9networkit_14sparsification_EdgeScoreNormalizer = &__pyx_type_9networkit_14sparsification_EdgeScoreNormalizer;
  __pyx_vtabptr_9networkit_14sparsification_EdgeScoreBlender = &__pyx_vtable_9networkit_14sparsification_EdgeScoreBlender;
  __pyx_vtable_9networkit_14sparsification_EdgeScoreBlender.__pyx_base = *__pyx_vtabptr_9networkit_14sparsification_EdgeScore;
  __pyx_vtable_9networkit_14sparsification_EdgeScoreBlender.__pyx_base.isDoubleValue = (bool (*)(struct __pyx_obj_9networkit_14sparsification_EdgeScore *))__pyx_f_9networkit_14sparsification_16EdgeScoreBlender_isDoubleValue;
  __pyx_type_9networkit_14sparsification_EdgeScoreBlender.tp_base = __pyx_ptype_9networkit_14sparsification_EdgeScore;
  if (PyType_Ready(&__pyx_type_9networkit_14sparsification_EdgeScoreBlender) < 0) __PYX_ERR(0, 221, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_14sparsification_EdgeScoreBlender.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_14sparsification_EdgeScoreBlender.tp_dictoffset && __pyx_type_9networkit_14sparsification_EdgeScoreBlender.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_14sparsification_EdgeScoreBlender.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9networkit_14sparsification_EdgeScoreBlender.tp_dict, __pyx_vtabptr_9networkit_14sparsification_EdgeScoreBlender) < 0) __PYX_ERR(0, 221, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_EdgeScoreBlender, (PyObject *)&__pyx_type_9networkit_14sparsification_EdgeScoreBlender) < 0) __PYX_ERR(0, 221, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_14sparsification_EdgeScoreBlender) < 0) __PYX_ERR(0, 221, __pyx_L1_error)
  __pyx_ptype_9networkit_14sparsification_EdgeScoreBlender = &__pyx_type_9networkit_14sparsification_EdgeScoreBlender;
  __pyx_vtabptr_9networkit_14sparsification_GeometricMeanScore = &__pyx_vtable_9networkit_14sparsification_GeometricMeanScore;
  __pyx_vtable_9networkit_14sparsification_GeometricMeanScore.__pyx_base = *__pyx_vtabptr_9networkit_14sparsification_EdgeScore;
  __pyx_vtable_9networkit_14sparsification_GeometricMeanScore.__pyx_base.isDoubleValue = (bool (*)(struct __pyx_obj_9networkit_14sparsification_EdgeScore *))__pyx_f_9networkit_14sparsification_18GeometricMeanScore_isDoubleValue;
  __pyx_type_9networkit_14sparsification_GeometricMeanScore.tp_base = __pyx_ptype_9networkit_14sparsification_EdgeScore;
  if (PyType_Ready(&__pyx_type_9networkit_14sparsification_GeometricMeanScore) < 0) __PYX_ERR(0, 256, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_14sparsification_GeometricMeanScore.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_14sparsification_GeometricMeanScore.tp_dictoffset && __pyx_type_9networkit_14sparsification_GeometricMeanScore.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_14sparsification_GeometricMeanScore.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9networkit_14sparsification_GeometricMeanScore.tp_dict, __pyx_vtabptr_9networkit_14sparsification_GeometricMeanScore) < 0) __PYX_ERR(0, 256, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GeometricMeanScore, (PyObject *)&__pyx_type_9networkit_14sparsification_GeometricMeanScore) < 0) __PYX_ERR(0, 256, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_14sparsification_GeometricMeanScore) < 0) __PYX_ERR(0, 256, __pyx_L1_error)
  __pyx_ptype_9networkit_14sparsification_GeometricMeanScore = &__pyx_type_9networkit_14sparsification_GeometricMeanScore;
  if (PyType_Ready(&__pyx_type_9networkit_14sparsification_EdgeScoreAsWeight) < 0) __PYX_ERR(0, 283, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_14sparsification_EdgeScoreAsWeight.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_14sparsification_EdgeScoreAsWeight.tp_dictoffset && __pyx_type_9networkit_14sparsification_EdgeScoreAsWeight.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_14sparsification_EdgeScoreAsWeight.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_EdgeScoreAsWeight, (PyObject *)&__pyx_type_9networkit_14sparsification_EdgeScoreAsWeight) < 0) __PYX_ERR(0, 283, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_14sparsification_EdgeScoreAsWeight) < 0) __PYX_ERR(0, 283, __pyx_L1_error)
  __pyx_ptype_9networkit_14sparsification_EdgeScoreAsWeight = &__pyx_type_9networkit_14sparsification_EdgeScoreAsWeight;
  __pyx_vtabptr_9networkit_14sparsification_SimmelianOverlapScore = &__pyx_vtable_9networkit_14sparsification_SimmelianOverlapScore;
  __pyx_vtable_9networkit_14sparsification_SimmelianOverlapScore.__pyx_base = *__pyx_vtabptr_9networkit_14sparsification_EdgeScore;
  __pyx_vtable_9networkit_14sparsification_SimmelianOverlapScore.__pyx_base.isDoubleValue = (bool (*)(struct __pyx_obj_9networkit_14sparsification_EdgeScore *))__pyx_f_9networkit_14sparsification_21SimmelianOverlapScore_isDoubleValue;
  __pyx_type_9networkit_14sparsification_SimmelianOverlapScore.tp_base = __pyx_ptype_9networkit_14sparsification_EdgeScore;
  if (PyType_Ready(&__pyx_type_9networkit_14sparsification_SimmelianOverlapScore) < 0) __PYX_ERR(0, 329, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_14sparsification_SimmelianOverlapScore.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_14sparsification_SimmelianOverlapScore.tp_dictoffset && __pyx_type_9networkit_14sparsification_SimmelianOverlapScore.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_14sparsification_SimmelianOverlapScore.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9networkit_14sparsification_SimmelianOverlapScore.tp_dict, __pyx_vtabptr_9networkit_14sparsification_SimmelianOverlapScore) < 0) __PYX_ERR(0, 329, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_SimmelianOverlapScore, (PyObject *)&__pyx_type_9networkit_14sparsification_SimmelianOverlapScore) < 0) __PYX_ERR(0, 329, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_14sparsification_SimmelianOverlapScore) < 0) __PYX_ERR(0, 329, __pyx_L1_error)
  __pyx_ptype_9networkit_14sparsification_SimmelianOverlapScore = &__pyx_type_9networkit_14sparsification_SimmelianOverlapScore;
  __pyx_vtabptr_9networkit_14sparsification_PrefixJaccardScore = &__pyx_vtable_9networkit_14sparsification_PrefixJaccardScore;
  __pyx_vtable_9networkit_14sparsification_PrefixJaccardScore.__pyx_base = *__pyx_vtabptr_9networkit_14sparsification_EdgeScore;
  __pyx_vtable_9networkit_14sparsification_PrefixJaccardScore.__pyx_base.isDoubleValue = (bool (*)(struct __pyx_obj_9networkit_14sparsification_EdgeScore *))__pyx_f_9networkit_14sparsification_18PrefixJaccardScore_isDoubleValue;
  __pyx_type_9networkit_14sparsification_PrefixJaccardScore.tp_base = __pyx_ptype_9networkit_14sparsification_EdgeScore;
  if (PyType_Ready(&__pyx_type_9networkit_14sparsification_PrefixJaccardScore) < 0) __PYX_ERR(0, 359, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_14sparsification_PrefixJaccardScore.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_14sparsification_PrefixJaccardScore.tp_dictoffset && __pyx_type_9networkit_14sparsification_PrefixJaccardScore.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_14sparsification_PrefixJaccardScore.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9networkit_14sparsification_PrefixJaccardScore.tp_dict, __pyx_vtabptr_9networkit_14sparsification_PrefixJaccardScore) < 0) __PYX_ERR(0, 359, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PrefixJaccardScore, (PyObject *)&__pyx_type_9networkit_14sparsification_PrefixJaccardScore) < 0) __PYX_ERR(0, 359, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_14sparsification_PrefixJaccardScore) < 0) __PYX_ERR(0, 359, __pyx_L1_error)
  __pyx_ptype_9networkit_14sparsification_PrefixJaccardScore = &__pyx_type_9networkit_14sparsification_PrefixJaccardScore;
  __pyx_vtabptr_9networkit_14sparsification_MultiscaleScore = &__pyx_vtable_9networkit_14sparsification_MultiscaleScore;
  __pyx_vtable_9networkit_14sparsification_MultiscaleScore.__pyx_base = *__pyx_vtabptr_9networkit_14sparsification_EdgeScore;
  __pyx_vtable_9networkit_14sparsification_MultiscaleScore.__pyx_base.isDoubleValue = (bool (*)(struct __pyx_obj_9networkit_14sparsification_EdgeScore *))__pyx_f_9networkit_14sparsification_15MultiscaleScore_isDoubleValue;
  __pyx_type_9networkit_14sparsification_MultiscaleScore.tp_base = __pyx_ptype_9networkit_14sparsification_EdgeScore;
  if (PyType_Ready(&__pyx_type_9networkit_14sparsification_MultiscaleScore) < 0) __PYX_ERR(0, 375, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_14sparsification_MultiscaleScore.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_14sparsification_MultiscaleScore.tp_dictoffset && __pyx_type_9networkit_14sparsification_MultiscaleScore.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_14sparsification_MultiscaleScore.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9networkit_14sparsification_MultiscaleScore.tp_dict, __pyx_vtabptr_9networkit_14sparsification_MultiscaleScore) < 0) __PYX_ERR(0, 375, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_MultiscaleScore, (PyObject *)&__pyx_type_9networkit_14sparsification_MultiscaleScore) < 0) __PYX_ERR(0, 375, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_14sparsification_MultiscaleScore) < 0) __PYX_ERR(0, 375, __pyx_L1_error)
  __pyx_ptype_9networkit_14sparsification_MultiscaleScore = &__pyx_type_9networkit_14sparsification_MultiscaleScore;
  __pyx_vtabptr_9networkit_14sparsification_RandomEdgeScore = &__pyx_vtable_9networkit_14sparsification_RandomEdgeScore;
  __pyx_vtable_9networkit_14sparsification_RandomEdgeScore.__pyx_base = *__pyx_vtabptr_9networkit_14sparsification_EdgeScore;
  __pyx_vtable_9networkit_14sparsification_RandomEdgeScore.__pyx_base.isDoubleValue = (bool (*)(struct __pyx_obj_9networkit_14sparsification_EdgeScore *))__pyx_f_9networkit_14sparsification_15RandomEdgeScore_isDoubleValue;
  __pyx_type_9networkit_14sparsification_RandomEdgeScore.tp_base = __pyx_ptype_9networkit_14sparsification_EdgeScore;
  if (PyType_Ready(&__pyx_type_9networkit_14sparsification_RandomEdgeScore) < 0) __PYX_ERR(0, 403, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_14sparsification_RandomEdgeScore.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_14sparsification_RandomEdgeScore.tp_dictoffset && __pyx_type_9networkit_14sparsification_RandomEdgeScore.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_14sparsification_RandomEdgeScore.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9networkit_14sparsification_RandomEdgeScore.tp_dict, __pyx_vtabptr_9networkit_14sparsification_RandomEdgeScore) < 0) __PYX_ERR(0, 403, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_RandomEdgeScore, (PyObject *)&__pyx_type_9networkit_14sparsification_RandomEdgeScore) < 0) __PYX_ERR(0, 403, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_14sparsification_RandomEdgeScore) < 0) __PYX_ERR(0, 403, __pyx_L1_error)
  __pyx_ptype_9networkit_14sparsification_RandomEdgeScore = &__pyx_type_9networkit_14sparsification_RandomEdgeScore;
  __pyx_vtabptr_9networkit_14sparsification_LocalSimilarityScore = &__pyx_vtable_9networkit_14sparsification_LocalSimilarityScore;
  __pyx_vtable_9networkit_14sparsification_LocalSimilarityScore.__pyx_base = *__pyx_vtabptr_9networkit_14sparsification_EdgeScore;
  __pyx_vtable_9networkit_14sparsification_LocalSimilarityScore.__pyx_base.isDoubleValue = (bool (*)(struct __pyx_obj_9networkit_14sparsification_EdgeScore *))__pyx_f_9networkit_14sparsification_20LocalSimilarityScore_isDoubleValue;
  __pyx_type_9networkit_14sparsification_LocalSimilarityScore.tp_base = __pyx_ptype_9networkit_14sparsification_EdgeScore;
  if (PyType_Ready(&__pyx_type_9networkit_14sparsification_LocalSimilarityScore) < 0) __PYX_ERR(0, 425, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_14sparsification_LocalSimilarityScore.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_14sparsification_LocalSimilarityScore.tp_dictoffset && __pyx_type_9networkit_14sparsification_LocalSimilarityScore.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_14sparsification_LocalSimilarityScore.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9networkit_14sparsification_LocalSimilarityScore.tp_dict, __pyx_vtabptr_9networkit_14sparsification_LocalSimilarityScore) < 0) __PYX_ERR(0, 425, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_LocalSimilarityScore, (PyObject *)&__pyx_type_9networkit_14sparsification_LocalSimilarityScore) < 0) __PYX_ERR(0, 425, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_14sparsification_LocalSimilarityScore) < 0) __PYX_ERR(0, 425, __pyx_L1_error)
  __pyx_ptype_9networkit_14sparsification_LocalSimilarityScore = &__pyx_type_9networkit_14sparsification_LocalSimilarityScore;
  __pyx_vtabptr_9networkit_14sparsification_ForestFireScore = &__pyx_vtable_9networkit_14sparsification_ForestFireScore;
  __pyx_vtable_9networkit_14sparsification_ForestFireScore.__pyx_base = *__pyx_vtabptr_9networkit_14sparsification_EdgeScore;
  __pyx_vtable_9networkit_14sparsification_ForestFireScore.__pyx_base.isDoubleValue = (bool (*)(struct __pyx_obj_9networkit_14sparsification_EdgeScore *))__pyx_f_9networkit_14sparsification_15ForestFireScore_isDoubleValue;
  __pyx_type_9networkit_14sparsification_ForestFireScore.tp_base = __pyx_ptype_9networkit_14sparsification_EdgeScore;
  if (PyType_Ready(&__pyx_type_9networkit_14sparsification_ForestFireScore) < 0) __PYX_ERR(0, 453, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_14sparsification_ForestFireScore.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_14sparsification_ForestFireScore.tp_dictoffset && __pyx_type_9networkit_14sparsification_ForestFireScore.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_14sparsification_ForestFireScore.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9networkit_14sparsification_ForestFireScore.tp_dict, __pyx_vtabptr_9networkit_14sparsification_ForestFireScore) < 0) __PYX_ERR(0, 453, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ForestFireScore, (PyObject *)&__pyx_type_9networkit_14sparsification_ForestFireScore) < 0) __PYX_ERR(0, 453, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_14sparsification_ForestFireScore) < 0) __PYX_ERR(0, 453, __pyx_L1_error)
  __pyx_ptype_9networkit_14sparsification_ForestFireScore = &__pyx_type_9networkit_14sparsification_ForestFireScore;
  __pyx_vtabptr_9networkit_14sparsification_LocalDegreeScore = &__pyx_vtable_9networkit_14sparsification_LocalDegreeScore;
  __pyx_vtable_9networkit_14sparsification_LocalDegreeScore.__pyx_base = *__pyx_vtabptr_9networkit_14sparsification_EdgeScore;
  __pyx_vtable_9networkit_14sparsification_LocalDegreeScore.__pyx_base.isDoubleValue = (bool (*)(struct __pyx_obj_9networkit_14sparsification_EdgeScore *))__pyx_f_9networkit_14sparsification_16LocalDegreeScore_isDoubleValue;
  __pyx_type_9networkit_14sparsification_LocalDegreeScore.tp_base = __pyx_ptype_9networkit_14sparsification_EdgeScore;
  if (PyType_Ready(&__pyx_type_9networkit_14sparsification_LocalDegreeScore) < 0) __PYX_ERR(0, 481, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_14sparsification_LocalDegreeScore.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_14sparsification_LocalDegreeScore.tp_dictoffset && __pyx_type_9networkit_14sparsification_LocalDegreeScore.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_14sparsification_LocalDegreeScore.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9networkit_14sparsification_LocalDegreeScore.tp_dict, __pyx_vtabptr_9networkit_14sparsification_LocalDegreeScore) < 0) __PYX_ERR(0, 481, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_LocalDegreeScore, (PyObject *)&__pyx_type_9networkit_14sparsification_LocalDegreeScore) < 0) __PYX_ERR(0, 481, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_14sparsification_LocalDegreeScore) < 0) __PYX_ERR(0, 481, __pyx_L1_error)
  __pyx_ptype_9networkit_14sparsification_LocalDegreeScore = &__pyx_type_9networkit_14sparsification_LocalDegreeScore;
  __pyx_vtabptr_9networkit_14sparsification_RandomNodeEdgeScore = &__pyx_vtable_9networkit_14sparsification_RandomNodeEdgeScore;
  __pyx_vtable_9networkit_14sparsification_RandomNodeEdgeScore.__pyx_base = *__pyx_vtabptr_9networkit_14sparsification_EdgeScore;
  __pyx_vtable_9networkit_14sparsification_RandomNodeEdgeScore.__pyx_base.isDoubleValue = (bool (*)(struct __pyx_obj_9networkit_14sparsification_EdgeScore *))__pyx_f_9networkit_14sparsification_19RandomNodeEdgeScore_isDoubleValue;
  __pyx_type_9networkit_14sparsification_RandomNodeEdgeScore.tp_base = __pyx_ptype_9networkit_14sparsification_EdgeScore;
  if (PyType_Ready(&__pyx_type_9networkit_14sparsification_RandomNodeEdgeScore) < 0) __PYX_ERR(0, 505, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_14sparsification_RandomNodeEdgeScore.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_14sparsification_RandomNodeEdgeScore.tp_dictoffset && __pyx_type_9networkit_14sparsification_RandomNodeEdgeScore.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_14sparsification_RandomNodeEdgeScore.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9networkit_14sparsification_RandomNodeEdgeScore.tp_dict, __pyx_vtabptr_9networkit_14sparsification_RandomNodeEdgeScore) < 0) __PYX_ERR(0, 505, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_RandomNodeEdgeScore, (PyObject *)&__pyx_type_9networkit_14sparsification_RandomNodeEdgeScore) < 0) __PYX_ERR(0, 505, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_14sparsification_RandomNodeEdgeScore) < 0) __PYX_ERR(0, 505, __pyx_L1_error)
  __pyx_ptype_9networkit_14sparsification_RandomNodeEdgeScore = &__pyx_type_9networkit_14sparsification_RandomNodeEdgeScore;
  __pyx_vtabptr_9networkit_14sparsification_LocalFilterScore = &__pyx_vtable_9networkit_14sparsification_LocalFilterScore;
  __pyx_vtable_9networkit_14sparsification_LocalFilterScore.__pyx_base = *__pyx_vtabptr_9networkit_14sparsification_EdgeScore;
  __pyx_vtable_9networkit_14sparsification_LocalFilterScore.__pyx_base.isDoubleValue = (bool (*)(struct __pyx_obj_9networkit_14sparsification_EdgeScore *))__pyx_f_9networkit_14sparsification_16LocalFilterScore_isDoubleValue;
  __pyx_type_9networkit_14sparsification_LocalFilterScore.tp_base = __pyx_ptype_9networkit_14sparsification_EdgeScore;
  if (PyType_Ready(&__pyx_type_9networkit_14sparsification_LocalFilterScore) < 0) __PYX_ERR(0, 534, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_14sparsification_LocalFilterScore.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_14sparsification_LocalFilterScore.tp_dictoffset && __pyx_type_9networkit_14sparsification_LocalFilterScore.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_14sparsification_LocalFilterScore.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9networkit_14sparsification_LocalFilterScore.tp_dict, __pyx_vtabptr_9networkit_14sparsification_LocalFilterScore) < 0) __PYX_ERR(0, 534, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_LocalFilterScore, (PyObject *)&__pyx_type_9networkit_14sparsification_LocalFilterScore) < 0) __PYX_ERR(0, 534, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_14sparsification_LocalFilterScore) < 0) __PYX_ERR(0, 534, __pyx_L1_error)
  __pyx_ptype_9networkit_14sparsification_LocalFilterScore = &__pyx_type_9networkit_14sparsification_LocalFilterScore;
  __pyx_vtabptr_9networkit_14sparsification_ChanceCorrectedTriangleScore = &__pyx_vtable_9networkit_14sparsification_ChanceCorrectedTriangleScore;
  __pyx_vtable_9networkit_14sparsification_ChanceCorrectedTriangleScore.__pyx_base = *__pyx_vtabptr_9networkit_14sparsification_EdgeScore;
  __pyx_vtable_9networkit_14sparsification_ChanceCorrectedTriangleScore.__pyx_base.isDoubleValue = (bool (*)(struct __pyx_obj_9networkit_14sparsification_EdgeScore *))__pyx_f_9networkit_14sparsification_28ChanceCorrectedTriangleScore_isDoubleValue;
  __pyx_type_9networkit_14sparsification_ChanceCorrectedTriangleScore.tp_base = __pyx_ptype_9networkit_14sparsification_EdgeScore;
  if (PyType_Ready(&__pyx_type_9networkit_14sparsification_ChanceCorrectedTriangleScore) < 0) __PYX_ERR(0, 566, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_14sparsification_ChanceCorrectedTriangleScore.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_14sparsification_ChanceCorrectedTriangleScore.tp_dictoffset && __pyx_type_9networkit_14sparsification_ChanceCorrectedTriangleScore.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_14sparsification_ChanceCorrectedTriangleScore.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9networkit_14sparsification_ChanceCorrectedTriangleScore.tp_dict, __pyx_vtabptr_9networkit_14sparsification_ChanceCorrectedTriangleScore) < 0) __PYX_ERR(0, 566, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ChanceCorrectedTriangleScore, (PyObject *)&__pyx_type_9networkit_14sparsification_ChanceCorrectedTriangleScore) < 0) __PYX_ERR(0, 566, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_14sparsification_ChanceCorrectedTriangleScore) < 0) __PYX_ERR(0, 566, __pyx_L1_error)
  __pyx_ptype_9networkit_14sparsification_ChanceCorrectedTriangleScore = &__pyx_type_9networkit_14sparsification_ChanceCorrectedTriangleScore;
  __pyx_vtabptr_9networkit_14sparsification_SCANStructuralSimilarityScore = &__pyx_vtable_9networkit_14sparsification_SCANStructuralSimilarityScore;
  __pyx_vtable_9networkit_14sparsification_SCANStructuralSimilarityScore.__pyx_base = *__pyx_vtabptr_9networkit_14sparsification_EdgeScore;
  __pyx_vtable_9networkit_14sparsification_SCANStructuralSimilarityScore.__pyx_base.isDoubleValue = (bool (*)(struct __pyx_obj_9networkit_14sparsification_EdgeScore *))__pyx_f_9networkit_14sparsification_29SCANStructuralSimilarityScore_isDoubleValue;
  __pyx_type_9networkit_14sparsification_SCANStructuralSimilarityScore.tp_base = __pyx_ptype_9networkit_14sparsification_EdgeScore;
  if (PyType_Ready(&__pyx_type_9networkit_14sparsification_SCANStructuralSimilarityScore) < 0) __PYX_ERR(0, 592, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_14sparsification_SCANStructuralSimilarityScore.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_14sparsification_SCANStructuralSimilarityScore.tp_dictoffset && __pyx_type_9networkit_14sparsification_SCANStructuralSimilarityScore.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_14sparsification_SCANStructuralSimilarityScore.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9networkit_14sparsification_SCANStructuralSimilarityScore.tp_dict, __pyx_vtabptr_9networkit_14sparsification_SCANStructuralSimilarityScore) < 0) __PYX_ERR(0, 592, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_SCANStructuralSimilarityScore, (PyObject *)&__pyx_type_9networkit_14sparsification_SCANStructuralSimilarityScore) < 0) __PYX_ERR(0, 592, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_14sparsification_SCANStructuralSimilarityScore) < 0) __PYX_ERR(0, 592, __pyx_L1_error)
  __pyx_ptype_9networkit_14sparsification_SCANStructuralSimilarityScore = &__pyx_type_9networkit_14sparsification_SCANStructuralSimilarityScore;
  if (PyType_Ready(&__pyx_type_9networkit_14sparsification_GlobalThresholdFilter) < 0) __PYX_ERR(0, 619, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_14sparsification_GlobalThresholdFilter.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_14sparsification_GlobalThresholdFilter.tp_dictoffset && __pyx_type_9networkit_14sparsification_GlobalThresholdFilter.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_14sparsification_GlobalThresholdFilter.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GlobalThresholdFilter, (PyObject *)&__pyx_type_9networkit_14sparsification_GlobalThresholdFilter) < 0) __PYX_ERR(0, 619, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_14sparsification_GlobalThresholdFilter) < 0) __PYX_ERR(0, 619, __pyx_L1_error)
  __pyx_ptype_9networkit_14sparsification_GlobalThresholdFilter = &__pyx_type_9networkit_14sparsification_GlobalThresholdFilter;
  if (PyType_Ready(&__pyx_type_9networkit_14sparsification___pyx_scope_struct__scores) < 0) __PYX_ERR(0, 1250, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_14sparsification___pyx_scope_struct__scores.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_14sparsification___pyx_scope_struct__scores.tp_dictoffset && __pyx_type_9networkit_14sparsification___pyx_scope_struct__scores.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_14sparsification___pyx_scope_struct__scores.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_9networkit_14sparsification___pyx_scope_struct__scores = &__pyx_type_9networkit_14sparsification___pyx_scope_struct__scores;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("networkit.graph"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_9networkit_5graph_Graph = __Pyx_ImportType(__pyx_t_1, "networkit.graph", "Graph", sizeof(struct __pyx_obj_9networkit_5graph_Graph), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9networkit_5graph_Graph) __PYX_ERR(2, 150, __pyx_L1_error)
  __pyx_vtabptr_9networkit_5graph_Graph = (struct __pyx_vtabstruct_9networkit_5graph_Graph*)__Pyx_GetVtable(__pyx_ptype_9networkit_5graph_Graph->tp_dict); if (unlikely(!__pyx_vtabptr_9networkit_5graph_Graph)) __PYX_ERR(2, 150, __pyx_L1_error)
  __pyx_ptype_9networkit_5graph_RandomMaximumSpanningForest = __Pyx_ImportType(__pyx_t_1, "networkit.graph", "RandomMaximumSpanningForest", sizeof(struct __pyx_obj_9networkit_5graph_RandomMaximumSpanningForest), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9networkit_5graph_RandomMaximumSpanningForest) __PYX_ERR(2, 172, __pyx_L1_error)
  __pyx_ptype_9networkit_5graph_UnionMaximumSpanningForest = __Pyx_ImportType(__pyx_t_1, "networkit.graph", "UnionMaximumSpanningForest", sizeof(struct __pyx_obj_9networkit_5graph_UnionMaximumSpanningForest), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9networkit_5graph_UnionMaximumSpanningForest) __PYX_ERR(2, 187, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initsparsification(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initsparsification(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_sparsification(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_sparsification(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_sparsification(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'sparsification' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_sparsification(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("sparsification", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_networkit__sparsification) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "networkit.sparsification")) {
      if (unlikely(PyDict_SetItemString(modules, "networkit.sparsification", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "networkit/sparsification.pyx":15
 * from .base cimport _Algorithm, Algorithm
 * from .graph cimport _Graph, Graph
 * from .distance import AdamicAdarDistance, JaccardSimilarityAttributizer             # <<<<<<<<<<<<<<
 * from . import community
 * from . import distance
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_AdamicAdarDistance);
  __Pyx_GIVEREF(__pyx_n_s_AdamicAdarDistance);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_AdamicAdarDistance);
  __Pyx_INCREF(__pyx_n_s_JaccardSimilarityAttributizer);
  __Pyx_GIVEREF(__pyx_n_s_JaccardSimilarityAttributizer);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_JaccardSimilarityAttributizer);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_distance, __pyx_t_1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_AdamicAdarDistance); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_AdamicAdarDistance, __pyx_t_1) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_JaccardSimilarityAttributizer); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_JaccardSimilarityAttributizer, __pyx_t_1) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/sparsification.pyx":16
 * from .graph cimport _Graph, Graph
 * from .distance import AdamicAdarDistance, JaccardSimilarityAttributizer
 * from . import community             # <<<<<<<<<<<<<<
 * from . import distance
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_community);
  __Pyx_GIVEREF(__pyx_n_s_community);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_community);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s__51, __pyx_t_2, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_community); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_community, __pyx_t_2) < 0) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":17
 * from .distance import AdamicAdarDistance, JaccardSimilarityAttributizer
 * from . import community
 * from . import distance             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_distance);
  __Pyx_GIVEREF(__pyx_n_s_distance);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_distance);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s__51, __pyx_t_1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_distance); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_distance, __pyx_t_1) < 0) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/sparsification.pyx":651
 * 		return Graph().setThis(self._this.calculate())
 * 
 * _ABS_ZERO = 1e-7             # <<<<<<<<<<<<<<
 * 
 * class Sparsifier(object):
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ABS_ZERO, __pyx_float_1eneg_7) < 0) __PYX_ERR(0, 651, __pyx_L1_error)

  /* "networkit/sparsification.pyx":653
 * _ABS_ZERO = 1e-7
 * 
 * class Sparsifier(object):             # <<<<<<<<<<<<<<
 * 	""" Abstract base class representing a graph sparsification algorithm that
 * 	uses only one parameter to determine the degree of filtering. """
 */
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_tuple__52); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_tuple__52, __pyx_n_s_Sparsifier, __pyx_n_s_Sparsifier, (PyObject *) NULL, __pyx_n_s_networkit_sparsification, __pyx_kp_s_Abstract_base_class_representin); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "networkit/sparsification.pyx":657
 * 	uses only one parameter to determine the degree of filtering. """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute. (To be implemented by derived class)
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_10Sparsifier_1scores, 0, __pyx_n_s_Sparsifier_scores, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__54)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 657, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_scores, __pyx_t_3) < 0) __PYX_ERR(0, 657, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "networkit/sparsification.pyx":665
 * 		raise NotImplementedError
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		""" The actual implementation of the sparsification.
 * 		(To be implemented in the derived class.)
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_10Sparsifier_3_getSparsifiedGraph, 0, __pyx_n_s_Sparsifier__getSparsifiedGraph, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__56)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 665, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_getSparsifiedGraph, __pyx_t_3) < 0) __PYX_ERR(0, 665, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "networkit/sparsification.pyx":676
 * 		raise NotImplementedError
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		""" Returns an appropriate parameterization algorithm for this sparsifier.
 * 		(To be implemented in the derived class.)
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_10Sparsifier_5_getParameterizationAlgorithm, 0, __pyx_n_s_Sparsifier__getParameterizationA, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__58)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_getParameterizationAlgorithm, __pyx_t_3) < 0) __PYX_ERR(0, 676, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "networkit/sparsification.pyx":682
 * 		return SimpleParameterization()
 * 
 * 	def getSparsifiedGraph(self, G, parameter, attribute=None):             # <<<<<<<<<<<<<<
 * 		"""Returns a sparsified version of the given input graph.
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_10Sparsifier_7getSparsifiedGraph, 0, __pyx_n_s_Sparsifier_getSparsifiedGraph, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__60)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 682, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__61);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_getSparsifiedGraph_2, __pyx_t_3) < 0) __PYX_ERR(0, 682, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "networkit/sparsification.pyx":696
 * 		return self._getSparsifiedGraph(G, parameter, attribute)
 * 
 * 	def getSparsifiedGraphOfSize(self, G, edgeRatio, attribute=None):             # <<<<<<<<<<<<<<
 * 		"""This is a convenience function that applies an appropriate parameterization
 * 		algorithm (if available) to obtain a parameter value that yields a sparsified
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_10Sparsifier_9getSparsifiedGraphOfSize, 0, __pyx_n_s_Sparsifier_getSparsifiedGraphOfS, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__63)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__64);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_getSparsifiedGraphOfSize, __pyx_t_3) < 0) __PYX_ERR(0, 696, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "networkit/sparsification.pyx":714
 * 		return self.getSparsifiedGraph(G, parameter, attribute)
 * 
 * 	def getParameter(self, G, edgeRatio, attribute=None):             # <<<<<<<<<<<<<<
 * 		""" This is a convenience function that applies an appropriate parameterization
 * 		algorithm (if available) to obtain a parameter value that yields a sparsified
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_10Sparsifier_11getParameter, 0, __pyx_n_s_Sparsifier_getParameter, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__66)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__67);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_getParameter, __pyx_t_3) < 0) __PYX_ERR(0, 714, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "networkit/sparsification.pyx":653
 * _ABS_ZERO = 1e-7
 * 
 * class Sparsifier(object):             # <<<<<<<<<<<<<<
 * 	""" Abstract base class representing a graph sparsification algorithm that
 * 	uses only one parameter to determine the degree of filtering. """
 */
  __pyx_t_3 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_Sparsifier, __pyx_tuple__52, __pyx_t_1, NULL, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Sparsifier, __pyx_t_3) < 0) __PYX_ERR(0, 653, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/sparsification.pyx":725
 * 		return parameter
 * 
 * class SimpleParameterization:             # <<<<<<<<<<<<<<
 * 	""" A parameterization algorithm representds an algorithm that, given a graph
 * 	and a sparsifier, calculates a parameter value such that a desired edge ratio is met.
 */
  __pyx_t_2 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_SimpleParameterization, __pyx_n_s_SimpleParameterization, (PyObject *) NULL, __pyx_n_s_networkit_sparsification, __pyx_kp_s_A_parameterization_algorithm_re); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "networkit/sparsification.pyx":731
 * 	result. """
 * 
 * 	def parameterize(self, algorithm, G, attribute, edgeRatio):             # <<<<<<<<<<<<<<
 * 		""" Parameterize the given sparsifier for the given input graph with the
 * 		given target edge ratio. (To be implemented by derived class.)
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_22SimpleParameterization_1parameterize, 0, __pyx_n_s_SimpleParameterization_parameter, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__69)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_parameterize, __pyx_t_1) < 0) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":725
 * 		return parameter
 * 
 * class SimpleParameterization:             # <<<<<<<<<<<<<<
 * 	""" A parameterization algorithm representds an algorithm that, given a graph
 * 	and a sparsifier, calculates a parameter value such that a desired edge ratio is met.
 */
  __pyx_t_1 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_SimpleParameterization, __pyx_empty_tuple, __pyx_t_2, NULL, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SimpleParameterization, __pyx_t_1) < 0) __PYX_ERR(0, 725, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/sparsification.pyx":743
 * 		return edgeRatio
 * 
 * class BinarySearchParameterization:             # <<<<<<<<<<<<<<
 * 	""" Parameterizes a sparsification algorithm using binary search. """
 * 
 */
  __pyx_t_2 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_BinarySearchParameterization, __pyx_n_s_BinarySearchParameterization, (PyObject *) NULL, __pyx_n_s_networkit_sparsification, __pyx_kp_s_Parameterizes_a_sparsification); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 743, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "networkit/sparsification.pyx":746
 * 	""" Parameterizes a sparsification algorithm using binary search. """
 * 
 * 	def __init__(self, sizeIncreasesWithParameter, lowerParameterBound, upperParameterBound, maxSteps):             # <<<<<<<<<<<<<<
 * 		""" Creates a new instance of a binary search parameterizer.
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_28BinarySearchParameterization_1__init__, 0, __pyx_n_s_BinarySearchParameterization___i, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__71)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 746, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_init, __pyx_t_1) < 0) __PYX_ERR(0, 746, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":760
 * 		self.maxSteps = maxSteps
 * 
 * 	def parameterize(self, algorithm, G, attribute, edgeRatio):             # <<<<<<<<<<<<<<
 * 		lowerBound = self.lowerParameterBound
 * 		upperBound = self.upperParameterBound
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_28BinarySearchParameterization_3parameterize, 0, __pyx_n_s_BinarySearchParameterization_par, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__73)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 760, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_parameterize, __pyx_t_1) < 0) __PYX_ERR(0, 760, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":743
 * 		return edgeRatio
 * 
 * class BinarySearchParameterization:             # <<<<<<<<<<<<<<
 * 	""" Parameterizes a sparsification algorithm using binary search. """
 * 
 */
  __pyx_t_1 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_BinarySearchParameterization, __pyx_empty_tuple, __pyx_t_2, NULL, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 743, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BinarySearchParameterization, __pyx_t_1) < 0) __PYX_ERR(0, 743, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/sparsification.pyx":793
 * 		return bestParameter
 * 
 * class CompleteSearchParameterization:             # <<<<<<<<<<<<<<
 * 	""" Parameterizes a sparsification algorithm using complete search
 * 	(applicable only to algorithms which take as input a parameter from a small
 */
  __pyx_t_2 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_CompleteSearchParameterization, __pyx_n_s_CompleteSearchParameterization, (PyObject *) NULL, __pyx_n_s_networkit_sparsification, __pyx_kp_s_Parameterizes_a_sparsification_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "networkit/sparsification.pyx":798
 * 	set of possible values) """
 * 
 * 	def __init__(self, lowerParameterBound, upperParameterBound):             # <<<<<<<<<<<<<<
 * 		""" Creates a new instance of a complete search parameterizer.
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_30CompleteSearchParameterization_1__init__, 0, __pyx_n_s_CompleteSearchParameterization_2, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__75)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 798, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_init, __pyx_t_1) < 0) __PYX_ERR(0, 798, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":807
 * 		self.upperParameterBound = upperParameterBound
 * 
 * 	def parameterize(self, algorithm, G, attribute, edgeRatio):             # <<<<<<<<<<<<<<
 * 		bestParameter = self.lowerParameterBound
 * 		bestRatio = 0.0
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_30CompleteSearchParameterization_3parameterize, 0, __pyx_n_s_CompleteSearchParameterization_p, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__77)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 807, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_parameterize, __pyx_t_1) < 0) __PYX_ERR(0, 807, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":793
 * 		return bestParameter
 * 
 * class CompleteSearchParameterization:             # <<<<<<<<<<<<<<
 * 	""" Parameterizes a sparsification algorithm using complete search
 * 	(applicable only to algorithms which take as input a parameter from a small
 */
  __pyx_t_1 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_CompleteSearchParameterization, __pyx_empty_tuple, __pyx_t_2, NULL, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CompleteSearchParameterization, __pyx_t_1) < 0) __PYX_ERR(0, 793, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/sparsification.pyx":824
 * 		return bestParameter
 * 
 * def getRankAttribute(attribute, reverse = False):             # <<<<<<<<<<<<<<
 * 	""" Takes as input an attribute (node or edge) and returns an attribute where
 * 	each node is assigned its rank among all others according to the attribute values.
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9networkit_14sparsification_1getRankAttribute, NULL, __pyx_n_s_networkit_sparsification); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 824, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getRankAttribute, __pyx_t_2) < 0) __PYX_ERR(0, 824, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/sparsification.pyx":850
 * 	return result
 * 
 * class SimmelianSparsifierParametric(Sparsifier):             # <<<<<<<<<<<<<<
 * 
 * 	""" An implementation of the Parametric variant of the Simmelian Sparsifiers
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Sparsifier); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_SimmelianSparsifierParametric, __pyx_n_s_SimmelianSparsifierParametric, (PyObject *) NULL, __pyx_n_s_networkit_sparsification, __pyx_kp_s_An_implementation_of_the_Parame); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "networkit/sparsification.pyx":855
 * 	 introduced by Nick et al. """
 * 
 * 	def __init__(self, maxRank):             # <<<<<<<<<<<<<<
 * 		self.maxRank = maxRank
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_29SimmelianSparsifierParametric_1__init__, 0, __pyx_n_s_SimmelianSparsifierParametric_2, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__81)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_init, __pyx_t_4) < 0) __PYX_ERR(0, 855, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":858
 * 		self.maxRank = maxRank
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the minimum parameter value
 * 		such that the edge is contained in the sparsified graph.
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_29SimmelianSparsifierParametric_3scores, 0, __pyx_n_s_SimmelianSparsifierParametric_sc, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__83)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_scores, __pyx_t_4) < 0) __PYX_ERR(0, 858, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":871
 * 		return simmelianOverlap.scores()
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_29SimmelianSparsifierParametric_5_getSparsifiedGraph, 0, __pyx_n_s_SimmelianSparsifierParametric__g, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__85)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 871, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_getSparsifiedGraph, __pyx_t_4) < 0) __PYX_ERR(0, 871, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":875
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return CompleteSearchParameterization(0, self.maxRank)
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_29SimmelianSparsifierParametric_7_getParameterizationAlgorithm, 0, __pyx_n_s_SimmelianSparsifierParametric__g_2, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__87)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_getParameterizationAlgorithm, __pyx_t_4) < 0) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":850
 * 	return result
 * 
 * class SimmelianSparsifierParametric(Sparsifier):             # <<<<<<<<<<<<<<
 * 
 * 	""" An implementation of the Parametric variant of the Simmelian Sparsifiers
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_SimmelianSparsifierParametric, __pyx_t_1, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SimmelianSparsifierParametric, __pyx_t_4) < 0) __PYX_ERR(0, 850, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":878
 * 		return CompleteSearchParameterization(0, self.maxRank)
 * 
 * class SimmelianSparsifierNonParametric(Sparsifier):             # <<<<<<<<<<<<<<
 * 
 * 	""" An implementation of the Non-parametric variant of the Simmelian Sparsifiers
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Sparsifier); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 878, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 878, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 878, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_1, __pyx_t_2, __pyx_n_s_SimmelianSparsifierNonParametric, __pyx_n_s_SimmelianSparsifierNonParametric, (PyObject *) NULL, __pyx_n_s_networkit_sparsification, __pyx_kp_s_An_implementation_of_the_Non_pa); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 878, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "networkit/sparsification.pyx":883
 * 	introduced by Nick et al. """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the minimum jaccard filter value
 * 		such that the edge is contained in the sparsified graph.
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_32SimmelianSparsifierNonParametric_1scores, 0, __pyx_n_s_SimmelianSparsifierNonParametric_2, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__89)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 883, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_scores, __pyx_t_4) < 0) __PYX_ERR(0, 883, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":895
 * 		return a_sj
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_32SimmelianSparsifierNonParametric_3_getSparsifiedGraph, 0, __pyx_n_s_SimmelianSparsifierNonParametric_3, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__91)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 895, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_getSparsifiedGraph, __pyx_t_4) < 0) __PYX_ERR(0, 895, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":899
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_32SimmelianSparsifierNonParametric_5_getParameterizationAlgorithm, 0, __pyx_n_s_SimmelianSparsifierNonParametric_4, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__93)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_getParameterizationAlgorithm, __pyx_t_4) < 0) __PYX_ERR(0, 899, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":878
 * 		return CompleteSearchParameterization(0, self.maxRank)
 * 
 * class SimmelianSparsifierNonParametric(Sparsifier):             # <<<<<<<<<<<<<<
 * 
 * 	""" An implementation of the Non-parametric variant of the Simmelian Sparsifiers
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_SimmelianSparsifierNonParametric, __pyx_t_2, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 878, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SimmelianSparsifierNonParametric, __pyx_t_4) < 0) __PYX_ERR(0, 878, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/sparsification.pyx":902
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 * class QuadrilateralSimmelianSparsifier(Sparsifier):             # <<<<<<<<<<<<<<
 * 	""" An implementation of the Simmelian Sparsifiers based on quadrangles. """
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Sparsifier); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 902, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 902, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 902, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_QuadrilateralSimmelianSparsifier, __pyx_n_s_QuadrilateralSimmelianSparsifier, (PyObject *) NULL, __pyx_n_s_networkit_sparsification, __pyx_kp_s_An_implementation_of_the_Simmel); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 902, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "networkit/sparsification.pyx":905
 * 	""" An implementation of the Simmelian Sparsifiers based on quadrangles. """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns an edge scoring attribute that can be used for global filtering.
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_32QuadrilateralSimmelianSparsifier_1scores, 0, __pyx_n_s_QuadrilateralSimmelianSparsifier_2, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__95)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_scores, __pyx_t_4) < 0) __PYX_ERR(0, 905, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":917
 * 		return quadranglePrefixJaccard
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_32QuadrilateralSimmelianSparsifier_3_getSparsifiedGraph, 0, __pyx_n_s_QuadrilateralSimmelianSparsifier_3, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__97)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 917, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_getSparsifiedGraph, __pyx_t_4) < 0) __PYX_ERR(0, 917, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":921
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_32QuadrilateralSimmelianSparsifier_5_getParameterizationAlgorithm, 0, __pyx_n_s_QuadrilateralSimmelianSparsifier_4, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__99)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 921, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_getParameterizationAlgorithm, __pyx_t_4) < 0) __PYX_ERR(0, 921, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":902
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 * class QuadrilateralSimmelianSparsifier(Sparsifier):             # <<<<<<<<<<<<<<
 * 	""" An implementation of the Simmelian Sparsifiers based on quadrangles. """
 * 
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_QuadrilateralSimmelianSparsifier, __pyx_t_1, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 902, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_QuadrilateralSimmelianSparsifier, __pyx_t_4) < 0) __PYX_ERR(0, 902, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":924
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 * class SimmelianMultiscaleSparsifier(Sparsifier):             # <<<<<<<<<<<<<<
 * 
 * 	""" Multiscale Sparsifier that uses triangle counts as input edge weight. """
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Sparsifier); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 924, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 924, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 924, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_1, __pyx_t_2, __pyx_n_s_SimmelianMultiscaleSparsifier, __pyx_n_s_SimmelianMultiscaleSparsifier, (PyObject *) NULL, __pyx_n_s_networkit_sparsification, __pyx_kp_s_Multiscale_Sparsifier_that_uses); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 924, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "networkit/sparsification.pyx":928
 * 	""" Multiscale Sparsifier that uses triangle counts as input edge weight. """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the maximum parameter value
 * 		such that the edge is contained in the sparsified graph.
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_29SimmelianMultiscaleSparsifier_1scores, 0, __pyx_n_s_SimmelianMultiscaleSparsifier_sc, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__101)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 928, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_scores, __pyx_t_4) < 0) __PYX_ERR(0, 928, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":941
 * 		return a_ms
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_29SimmelianMultiscaleSparsifier_3_getSparsifiedGraph, 0, __pyx_n_s_SimmelianMultiscaleSparsifier__g, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__103)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 941, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_getSparsifiedGraph, __pyx_t_4) < 0) __PYX_ERR(0, 941, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":945
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_29SimmelianMultiscaleSparsifier_5_getParameterizationAlgorithm, 0, __pyx_n_s_SimmelianMultiscaleSparsifier__g_2, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__105)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_getParameterizationAlgorithm, __pyx_t_4) < 0) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":924
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 * class SimmelianMultiscaleSparsifier(Sparsifier):             # <<<<<<<<<<<<<<
 * 
 * 	""" Multiscale Sparsifier that uses triangle counts as input edge weight. """
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_SimmelianMultiscaleSparsifier, __pyx_t_2, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 924, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SimmelianMultiscaleSparsifier, __pyx_t_4) < 0) __PYX_ERR(0, 924, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/sparsification.pyx":948
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 * class DegreeMultiscaleSparsifier(Sparsifier):             # <<<<<<<<<<<<<<
 * 	""" Multiscale Sparsifier that uses node degrees (mapped to edges) as input edge weight. """
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Sparsifier); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 948, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 948, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 948, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_DegreeMultiscaleSparsifier, __pyx_n_s_DegreeMultiscaleSparsifier, (PyObject *) NULL, __pyx_n_s_networkit_sparsification, __pyx_kp_s_Multiscale_Sparsifier_that_uses_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 948, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "networkit/sparsification.pyx":951
 * 	""" Multiscale Sparsifier that uses node degrees (mapped to edges) as input edge weight. """
 * 
 * 	def __init__(self, degsToAttrValue):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Creates a new instance of the Degree Multiscale sparsifier.
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_26DegreeMultiscaleSparsifier_1__init__, 0, __pyx_n_s_DegreeMultiscaleSparsifier___ini, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__107)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 951, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_init, __pyx_t_4) < 0) __PYX_ERR(0, 951, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":959
 * 		self.degsToAttrValue = degsToAttrValue
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the maximum parameter value
 * 		such that the edge is contained in the sparsified graph.
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_26DegreeMultiscaleSparsifier_3scores, 0, __pyx_n_s_DegreeMultiscaleSparsifier_score, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__109)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 959, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_scores, __pyx_t_4) < 0) __PYX_ERR(0, 959, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":976
 * 		return a_ms
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_26DegreeMultiscaleSparsifier_5_getSparsifiedGraph, 0, __pyx_n_s_DegreeMultiscaleSparsifier__getS, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__111)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 976, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_getSparsifiedGraph, __pyx_t_4) < 0) __PYX_ERR(0, 976, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":980
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_26DegreeMultiscaleSparsifier_7_getParameterizationAlgorithm, 0, __pyx_n_s_DegreeMultiscaleSparsifier__getP, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__113)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_getParameterizationAlgorithm, __pyx_t_4) < 0) __PYX_ERR(0, 980, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":948
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 * class DegreeMultiscaleSparsifier(Sparsifier):             # <<<<<<<<<<<<<<
 * 	""" Multiscale Sparsifier that uses node degrees (mapped to edges) as input edge weight. """
 * 
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_DegreeMultiscaleSparsifier, __pyx_t_1, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 948, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DegreeMultiscaleSparsifier, __pyx_t_4) < 0) __PYX_ERR(0, 948, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":983
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 * class JaccardSimilaritySparsifier(Sparsifier):             # <<<<<<<<<<<<<<
 * 	""" An implementation of the Jaccard Similarity sparsification approach introduced by Satuluri et al. """
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Sparsifier); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 983, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 983, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 983, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_1, __pyx_t_2, __pyx_n_s_JaccardSimilaritySparsifier, __pyx_n_s_JaccardSimilaritySparsifier, (PyObject *) NULL, __pyx_n_s_networkit_sparsification, __pyx_kp_s_An_implementation_of_the_Jaccar); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 983, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "networkit/sparsification.pyx":986
 * 	""" An implementation of the Jaccard Similarity sparsification approach introduced by Satuluri et al. """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns the jaccard coefficient of the neighborhoods of the two incident nodes """
 * 		triangles = TriangleEdgeScore(G).run().scores()
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_27JaccardSimilaritySparsifier_1scores, 0, __pyx_n_s_JaccardSimilaritySparsifier_scor, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__115)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 986, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_scores, __pyx_t_4) < 0) __PYX_ERR(0, 986, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":991
 * 		return JaccardSimilarityAttributizer(G, triangles).getAttribute()
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_27JaccardSimilaritySparsifier_3_getSparsifiedGraph, 0, __pyx_n_s_JaccardSimilaritySparsifier__get, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__117)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 991, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_getSparsifiedGraph, __pyx_t_4) < 0) __PYX_ERR(0, 991, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":995
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_27JaccardSimilaritySparsifier_5_getParameterizationAlgorithm, 0, __pyx_n_s_JaccardSimilaritySparsifier__get_2, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__119)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_getParameterizationAlgorithm, __pyx_t_4) < 0) __PYX_ERR(0, 995, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":983
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 * class JaccardSimilaritySparsifier(Sparsifier):             # <<<<<<<<<<<<<<
 * 	""" An implementation of the Jaccard Similarity sparsification approach introduced by Satuluri et al. """
 * 
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_JaccardSimilaritySparsifier, __pyx_t_2, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 983, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_JaccardSimilaritySparsifier, __pyx_t_4) < 0) __PYX_ERR(0, 983, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/sparsification.pyx":999
 * 
 * 
 * class LocalSimilaritySparsifier(Sparsifier):             # <<<<<<<<<<<<<<
 * 
 * 	""" An implementation of the Local Similarity sparsification approach introduced by Satuluri et al. """
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Sparsifier); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_LocalSimilaritySparsifier, __pyx_n_s_LocalSimilaritySparsifier, (PyObject *) NULL, __pyx_n_s_networkit_sparsification, __pyx_kp_s_An_implementation_of_the_Local); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "networkit/sparsification.pyx":1003
 * 	""" An implementation of the Local Similarity sparsification approach introduced by Satuluri et al. """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the minimum parameter value
 * 		such that the edge is contained in the sparsified graph.
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_25LocalSimilaritySparsifier_1scores, 0, __pyx_n_s_LocalSimilaritySparsifier_scores, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__121)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1003, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_scores, __pyx_t_4) < 0) __PYX_ERR(0, 1003, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":1015
 * 		return localSimScore.scores()
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_25LocalSimilaritySparsifier_3_getSparsifiedGraph, 0, __pyx_n_s_LocalSimilaritySparsifier__getSp, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__123)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_getSparsifiedGraph, __pyx_t_4) < 0) __PYX_ERR(0, 1015, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":1019
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_25LocalSimilaritySparsifier_5_getParameterizationAlgorithm, 0, __pyx_n_s_LocalSimilaritySparsifier__getPa, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__125)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1019, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_getParameterizationAlgorithm, __pyx_t_4) < 0) __PYX_ERR(0, 1019, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":999
 * 
 * 
 * class LocalSimilaritySparsifier(Sparsifier):             # <<<<<<<<<<<<<<
 * 
 * 	""" An implementation of the Local Similarity sparsification approach introduced by Satuluri et al. """
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_LocalSimilaritySparsifier, __pyx_t_1, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LocalSimilaritySparsifier, __pyx_t_4) < 0) __PYX_ERR(0, 999, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":1022
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 * class MultiscaleSparsifier(Sparsifier):             # <<<<<<<<<<<<<<
 * 
 * 	""" An implementation of the Multiscale backbone approach introduced by Serrano et al. """
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Sparsifier); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1022, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1022, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1022, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_1, __pyx_t_2, __pyx_n_s_MultiscaleSparsifier, __pyx_n_s_MultiscaleSparsifier, (PyObject *) NULL, __pyx_n_s_networkit_sparsification, __pyx_kp_s_An_implementation_of_the_Multis); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1022, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "networkit/sparsification.pyx":1026
 * 	""" An implementation of the Multiscale backbone approach introduced by Serrano et al. """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the minimum parameter value
 * 		such that the edge is contained in the sparsified graph.
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_20MultiscaleSparsifier_1scores, 0, __pyx_n_s_MultiscaleSparsifier_scores, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__127)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1026, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_scores, __pyx_t_4) < 0) __PYX_ERR(0, 1026, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":1044
 * 		return scores
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_20MultiscaleSparsifier_3_getSparsifiedGraph, 0, __pyx_n_s_MultiscaleSparsifier__getSparsif, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__129)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_getSparsifiedGraph, __pyx_t_4) < 0) __PYX_ERR(0, 1044, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":1048
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_20MultiscaleSparsifier_5_getParameterizationAlgorithm, 0, __pyx_n_s_MultiscaleSparsifier__getParamet, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__131)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1048, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_getParameterizationAlgorithm, __pyx_t_4) < 0) __PYX_ERR(0, 1048, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":1022
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 * class MultiscaleSparsifier(Sparsifier):             # <<<<<<<<<<<<<<
 * 
 * 	""" An implementation of the Multiscale backbone approach introduced by Serrano et al. """
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_MultiscaleSparsifier, __pyx_t_2, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1022, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MultiscaleSparsifier, __pyx_t_4) < 0) __PYX_ERR(0, 1022, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/sparsification.pyx":1051
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 * class RandomEdgeSparsifier(Sparsifier):             # <<<<<<<<<<<<<<
 * 
 * 	""" Random Edge sampling. Edges to keep in the sparsified graph are selected uniformly at random. """
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Sparsifier); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_RandomEdgeSparsifier, __pyx_n_s_RandomEdgeSparsifier, (PyObject *) NULL, __pyx_n_s_networkit_sparsification, __pyx_kp_s_Random_Edge_sampling_Edges_to_k); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "networkit/sparsification.pyx":1055
 * 	""" Random Edge sampling. Edges to keep in the sparsified graph are selected uniformly at random. """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the minimum parameter value
 * 		such that the edge is contained in the sparsified graph.
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_20RandomEdgeSparsifier_1scores, 0, __pyx_n_s_RandomEdgeSparsifier_scores, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__133)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1055, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_scores, __pyx_t_4) < 0) __PYX_ERR(0, 1055, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":1067
 * 		return reScore.scores()
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, False)
 * 		return gf.calculate()
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_20RandomEdgeSparsifier_3_getSparsifiedGraph, 0, __pyx_n_s_RandomEdgeSparsifier__getSparsif, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__135)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_getSparsifiedGraph, __pyx_t_4) < 0) __PYX_ERR(0, 1067, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":1071
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return SimpleParameterization()
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_20RandomEdgeSparsifier_5_getParameterizationAlgorithm, 0, __pyx_n_s_RandomEdgeSparsifier__getParamet, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__137)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1071, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_getParameterizationAlgorithm, __pyx_t_4) < 0) __PYX_ERR(0, 1071, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":1051
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 * class RandomEdgeSparsifier(Sparsifier):             # <<<<<<<<<<<<<<
 * 
 * 	""" Random Edge sampling. Edges to keep in the sparsified graph are selected uniformly at random. """
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_RandomEdgeSparsifier, __pyx_t_1, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_RandomEdgeSparsifier, __pyx_t_4) < 0) __PYX_ERR(0, 1051, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":1074
 * 		return SimpleParameterization()
 * 
 * class RandomNodeEdgeSparsifier(Sparsifier):             # <<<<<<<<<<<<<<
 * 	""" [TODO not yet documented] """
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Sparsifier); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1074, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1074, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1074, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_1, __pyx_t_2, __pyx_n_s_RandomNodeEdgeSparsifier, __pyx_n_s_RandomNodeEdgeSparsifier, (PyObject *) NULL, __pyx_n_s_networkit_sparsification, __pyx_kp_s_TODO_not_yet_documented); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1074, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "networkit/sparsification.pyx":1077
 * 	""" [TODO not yet documented] """
 * 
 * 	def __init__(self, above = True):             # <<<<<<<<<<<<<<
 * 		self.above = above
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_24RandomNodeEdgeSparsifier_1__init__, 0, __pyx_n_s_RandomNodeEdgeSparsifier___init, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__139)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1077, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__140);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_init, __pyx_t_4) < 0) __PYX_ERR(0, 1077, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":1080
 * 		self.above = above
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the minimum parameter value
 * 		such that the edge is contained in the sparsified graph.
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_24RandomNodeEdgeSparsifier_3scores, 0, __pyx_n_s_RandomNodeEdgeSparsifier_scores, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__142)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1080, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_scores, __pyx_t_4) < 0) __PYX_ERR(0, 1080, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":1092
 * 		return rneScore.scores()
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, self.above)
 * 		return gf.calculate()
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_24RandomNodeEdgeSparsifier_5_getSparsifiedGraph, 0, __pyx_n_s_RandomNodeEdgeSparsifier__getSpa, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__144)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1092, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_getSparsifiedGraph, __pyx_t_4) < 0) __PYX_ERR(0, 1092, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":1096
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization((not self.above), 0.0, 1.0, 20)
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_24RandomNodeEdgeSparsifier_7_getParameterizationAlgorithm, 0, __pyx_n_s_RandomNodeEdgeSparsifier__getPar, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__146)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1096, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_getParameterizationAlgorithm, __pyx_t_4) < 0) __PYX_ERR(0, 1096, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":1074
 * 		return SimpleParameterization()
 * 
 * class RandomNodeEdgeSparsifier(Sparsifier):             # <<<<<<<<<<<<<<
 * 	""" [TODO not yet documented] """
 * 
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_RandomNodeEdgeSparsifier, __pyx_t_2, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1074, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_RandomNodeEdgeSparsifier, __pyx_t_4) < 0) __PYX_ERR(0, 1074, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/sparsification.pyx":1099
 * 		return BinarySearchParameterization((not self.above), 0.0, 1.0, 20)
 * 
 * class ForestFireSparsifier(Sparsifier):             # <<<<<<<<<<<<<<
 * 
 * 	""" A variant of the Forest Fire sparsification approach proposed by Leskovec et al. """
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Sparsifier); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1099, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1099, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1099, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_ForestFireSparsifier, __pyx_n_s_ForestFireSparsifier, (PyObject *) NULL, __pyx_n_s_networkit_sparsification, __pyx_kp_s_A_variant_of_the_Forest_Fire_sp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1099, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "networkit/sparsification.pyx":1103
 * 	""" A variant of the Forest Fire sparsification approach proposed by Leskovec et al. """
 * 
 * 	def __init__(self, burnProbability, targetBurntRatio):             # <<<<<<<<<<<<<<
 * 		""" Creates a new instance of the Edge Forest Fire sparsification algorithm.
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_20ForestFireSparsifier_1__init__, 0, __pyx_n_s_ForestFireSparsifier___init, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__148)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_init, __pyx_t_4) < 0) __PYX_ERR(0, 1103, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":1113
 * 		self.targetBurntRatio = targetBurntRatio
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the maximum parameter value
 * 		such that the edge is contained in the sparsified graph.
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_20ForestFireSparsifier_3scores, 0, __pyx_n_s_ForestFireSparsifier_scores, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__150)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_scores, __pyx_t_4) < 0) __PYX_ERR(0, 1113, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":1125
 * 		return ffScore.scores()
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_20ForestFireSparsifier_5_getSparsifiedGraph, 0, __pyx_n_s_ForestFireSparsifier__getSparsif, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__152)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_getSparsifiedGraph, __pyx_t_4) < 0) __PYX_ERR(0, 1125, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":1129
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_20ForestFireSparsifier_7_getParameterizationAlgorithm, 0, __pyx_n_s_ForestFireSparsifier__getParamet, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__154)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_getParameterizationAlgorithm, __pyx_t_4) < 0) __PYX_ERR(0, 1129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":1099
 * 		return BinarySearchParameterization((not self.above), 0.0, 1.0, 20)
 * 
 * class ForestFireSparsifier(Sparsifier):             # <<<<<<<<<<<<<<
 * 
 * 	""" A variant of the Forest Fire sparsification approach proposed by Leskovec et al. """
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_ForestFireSparsifier, __pyx_t_1, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1099, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ForestFireSparsifier, __pyx_t_4) < 0) __PYX_ERR(0, 1099, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":1132
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 * class LocalDegreeSparsifier(Sparsifier):             # <<<<<<<<<<<<<<
 * 
 * 	""" An implementation of the Local Degree sparsification algorithm. """
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Sparsifier); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_1, __pyx_t_2, __pyx_n_s_LocalDegreeSparsifier, __pyx_n_s_LocalDegreeSparsifier, (PyObject *) NULL, __pyx_n_s_networkit_sparsification, __pyx_kp_s_An_implementation_of_the_Local_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "networkit/sparsification.pyx":1136
 * 	""" An implementation of the Local Degree sparsification algorithm. """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge score that holds for each edge the minimum parameter value
 * 		such that the edge is contained in the sparsified graph.
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_21LocalDegreeSparsifier_1scores, 0, __pyx_n_s_LocalDegreeSparsifier_scores, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__156)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_scores, __pyx_t_4) < 0) __PYX_ERR(0, 1136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":1149
 * 		return localDegreeScore
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_21LocalDegreeSparsifier_3_getSparsifiedGraph, 0, __pyx_n_s_LocalDegreeSparsifier__getSparsi, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__158)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_getSparsifiedGraph, __pyx_t_4) < 0) __PYX_ERR(0, 1149, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":1153
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_21LocalDegreeSparsifier_5_getParameterizationAlgorithm, 0, __pyx_n_s_LocalDegreeSparsifier__getParame, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__160)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_getParameterizationAlgorithm, __pyx_t_4) < 0) __PYX_ERR(0, 1153, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":1132
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 * class LocalDegreeSparsifier(Sparsifier):             # <<<<<<<<<<<<<<
 * 
 * 	""" An implementation of the Local Degree sparsification algorithm. """
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_LocalDegreeSparsifier, __pyx_t_2, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LocalDegreeSparsifier, __pyx_t_4) < 0) __PYX_ERR(0, 1132, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/sparsification.pyx":1156
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 * class SCANSparsifier(Sparsifier):             # <<<<<<<<<<<<<<
 * 
 * 	""" A sparsifiier dervived from 'SCAN: a structural clustering algorithm for networks' """
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Sparsifier); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_SCANSparsifier, __pyx_n_s_SCANSparsifier, (PyObject *) NULL, __pyx_n_s_networkit_sparsification, __pyx_kp_s_A_sparsifiier_dervived_from_SCA); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "networkit/sparsification.pyx":1160
 * 	""" A sparsifiier dervived from 'SCAN: a structural clustering algorithm for networks' """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the minimum parameter value
 * 		such that the edge is contained in the sparsified graph.
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_14SCANSparsifier_1scores, 0, __pyx_n_s_SCANSparsifier_scores, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__162)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_scores, __pyx_t_4) < 0) __PYX_ERR(0, 1160, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":1174
 * 		return scanScore.scores()
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_14SCANSparsifier_3_getSparsifiedGraph, 0, __pyx_n_s_SCANSparsifier__getSparsifiedGra, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__164)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_getSparsifiedGraph, __pyx_t_4) < 0) __PYX_ERR(0, 1174, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":1178
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_14SCANSparsifier_5_getParameterizationAlgorithm, 0, __pyx_n_s_SCANSparsifier__getParameterizat, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__166)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_getParameterizationAlgorithm, __pyx_t_4) < 0) __PYX_ERR(0, 1178, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":1156
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 * class SCANSparsifier(Sparsifier):             # <<<<<<<<<<<<<<
 * 
 * 	""" A sparsifiier dervived from 'SCAN: a structural clustering algorithm for networks' """
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_SCANSparsifier, __pyx_t_1, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SCANSparsifier, __pyx_t_4) < 0) __PYX_ERR(0, 1156, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":1181
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 * class TriangleSparsifier(Sparsifier):             # <<<<<<<<<<<<<<
 * 	"""  Allows for global filtering with respect to triangle counts. """
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Sparsifier); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_1, __pyx_t_2, __pyx_n_s_TriangleSparsifier, __pyx_n_s_TriangleSparsifier, (PyObject *) NULL, __pyx_n_s_networkit_sparsification, __pyx_kp_s_Allows_for_global_filtering_wit); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "networkit/sparsification.pyx":1184
 * 	"""  Allows for global filtering with respect to triangle counts. """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns the triangle counts of the input graph. """
 * 		triangleScore = TriangleEdgeScore(G)
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_18TriangleSparsifier_1scores, 0, __pyx_n_s_TriangleSparsifier_scores, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__168)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_scores, __pyx_t_4) < 0) __PYX_ERR(0, 1184, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":1190
 * 		return triangleScore.scores()
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_18TriangleSparsifier_3_getSparsifiedGraph, 0, __pyx_n_s_TriangleSparsifier__getSparsifie, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__170)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_getSparsifiedGraph, __pyx_t_4) < 0) __PYX_ERR(0, 1190, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":1194
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		raise NotImplementedError("parameterization method not yet implemented.")
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_18TriangleSparsifier_5_getParameterizationAlgorithm, 0, __pyx_n_s_TriangleSparsifier__getParameter, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__172)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_getParameterizationAlgorithm, __pyx_t_4) < 0) __PYX_ERR(0, 1194, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":1181
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 * class TriangleSparsifier(Sparsifier):             # <<<<<<<<<<<<<<
 * 	"""  Allows for global filtering with respect to triangle counts. """
 * 
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_TriangleSparsifier, __pyx_t_2, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TriangleSparsifier, __pyx_t_4) < 0) __PYX_ERR(0, 1181, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/sparsification.pyx":1197
 * 		raise NotImplementedError("parameterization method not yet implemented.")
 * 
 * class AlgebraicDistanceSparsifier(Sparsifier):             # <<<<<<<<<<<<<<
 * 	""" Allows for global filtering with respect to (inverted) algebraic distances. """
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Sparsifier); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_AlgebraicDistanceSparsifier, __pyx_n_s_AlgebraicDistanceSparsifier, (PyObject *) NULL, __pyx_n_s_networkit_sparsification, __pyx_kp_s_Allows_for_global_filtering_wit_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "networkit/sparsification.pyx":1200
 * 	""" Allows for global filtering with respect to (inverted) algebraic distances. """
 * 
 * 	def __init__(self, numberSystems=10, numberIterations=30, omega=0.5, norm=0):             # <<<<<<<<<<<<<<
 * 		self.numberSystems = numberSystems
 * 		self.numberIterations = numberIterations
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_27AlgebraicDistanceSparsifier_1__init__, 0, __pyx_n_s_AlgebraicDistanceSparsifier___in, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__174)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__175);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_init, __pyx_t_4) < 0) __PYX_ERR(0, 1200, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":1206
 * 		self.norm = norm
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns the inverted algebraic distance score of the input graph. """
 * 		algDist = distance.AlgebraicDistance(G, self.numberSystems, self.numberIterations, self.omega, self.norm, withEdgeScores=True)
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_27AlgebraicDistanceSparsifier_3scores, 0, __pyx_n_s_AlgebraicDistanceSparsifier_scor, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__177)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_scores, __pyx_t_4) < 0) __PYX_ERR(0, 1206, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":1212
 * 		return [1.0 - d for d in algDist.getEdgeScores()]
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_27AlgebraicDistanceSparsifier_5_getSparsifiedGraph, 0, __pyx_n_s_AlgebraicDistanceSparsifier__get, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__179)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_getSparsifiedGraph, __pyx_t_4) < 0) __PYX_ERR(0, 1212, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":1216
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_27AlgebraicDistanceSparsifier_7_getParameterizationAlgorithm, 0, __pyx_n_s_AlgebraicDistanceSparsifier__get_2, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__181)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_getParameterizationAlgorithm, __pyx_t_4) < 0) __PYX_ERR(0, 1216, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":1197
 * 		raise NotImplementedError("parameterization method not yet implemented.")
 * 
 * class AlgebraicDistanceSparsifier(Sparsifier):             # <<<<<<<<<<<<<<
 * 	""" Allows for global filtering with respect to (inverted) algebraic distances. """
 * 
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_AlgebraicDistanceSparsifier, __pyx_t_1, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_AlgebraicDistanceSparsifier, __pyx_t_4) < 0) __PYX_ERR(0, 1197, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":1219
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 * class LocalSparsifier(Sparsifier):             # <<<<<<<<<<<<<<
 * 	def __init__(self, sparsifier):
 * 		self.sparsifier = sparsifier
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Sparsifier); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_1, __pyx_t_2, __pyx_n_s_LocalSparsifier, __pyx_n_s_LocalSparsifier, (PyObject *) NULL, __pyx_n_s_networkit_sparsification, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "networkit/sparsification.pyx":1220
 * 
 * class LocalSparsifier(Sparsifier):
 * 	def __init__(self, sparsifier):             # <<<<<<<<<<<<<<
 * 		self.sparsifier = sparsifier
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_15LocalSparsifier_1__init__, 0, __pyx_n_s_LocalSparsifier___init, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__183)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_init, __pyx_t_4) < 0) __PYX_ERR(0, 1220, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":1223
 * 		self.sparsifier = sparsifier
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge 1 - the minimum parameter value
 *                	such that the edge is contained in the sparsified graph.
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_15LocalSparsifier_3scores, 0, __pyx_n_s_LocalSparsifier_scores, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__185)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_scores, __pyx_t_4) < 0) __PYX_ERR(0, 1223, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":1238
 * 		return localFilterScore.scores()
 * 
 * 	def _getSparsifiedGraph(self, G, parameter, attribute):             # <<<<<<<<<<<<<<
 * 		gf = GlobalThresholdFilter(G, attribute, parameter, True)
 * 		return gf.calculate()
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_15LocalSparsifier_5_getSparsifiedGraph, 0, __pyx_n_s_LocalSparsifier__getSparsifiedGr, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__187)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_getSparsifiedGraph, __pyx_t_4) < 0) __PYX_ERR(0, 1238, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":1242
 * 		return gf.calculate()
 * 
 * 	def _getParameterizationAlgorithm(self):             # <<<<<<<<<<<<<<
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_15LocalSparsifier_7_getParameterizationAlgorithm, 0, __pyx_n_s_LocalSparsifier__getParameteriza, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__189)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_getParameterizationAlgorithm, __pyx_t_4) < 0) __PYX_ERR(0, 1242, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/sparsification.pyx":1219
 * 		return BinarySearchParameterization(False, 0.0, 1.0, 20)
 * 
 * class LocalSparsifier(Sparsifier):             # <<<<<<<<<<<<<<
 * 	def __init__(self, sparsifier):
 * 		self.sparsifier = sparsifier
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_LocalSparsifier, __pyx_t_2, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LocalSparsifier, __pyx_t_4) < 0) __PYX_ERR(0, 1219, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/sparsification.pyx":1246
 * 
 * 
 * class ModularityPartitionScore():             # <<<<<<<<<<<<<<
 * 
 * 	"""  """
 */
  __pyx_t_2 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_ModularityPartitionScore, __pyx_n_s_ModularityPartitionScore, (PyObject *) NULL, __pyx_n_s_networkit_sparsification, __pyx_kp_s__190); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "networkit/sparsification.pyx":1250
 * 	"""  """
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the minimum parameter value
 * 		such that the edge is contained in the sparsified graph.
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_24ModularityPartitionScore_1scores, 0, __pyx_n_s_ModularityPartitionScore_scores_3, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__192)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_scores, __pyx_t_1) < 0) __PYX_ERR(0, 1250, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":1246
 * 
 * 
 * class ModularityPartitionScore():             # <<<<<<<<<<<<<<
 * 
 * 	"""  """
 */
  __pyx_t_1 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_ModularityPartitionScore, __pyx_empty_tuple, __pyx_t_2, NULL, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ModularityPartitionScore, __pyx_t_1) < 0) __PYX_ERR(0, 1246, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/sparsification.pyx":1272
 * 		return edgeScores
 * 
 * class ConstantScore():             # <<<<<<<<<<<<<<
 * 	""" Assigns as an attribute the same value to each edge (for sanity checks) """
 * 
 */
  __pyx_t_2 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_ConstantScore, __pyx_n_s_ConstantScore, (PyObject *) NULL, __pyx_n_s_networkit_sparsification, __pyx_kp_s_Assigns_as_an_attribute_the_sam); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "networkit/sparsification.pyx":1275
 * 	""" Assigns as an attribute the same value to each edge (for sanity checks) """
 * 
 * 	def __init__(self, constValue = 1.0):             # <<<<<<<<<<<<<<
 * 		""" Creates a new instance of an attributizer that always
 * 		 returns the given value as edge attribute value.
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_13ConstantScore_1__init__, 0, __pyx_n_s_ConstantScore___init, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__194)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_1, __pyx_tuple__195);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_init, __pyx_t_1) < 0) __PYX_ERR(0, 1275, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":1281
 * 		self.constValue = constValue
 * 
 * 	def scores(self, G):             # <<<<<<<<<<<<<<
 * 		""" Returns an edge attribute that holds for each edge the constant value given
 * 		in the constructor.
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_14sparsification_13ConstantScore_3scores, 0, __pyx_n_s_ConstantScore_scores, NULL, __pyx_n_s_networkit_sparsification, __pyx_d, ((PyObject *)__pyx_codeobj__197)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_scores, __pyx_t_1) < 0) __PYX_ERR(0, 1281, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/sparsification.pyx":1272
 * 		return edgeScores
 * 
 * class ConstantScore():             # <<<<<<<<<<<<<<
 * 	""" Assigns as an attribute the same value to each edge (for sanity checks) """
 * 
 */
  __pyx_t_1 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_ConstantScore, __pyx_empty_tuple, __pyx_t_2, NULL, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ConstantScore, __pyx_t_1) < 0) __PYX_ERR(0, 1272, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/sparsification.pyx":1
 * # distutils: language=c++             # <<<<<<<<<<<<<<
 * 
 * from libc.stdint cimport uint64_t
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py___pyx_t_9networkit_14sparsification_count")
 * cdef object __pyx_convert_vector_to_py___pyx_t_9networkit_14sparsification_count(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init networkit.sparsification", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init networkit.sparsification");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* PyFloatBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_TrueDivideObjC(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check) {
    const double b = floatval;
    double a, result;
    (void)inplace;
    (void)zerodivision_check;
    if (likely(PyFloat_CheckExact(op1))) {
        a = PyFloat_AS_DOUBLE(op1);
        
    } else
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        a = (double) PyInt_AS_LONG(op1);
        
    } else
    #endif
    if (likely(PyLong_CheckExact(op1))) {
        #if CYTHON_USE_PYLONG_INTERNALS
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        switch (size) {
            case  0: a = 0.0; break;
            case -1: a = -(double) digits[0]; break;
            case  1: a = (double) digits[0]; break;
            case -2:
            case 2:
                if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (1 * PyLong_SHIFT < 53))) {
                    a = (double) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -2)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -3:
            case 3:
                if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -3)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -4:
            case 4:
                if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (4 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -4)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            default:
        #else
        {
        #endif
            a = PyLong_AsDouble(op1);
            if (unlikely(a == -1.0 && PyErr_Occurred())) return NULL;
            
        }
    } else {
        return (inplace ? PyNumber_InPlaceTrueDivide : PyNumber_TrueDivide)(op1, op2);
    }
        
        PyFPE_START_PROTECT("divide", return NULL)
        result = a / b;
        PyFPE_END_PROTECT(result)
        return PyFloat_FromDouble(result);
}
#endif

/* py_abs */
  #if CYTHON_USE_PYLONG_INTERNALS
static PyObject *__Pyx_PyLong_AbsNeg(PyObject *n) {
    if (likely(Py_SIZE(n) == -1)) {
        return PyLong_FromLong(((PyLongObject*)n)->ob_digit[0]);
    }
#if CYTHON_COMPILING_IN_CPYTHON
    {
        PyObject *copy = _PyLong_Copy((PyLongObject*)n);
        if (likely(copy)) {
            __Pyx_SET_SIZE(copy, -Py_SIZE(copy));
        }
        return copy;
    }
#else
    return PyNumber_Negative(n);
#endif
}
#endif

/* PyIntBinop */
  #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* GetItemInt */
  static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* FetchCommonType */
  static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunctionShared */
  #include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    if (unlikely(op == NULL))
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
#if PY_MAJOR_VERSION < 3
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
#endif
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
  static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* RaiseTooManyValuesToUnpack */
  static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
  static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
  static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
  static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* PyFloatBinop */
  #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_SubtractCObj(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check) {
    const double a = floatval;
    double b, result;
    (void)inplace;
    (void)zerodivision_check;
    if (likely(PyFloat_CheckExact(op2))) {
        b = PyFloat_AS_DOUBLE(op2);
        
    } else
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op2))) {
        b = (double) PyInt_AS_LONG(op2);
        
    } else
    #endif
    if (likely(PyLong_CheckExact(op2))) {
        #if CYTHON_USE_PYLONG_INTERNALS
        const digit* digits = ((PyLongObject*)op2)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op2);
        switch (size) {
            case  0: b = 0.0; break;
            case -1: b = -(double) digits[0]; break;
            case  1: b = (double) digits[0]; break;
            case -2:
            case 2:
                if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (1 * PyLong_SHIFT < 53))) {
                    b = (double) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53) || (b < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -2)
                            b = -b;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -3:
            case 3:
                if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53))) {
                    b = (double) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53) || (b < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -3)
                            b = -b;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -4:
            case 4:
                if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53))) {
                    b = (double) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (4 * PyLong_SHIFT < 53) || (b < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -4)
                            b = -b;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            default:
        #else
        {
        #endif
            b = PyLong_AsDouble(op2);
            if (unlikely(b == -1.0 && PyErr_Occurred())) return NULL;
            
        }
    } else {
        return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
    }
        
        PyFPE_START_PROTECT("subtract", return NULL)
        result = a - b;
        PyFPE_END_PROTECT(result)
        return PyFloat_FromDouble(result);
}
#endif

/* None */
    static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* ObjectGetItem */
    #if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* UnpackUnboundCMethod */
    static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    }
#endif
    return 0;
}

/* CallUnboundCMethod2 */
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2) {
    if (likely(cfunc->func)) {
        PyObject *args[2] = {arg1, arg2};
        if (cfunc->flag == METH_FASTCALL) {
            #if PY_VERSION_HEX >= 0x030700A0
            return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, args, 2);
            #else
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
            #endif
        }
        #if PY_VERSION_HEX >= 0x030700A0
        if (cfunc->flag == (METH_FASTCALL | METH_KEYWORDS))
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
        #endif
    }
    return __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 0, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 1, arg2);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(3);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 1, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 2, arg2);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(3, self, arg1, arg2);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* CallNextTpDealloc */
    static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_dealloc != current_tp_dealloc)
        type = type->tp_base;
    while (type && type->tp_dealloc == current_tp_dealloc)
        type = type->tp_base;
    if (type)
        type->tp_dealloc(obj);
}

/* CallNextTpTraverse */
    static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_traverse != current_tp_traverse)
        type = type->tp_base;
    while (type && type->tp_traverse == current_tp_traverse)
        type = type->tp_base;
    if (type && type->tp_traverse)
        return type->tp_traverse(obj, v, a);
    return 0;
}

/* CallNextTpClear */
    static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_clear != current_tp_clear)
        type = type->tp_base;
    while (type && type->tp_clear == current_tp_clear)
        type = type->tp_base;
    if (type && type->tp_clear)
        type->tp_clear(obj);
}

/* TypeImport */
    #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* PyObject_GenericGetAttrNoDict */
    #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
    #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
    static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* PyObjectGetAttrStrNoError */
    static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
    static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* GetVTable */
    static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* Import */
    static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
    static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CalculateMetaclass */
    static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* Py3ClassCreate */
    static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* CLineInTraceback */
    #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
    static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
    #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
    #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value) {
    const uint64_t neg_one = (uint64_t) ((uint64_t) 0 - (uint64_t) 1), const_zero = (uint64_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint64_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint64_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint64_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(uint64_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint64_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint64_t),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
    static CYTHON_INLINE uint64_t __Pyx_PyInt_As_uint64_t(PyObject *x) {
    const uint64_t neg_one = (uint64_t) ((uint64_t) 0 - (uint64_t) 1), const_zero = (uint64_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(uint64_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(uint64_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (uint64_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint64_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(uint64_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(uint64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) >= 2 * PyLong_SHIFT) {
                            return (uint64_t) (((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) >= 3 * PyLong_SHIFT) {
                            return (uint64_t) (((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) >= 4 * PyLong_SHIFT) {
                            return (uint64_t) (((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (uint64_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(uint64_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint64_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint64_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(uint64_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(uint64_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(uint64_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint64_t) (((uint64_t)-1)*(((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(uint64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint64_t) ((((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint64_t) (((uint64_t)-1)*(((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint64_t) ((((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint64_t) (((uint64_t)-1)*(((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint64_t) ((((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(uint64_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint64_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            uint64_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (uint64_t) -1;
        }
    } else {
        uint64_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (uint64_t) -1;
        val = __Pyx_PyInt_As_uint64_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to uint64_t");
    return (uint64_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to uint64_t");
    return (uint64_t) -1;
}

/* CIntFromPy */
    static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) ((size_t) 0 - (size_t) 1), const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
    static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
    static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* FastTypeChecks */
    #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
    static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
    static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
