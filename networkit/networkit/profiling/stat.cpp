/* Generated by Cython 0.29.21 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [],
        "language": "c++",
        "name": "networkit.profiling.stat",
        "sources": [
            "networkit/profiling/stat.pyx"
        ]
    },
    "module_name": "networkit.profiling.stat"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_21"
#define CYTHON_HEX_VERSION 0x001D15F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__networkit__profiling__stat
#define __PYX_HAVE_API__networkit__profiling__stat
/* Early includes */
#include <stdint.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <utility>

    #if __cplusplus > 199711L
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <networkit/auxiliary/Parallel.hpp>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "networkit/profiling/stat.pyx",
  "stringsource",
};

/* "networkit/profiling/stat.pyx":11
 * from libcpp.utility cimport pair
 * 
 * ctypedef uint64_t count             # <<<<<<<<<<<<<<
 * 
 * from . import job
 */
typedef uint64_t __pyx_t_9networkit_9profiling_4stat_count;

/*--- Type declarations ---*/
struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run;
struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct_1_run;

/* "networkit/profiling/stat.pyx":86
 * 		self.__params = params
 * 
 * 	def run(self):             # <<<<<<<<<<<<<<
 * 		""" computation """
 * 		(sample, sampleSorted, sampleRanked, calculatePie) = self.__params
 */
struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run {
  PyObject_HEAD
  PyObject *__pyx_v_IQR;
  PyObject *__pyx_v_Q1;
  PyObject *__pyx_v_Q3;
  PyObject *__pyx_v_absoluteFrequenciesHistogram;
  PyObject *__pyx_v_arithmeticMean;
  PyObject *__pyx_v_besselsCorrection;
  PyObject *__pyx_v_funcErf;
  PyObject *__pyx_v_funcGamma;
  PyObject *__pyx_v_funcIncompleteGamma;
  PyObject *__pyx_v_funcMomentum;
  PyObject *__pyx_v_intervalsHistogram;
  PyObject *__pyx_v_max;
  PyObject *__pyx_v_median;
  PyObject *__pyx_v_min;
  Py_ssize_t __pyx_v_n;
  PyObject *__pyx_v_s_n;
  PyObject *__pyx_v_sample;
  PyObject *__pyx_v_sampleRange;
  PyObject *__pyx_v_sampleSorted;
};


/* "networkit/profiling/stat.pyx":487
 * 
 * 
 * 	def run(self):             # <<<<<<<<<<<<<<
 * 		""" computation """
 * 		(nameB, sample_1, sampleRanked_1, stat_1, sample_2, sampleRanked_2, stat_2) = self.__params
 */
struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct_1_run {
  PyObject_HEAD
  Py_ssize_t __pyx_v_n;
  PyObject *__pyx_v_sample_1;
  PyObject *__pyx_v_sample_2;
  PyObject *__pyx_v_stat_1;
  PyObject *__pyx_v_stat_2;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_SubtractObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* pyobject_as_double.proto */
static double __Pyx__PyObject_AsDouble(PyObject* obj);
#if CYTHON_COMPILING_IN_PYPY
#define __Pyx_PyObject_AsDouble(obj)\
(likely(PyFloat_CheckExact(obj)) ? PyFloat_AS_DOUBLE(obj) :\
 likely(PyInt_CheckExact(obj)) ?\
 PyFloat_AsDouble(obj) : __Pyx__PyObject_AsDouble(obj))
#else
#define __Pyx_PyObject_AsDouble(obj)\
((likely(PyFloat_CheckExact(obj))) ?\
 PyFloat_AS_DOUBLE(obj) : __Pyx__PyObject_AsDouble(obj))
#endif

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_NeObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_TrueDivideObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_TrueDivideObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceTrueDivide(op1, op2) : PyNumber_TrueDivide(op1, op2))
#endif

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyFloatBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_AddObjC(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyFloat_AddObjC(op1, op2, floatval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* py_abs.proto */
#if CYTHON_USE_PYLONG_INTERNALS
static PyObject *__Pyx_PyLong_AbsNeg(PyObject *num);
#define __Pyx_PyNumber_Absolute(x)\
    ((likely(PyLong_CheckExact(x))) ?\
         (likely(Py_SIZE(x) >= 0) ? (Py_INCREF(x), (x)) : __Pyx_PyLong_AbsNeg(x)) :\
         PyNumber_Absolute(x))
#else
#define __Pyx_PyNumber_Absolute(x)  PyNumber_Absolute(x)
#endif

/* PyFloatBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_TrueDivideCObj(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyFloat_TrueDivideCObj(op1, op2, floatval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceTrueDivide(op1, op2) : PyNumber_TrueDivide(op1, op2))
#endif

/* PyFloatBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_AddCObj(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyFloat_AddCObj(op1, op2, floatval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractCObj(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_SubtractCObj(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddCObj(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddCObj(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_Check(obj)  (__Pyx_TypeCheck(obj, __pyx_CyFunctionType))
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* IncludeStringH.proto */
#include <string.h>

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* SetNameInClass.proto */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? _PyDict_SetItem_KnownHash(ns, name, value, ((PyASCIIObject *) name)->hash) : PyObject_SetItem(ns, name, value))
#elif CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? PyDict_SetItem(ns, name, value) : PyObject_SetItem(ns, name, value))
#else
#define __Pyx_SetNameInClass(ns, name, value)  PyObject_SetItem(ns, name, value)
#endif

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE uint64_t __Pyx_PyInt_As_uint64_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libc.stdint' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'networkit.profiling.stat' */
static PyTypeObject *__pyx_ptype_9networkit_9profiling_4stat___pyx_scope_struct__run = 0;
static PyTypeObject *__pyx_ptype_9networkit_9profiling_4stat___pyx_scope_struct_1_run = 0;
static std::pair<double,__pyx_t_9networkit_9profiling_4stat_count>  __pyx_convert_pair_from_py_double__and___pyx_t_9networkit_9profiling_4stat_count(PyObject *); /*proto*/
static PyObject *__pyx_convert_vector_to_py_double(const std::vector<double>  &); /*proto*/
static std::vector<double>  __pyx_convert_vector_from_py_double(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "networkit.profiling.stat"
extern int __pyx_module_is_main_networkit__profiling__stat;
int __pyx_module_is_main_networkit__profiling__stat = 0;

/* Implementation of 'networkit.profiling.stat' */
static PyObject *__pyx_builtin_ImportError;
static PyObject *__pyx_builtin_range;
static const char __pyx_k_H[] = "H";
static const char __pyx_k_e[] = "e";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_j[] = "j";
static const char __pyx_k_k[] = "k";
static const char __pyx_k_n[] = "n";
static const char __pyx_k_p[] = "p";
static const char __pyx_k_s[] = "s";
static const char __pyx_k_t[] = "t";
static const char __pyx_k_w[] = "w";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_Q1[] = "Q1";
static const char __pyx_k_Q3[] = "Q3";
static const char __pyx_k_a1[] = "a1";
static const char __pyx_k_a2[] = "a2";
static const char __pyx_k_a3[] = "a3";
static const char __pyx_k_a4[] = "a4";
static const char __pyx_k_a5[] = "a5";
static const char __pyx_k_ln[] = "ln";
static const char __pyx_k_pi[] = "pi";
static const char __pyx_k_sc[] = "sc";
static const char __pyx_k_IQM[] = "IQM";
static const char __pyx_k_IQR[] = "IQR";
static const char __pyx_k_Job[] = "Job";
static const char __pyx_k_Max[] = "Max";
static const char __pyx_k_Min[] = "Min";
static const char __pyx_k_Pie[] = "Pie";
static const char __pyx_k__79[] = "";
static const char __pyx_k__80[] = "*";
static const char __pyx_k_c_v[] = "c_v";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_exp[] = "exp";
static const char __pyx_k_fig[] = "fig";
static const char __pyx_k_job[] = "job";
static const char __pyx_k_max[] = "max";
static const char __pyx_k_min[] = "min";
static const char __pyx_k_nan[] = "nan";
static const char __pyx_k_nom[] = "nom";
static const char __pyx_k_plt[] = "plt";
static const char __pyx_k_pow[] = "pow";
static const char __pyx_k_run[] = "run";
static const char __pyx_k_s_n[] = "s_n";
static const char __pyx_k_sum[] = "sum";
static const char __pyx_k_Mode[] = "Mode";
static const char __pyx_k_Size[] = "Size";
static const char __pyx_k_Stat[] = "Stat";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_math[] = "math";
static const char __pyx_k_mode[] = "mode";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_sign[] = "sign";
static const char __pyx_k_sqrt[] = "sqrt";
static const char __pyx_k_summ[] = "summ";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_Paths[] = "Paths";
static const char __pyx_k_Shape[] = "Shape";
static const char __pyx_k_Value[] = "Value";
static const char __pyx_k_alpha[] = "alpha";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_denom[] = "denom";
static const char __pyx_k_floor[] = "floor";
static const char __pyx_k_image[] = "image";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_k_Bin[] = "k_Bin";
static const char __pyx_k_nameB[] = "nameB";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_sort2[] = "sort2";
static const char __pyx_k_state[] = "state";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_Median[] = "Median";
static const char __pyx_k_extent[] = "extent";
static const char __pyx_k_figure[] = "figure";
static const char __pyx_k_helper[] = "helper";
static const char __pyx_k_hexbin[] = "hexbin";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_k_real[] = "k_real";
static const char __pyx_k_length[] = "length";
static const char __pyx_k_median[] = "median";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_params[] = "params";
static const char __pyx_k_ranked[] = "ranked";
static const char __pyx_k_result[] = "result";
static const char __pyx_k_sample[] = "sample";
static const char __pyx_k_sorted[] = "sorted";
static const char __pyx_k_stat_1[] = "stat_1";
static const char __pyx_k_stat_2[] = "stat_2";
static const char __pyx_k_Binning[] = "Binning";
static const char __pyx_k_Offsets[] = "Offsets";
static const char __pyx_k_cutSize[] = "cutSize";
static const char __pyx_k_funcErf[] = "funcErf";
static const char __pyx_k_funcIQR[] = "funcIQR";
static const char __pyx_k_funcMax[] = "funcMax";
static const char __pyx_k_funcMin[] = "funcMin";
static const char __pyx_k_funcPie[] = "funcPie";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_results[] = "results";
static const char __pyx_k_support[] = "support";
static const char __pyx_k_Kurtosis[] = "Kurtosis";
static const char __pyx_k_Location[] = "Location";
static const char __pyx_k_Stat_run[] = "Stat.run";
static const char __pyx_k_Variance[] = "Variance";
static const char __pyx_k_c_v_Rank[] = "c_v_Rank";
static const char __pyx_k_copysign[] = "copysign";
static const char __pyx_k_cutValue[] = "cutValue";
static const char __pyx_k_funcMode[] = "funcMode";
static const char __pyx_k_gridsize[] = "gridsize";
static const char __pyx_k_have_plt[] = "have_plt";
static const char __pyx_k_kurtosis[] = "kurtosis";
static const char __pyx_k_midRange[] = "midRange";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_s_n_Rank[] = "s_n_Rank";
static const char __pyx_k_sample_1[] = "sample_1";
static const char __pyx_k_sample_2[] = "sample_2";
static const char __pyx_k_variance[] = "variance";
static const char __pyx_k_Grid_Size[] = "Grid Size";
static const char __pyx_k_Mid_Range[] = "Mid-Range";
static const char __pyx_k_cubicMean[] = "cubicMean";
static const char __pyx_k_funcGamma[] = "funcGamma";
static const char __pyx_k_get_array[] = "get_array";
static const char __pyx_k_get_paths[] = "get_paths";
static const char __pyx_k_intervals[] = "intervals";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_Covariance[] = "Covariance";
static const char __pyx_k_Cubic_Mean[] = "Cubic Mean";
static const char __pyx_k_Dispersion[] = "Dispersion";
static const char __pyx_k_Number_CDF[] = "Number CDF";
static const char __pyx_k_Properties[] = "Properties";
static const char __pyx_k_Skewness_M[] = "Skewness M";
static const char __pyx_k_comulative[] = "comulative";
static const char __pyx_k_covariance[] = "covariance";
static const char __pyx_k_funcPValue[] = "funcPValue";
static const char __pyx_k_k_Bins_CDF[] = "k_Bins_CDF";
static const char __pyx_k_lowerBound[] = "lowerBound";
static const char __pyx_k_matplotlib[] = "matplotlib";
static const char __pyx_k_upperBound[] = "upperBound";
static const char __pyx_k_Correlation[] = "Correlation";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_Skewness_YP[] = "Skewness YP";
static const char __pyx_k_Stat___init[] = "Stat.__init__";
static const char __pyx_k_commulative[] = "commulative";
static const char __pyx_k_frequencies[] = "frequencies";
static const char __pyx_k_get_offsets[] = "get_offsets";
static const char __pyx_k_hoelderMean[] = "hoelderMean";
static const char __pyx_k_sampleRange[] = "sampleRange";
static const char __pyx_k_skewness_yp[] = "skewness_yp";
static const char __pyx_k_skewnewss_m[] = "skewnewss_m";
static const char __pyx_k_1st_Quartile[] = "1st Quartile";
static const char __pyx_k_3rd_Quartile[] = "3rd Quartile";
static const char __pyx_k_Distribution[] = "Distribution";
static const char __pyx_k_Sample_Range[] = "Sample Range";
static const char __pyx_k_Stat__params[] = "_Stat__params";
static const char __pyx_k_calculatePie[] = "calculatePie";
static const char __pyx_k_funcKurtosis[] = "funcKurtosis";
static const char __pyx_k_funcMidRange[] = "funcMidRange";
static const char __pyx_k_funcMomentum[] = "funcMomentum";
static const char __pyx_k_funcVariance[] = "funcVariance";
static const char __pyx_k_harmonicMean[] = "harmonicMean";
static const char __pyx_k_intervalsCDF[] = "intervalsCDF";
static const char __pyx_k_numberOfBins[] = "numberOfBins";
static const char __pyx_k_result_lower[] = "result_lower";
static const char __pyx_k_result_upper[] = "result_upper";
static const char __pyx_k_sampleRanked[] = "sampleRanked";
static const char __pyx_k_sampleSorted[] = "sampleSorted";
static const char __pyx_k_Harmonic_Mean[] = "Harmonic Mean";
static const char __pyx_k_Intervals_CDF[] = "Intervals CDF";
static const char __pyx_k_Max_Frequency[] = "Max Frequency";
static const char __pyx_k_Outlier_Lower[] = "Outlier (Lower)";
static const char __pyx_k_Outlier_Upper[] = "Outlier (Upper)";
static const char __pyx_k_Variance_Rank[] = "Variance (Rank)";
static const char __pyx_k_criticalValue[] = "criticalValue";
static const char __pyx_k_funcIntervals[] = "funcIntervals";
static const char __pyx_k_funcSkewnessM[] = "funcSkewnessM";
static const char __pyx_k_quadraticMean[] = "quadraticMean";
static const char __pyx_k_variance_Rank[] = "variance_Rank";
static const char __pyx_k_Quadratic_Mean[] = "Quadratic Mean";
static const char __pyx_k_arithmeticMean[] = "arithmeticMean";
static const char __pyx_k_funcCovariance[] = "funcCovariance";
static const char __pyx_k_funcHexBinning[] = "funcHexBinning";
static const char __pyx_k_funcSkewnessYP[] = "funcSkewnessYP";
static const char __pyx_k_sampleRanked_1[] = "sampleRanked_1";
static const char __pyx_k_sampleRanked_2[] = "sampleRanked_2";
static const char __pyx_k_Arithmetic_Mean[] = "Arithmetic Mean";
static const char __pyx_k_Correlation_run[] = "Correlation.run";
static const char __pyx_k_Covariance_Rank[] = "Covariance (Rank)";
static const char __pyx_k_funcSampleRange[] = "funcSampleRange";
static const char __pyx_k_s_n_uncorrected[] = "s_n_uncorrected";
static const char __pyx_k_Number_Histogram[] = "Number Histogram";
static const char __pyx_k_arithmeticMean_1[] = "arithmeticMean_1";
static const char __pyx_k_arithmeticMean_2[] = "arithmeticMean_2";
static const char __pyx_k_covarianceRanked[] = "covarianceRanked";
static const char __pyx_k_degreesOfFreedom[] = "degreesOfFreedom";
static const char __pyx_k_funcNumberOfBins[] = "funcNumberOfBins";
static const char __pyx_k_k_Bins_Histogram[] = "k_Bins_Histogram";
static const char __pyx_k_besselsCorrection[] = "besselsCorrection";
static const char __pyx_k_funcAlphaQuartile[] = "funcAlphaQuartile";
static const char __pyx_k_funcJoinEmptyBins[] = "funcJoinEmptyBins";
static const char __pyx_k_funcLowerOutliers[] = "funcLowerOutliers";
static const char __pyx_k_funcUpperOutliers[] = "funcUpperOutliers";
static const char __pyx_k_matplotlib_pyplot[] = "matplotlib.pyplot";
static const char __pyx_k_Correlation___init[] = "Correlation.__init__";
static const char __pyx_k_Interquartile_Mean[] = "Interquartile Mean";
static const char __pyx_k_Standard_Deviation[] = "Standard Deviation";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_intervalsHistogram[] = "intervalsHistogram";
static const char __pyx_k_Bessel_s_Correction[] = "Bessel's Correction";
static const char __pyx_k_Correlation__params[] = "_Correlation__params";
static const char __pyx_k_Interquartile_Range[] = "Interquartile Range";
static const char __pyx_k_Intervals_Histogram[] = "Intervals Histogram";
static const char __pyx_k_absoluteFrequencies[] = "absoluteFrequencies";
static const char __pyx_k_arithmeticMean_Rank[] = "arithmeticMean_Rank";
static const char __pyx_k_funcIncompleteGamma[] = "funcIncompleteGamma";
static const char __pyx_k_relativeFrequencies[] = "relativeFrequencies";
static const char __pyx_k_Absolute_Frequencies[] = "Absolute Frequencies";
static const char __pyx_k_Arithmetic_Mean_Rank[] = "Arithmetic Mean (Rank)";
static const char __pyx_k_Uncorrected_Variance[] = "Uncorrected Variance";
static const char __pyx_k_funcAlphaTrimmedMean[] = "funcAlphaTrimmedMean";
static const char __pyx_k_s_n_Rank_uncorrected[] = "s_n_Rank_uncorrected";
static const char __pyx_k_variance_uncorrected[] = "variance_uncorrected";
static const char __pyx_k_funcBesselsCorrection[] = "funcBesselsCorrection";
static const char __pyx_k_funcStandardDeviation[] = "funcStandardDeviation";
static const char __pyx_k_MissingDependencyError[] = "MissingDependencyError";
static const char __pyx_k_absoluteFrequenciesCDF[] = "absoluteFrequenciesCDF";
static const char __pyx_k_funcArithmeticMeanRank[] = "funcArithmeticMeanRank";
static const char __pyx_k_funcDistributionNormal[] = "funcDistributionNormal";
static const char __pyx_k_relativeFrequenciesCDF[] = "relativeFrequenciesCDF";
static const char __pyx_k_Standard_Deviation_Rank[] = "Standard Deviation (Rank)";
static const char __pyx_k_Stat_run_locals_funcErf[] = "Stat.run.<locals>.funcErf";
static const char __pyx_k_Stat_run_locals_funcIQR[] = "Stat.run.<locals>.funcIQR";
static const char __pyx_k_Stat_run_locals_funcMax[] = "Stat.run.<locals>.funcMax";
static const char __pyx_k_Stat_run_locals_funcMin[] = "Stat.run.<locals>.funcMin";
static const char __pyx_k_Stat_run_locals_funcPie[] = "Stat.run.<locals>.funcPie";
static const char __pyx_k_funcUncorrectedVariance[] = "funcUncorrectedVariance";
static const char __pyx_k_Absolute_Frequencies_CDF[] = "Absolute Frequencies CDF";
static const char __pyx_k_Coefficient_Of_Variation[] = "Coefficient Of Variation";
static const char __pyx_k_Relative_Frequencies_CDF[] = "Relative Frequencies CDF";
static const char __pyx_k_Stat_run_locals_funcMode[] = "Stat.run.<locals>.funcMode";
static const char __pyx_k_networkit_profiling_stat[] = "networkit.profiling.stat";
static const char __pyx_k_Stat_run_locals_funcGamma[] = "Stat.run.<locals>.funcGamma";
static const char __pyx_k_Uncorrected_Variance_Rank[] = "Uncorrected Variance (Rank)";
static const char __pyx_k_variance_Rank_uncorrected[] = "variance_Rank_uncorrected";
static const char __pyx_k_Stat_run_locals_funcPValue[] = "Stat.run.<locals>.funcPValue";
static const char __pyx_k_funcBinAbsoluteFrequencies[] = "funcBinAbsoluteFrequencies";
static const char __pyx_k_funcBinRelativeFrequencies[] = "funcBinRelativeFrequencies";
static const char __pyx_k_funcCoefficientOfVariation[] = "funcCoefficientOfVariation";
static const char __pyx_k_sample_sizes_are_not_equal[] = "sample sizes are not equal";
static const char __pyx_k_Stat_run_locals_hoelderMean[] = "Stat.run.<locals>.hoelderMean";
static const char __pyx_k_funcDistributionExponential[] = "funcDistributionExponential";
static const char __pyx_k_Stat_run_locals_funcKurtosis[] = "Stat.run.<locals>.funcKurtosis";
static const char __pyx_k_Stat_run_locals_funcMidRange[] = "Stat.run.<locals>.funcMidRange";
static const char __pyx_k_Stat_run_locals_funcMomentum[] = "Stat.run.<locals>.funcMomentum";
static const char __pyx_k_Stat_run_locals_funcVariance[] = "Stat.run.<locals>.funcVariance";
static const char __pyx_k_absoluteFrequenciesHistogram[] = "absoluteFrequenciesHistogram";
static const char __pyx_k_networkit_profiling_stat_pyx[] = "networkit/profiling/stat.pyx";
static const char __pyx_k_relativeFrequenciesHistogram[] = "relativeFrequenciesHistogram";
static const char __pyx_k_Coefficient_Of_Variation_Rank[] = "Coefficient Of Variation (Rank)";
static const char __pyx_k_Stat_run_locals_funcIntervals[] = "Stat.run.<locals>.funcIntervals";
static const char __pyx_k_Stat_run_locals_funcSkewnessM[] = "Stat.run.<locals>.funcSkewnessM";
static const char __pyx_k_Absolute_Frequencies_Histogram[] = "Absolute Frequencies Histogram";
static const char __pyx_k_Relative_Frequencies_Histogram[] = "Relative Frequencies Histogram";
static const char __pyx_k_Stat_run_locals_funcSkewnessYP[] = "Stat.run.<locals>.funcSkewnessYP";
static const char __pyx_k_Uncorrected_Standard_Deviation[] = "Uncorrected Standard Deviation";
static const char __pyx_k_correlation_computation_object[] = " correlation computation object ";
static const char __pyx_k_funcNumberOfBinsChiSquaredTest[] = "funcNumberOfBinsChiSquaredTest";
static const char __pyx_k_statistical_computation_object[] = " statistical computation object ";
static const char __pyx_k_uncorrectedStandardDeviation_1[] = "uncorrectedStandardDeviation_1";
static const char __pyx_k_uncorrectedStandardDeviation_2[] = "uncorrectedStandardDeviation_2";
static const char __pyx_k_Stat_run_locals_funcSampleRange[] = "Stat.run.<locals>.funcSampleRange";
static const char __pyx_k_Correlation_run_locals_funcCovar[] = "Correlation.run.<locals>.funcCovariance";
static const char __pyx_k_Correlation_run_locals_funcFechn[] = "Correlation.run.<locals>.funcFechnersCorrelationCoefficent";
static const char __pyx_k_Correlation_run_locals_funcHexBi[] = "Correlation.run.<locals>.funcHexBinning";
static const char __pyx_k_Correlation_run_locals_funcPears[] = "Correlation.run.<locals>.funcPearsonsCorrelationCoefficient";
static const char __pyx_k_Fechner_s_Correlation_Coefficien[] = "Fechner's Correlation Coefficient";
static const char __pyx_k_Pearson_s_Correlation_Coefficien[] = "Pearson's Correlation Coefficient";
static const char __pyx_k_Spearman_s_Rank_Correlation_Coef[] = "Spearman's Rank Correlation Coefficient";
static const char __pyx_k_Stat_run_locals_funcAlphaQuartil[] = "Stat.run.<locals>.funcAlphaQuartile";
static const char __pyx_k_Stat_run_locals_funcAlphaTrimmed[] = "Stat.run.<locals>.funcAlphaTrimmedMean";
static const char __pyx_k_Stat_run_locals_funcArithmeticMe[] = "Stat.run.<locals>.funcArithmeticMeanRank";
static const char __pyx_k_Stat_run_locals_funcBesselsCorre[] = "Stat.run.<locals>.funcBesselsCorrection";
static const char __pyx_k_Stat_run_locals_funcBinAbsoluteF[] = "Stat.run.<locals>.funcBinAbsoluteFrequencies";
static const char __pyx_k_Stat_run_locals_funcBinRelativeF[] = "Stat.run.<locals>.funcBinRelativeFrequencies";
static const char __pyx_k_Stat_run_locals_funcCoefficientO[] = "Stat.run.<locals>.funcCoefficientOfVariation";
static const char __pyx_k_Stat_run_locals_funcDistribution[] = "Stat.run.<locals>.funcDistributionNormal";
static const char __pyx_k_Stat_run_locals_funcIncompleteGa[] = "Stat.run.<locals>.funcIncompleteGamma";
static const char __pyx_k_Stat_run_locals_funcJoinEmptyBin[] = "Stat.run.<locals>.funcJoinEmptyBins";
static const char __pyx_k_Stat_run_locals_funcLowerOutlier[] = "Stat.run.<locals>.funcLowerOutliers";
static const char __pyx_k_Stat_run_locals_funcNumberOfBins[] = "Stat.run.<locals>.funcNumberOfBins";
static const char __pyx_k_Stat_run_locals_funcStandardDevi[] = "Stat.run.<locals>.funcStandardDeviation";
static const char __pyx_k_Stat_run_locals_funcUncorrectedV[] = "Stat.run.<locals>.funcUncorrectedVariance";
static const char __pyx_k_Stat_run_locals_funcUpperOutlier[] = "Stat.run.<locals>.funcUpperOutliers";
static const char __pyx_k_Uncorrected_Coefficient_Of_Varia[] = "Uncorrected Coefficient Of Variation";
static const char __pyx_k_Uncorrected_Standard_Deviation_R[] = "Uncorrected Standard Deviation (Rank)";
static const char __pyx_k_funcDistributionExponentialInver[] = "funcDistributionExponentialInverse";
static const char __pyx_k_funcFechnersCorrelationCoefficen[] = "funcFechnersCorrelationCoefficent";
static const char __pyx_k_funcPearsonsCorrelationCoefficie[] = "funcPearsonsCorrelationCoefficient";
static const char __pyx_k_Stat_run_locals_funcDistribution_2[] = "Stat.run.<locals>.funcDistributionExponential";
static const char __pyx_k_Stat_run_locals_funcDistribution_3[] = "Stat.run.<locals>.funcDistributionExponentialInverse";
static const char __pyx_k_Stat_run_locals_funcNumberOfBins_2[] = "Stat.run.<locals>.funcNumberOfBinsChiSquaredTest";
static const char __pyx_k_Uncorrected_Coefficient_Of_Varia_2[] = "Uncorrected Coefficient Of Variation (Rank)";
static PyObject *__pyx_kp_u_1st_Quartile;
static PyObject *__pyx_kp_u_3rd_Quartile;
static PyObject *__pyx_kp_u_Absolute_Frequencies;
static PyObject *__pyx_kp_u_Absolute_Frequencies_CDF;
static PyObject *__pyx_kp_u_Absolute_Frequencies_Histogram;
static PyObject *__pyx_kp_u_Arithmetic_Mean;
static PyObject *__pyx_kp_u_Arithmetic_Mean_Rank;
static PyObject *__pyx_kp_u_Bessel_s_Correction;
static PyObject *__pyx_n_u_Binning;
static PyObject *__pyx_kp_u_Coefficient_Of_Variation;
static PyObject *__pyx_kp_u_Coefficient_Of_Variation_Rank;
static PyObject *__pyx_n_s_Correlation;
static PyObject *__pyx_n_u_Correlation;
static PyObject *__pyx_n_s_Correlation___init;
static PyObject *__pyx_n_s_Correlation__params;
static PyObject *__pyx_n_s_Correlation_run;
static PyObject *__pyx_n_s_Correlation_run_locals_funcCovar;
static PyObject *__pyx_n_s_Correlation_run_locals_funcFechn;
static PyObject *__pyx_n_s_Correlation_run_locals_funcHexBi;
static PyObject *__pyx_n_s_Correlation_run_locals_funcPears;
static PyObject *__pyx_n_u_Covariance;
static PyObject *__pyx_kp_u_Covariance_Rank;
static PyObject *__pyx_kp_u_Cubic_Mean;
static PyObject *__pyx_n_u_Dispersion;
static PyObject *__pyx_n_u_Distribution;
static PyObject *__pyx_kp_u_Fechner_s_Correlation_Coefficien;
static PyObject *__pyx_kp_u_Grid_Size;
static PyObject *__pyx_n_s_H;
static PyObject *__pyx_kp_u_Harmonic_Mean;
static PyObject *__pyx_n_s_IQM;
static PyObject *__pyx_n_s_IQR;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_kp_u_Interquartile_Mean;
static PyObject *__pyx_kp_u_Interquartile_Range;
static PyObject *__pyx_kp_u_Intervals_CDF;
static PyObject *__pyx_kp_u_Intervals_Histogram;
static PyObject *__pyx_n_s_Job;
static PyObject *__pyx_n_u_Kurtosis;
static PyObject *__pyx_n_u_Location;
static PyObject *__pyx_n_u_Max;
static PyObject *__pyx_kp_u_Max_Frequency;
static PyObject *__pyx_n_u_Median;
static PyObject *__pyx_kp_u_Mid_Range;
static PyObject *__pyx_n_u_Min;
static PyObject *__pyx_n_s_MissingDependencyError;
static PyObject *__pyx_n_u_Mode;
static PyObject *__pyx_kp_u_Number_CDF;
static PyObject *__pyx_kp_u_Number_Histogram;
static PyObject *__pyx_n_u_Offsets;
static PyObject *__pyx_kp_u_Outlier_Lower;
static PyObject *__pyx_kp_u_Outlier_Upper;
static PyObject *__pyx_n_u_Paths;
static PyObject *__pyx_kp_u_Pearson_s_Correlation_Coefficien;
static PyObject *__pyx_n_u_Pie;
static PyObject *__pyx_n_u_Properties;
static PyObject *__pyx_n_s_Q1;
static PyObject *__pyx_n_s_Q3;
static PyObject *__pyx_kp_u_Quadratic_Mean;
static PyObject *__pyx_kp_u_Relative_Frequencies_CDF;
static PyObject *__pyx_kp_u_Relative_Frequencies_Histogram;
static PyObject *__pyx_kp_u_Sample_Range;
static PyObject *__pyx_n_u_Shape;
static PyObject *__pyx_n_u_Size;
static PyObject *__pyx_kp_u_Skewness_M;
static PyObject *__pyx_kp_u_Skewness_YP;
static PyObject *__pyx_kp_u_Spearman_s_Rank_Correlation_Coef;
static PyObject *__pyx_kp_u_Standard_Deviation;
static PyObject *__pyx_kp_u_Standard_Deviation_Rank;
static PyObject *__pyx_n_s_Stat;
static PyObject *__pyx_n_u_Stat;
static PyObject *__pyx_n_s_Stat___init;
static PyObject *__pyx_n_s_Stat__params;
static PyObject *__pyx_n_s_Stat_run;
static PyObject *__pyx_n_s_Stat_run_locals_funcAlphaQuartil;
static PyObject *__pyx_n_s_Stat_run_locals_funcAlphaTrimmed;
static PyObject *__pyx_n_s_Stat_run_locals_funcArithmeticMe;
static PyObject *__pyx_n_s_Stat_run_locals_funcBesselsCorre;
static PyObject *__pyx_n_s_Stat_run_locals_funcBinAbsoluteF;
static PyObject *__pyx_n_s_Stat_run_locals_funcBinRelativeF;
static PyObject *__pyx_n_s_Stat_run_locals_funcCoefficientO;
static PyObject *__pyx_n_s_Stat_run_locals_funcDistribution;
static PyObject *__pyx_n_s_Stat_run_locals_funcDistribution_2;
static PyObject *__pyx_n_s_Stat_run_locals_funcDistribution_3;
static PyObject *__pyx_n_s_Stat_run_locals_funcErf;
static PyObject *__pyx_n_s_Stat_run_locals_funcGamma;
static PyObject *__pyx_n_s_Stat_run_locals_funcIQR;
static PyObject *__pyx_n_s_Stat_run_locals_funcIncompleteGa;
static PyObject *__pyx_n_s_Stat_run_locals_funcIntervals;
static PyObject *__pyx_n_s_Stat_run_locals_funcJoinEmptyBin;
static PyObject *__pyx_n_s_Stat_run_locals_funcKurtosis;
static PyObject *__pyx_n_s_Stat_run_locals_funcLowerOutlier;
static PyObject *__pyx_n_s_Stat_run_locals_funcMax;
static PyObject *__pyx_n_s_Stat_run_locals_funcMidRange;
static PyObject *__pyx_n_s_Stat_run_locals_funcMin;
static PyObject *__pyx_n_s_Stat_run_locals_funcMode;
static PyObject *__pyx_n_s_Stat_run_locals_funcMomentum;
static PyObject *__pyx_n_s_Stat_run_locals_funcNumberOfBins;
static PyObject *__pyx_n_s_Stat_run_locals_funcNumberOfBins_2;
static PyObject *__pyx_n_s_Stat_run_locals_funcPValue;
static PyObject *__pyx_n_s_Stat_run_locals_funcPie;
static PyObject *__pyx_n_s_Stat_run_locals_funcSampleRange;
static PyObject *__pyx_n_s_Stat_run_locals_funcSkewnessM;
static PyObject *__pyx_n_s_Stat_run_locals_funcSkewnessYP;
static PyObject *__pyx_n_s_Stat_run_locals_funcStandardDevi;
static PyObject *__pyx_n_s_Stat_run_locals_funcUncorrectedV;
static PyObject *__pyx_n_s_Stat_run_locals_funcUpperOutlier;
static PyObject *__pyx_n_s_Stat_run_locals_funcVariance;
static PyObject *__pyx_n_s_Stat_run_locals_hoelderMean;
static PyObject *__pyx_kp_u_Uncorrected_Coefficient_Of_Varia;
static PyObject *__pyx_kp_u_Uncorrected_Coefficient_Of_Varia_2;
static PyObject *__pyx_kp_u_Uncorrected_Standard_Deviation;
static PyObject *__pyx_kp_u_Uncorrected_Standard_Deviation_R;
static PyObject *__pyx_kp_u_Uncorrected_Variance;
static PyObject *__pyx_kp_u_Uncorrected_Variance_Rank;
static PyObject *__pyx_n_u_Value;
static PyObject *__pyx_n_u_Variance;
static PyObject *__pyx_kp_u_Variance_Rank;
static PyObject *__pyx_n_s__79;
static PyObject *__pyx_n_s__80;
static PyObject *__pyx_n_s_a1;
static PyObject *__pyx_n_s_a2;
static PyObject *__pyx_n_s_a3;
static PyObject *__pyx_n_s_a4;
static PyObject *__pyx_n_s_a5;
static PyObject *__pyx_n_s_absoluteFrequencies;
static PyObject *__pyx_n_s_absoluteFrequenciesCDF;
static PyObject *__pyx_n_s_absoluteFrequenciesHistogram;
static PyObject *__pyx_n_s_alpha;
static PyObject *__pyx_n_s_arithmeticMean;
static PyObject *__pyx_n_s_arithmeticMean_1;
static PyObject *__pyx_n_s_arithmeticMean_2;
static PyObject *__pyx_n_s_arithmeticMean_Rank;
static PyObject *__pyx_n_s_besselsCorrection;
static PyObject *__pyx_n_s_c_v;
static PyObject *__pyx_n_s_c_v_Rank;
static PyObject *__pyx_n_s_calculatePie;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_commulative;
static PyObject *__pyx_n_s_comulative;
static PyObject *__pyx_n_s_copysign;
static PyObject *__pyx_kp_s_correlation_computation_object;
static PyObject *__pyx_n_s_covariance;
static PyObject *__pyx_n_s_covarianceRanked;
static PyObject *__pyx_n_s_criticalValue;
static PyObject *__pyx_n_s_cubicMean;
static PyObject *__pyx_n_s_cutSize;
static PyObject *__pyx_n_s_cutValue;
static PyObject *__pyx_n_s_degreesOfFreedom;
static PyObject *__pyx_n_s_denom;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_e;
static PyObject *__pyx_n_s_exp;
static PyObject *__pyx_n_s_extent;
static PyObject *__pyx_n_s_fig;
static PyObject *__pyx_n_s_figure;
static PyObject *__pyx_n_s_floor;
static PyObject *__pyx_n_s_frequencies;
static PyObject *__pyx_n_s_funcAlphaQuartile;
static PyObject *__pyx_n_s_funcAlphaTrimmedMean;
static PyObject *__pyx_n_s_funcArithmeticMeanRank;
static PyObject *__pyx_n_s_funcBesselsCorrection;
static PyObject *__pyx_n_s_funcBinAbsoluteFrequencies;
static PyObject *__pyx_n_s_funcBinRelativeFrequencies;
static PyObject *__pyx_n_s_funcCoefficientOfVariation;
static PyObject *__pyx_n_s_funcCovariance;
static PyObject *__pyx_n_s_funcDistributionExponential;
static PyObject *__pyx_n_s_funcDistributionExponentialInver;
static PyObject *__pyx_n_s_funcDistributionNormal;
static PyObject *__pyx_n_s_funcErf;
static PyObject *__pyx_n_s_funcFechnersCorrelationCoefficen;
static PyObject *__pyx_n_s_funcGamma;
static PyObject *__pyx_n_s_funcHexBinning;
static PyObject *__pyx_n_s_funcIQR;
static PyObject *__pyx_n_s_funcIncompleteGamma;
static PyObject *__pyx_n_s_funcIntervals;
static PyObject *__pyx_n_s_funcJoinEmptyBins;
static PyObject *__pyx_n_s_funcKurtosis;
static PyObject *__pyx_n_s_funcLowerOutliers;
static PyObject *__pyx_n_s_funcMax;
static PyObject *__pyx_n_s_funcMidRange;
static PyObject *__pyx_n_s_funcMin;
static PyObject *__pyx_n_s_funcMode;
static PyObject *__pyx_n_s_funcMomentum;
static PyObject *__pyx_n_s_funcNumberOfBins;
static PyObject *__pyx_n_s_funcNumberOfBinsChiSquaredTest;
static PyObject *__pyx_n_s_funcPValue;
static PyObject *__pyx_n_s_funcPearsonsCorrelationCoefficie;
static PyObject *__pyx_n_s_funcPie;
static PyObject *__pyx_n_s_funcSampleRange;
static PyObject *__pyx_n_s_funcSkewnessM;
static PyObject *__pyx_n_s_funcSkewnessYP;
static PyObject *__pyx_n_s_funcStandardDeviation;
static PyObject *__pyx_n_s_funcUncorrectedVariance;
static PyObject *__pyx_n_s_funcUpperOutliers;
static PyObject *__pyx_n_s_funcVariance;
static PyObject *__pyx_n_s_get_array;
static PyObject *__pyx_n_s_get_offsets;
static PyObject *__pyx_n_s_get_paths;
static PyObject *__pyx_n_s_gridsize;
static PyObject *__pyx_n_s_harmonicMean;
static PyObject *__pyx_n_s_have_plt;
static PyObject *__pyx_n_s_helper;
static PyObject *__pyx_n_s_hexbin;
static PyObject *__pyx_n_s_hoelderMean;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_image;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_intervals;
static PyObject *__pyx_n_s_intervalsCDF;
static PyObject *__pyx_n_s_intervalsHistogram;
static PyObject *__pyx_n_s_j;
static PyObject *__pyx_n_s_job;
static PyObject *__pyx_n_s_k;
static PyObject *__pyx_n_s_k_Bin;
static PyObject *__pyx_n_s_k_Bins_CDF;
static PyObject *__pyx_n_s_k_Bins_Histogram;
static PyObject *__pyx_n_s_k_real;
static PyObject *__pyx_n_s_kurtosis;
static PyObject *__pyx_n_s_length;
static PyObject *__pyx_n_s_ln;
static PyObject *__pyx_n_s_lowerBound;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_math;
static PyObject *__pyx_n_u_matplotlib;
static PyObject *__pyx_n_s_matplotlib_pyplot;
static PyObject *__pyx_n_s_max;
static PyObject *__pyx_n_s_median;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_midRange;
static PyObject *__pyx_n_s_min;
static PyObject *__pyx_n_s_mode;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_n;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_nameB;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_u_nan;
static PyObject *__pyx_n_s_networkit_profiling_stat;
static PyObject *__pyx_kp_s_networkit_profiling_stat_pyx;
static PyObject *__pyx_n_s_nom;
static PyObject *__pyx_n_s_numberOfBins;
static PyObject *__pyx_n_s_p;
static PyObject *__pyx_n_s_params;
static PyObject *__pyx_n_s_pi;
static PyObject *__pyx_n_s_plt;
static PyObject *__pyx_n_s_pow;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_quadraticMean;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_ranked;
static PyObject *__pyx_n_s_relativeFrequencies;
static PyObject *__pyx_n_s_relativeFrequenciesCDF;
static PyObject *__pyx_n_s_relativeFrequenciesHistogram;
static PyObject *__pyx_n_s_result;
static PyObject *__pyx_n_s_result_lower;
static PyObject *__pyx_n_s_result_upper;
static PyObject *__pyx_n_s_results;
static PyObject *__pyx_n_s_run;
static PyObject *__pyx_n_s_s;
static PyObject *__pyx_n_s_s_n;
static PyObject *__pyx_n_s_s_n_Rank;
static PyObject *__pyx_n_s_s_n_Rank_uncorrected;
static PyObject *__pyx_n_s_s_n_uncorrected;
static PyObject *__pyx_n_s_sample;
static PyObject *__pyx_n_s_sampleRange;
static PyObject *__pyx_n_s_sampleRanked;
static PyObject *__pyx_n_s_sampleRanked_1;
static PyObject *__pyx_n_s_sampleRanked_2;
static PyObject *__pyx_n_s_sampleSorted;
static PyObject *__pyx_n_s_sample_1;
static PyObject *__pyx_n_s_sample_2;
static PyObject *__pyx_kp_u_sample_sizes_are_not_equal;
static PyObject *__pyx_n_s_sc;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_sign;
static PyObject *__pyx_n_s_skewness_yp;
static PyObject *__pyx_n_s_skewnewss_m;
static PyObject *__pyx_n_s_sort2;
static PyObject *__pyx_n_s_sorted;
static PyObject *__pyx_n_s_sqrt;
static PyObject *__pyx_n_s_stat_1;
static PyObject *__pyx_n_s_stat_2;
static PyObject *__pyx_n_s_state;
static PyObject *__pyx_kp_s_statistical_computation_object;
static PyObject *__pyx_n_s_sum;
static PyObject *__pyx_n_s_summ;
static PyObject *__pyx_n_s_support;
static PyObject *__pyx_n_s_t;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_uncorrectedStandardDeviation_1;
static PyObject *__pyx_n_s_uncorrectedStandardDeviation_2;
static PyObject *__pyx_n_s_upperBound;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_variance;
static PyObject *__pyx_n_s_variance_Rank;
static PyObject *__pyx_n_s_variance_Rank_uncorrected;
static PyObject *__pyx_n_s_variance_uncorrected;
static PyObject *__pyx_n_s_w;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_pf_9networkit_9profiling_4stat_ranked(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_sample); /* proto */
static PyObject *__pyx_pf_9networkit_9profiling_4stat_2sort2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_sample); /* proto */
static PyObject *__pyx_pf_9networkit_9profiling_4stat_4sorted(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_sample); /* proto */
static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_params); /* proto */
static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_funcMin(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_2funcMax(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_4funcBesselsCorrection(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_6hoelderMean(PyObject *__pyx_self, PyObject *__pyx_v_sample, PyObject *__pyx_v_p); /* proto */
static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_8funcArithmeticMeanRank(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_10funcUncorrectedVariance(PyObject *__pyx_self, PyObject *__pyx_v_sample, PyObject *__pyx_v_arithmeticMean); /* proto */
static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_12funcVariance(PyObject *__pyx_self, PyObject *__pyx_v_variance_uncorrected); /* proto */
static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_14funcStandardDeviation(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_variance); /* proto */
static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_16funcCoefficientOfVariation(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s_n, PyObject *__pyx_v_arithmeticMean); /* proto */
static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_18funcAlphaQuartile(PyObject *__pyx_self, PyObject *__pyx_v_alpha); /* proto */
static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_20funcAlphaTrimmedMean(PyObject *__pyx_self, PyObject *__pyx_v_alpha); /* proto */
static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_22funcIQR(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_24funcSampleRange(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_26funcMidRange(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_28funcSkewnessYP(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_30funcMomentum(PyObject *__pyx_self, PyObject *__pyx_v_p); /* proto */
static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_32funcSkewnessM(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_34funcKurtosis(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_36funcNumberOfBins(PyObject *__pyx_self, PyObject *__pyx_v_commulative); /* proto */
static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_38funcIntervals(PyObject *__pyx_self, PyObject *__pyx_v_numberOfBins); /* proto */
static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_40funcBinAbsoluteFrequencies(PyObject *__pyx_self, PyObject *__pyx_v_numberOfBins, PyObject *__pyx_v_intervals, PyObject *__pyx_v_comulative); /* proto */
static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_42funcJoinEmptyBins(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_k_Bin, PyObject *__pyx_v_intervals, PyObject *__pyx_v_frequencies, PyObject *__pyx_v_commulative); /* proto */
static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_44funcBinRelativeFrequencies(PyObject *__pyx_self, PyObject *__pyx_v_absoluteFrequencies); /* proto */
static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_46funcMode(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_48funcLowerOutliers(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_50funcUpperOutliers(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_52funcPie(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_54funcErf(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_56funcDistributionNormal(PyObject *__pyx_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_58funcDistributionExponential(PyObject *__pyx_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_60funcDistributionExponentialInverse(PyObject *__pyx_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_62funcIncompleteGamma(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_64funcGamma(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_66funcPValue(PyObject *__pyx_self, PyObject *__pyx_v_criticalValue, PyObject *__pyx_v_degreesOfFreedom); /* proto */
static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_68funcNumberOfBinsChiSquaredTest(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_2run(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_9profiling_4stat_11Correlation___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_params); /* proto */
static PyObject *__pyx_pf_9networkit_9profiling_4stat_11Correlation_3run_funcCovariance(PyObject *__pyx_self, PyObject *__pyx_v_sample_1, PyObject *__pyx_v_arithmeticMean_1, PyObject *__pyx_v_sample_2, PyObject *__pyx_v_arithmeticMean_2); /* proto */
static PyObject *__pyx_pf_9networkit_9profiling_4stat_11Correlation_3run_2funcPearsonsCorrelationCoefficient(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_covariance, PyObject *__pyx_v_uncorrectedStandardDeviation_1, PyObject *__pyx_v_uncorrectedStandardDeviation_2); /* proto */
static PyObject *__pyx_pf_9networkit_9profiling_4stat_11Correlation_3run_4funcFechnersCorrelationCoefficent(PyObject *__pyx_self, PyObject *__pyx_v_arithmeticMean_1, PyObject *__pyx_v_arithmeticMean_2); /* proto */
static PyObject *__pyx_pf_9networkit_9profiling_4stat_11Correlation_3run_6funcHexBinning(PyObject *__pyx_self, PyObject *__pyx_v_sample_1, PyObject *__pyx_v_sample_2); /* proto */
static PyObject *__pyx_pf_9networkit_9profiling_4stat_11Correlation_2run(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_tp_new_9networkit_9profiling_4stat___pyx_scope_struct__run(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_9profiling_4stat___pyx_scope_struct_1_run(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float_0_0;
static PyObject *__pyx_float_0_5;
static PyObject *__pyx_float_1_0;
static PyObject *__pyx_float_1_5;
static PyObject *__pyx_float_0_25;
static PyObject *__pyx_float_0_75;
static PyObject *__pyx_float_10eneg_12;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_5;
static PyObject *__pyx_int_12;
static PyObject *__pyx_int_20;
static PyObject *__pyx_int_128;
static PyObject *__pyx_int_256;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__71;
static PyObject *__pyx_tuple__73;
static PyObject *__pyx_tuple__75;
static PyObject *__pyx_tuple__77;
static PyObject *__pyx_tuple__81;
static PyObject *__pyx_tuple__83;
static PyObject *__pyx_tuple__85;
static PyObject *__pyx_tuple__87;
static PyObject *__pyx_tuple__89;
static PyObject *__pyx_tuple__91;
static PyObject *__pyx_tuple__93;
static PyObject *__pyx_codeobj__2;
static PyObject *__pyx_codeobj__4;
static PyObject *__pyx_codeobj__6;
static PyObject *__pyx_codeobj__8;
static PyObject *__pyx_codeobj__10;
static PyObject *__pyx_codeobj__12;
static PyObject *__pyx_codeobj__14;
static PyObject *__pyx_codeobj__16;
static PyObject *__pyx_codeobj__18;
static PyObject *__pyx_codeobj__20;
static PyObject *__pyx_codeobj__22;
static PyObject *__pyx_codeobj__24;
static PyObject *__pyx_codeobj__26;
static PyObject *__pyx_codeobj__28;
static PyObject *__pyx_codeobj__30;
static PyObject *__pyx_codeobj__32;
static PyObject *__pyx_codeobj__34;
static PyObject *__pyx_codeobj__36;
static PyObject *__pyx_codeobj__38;
static PyObject *__pyx_codeobj__40;
static PyObject *__pyx_codeobj__42;
static PyObject *__pyx_codeobj__44;
static PyObject *__pyx_codeobj__46;
static PyObject *__pyx_codeobj__48;
static PyObject *__pyx_codeobj__50;
static PyObject *__pyx_codeobj__52;
static PyObject *__pyx_codeobj__54;
static PyObject *__pyx_codeobj__56;
static PyObject *__pyx_codeobj__58;
static PyObject *__pyx_codeobj__60;
static PyObject *__pyx_codeobj__62;
static PyObject *__pyx_codeobj__64;
static PyObject *__pyx_codeobj__66;
static PyObject *__pyx_codeobj__68;
static PyObject *__pyx_codeobj__70;
static PyObject *__pyx_codeobj__72;
static PyObject *__pyx_codeobj__74;
static PyObject *__pyx_codeobj__76;
static PyObject *__pyx_codeobj__78;
static PyObject *__pyx_codeobj__82;
static PyObject *__pyx_codeobj__84;
static PyObject *__pyx_codeobj__86;
static PyObject *__pyx_codeobj__88;
static PyObject *__pyx_codeobj__90;
static PyObject *__pyx_codeobj__92;
static PyObject *__pyx_codeobj__94;
/* Late includes */

/* "networkit/profiling/stat.pyx":30
 * 	void sort[Iter, Comp](Iter begin, Iter end, Comp compare) nogil
 * 
 * def ranked(sample):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Given a list of numbers, this function computes the rank of each value
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9profiling_4stat_1ranked(PyObject *__pyx_self, PyObject *__pyx_v_sample); /*proto*/
static char __pyx_doc_9networkit_9profiling_4stat_ranked[] = "\n\tGiven a list of numbers, this function computes the rank of each value\n\tand returns a list of ranks where result[i] is the rank of\n\tthe i-th element in the given sample.\n\tCurrently used in profiling.stat.\n\t";
static PyMethodDef __pyx_mdef_9networkit_9profiling_4stat_1ranked = {"ranked", (PyCFunction)__pyx_pw_9networkit_9profiling_4stat_1ranked, METH_O, __pyx_doc_9networkit_9profiling_4stat_ranked};
static PyObject *__pyx_pw_9networkit_9profiling_4stat_1ranked(PyObject *__pyx_self, PyObject *__pyx_v_sample) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ranked (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_9profiling_4stat_ranked(__pyx_self, ((PyObject *)__pyx_v_sample));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9profiling_4stat_ranked(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_sample) {
  std::vector<std::pair<double,__pyx_t_9networkit_9profiling_4stat_count> >  __pyx_v_helper;
  std::vector<double>  __pyx_v_result;
  PyObject *__pyx_v_i = NULL;
  double __pyx_v_value;
  double __pyx_v_summ;
  __pyx_t_9networkit_9profiling_4stat_count __pyx_v_length;
  PyObject *__pyx_v_j = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  std::vector<std::pair<double,__pyx_t_9networkit_9profiling_4stat_count> >  __pyx_t_2;
  std::vector<double>  __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  std::pair<double,__pyx_t_9networkit_9profiling_4stat_count>  __pyx_t_8;
  std::vector<std::pair<double,__pyx_t_9networkit_9profiling_4stat_count> > ::size_type __pyx_t_9;
  double __pyx_t_10;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  Py_ssize_t __pyx_t_13;
  PyObject *(*__pyx_t_14)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ranked", 0);

  /* "networkit/profiling/stat.pyx":37
 * 	Currently used in profiling.stat.
 * 	"""
 * 	cdef vector[pair[double, count]] helper = vector[pair[double, count]](len(sample))             # <<<<<<<<<<<<<<
 * 	cdef vector[double] result = vector[double](len(sample), 0)
 * 	for i in range(len(sample)):
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_sample); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 37, __pyx_L1_error)
  try {
    __pyx_t_2 = std::vector<std::pair<double,__pyx_t_9networkit_9profiling_4stat_count> > (__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 37, __pyx_L1_error)
  }
  __pyx_v_helper = __pyx_t_2;

  /* "networkit/profiling/stat.pyx":38
 * 	"""
 * 	cdef vector[pair[double, count]] helper = vector[pair[double, count]](len(sample))
 * 	cdef vector[double] result = vector[double](len(sample), 0)             # <<<<<<<<<<<<<<
 * 	for i in range(len(sample)):
 * 		helper[i] = <pair[double, count]?>(sample[i], i)
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_sample); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 38, __pyx_L1_error)
  try {
    __pyx_t_3 = std::vector<double> (__pyx_t_1, 0.0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 38, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_3;

  /* "networkit/profiling/stat.pyx":39
 * 	cdef vector[pair[double, count]] helper = vector[pair[double, count]](len(sample))
 * 	cdef vector[double] result = vector[double](len(sample), 0)
 * 	for i in range(len(sample)):             # <<<<<<<<<<<<<<
 * 		helper[i] = <pair[double, count]?>(sample[i], i)
 * 	sort(helper.begin(), helper.end())
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_sample); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 39, __pyx_L1_error)
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
    __pyx_t_4 = __pyx_t_5; __Pyx_INCREF(__pyx_t_4); __pyx_t_1 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 39, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 39, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 39, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 39, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 39, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 39, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 39, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "networkit/profiling/stat.pyx":40
 * 	cdef vector[double] result = vector[double](len(sample), 0)
 * 	for i in range(len(sample)):
 * 		helper[i] = <pair[double, count]?>(sample[i], i)             # <<<<<<<<<<<<<<
 * 	sort(helper.begin(), helper.end())
 * 	cdef double value = helper[0].first
 */
    __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_v_sample, __pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 40, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 40, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);
    __Pyx_INCREF(__pyx_v_i);
    __Pyx_GIVEREF(__pyx_v_i);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_i);
    __pyx_t_5 = 0;
    __pyx_t_8 = __pyx_convert_pair_from_py_double__and___pyx_t_9networkit_9profiling_4stat_count(__pyx_t_7); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 40, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_9 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 40, __pyx_L1_error)
    (__pyx_v_helper[__pyx_t_9]) = ((std::pair<double,__pyx_t_9networkit_9profiling_4stat_count> )__pyx_t_8);

    /* "networkit/profiling/stat.pyx":39
 * 	cdef vector[pair[double, count]] helper = vector[pair[double, count]](len(sample))
 * 	cdef vector[double] result = vector[double](len(sample), 0)
 * 	for i in range(len(sample)):             # <<<<<<<<<<<<<<
 * 		helper[i] = <pair[double, count]?>(sample[i], i)
 * 	sort(helper.begin(), helper.end())
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/profiling/stat.pyx":41
 * 	for i in range(len(sample)):
 * 		helper[i] = <pair[double, count]?>(sample[i], i)
 * 	sort(helper.begin(), helper.end())             # <<<<<<<<<<<<<<
 * 	cdef double value = helper[0].first
 * 	cdef double summ = 0.
 */
  Aux::Parallel::sort<std::vector<std::pair<double,__pyx_t_9networkit_9profiling_4stat_count> > ::iterator>(__pyx_v_helper.begin(), __pyx_v_helper.end());

  /* "networkit/profiling/stat.pyx":42
 * 		helper[i] = <pair[double, count]?>(sample[i], i)
 * 	sort(helper.begin(), helper.end())
 * 	cdef double value = helper[0].first             # <<<<<<<<<<<<<<
 * 	cdef double summ = 0.
 * 	cdef count length = 0
 */
  __pyx_t_10 = (__pyx_v_helper[0]).first;
  __pyx_v_value = __pyx_t_10;

  /* "networkit/profiling/stat.pyx":43
 * 	sort(helper.begin(), helper.end())
 * 	cdef double value = helper[0].first
 * 	cdef double summ = 0.             # <<<<<<<<<<<<<<
 * 	cdef count length = 0
 * 	for i in range(len(sample)):
 */
  __pyx_v_summ = 0.;

  /* "networkit/profiling/stat.pyx":44
 * 	cdef double value = helper[0].first
 * 	cdef double summ = 0.
 * 	cdef count length = 0             # <<<<<<<<<<<<<<
 * 	for i in range(len(sample)):
 * 		if value == helper[i].first:
 */
  __pyx_v_length = 0;

  /* "networkit/profiling/stat.pyx":45
 * 	cdef double summ = 0.
 * 	cdef count length = 0
 * 	for i in range(len(sample)):             # <<<<<<<<<<<<<<
 * 		if value == helper[i].first:
 * 			summ += (i+1)
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_sample); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 45, __pyx_L1_error)
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (likely(PyList_CheckExact(__pyx_t_7)) || PyTuple_CheckExact(__pyx_t_7)) {
    __pyx_t_4 = __pyx_t_7; __Pyx_INCREF(__pyx_t_4); __pyx_t_1 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 45, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 45, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_7); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 45, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 45, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_7); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 45, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 45, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      }
    } else {
      __pyx_t_7 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_7)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 45, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_7);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "networkit/profiling/stat.pyx":46
 * 	cdef count length = 0
 * 	for i in range(len(sample)):
 * 		if value == helper[i].first:             # <<<<<<<<<<<<<<
 * 			summ += (i+1)
 * 			length += 1
 */
    __pyx_t_9 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 46, __pyx_L1_error)
    __pyx_t_11 = ((__pyx_v_value == (__pyx_v_helper[__pyx_t_9]).first) != 0);
    if (__pyx_t_11) {

      /* "networkit/profiling/stat.pyx":47
 * 	for i in range(len(sample)):
 * 		if value == helper[i].first:
 * 			summ += (i+1)             # <<<<<<<<<<<<<<
 * 			length += 1
 * 		else:
 */
      __pyx_t_7 = PyFloat_FromDouble(__pyx_v_summ); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 47, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 47, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_12 = PyNumber_InPlaceAdd(__pyx_t_7, __pyx_t_5); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 47, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_12); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 47, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_v_summ = __pyx_t_10;

      /* "networkit/profiling/stat.pyx":48
 * 		if value == helper[i].first:
 * 			summ += (i+1)
 * 			length += 1             # <<<<<<<<<<<<<<
 * 		else:
 * 			summ /= length
 */
      __pyx_v_length = (__pyx_v_length + 1);

      /* "networkit/profiling/stat.pyx":46
 * 	cdef count length = 0
 * 	for i in range(len(sample)):
 * 		if value == helper[i].first:             # <<<<<<<<<<<<<<
 * 			summ += (i+1)
 * 			length += 1
 */
      goto __pyx_L7;
    }

    /* "networkit/profiling/stat.pyx":50
 * 			length += 1
 * 		else:
 * 			summ /= length             # <<<<<<<<<<<<<<
 * 			for j in range(length):
 * 				result[helper[i-j-1].second] = summ
 */
    /*else*/ {
      if (unlikely(__pyx_v_length == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 50, __pyx_L1_error)
      }
      __pyx_v_summ = (__pyx_v_summ / __pyx_v_length);

      /* "networkit/profiling/stat.pyx":51
 * 		else:
 * 			summ /= length
 * 			for j in range(length):             # <<<<<<<<<<<<<<
 * 				result[helper[i-j-1].second] = summ
 * 			value = helper[i].first
 */
      __pyx_t_12 = __Pyx_PyInt_From_uint64_t(__pyx_v_length); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 51, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_12); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 51, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
        __pyx_t_12 = __pyx_t_5; __Pyx_INCREF(__pyx_t_12); __pyx_t_13 = 0;
        __pyx_t_14 = NULL;
      } else {
        __pyx_t_13 = -1; __pyx_t_12 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 51, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_14 = Py_TYPE(__pyx_t_12)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 51, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      for (;;) {
        if (likely(!__pyx_t_14)) {
          if (likely(PyList_CheckExact(__pyx_t_12))) {
            if (__pyx_t_13 >= PyList_GET_SIZE(__pyx_t_12)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_5 = PyList_GET_ITEM(__pyx_t_12, __pyx_t_13); __Pyx_INCREF(__pyx_t_5); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 51, __pyx_L1_error)
            #else
            __pyx_t_5 = PySequence_ITEM(__pyx_t_12, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 51, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            #endif
          } else {
            if (__pyx_t_13 >= PyTuple_GET_SIZE(__pyx_t_12)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_12, __pyx_t_13); __Pyx_INCREF(__pyx_t_5); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 51, __pyx_L1_error)
            #else
            __pyx_t_5 = PySequence_ITEM(__pyx_t_12, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 51, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            #endif
          }
        } else {
          __pyx_t_5 = __pyx_t_14(__pyx_t_12);
          if (unlikely(!__pyx_t_5)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 51, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_5);
        }
        __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_5);
        __pyx_t_5 = 0;

        /* "networkit/profiling/stat.pyx":52
 * 			summ /= length
 * 			for j in range(length):
 * 				result[helper[i-j-1].second] = summ             # <<<<<<<<<<<<<<
 * 			value = helper[i].first
 * 			summ = i+1
 */
        __pyx_t_5 = PyNumber_Subtract(__pyx_v_i, __pyx_v_j); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 52, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_7 = __Pyx_PyInt_SubtractObjC(__pyx_t_5, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 52, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_9 = __Pyx_PyInt_As_size_t(__pyx_t_7); if (unlikely((__pyx_t_9 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 52, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        (__pyx_v_result[(__pyx_v_helper[__pyx_t_9]).second]) = __pyx_v_summ;

        /* "networkit/profiling/stat.pyx":51
 * 		else:
 * 			summ /= length
 * 			for j in range(length):             # <<<<<<<<<<<<<<
 * 				result[helper[i-j-1].second] = summ
 * 			value = helper[i].first
 */
      }
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

      /* "networkit/profiling/stat.pyx":53
 * 			for j in range(length):
 * 				result[helper[i-j-1].second] = summ
 * 			value = helper[i].first             # <<<<<<<<<<<<<<
 * 			summ = i+1
 * 			length = 1
 */
      __pyx_t_9 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 53, __pyx_L1_error)
      __pyx_t_10 = (__pyx_v_helper[__pyx_t_9]).first;
      __pyx_v_value = __pyx_t_10;

      /* "networkit/profiling/stat.pyx":54
 * 				result[helper[i-j-1].second] = summ
 * 			value = helper[i].first
 * 			summ = i+1             # <<<<<<<<<<<<<<
 * 			length = 1
 * 	summ /= length
 */
      __pyx_t_12 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 54, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_12); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 54, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_v_summ = __pyx_t_10;

      /* "networkit/profiling/stat.pyx":55
 * 			value = helper[i].first
 * 			summ = i+1
 * 			length = 1             # <<<<<<<<<<<<<<
 * 	summ /= length
 * 	for j in range(length):
 */
      __pyx_v_length = 1;
    }
    __pyx_L7:;

    /* "networkit/profiling/stat.pyx":45
 * 	cdef double summ = 0.
 * 	cdef count length = 0
 * 	for i in range(len(sample)):             # <<<<<<<<<<<<<<
 * 		if value == helper[i].first:
 * 			summ += (i+1)
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/profiling/stat.pyx":56
 * 			summ = i+1
 * 			length = 1
 * 	summ /= length             # <<<<<<<<<<<<<<
 * 	for j in range(length):
 * 		result[helper[len(sample)-j-1].second] = summ
 */
  if (unlikely(__pyx_v_length == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 56, __pyx_L1_error)
  }
  __pyx_v_summ = (__pyx_v_summ / __pyx_v_length);

  /* "networkit/profiling/stat.pyx":57
 * 			length = 1
 * 	summ /= length
 * 	for j in range(length):             # <<<<<<<<<<<<<<
 * 		result[helper[len(sample)-j-1].second] = summ
 * 	return result
 */
  __pyx_t_4 = __Pyx_PyInt_From_uint64_t(__pyx_v_length); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_12 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (likely(PyList_CheckExact(__pyx_t_12)) || PyTuple_CheckExact(__pyx_t_12)) {
    __pyx_t_4 = __pyx_t_12; __Pyx_INCREF(__pyx_t_4); __pyx_t_1 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_12); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 57, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 57, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_12 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_12); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 57, __pyx_L1_error)
        #else
        __pyx_t_12 = PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 57, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_12 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_12); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 57, __pyx_L1_error)
        #else
        __pyx_t_12 = PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 57, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        #endif
      }
    } else {
      __pyx_t_12 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_12)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 57, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_12);
    }
    __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_12);
    __pyx_t_12 = 0;

    /* "networkit/profiling/stat.pyx":58
 * 	summ /= length
 * 	for j in range(length):
 * 		result[helper[len(sample)-j-1].second] = summ             # <<<<<<<<<<<<<<
 * 	return result
 * 
 */
    __pyx_t_13 = PyObject_Length(__pyx_v_sample); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1))) __PYX_ERR(0, 58, __pyx_L1_error)
    __pyx_t_12 = PyInt_FromSsize_t(__pyx_t_13); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 58, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_7 = PyNumber_Subtract(__pyx_t_12, __pyx_v_j); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 58, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_12 = __Pyx_PyInt_SubtractObjC(__pyx_t_7, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 58, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_9 = __Pyx_PyInt_As_size_t(__pyx_t_12); if (unlikely((__pyx_t_9 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 58, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    (__pyx_v_result[(__pyx_v_helper[__pyx_t_9]).second]) = __pyx_v_summ;

    /* "networkit/profiling/stat.pyx":57
 * 			length = 1
 * 	summ /= length
 * 	for j in range(length):             # <<<<<<<<<<<<<<
 * 		result[helper[len(sample)-j-1].second] = summ
 * 	return result
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/profiling/stat.pyx":59
 * 	for j in range(length):
 * 		result[helper[len(sample)-j-1].second] = summ
 * 	return result             # <<<<<<<<<<<<<<
 * 
 * def sort2(sample):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __pyx_convert_vector_to_py_double(__pyx_v_result); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "networkit/profiling/stat.pyx":30
 * 	void sort[Iter, Comp](Iter begin, Iter end, Comp compare) nogil
 * 
 * def ranked(sample):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Given a list of numbers, this function computes the rank of each value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("networkit.profiling.stat.ranked", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":61
 * 	return result
 * 
 * def sort2(sample):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Sorts a given list of numbers.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9profiling_4stat_3sort2(PyObject *__pyx_self, PyObject *__pyx_v_sample); /*proto*/
static char __pyx_doc_9networkit_9profiling_4stat_2sort2[] = "\n\tSorts a given list of numbers.\n\tCurrently used as profiling.stat.sorted.\n\t";
static PyMethodDef __pyx_mdef_9networkit_9profiling_4stat_3sort2 = {"sort2", (PyCFunction)__pyx_pw_9networkit_9profiling_4stat_3sort2, METH_O, __pyx_doc_9networkit_9profiling_4stat_2sort2};
static PyObject *__pyx_pw_9networkit_9profiling_4stat_3sort2(PyObject *__pyx_self, PyObject *__pyx_v_sample) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sort2 (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_9profiling_4stat_2sort2(__pyx_self, ((PyObject *)__pyx_v_sample));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9profiling_4stat_2sort2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_sample) {
  std::vector<double>  __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sort2", 0);

  /* "networkit/profiling/stat.pyx":66
 * 	Currently used as profiling.stat.sorted.
 * 	"""
 * 	cdef vector[double] result = <vector[double]?>sample             # <<<<<<<<<<<<<<
 * 	sort(result.begin(),result.end())
 * 	return result
 */
  __pyx_t_1 = __pyx_convert_vector_from_py_double(__pyx_v_sample); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 66, __pyx_L1_error)
  __pyx_v_result = ((std::vector<double> )__pyx_t_1);

  /* "networkit/profiling/stat.pyx":67
 * 	"""
 * 	cdef vector[double] result = <vector[double]?>sample
 * 	sort(result.begin(),result.end())             # <<<<<<<<<<<<<<
 * 	return result
 * 
 */
  Aux::Parallel::sort<std::vector<double> ::iterator>(__pyx_v_result.begin(), __pyx_v_result.end());

  /* "networkit/profiling/stat.pyx":68
 * 	cdef vector[double] result = <vector[double]?>sample
 * 	sort(result.begin(),result.end())
 * 	return result             # <<<<<<<<<<<<<<
 * 
 * def sorted(sample):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_vector_to_py_double(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/profiling/stat.pyx":61
 * 	return result
 * 
 * def sort2(sample):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Sorts a given list of numbers.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.profiling.stat.sort2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":70
 * 	return result
 * 
 * def sorted(sample):             # <<<<<<<<<<<<<<
 * 	"""	returns a sorted list of given numbers """
 * 	return sort2(sample)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9profiling_4stat_5sorted(PyObject *__pyx_self, PyObject *__pyx_v_sample); /*proto*/
static char __pyx_doc_9networkit_9profiling_4stat_4sorted[] = "\treturns a sorted list of given numbers ";
static PyMethodDef __pyx_mdef_9networkit_9profiling_4stat_5sorted = {"sorted", (PyCFunction)__pyx_pw_9networkit_9profiling_4stat_5sorted, METH_O, __pyx_doc_9networkit_9profiling_4stat_4sorted};
static PyObject *__pyx_pw_9networkit_9profiling_4stat_5sorted(PyObject *__pyx_self, PyObject *__pyx_v_sample) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sorted (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_9profiling_4stat_4sorted(__pyx_self, ((PyObject *)__pyx_v_sample));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9profiling_4stat_4sorted(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_sample) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sorted", 0);

  /* "networkit/profiling/stat.pyx":72
 * def sorted(sample):
 * 	"""	returns a sorted list of given numbers """
 * 	return sort2(sample)             # <<<<<<<<<<<<<<
 * 
 * class Stat(job.Job):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_sort2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_sample) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_sample);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "networkit/profiling/stat.pyx":70
 * 	return result
 * 
 * def sorted(sample):             # <<<<<<<<<<<<<<
 * 	"""	returns a sorted list of given numbers """
 * 	return sort2(sample)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.profiling.stat.sorted", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":77
 * 	""" statistical computation object """
 * 
 * 	def __init__(self, name, params):             # <<<<<<<<<<<<<<
 * 		""" constructor: see PlotJob and .run() """
 * 		job.Job.__init__(
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_9profiling_4stat_4Stat___init__[] = " constructor: see PlotJob and .run() ";
static PyMethodDef __pyx_mdef_9networkit_9profiling_4stat_4Stat_1__init__ = {"__init__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_9profiling_4stat_4Stat_1__init__, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_9profiling_4stat_4Stat___init__};
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_params = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_name,&__pyx_n_s_params,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 1); __PYX_ERR(0, 77, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_params)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 2); __PYX_ERR(0, 77, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 77, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_name = values[1];
    __pyx_v_params = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 77, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.profiling.stat.Stat.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9profiling_4stat_4Stat___init__(__pyx_self, __pyx_v_self, __pyx_v_name, __pyx_v_params);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_params) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "networkit/profiling/stat.pyx":79
 * 	def __init__(self, name, params):
 * 		""" constructor: see PlotJob and .run() """
 * 		job.Job.__init__(             # <<<<<<<<<<<<<<
 * 			self,
 * 			"Stat",
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_job); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Job); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "networkit/profiling/stat.pyx":82
 * 			self,
 * 			"Stat",
 * 			name             # <<<<<<<<<<<<<<
 * 		)
 * 		self.__params = params
 */
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_self, __pyx_n_u_Stat, __pyx_v_name};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 79, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_self, __pyx_n_u_Stat, __pyx_v_name};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 79, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self);
    __Pyx_GIVEREF(__pyx_v_self);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_self);
    __Pyx_INCREF(__pyx_n_u_Stat);
    __Pyx_GIVEREF(__pyx_n_u_Stat);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_u_Stat);
    __Pyx_INCREF(__pyx_v_name);
    __Pyx_GIVEREF(__pyx_v_name);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_v_name);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":84
 * 			name
 * 		)
 * 		self.__params = params             # <<<<<<<<<<<<<<
 * 
 * 	def run(self):
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_Stat__params, __pyx_v_params) < 0) __PYX_ERR(0, 84, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":77
 * 	""" statistical computation object """
 * 
 * 	def __init__(self, name, params):             # <<<<<<<<<<<<<<
 * 		""" constructor: see PlotJob and .run() """
 * 		job.Job.__init__(
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("networkit.profiling.stat.Stat.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":86
 * 		self.__params = params
 * 
 * 	def run(self):             # <<<<<<<<<<<<<<
 * 		""" computation """
 * 		(sample, sampleSorted, sampleRanked, calculatePie) = self.__params
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_9networkit_9profiling_4stat_4Stat_2run[] = " computation ";
static PyMethodDef __pyx_mdef_9networkit_9profiling_4stat_4Stat_3run = {"run", (PyCFunction)__pyx_pw_9networkit_9profiling_4stat_4Stat_3run, METH_O, __pyx_doc_9networkit_9profiling_4stat_4Stat_2run};
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("run (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_9profiling_4stat_4Stat_2run(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":101
 * 		results["Properties"]["Size"] = n
 * 
 * 		def funcMin():             # <<<<<<<<<<<<<<
 * 			result = sampleSorted[0]
 * 			return result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_1funcMin(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_1funcMin = {"funcMin", (PyCFunction)__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_1funcMin, METH_NOARGS, 0};
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_1funcMin(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("funcMin (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_funcMin(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_funcMin(PyObject *__pyx_self) {
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_cur_scope;
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_outer_scope;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("funcMin", 0);
  __pyx_outer_scope = (struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "networkit/profiling/stat.pyx":102
 * 
 * 		def funcMin():
 * 			result = sampleSorted[0]             # <<<<<<<<<<<<<<
 * 			return result
 * 		results["Location"]["Min"] = min = funcMin()
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_sampleSorted)) { __Pyx_RaiseClosureNameError("sampleSorted"); __PYX_ERR(0, 102, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_sampleSorted, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":103
 * 		def funcMin():
 * 			result = sampleSorted[0]
 * 			return result             # <<<<<<<<<<<<<<
 * 		results["Location"]["Min"] = min = funcMin()
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "networkit/profiling/stat.pyx":101
 * 		results["Properties"]["Size"] = n
 * 
 * 		def funcMin():             # <<<<<<<<<<<<<<
 * 			result = sampleSorted[0]
 * 			return result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.profiling.stat.Stat.run.funcMin", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":106
 * 		results["Location"]["Min"] = min = funcMin()
 * 
 * 		def funcMax():             # <<<<<<<<<<<<<<
 * 			result = sampleSorted[n-1]
 * 			return result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_3funcMax(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_3funcMax = {"funcMax", (PyCFunction)__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_3funcMax, METH_NOARGS, 0};
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_3funcMax(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("funcMax (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_2funcMax(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_2funcMax(PyObject *__pyx_self) {
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_cur_scope;
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_outer_scope;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("funcMax", 0);
  __pyx_outer_scope = (struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "networkit/profiling/stat.pyx":107
 * 
 * 		def funcMax():
 * 			result = sampleSorted[n-1]             # <<<<<<<<<<<<<<
 * 			return result
 * 		results["Location"]["Max"] = max = funcMax()
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_sampleSorted)) { __Pyx_RaiseClosureNameError("sampleSorted"); __PYX_ERR(0, 107, __pyx_L1_error) }
  __pyx_t_1 = (__pyx_cur_scope->__pyx_v_n - 1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_sampleSorted, __pyx_t_1, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_result = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "networkit/profiling/stat.pyx":108
 * 		def funcMax():
 * 			result = sampleSorted[n-1]
 * 			return result             # <<<<<<<<<<<<<<
 * 		results["Location"]["Max"] = max = funcMax()
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "networkit/profiling/stat.pyx":106
 * 		results["Location"]["Min"] = min = funcMin()
 * 
 * 		def funcMax():             # <<<<<<<<<<<<<<
 * 			result = sampleSorted[n-1]
 * 			return result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.profiling.stat.Stat.run.funcMax", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":111
 * 		results["Location"]["Max"] = max = funcMax()
 * 
 * 		def funcBesselsCorrection():             # <<<<<<<<<<<<<<
 * 			try:
 * 				result = n / (n-1)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_5funcBesselsCorrection(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_5funcBesselsCorrection = {"funcBesselsCorrection", (PyCFunction)__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_5funcBesselsCorrection, METH_NOARGS, 0};
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_5funcBesselsCorrection(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("funcBesselsCorrection (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_4funcBesselsCorrection(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_4funcBesselsCorrection(PyObject *__pyx_self) {
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_cur_scope;
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_outer_scope;
  double __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  double __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("funcBesselsCorrection", 0);
  __pyx_outer_scope = (struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "networkit/profiling/stat.pyx":112
 * 
 * 		def funcBesselsCorrection():
 * 			try:             # <<<<<<<<<<<<<<
 * 				result = n / (n-1)
 * 			except:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "networkit/profiling/stat.pyx":113
 * 		def funcBesselsCorrection():
 * 			try:
 * 				result = n / (n-1)             # <<<<<<<<<<<<<<
 * 			except:
 * 				result = float("nan")
 */
      __pyx_t_4 = (__pyx_cur_scope->__pyx_v_n - 1);
      if (unlikely(__pyx_t_4 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 113, __pyx_L3_error)
      }
      __pyx_v_result = (((double)__pyx_cur_scope->__pyx_v_n) / ((double)__pyx_t_4));

      /* "networkit/profiling/stat.pyx":112
 * 
 * 		def funcBesselsCorrection():
 * 			try:             # <<<<<<<<<<<<<<
 * 				result = n / (n-1)
 * 			except:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "networkit/profiling/stat.pyx":114
 * 			try:
 * 				result = n / (n-1)
 * 			except:             # <<<<<<<<<<<<<<
 * 				result = float("nan")
 * 			return result
 */
    /*except:*/ {
      __Pyx_AddTraceback("networkit.profiling.stat.Stat.run.funcBesselsCorrection", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(0, 114, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "networkit/profiling/stat.pyx":115
 * 				result = n / (n-1)
 * 			except:
 * 				result = float("nan")             # <<<<<<<<<<<<<<
 * 			return result
 * 		results["Properties"]["Bessel's Correction"] = besselsCorrection = funcBesselsCorrection()
 */
      __pyx_t_8 = __Pyx_PyObject_AsDouble(__pyx_n_u_nan); if (unlikely(__pyx_t_8 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 115, __pyx_L5_except_error)
      __pyx_v_result = __pyx_t_8;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L4_exception_handled;
    }
    __pyx_L5_except_error:;

    /* "networkit/profiling/stat.pyx":112
 * 
 * 		def funcBesselsCorrection():
 * 			try:             # <<<<<<<<<<<<<<
 * 				result = n / (n-1)
 * 			except:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L8_try_end:;
  }

  /* "networkit/profiling/stat.pyx":116
 * 			except:
 * 				result = float("nan")
 * 			return result             # <<<<<<<<<<<<<<
 * 		results["Properties"]["Bessel's Correction"] = besselsCorrection = funcBesselsCorrection()
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_7 = PyFloat_FromDouble(__pyx_v_result); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "networkit/profiling/stat.pyx":111
 * 		results["Location"]["Max"] = max = funcMax()
 * 
 * 		def funcBesselsCorrection():             # <<<<<<<<<<<<<<
 * 			try:
 * 				result = n / (n-1)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("networkit.profiling.stat.Stat.run.funcBesselsCorrection", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":119
 * 		results["Properties"]["Bessel's Correction"] = besselsCorrection = funcBesselsCorrection()
 * 
 * 		def hoelderMean(sample, p):             # <<<<<<<<<<<<<<
 * 			result = 0
 * 			for i in range(n):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_7hoelderMean(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_7hoelderMean = {"hoelderMean", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_7hoelderMean, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_7hoelderMean(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_sample = 0;
  PyObject *__pyx_v_p = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hoelderMean (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_sample,&__pyx_n_s_p,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sample)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("hoelderMean", 1, 2, 2, 1); __PYX_ERR(0, 119, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "hoelderMean") < 0)) __PYX_ERR(0, 119, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_sample = values[0];
    __pyx_v_p = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("hoelderMean", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 119, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.profiling.stat.Stat.run.hoelderMean", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_6hoelderMean(__pyx_self, __pyx_v_sample, __pyx_v_p);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_6hoelderMean(PyObject *__pyx_self, PyObject *__pyx_v_sample, PyObject *__pyx_v_p) {
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_cur_scope;
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_outer_scope;
  PyObject *__pyx_v_result = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("hoelderMean", 0);
  __pyx_outer_scope = (struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "networkit/profiling/stat.pyx":120
 * 
 * 		def hoelderMean(sample, p):
 * 			result = 0             # <<<<<<<<<<<<<<
 * 			for i in range(n):
 * 				result += sample[i] ** p
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_result = __pyx_int_0;

  /* "networkit/profiling/stat.pyx":121
 * 		def hoelderMean(sample, p):
 * 			result = 0
 * 			for i in range(n):             # <<<<<<<<<<<<<<
 * 				result += sample[i] ** p
 * 			result /= n
 */
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_n;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "networkit/profiling/stat.pyx":122
 * 			result = 0
 * 			for i in range(n):
 * 				result += sample[i] ** p             # <<<<<<<<<<<<<<
 * 			result /= n
 * 			result **= 1 / p
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_sample, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 122, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyNumber_Power(__pyx_t_4, __pyx_v_p, Py_None); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 122, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_result, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 122, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_4);
    __pyx_t_4 = 0;
  }

  /* "networkit/profiling/stat.pyx":123
 * 			for i in range(n):
 * 				result += sample[i] ** p
 * 			result /= n             # <<<<<<<<<<<<<<
 * 			result **= 1 / p
 * 			return result
 */
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_cur_scope->__pyx_v_n); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyNumber_InPlaceDivide(__pyx_v_result, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":124
 * 				result += sample[i] ** p
 * 			result /= n
 * 			result **= 1 / p             # <<<<<<<<<<<<<<
 * 			return result
 * 		results["Location"]["Arithmetic Mean"] = arithmeticMean = hoelderMean(sample, 1)
 */
  __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_int_1, __pyx_v_p); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyNumber_InPlacePower(__pyx_v_result, __pyx_t_5, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "networkit/profiling/stat.pyx":125
 * 			result /= n
 * 			result **= 1 / p
 * 			return result             # <<<<<<<<<<<<<<
 * 		results["Location"]["Arithmetic Mean"] = arithmeticMean = hoelderMean(sample, 1)
 * 		results["Location"]["Quadratic Mean"] = quadraticMean = hoelderMean(sample, 2)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "networkit/profiling/stat.pyx":119
 * 		results["Properties"]["Bessel's Correction"] = besselsCorrection = funcBesselsCorrection()
 * 
 * 		def hoelderMean(sample, p):             # <<<<<<<<<<<<<<
 * 			result = 0
 * 			for i in range(n):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("networkit.profiling.stat.Stat.run.hoelderMean", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":134
 * 			results["Location"]["Harmonic Mean"] = harmonicMean = float("nan")
 * 
 * 		def funcArithmeticMeanRank():             # <<<<<<<<<<<<<<
 * 			result = (n + 1) / 2
 * 			return result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_9funcArithmeticMeanRank(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_9funcArithmeticMeanRank = {"funcArithmeticMeanRank", (PyCFunction)__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_9funcArithmeticMeanRank, METH_NOARGS, 0};
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_9funcArithmeticMeanRank(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("funcArithmeticMeanRank (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_8funcArithmeticMeanRank(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_8funcArithmeticMeanRank(PyObject *__pyx_self) {
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_cur_scope;
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_outer_scope;
  double __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("funcArithmeticMeanRank", 0);
  __pyx_outer_scope = (struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "networkit/profiling/stat.pyx":135
 * 
 * 		def funcArithmeticMeanRank():
 * 			result = (n + 1) / 2             # <<<<<<<<<<<<<<
 * 			return result
 * 		results["Location"]["Arithmetic Mean (Rank)"] = arithmeticMean_Rank = funcArithmeticMeanRank()
 */
  __pyx_v_result = (((double)(__pyx_cur_scope->__pyx_v_n + 1)) / 2.0);

  /* "networkit/profiling/stat.pyx":136
 * 		def funcArithmeticMeanRank():
 * 			result = (n + 1) / 2
 * 			return result             # <<<<<<<<<<<<<<
 * 		results["Location"]["Arithmetic Mean (Rank)"] = arithmeticMean_Rank = funcArithmeticMeanRank()
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "networkit/profiling/stat.pyx":134
 * 			results["Location"]["Harmonic Mean"] = harmonicMean = float("nan")
 * 
 * 		def funcArithmeticMeanRank():             # <<<<<<<<<<<<<<
 * 			result = (n + 1) / 2
 * 			return result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.profiling.stat.Stat.run.funcArithmeticMeanRank", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":139
 * 		results["Location"]["Arithmetic Mean (Rank)"] = arithmeticMean_Rank = funcArithmeticMeanRank()
 * 
 * 		def funcUncorrectedVariance(sample, arithmeticMean):             # <<<<<<<<<<<<<<
 * 			result = 0
 * 			for i in range(n):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_11funcUncorrectedVariance(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_11funcUncorrectedVariance = {"funcUncorrectedVariance", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_11funcUncorrectedVariance, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_11funcUncorrectedVariance(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_sample = 0;
  PyObject *__pyx_v_arithmeticMean = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("funcUncorrectedVariance (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_sample,&__pyx_n_s_arithmeticMean,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sample)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_arithmeticMean)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("funcUncorrectedVariance", 1, 2, 2, 1); __PYX_ERR(0, 139, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "funcUncorrectedVariance") < 0)) __PYX_ERR(0, 139, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_sample = values[0];
    __pyx_v_arithmeticMean = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("funcUncorrectedVariance", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 139, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.profiling.stat.Stat.run.funcUncorrectedVariance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_10funcUncorrectedVariance(__pyx_self, __pyx_v_sample, __pyx_v_arithmeticMean);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_10funcUncorrectedVariance(PyObject *__pyx_self, PyObject *__pyx_v_sample, PyObject *__pyx_v_arithmeticMean) {
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_cur_scope;
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_outer_scope;
  PyObject *__pyx_v_result = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("funcUncorrectedVariance", 0);
  __pyx_outer_scope = (struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "networkit/profiling/stat.pyx":140
 * 
 * 		def funcUncorrectedVariance(sample, arithmeticMean):
 * 			result = 0             # <<<<<<<<<<<<<<
 * 			for i in range(n):
 * 				result += (sample[i] - arithmeticMean) ** 2
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_result = __pyx_int_0;

  /* "networkit/profiling/stat.pyx":141
 * 		def funcUncorrectedVariance(sample, arithmeticMean):
 * 			result = 0
 * 			for i in range(n):             # <<<<<<<<<<<<<<
 * 				result += (sample[i] - arithmeticMean) ** 2
 * 			result /= n
 */
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_n;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "networkit/profiling/stat.pyx":142
 * 			result = 0
 * 			for i in range(n):
 * 				result += (sample[i] - arithmeticMean) ** 2             # <<<<<<<<<<<<<<
 * 			result /= n
 * 			return result
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_sample, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyNumber_Subtract(__pyx_t_4, __pyx_v_arithmeticMean); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Power(__pyx_t_5, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_InPlaceAdd(__pyx_v_result, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_5);
    __pyx_t_5 = 0;
  }

  /* "networkit/profiling/stat.pyx":143
 * 			for i in range(n):
 * 				result += (sample[i] - arithmeticMean) ** 2
 * 			result /= n             # <<<<<<<<<<<<<<
 * 			return result
 * 		results["Dispersion"]["Uncorrected Variance"] = variance_uncorrected = funcUncorrectedVariance(sample, arithmeticMean)
 */
  __pyx_t_5 = PyInt_FromSsize_t(__pyx_cur_scope->__pyx_v_n); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyNumber_InPlaceDivide(__pyx_v_result, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "networkit/profiling/stat.pyx":144
 * 				result += (sample[i] - arithmeticMean) ** 2
 * 			result /= n
 * 			return result             # <<<<<<<<<<<<<<
 * 		results["Dispersion"]["Uncorrected Variance"] = variance_uncorrected = funcUncorrectedVariance(sample, arithmeticMean)
 * 		results["Dispersion"]["Uncorrected Variance (Rank)"] = variance_Rank_uncorrected = funcUncorrectedVariance(sampleRanked, arithmeticMean_Rank)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "networkit/profiling/stat.pyx":139
 * 		results["Location"]["Arithmetic Mean (Rank)"] = arithmeticMean_Rank = funcArithmeticMeanRank()
 * 
 * 		def funcUncorrectedVariance(sample, arithmeticMean):             # <<<<<<<<<<<<<<
 * 			result = 0
 * 			for i in range(n):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("networkit.profiling.stat.Stat.run.funcUncorrectedVariance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":148
 * 		results["Dispersion"]["Uncorrected Variance (Rank)"] = variance_Rank_uncorrected = funcUncorrectedVariance(sampleRanked, arithmeticMean_Rank)
 * 
 * 		def funcVariance(variance_uncorrected):             # <<<<<<<<<<<<<<
 * 			result = variance_uncorrected * besselsCorrection
 * 			return result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_13funcVariance(PyObject *__pyx_self, PyObject *__pyx_v_variance_uncorrected); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_13funcVariance = {"funcVariance", (PyCFunction)__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_13funcVariance, METH_O, 0};
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_13funcVariance(PyObject *__pyx_self, PyObject *__pyx_v_variance_uncorrected) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("funcVariance (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_12funcVariance(__pyx_self, ((PyObject *)__pyx_v_variance_uncorrected));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_12funcVariance(PyObject *__pyx_self, PyObject *__pyx_v_variance_uncorrected) {
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_cur_scope;
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_outer_scope;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("funcVariance", 0);
  __pyx_outer_scope = (struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "networkit/profiling/stat.pyx":149
 * 
 * 		def funcVariance(variance_uncorrected):
 * 			result = variance_uncorrected * besselsCorrection             # <<<<<<<<<<<<<<
 * 			return result
 * 		results["Dispersion"]["Variance"] = variance = funcVariance(variance_uncorrected)
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_besselsCorrection)) { __Pyx_RaiseClosureNameError("besselsCorrection"); __PYX_ERR(0, 149, __pyx_L1_error) }
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_variance_uncorrected, __pyx_cur_scope->__pyx_v_besselsCorrection); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":150
 * 		def funcVariance(variance_uncorrected):
 * 			result = variance_uncorrected * besselsCorrection
 * 			return result             # <<<<<<<<<<<<<<
 * 		results["Dispersion"]["Variance"] = variance = funcVariance(variance_uncorrected)
 * 		results["Dispersion"]["Variance (Rank)"] = variance_Rank = funcVariance(variance_Rank_uncorrected)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "networkit/profiling/stat.pyx":148
 * 		results["Dispersion"]["Uncorrected Variance (Rank)"] = variance_Rank_uncorrected = funcUncorrectedVariance(sampleRanked, arithmeticMean_Rank)
 * 
 * 		def funcVariance(variance_uncorrected):             # <<<<<<<<<<<<<<
 * 			result = variance_uncorrected * besselsCorrection
 * 			return result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.profiling.stat.Stat.run.funcVariance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":154
 * 		results["Dispersion"]["Variance (Rank)"] = variance_Rank = funcVariance(variance_Rank_uncorrected)
 * 
 * 		def funcStandardDeviation(variance):             # <<<<<<<<<<<<<<
 * 			result = math.sqrt(variance)
 * 			return result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_15funcStandardDeviation(PyObject *__pyx_self, PyObject *__pyx_v_variance); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_15funcStandardDeviation = {"funcStandardDeviation", (PyCFunction)__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_15funcStandardDeviation, METH_O, 0};
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_15funcStandardDeviation(PyObject *__pyx_self, PyObject *__pyx_v_variance) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("funcStandardDeviation (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_14funcStandardDeviation(__pyx_self, ((PyObject *)__pyx_v_variance));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_14funcStandardDeviation(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_variance) {
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("funcStandardDeviation", 0);

  /* "networkit/profiling/stat.pyx":155
 * 
 * 		def funcStandardDeviation(variance):
 * 			result = math.sqrt(variance)             # <<<<<<<<<<<<<<
 * 			return result
 * 		results["Dispersion"]["Standard Deviation"] = s_n = funcStandardDeviation(variance)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_math); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_sqrt); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_v_variance) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_variance);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":156
 * 		def funcStandardDeviation(variance):
 * 			result = math.sqrt(variance)
 * 			return result             # <<<<<<<<<<<<<<
 * 		results["Dispersion"]["Standard Deviation"] = s_n = funcStandardDeviation(variance)
 * 		results["Dispersion"]["Standard Deviation (Rank)"] = s_n_Rank = funcStandardDeviation(variance_Rank)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "networkit/profiling/stat.pyx":154
 * 		results["Dispersion"]["Variance (Rank)"] = variance_Rank = funcVariance(variance_Rank_uncorrected)
 * 
 * 		def funcStandardDeviation(variance):             # <<<<<<<<<<<<<<
 * 			result = math.sqrt(variance)
 * 			return result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.profiling.stat.Stat.run.funcStandardDeviation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":162
 * 		results["Dispersion"]["Uncorrected Standard Deviation (Rank)"] = s_n_Rank_uncorrected = funcStandardDeviation(variance_Rank_uncorrected)
 * 
 * 		def funcCoefficientOfVariation(s_n, arithmeticMean):             # <<<<<<<<<<<<<<
 * 			result = float("nan")
 * 			if arithmeticMean != 0:
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_17funcCoefficientOfVariation(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_17funcCoefficientOfVariation = {"funcCoefficientOfVariation", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_17funcCoefficientOfVariation, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_17funcCoefficientOfVariation(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_s_n = 0;
  PyObject *__pyx_v_arithmeticMean = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("funcCoefficientOfVariation (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s_n,&__pyx_n_s_arithmeticMean,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_s_n)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_arithmeticMean)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("funcCoefficientOfVariation", 1, 2, 2, 1); __PYX_ERR(0, 162, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "funcCoefficientOfVariation") < 0)) __PYX_ERR(0, 162, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_s_n = values[0];
    __pyx_v_arithmeticMean = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("funcCoefficientOfVariation", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 162, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.profiling.stat.Stat.run.funcCoefficientOfVariation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_16funcCoefficientOfVariation(__pyx_self, __pyx_v_s_n, __pyx_v_arithmeticMean);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_16funcCoefficientOfVariation(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s_n, PyObject *__pyx_v_arithmeticMean) {
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("funcCoefficientOfVariation", 0);

  /* "networkit/profiling/stat.pyx":163
 * 
 * 		def funcCoefficientOfVariation(s_n, arithmeticMean):
 * 			result = float("nan")             # <<<<<<<<<<<<<<
 * 			if arithmeticMean != 0:
 * 				result = s_n / arithmeticMean
 */
  __pyx_t_1 = __Pyx_PyNumber_Float(__pyx_n_u_nan); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":164
 * 		def funcCoefficientOfVariation(s_n, arithmeticMean):
 * 			result = float("nan")
 * 			if arithmeticMean != 0:             # <<<<<<<<<<<<<<
 * 				result = s_n / arithmeticMean
 * 			return result
 */
  __pyx_t_1 = __Pyx_PyInt_NeObjC(__pyx_v_arithmeticMean, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "networkit/profiling/stat.pyx":165
 * 			result = float("nan")
 * 			if arithmeticMean != 0:
 * 				result = s_n / arithmeticMean             # <<<<<<<<<<<<<<
 * 			return result
 * 		results["Dispersion"]["Coefficient Of Variation"] = c_v = funcCoefficientOfVariation(s_n, arithmeticMean)
 */
    __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_v_s_n, __pyx_v_arithmeticMean); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "networkit/profiling/stat.pyx":164
 * 		def funcCoefficientOfVariation(s_n, arithmeticMean):
 * 			result = float("nan")
 * 			if arithmeticMean != 0:             # <<<<<<<<<<<<<<
 * 				result = s_n / arithmeticMean
 * 			return result
 */
  }

  /* "networkit/profiling/stat.pyx":166
 * 			if arithmeticMean != 0:
 * 				result = s_n / arithmeticMean
 * 			return result             # <<<<<<<<<<<<<<
 * 		results["Dispersion"]["Coefficient Of Variation"] = c_v = funcCoefficientOfVariation(s_n, arithmeticMean)
 * 		results["Dispersion"]["Coefficient Of Variation (Rank)"] = c_v_Rank = funcCoefficientOfVariation(s_n_Rank, arithmeticMean_Rank)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "networkit/profiling/stat.pyx":162
 * 		results["Dispersion"]["Uncorrected Standard Deviation (Rank)"] = s_n_Rank_uncorrected = funcStandardDeviation(variance_Rank_uncorrected)
 * 
 * 		def funcCoefficientOfVariation(s_n, arithmeticMean):             # <<<<<<<<<<<<<<
 * 			result = float("nan")
 * 			if arithmeticMean != 0:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.profiling.stat.Stat.run.funcCoefficientOfVariation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":172
 * 		results["Dispersion"]["Uncorrected Coefficient Of Variation (Rank)"] = c_v_Rank = funcCoefficientOfVariation(s_n_Rank_uncorrected, arithmeticMean_Rank)
 * 
 * 		def funcAlphaQuartile(alpha):             # <<<<<<<<<<<<<<
 * 			k_real = (alpha * n)
 * 			k = math.floor(k_real)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_19funcAlphaQuartile(PyObject *__pyx_self, PyObject *__pyx_v_alpha); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_19funcAlphaQuartile = {"funcAlphaQuartile", (PyCFunction)__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_19funcAlphaQuartile, METH_O, 0};
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_19funcAlphaQuartile(PyObject *__pyx_self, PyObject *__pyx_v_alpha) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("funcAlphaQuartile (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_18funcAlphaQuartile(__pyx_self, ((PyObject *)__pyx_v_alpha));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_18funcAlphaQuartile(PyObject *__pyx_self, PyObject *__pyx_v_alpha) {
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_cur_scope;
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_outer_scope;
  PyObject *__pyx_v_k_real = NULL;
  PyObject *__pyx_v_k = NULL;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("funcAlphaQuartile", 0);
  __pyx_outer_scope = (struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "networkit/profiling/stat.pyx":173
 * 
 * 		def funcAlphaQuartile(alpha):
 * 			k_real = (alpha * n)             # <<<<<<<<<<<<<<
 * 			k = math.floor(k_real)
 * 			if (k != k_real) or (k < 1):
 */
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_cur_scope->__pyx_v_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Multiply(__pyx_v_alpha, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_k_real = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "networkit/profiling/stat.pyx":174
 * 		def funcAlphaQuartile(alpha):
 * 			k_real = (alpha * n)
 * 			k = math.floor(k_real)             # <<<<<<<<<<<<<<
 * 			if (k != k_real) or (k < 1):
 * 				result = sampleSorted[(k-1)+1]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_math); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_floor); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_1, __pyx_v_k_real) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_k_real);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_k = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "networkit/profiling/stat.pyx":175
 * 			k_real = (alpha * n)
 * 			k = math.floor(k_real)
 * 			if (k != k_real) or (k < 1):             # <<<<<<<<<<<<<<
 * 				result = sampleSorted[(k-1)+1]
 * 			else:
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_k, __pyx_v_k_real, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 175, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!__pyx_t_5) {
  } else {
    __pyx_t_4 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_k, __pyx_int_1, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 175, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_4) {

    /* "networkit/profiling/stat.pyx":176
 * 			k = math.floor(k_real)
 * 			if (k != k_real) or (k < 1):
 * 				result = sampleSorted[(k-1)+1]             # <<<<<<<<<<<<<<
 * 			else:
 * 				result = 0.5 * (sampleSorted[(k-1)] + sampleSorted[(k-1)+1])
 */
    if (unlikely(!__pyx_cur_scope->__pyx_v_sampleSorted)) { __Pyx_RaiseClosureNameError("sampleSorted"); __PYX_ERR(0, 176, __pyx_L1_error) }
    __pyx_t_2 = __Pyx_PyInt_SubtractObjC(__pyx_v_k, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_cur_scope->__pyx_v_sampleSorted, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_result = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "networkit/profiling/stat.pyx":175
 * 			k_real = (alpha * n)
 * 			k = math.floor(k_real)
 * 			if (k != k_real) or (k < 1):             # <<<<<<<<<<<<<<
 * 				result = sampleSorted[(k-1)+1]
 * 			else:
 */
    goto __pyx_L3;
  }

  /* "networkit/profiling/stat.pyx":178
 * 				result = sampleSorted[(k-1)+1]
 * 			else:
 * 				result = 0.5 * (sampleSorted[(k-1)] + sampleSorted[(k-1)+1])             # <<<<<<<<<<<<<<
 * 			return result
 * 		results["Location"]["1st Quartile"] = Q1 = funcAlphaQuartile(0.25)
 */
  /*else*/ {
    if (unlikely(!__pyx_cur_scope->__pyx_v_sampleSorted)) { __Pyx_RaiseClosureNameError("sampleSorted"); __PYX_ERR(0, 178, __pyx_L1_error) }
    __pyx_t_2 = __Pyx_PyInt_SubtractObjC(__pyx_v_k, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_cur_scope->__pyx_v_sampleSorted, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_v_sampleSorted)) { __Pyx_RaiseClosureNameError("sampleSorted"); __PYX_ERR(0, 178, __pyx_L1_error) }
    __pyx_t_2 = __Pyx_PyInt_SubtractObjC(__pyx_v_k, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_cur_scope->__pyx_v_sampleSorted, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Multiply(__pyx_float_0_5, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_result = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "networkit/profiling/stat.pyx":179
 * 			else:
 * 				result = 0.5 * (sampleSorted[(k-1)] + sampleSorted[(k-1)+1])
 * 			return result             # <<<<<<<<<<<<<<
 * 		results["Location"]["1st Quartile"] = Q1 = funcAlphaQuartile(0.25)
 * 		results["Location"]["Median"] = median = funcAlphaQuartile(0.5)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "networkit/profiling/stat.pyx":172
 * 		results["Dispersion"]["Uncorrected Coefficient Of Variation (Rank)"] = c_v_Rank = funcCoefficientOfVariation(s_n_Rank_uncorrected, arithmeticMean_Rank)
 * 
 * 		def funcAlphaQuartile(alpha):             # <<<<<<<<<<<<<<
 * 			k_real = (alpha * n)
 * 			k = math.floor(k_real)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.profiling.stat.Stat.run.funcAlphaQuartile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_k_real);
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":184
 * 		results["Location"]["3rd Quartile"] = Q3 = funcAlphaQuartile(0.75)
 * 
 * 		def funcAlphaTrimmedMean(alpha):             # <<<<<<<<<<<<<<
 * 			k = math.floor(alpha * n)
 * 			i = k+1
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_21funcAlphaTrimmedMean(PyObject *__pyx_self, PyObject *__pyx_v_alpha); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_21funcAlphaTrimmedMean = {"funcAlphaTrimmedMean", (PyCFunction)__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_21funcAlphaTrimmedMean, METH_O, 0};
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_21funcAlphaTrimmedMean(PyObject *__pyx_self, PyObject *__pyx_v_alpha) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("funcAlphaTrimmedMean (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_20funcAlphaTrimmedMean(__pyx_self, ((PyObject *)__pyx_v_alpha));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_20funcAlphaTrimmedMean(PyObject *__pyx_self, PyObject *__pyx_v_alpha) {
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_cur_scope;
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_outer_scope;
  PyObject *__pyx_v_k = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("funcAlphaTrimmedMean", 0);
  __pyx_outer_scope = (struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "networkit/profiling/stat.pyx":185
 * 
 * 		def funcAlphaTrimmedMean(alpha):
 * 			k = math.floor(alpha * n)             # <<<<<<<<<<<<<<
 * 			i = k+1
 * 			result = 0
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_math); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_floor); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_cur_scope->__pyx_v_n); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyNumber_Multiply(__pyx_v_alpha, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_k = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":186
 * 		def funcAlphaTrimmedMean(alpha):
 * 			k = math.floor(alpha * n)
 * 			i = k+1             # <<<<<<<<<<<<<<
 * 			result = 0
 * 			while (i < n-k+1):
 */
  __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_v_k, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_i = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":187
 * 			k = math.floor(alpha * n)
 * 			i = k+1
 * 			result = 0             # <<<<<<<<<<<<<<
 * 			while (i < n-k+1):
 * 				result += sampleSorted[(i-1)]
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_result = __pyx_int_0;

  /* "networkit/profiling/stat.pyx":188
 * 			i = k+1
 * 			result = 0
 * 			while (i < n-k+1):             # <<<<<<<<<<<<<<
 * 				result += sampleSorted[(i-1)]
 * 				i += 1
 */
  while (1) {
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_cur_scope->__pyx_v_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 188, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyNumber_Subtract(__pyx_t_1, __pyx_v_k); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 188, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 188, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_i, __pyx_t_1, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 188, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 188, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!__pyx_t_5) break;

    /* "networkit/profiling/stat.pyx":189
 * 			result = 0
 * 			while (i < n-k+1):
 * 				result += sampleSorted[(i-1)]             # <<<<<<<<<<<<<<
 * 				i += 1
 * 			result /= n	- 2*(k)
 */
    if (unlikely(!__pyx_cur_scope->__pyx_v_sampleSorted)) { __Pyx_RaiseClosureNameError("sampleSorted"); __PYX_ERR(0, 189, __pyx_L1_error) }
    __pyx_t_3 = __Pyx_PyInt_SubtractObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 189, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_cur_scope->__pyx_v_sampleSorted, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 189, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_result, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 189, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "networkit/profiling/stat.pyx":190
 * 			while (i < n-k+1):
 * 				result += sampleSorted[(i-1)]
 * 				i += 1             # <<<<<<<<<<<<<<
 * 			result /= n	- 2*(k)
 * 			return result
 */
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 190, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_3 = 0;
  }

  /* "networkit/profiling/stat.pyx":191
 * 				result += sampleSorted[(i-1)]
 * 				i += 1
 * 			result /= n	- 2*(k)             # <<<<<<<<<<<<<<
 * 			return result
 * 		results["Location"]["Interquartile Mean"] = IQM = funcAlphaTrimmedMean(0.25)
 */
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_cur_scope->__pyx_v_n); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyNumber_Multiply(__pyx_int_2, __pyx_v_k); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyNumber_Subtract(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyNumber_InPlaceDivide(__pyx_v_result, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":192
 * 				i += 1
 * 			result /= n	- 2*(k)
 * 			return result             # <<<<<<<<<<<<<<
 * 		results["Location"]["Interquartile Mean"] = IQM = funcAlphaTrimmedMean(0.25)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "networkit/profiling/stat.pyx":184
 * 		results["Location"]["3rd Quartile"] = Q3 = funcAlphaQuartile(0.75)
 * 
 * 		def funcAlphaTrimmedMean(alpha):             # <<<<<<<<<<<<<<
 * 			k = math.floor(alpha * n)
 * 			i = k+1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("networkit.profiling.stat.Stat.run.funcAlphaTrimmedMean", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":195
 * 		results["Location"]["Interquartile Mean"] = IQM = funcAlphaTrimmedMean(0.25)
 * 
 * 		def funcIQR():             # <<<<<<<<<<<<<<
 * 			result = Q3 - Q1
 * 			return result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_23funcIQR(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_23funcIQR = {"funcIQR", (PyCFunction)__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_23funcIQR, METH_NOARGS, 0};
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_23funcIQR(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("funcIQR (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_22funcIQR(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_22funcIQR(PyObject *__pyx_self) {
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_cur_scope;
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_outer_scope;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("funcIQR", 0);
  __pyx_outer_scope = (struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "networkit/profiling/stat.pyx":196
 * 
 * 		def funcIQR():
 * 			result = Q3 - Q1             # <<<<<<<<<<<<<<
 * 			return result
 * 		results["Dispersion"]["Interquartile Range"] = IQR = funcIQR()
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_Q3)) { __Pyx_RaiseClosureNameError("Q3"); __PYX_ERR(0, 196, __pyx_L1_error) }
  if (unlikely(!__pyx_cur_scope->__pyx_v_Q1)) { __Pyx_RaiseClosureNameError("Q1"); __PYX_ERR(0, 196, __pyx_L1_error) }
  __pyx_t_1 = PyNumber_Subtract(__pyx_cur_scope->__pyx_v_Q3, __pyx_cur_scope->__pyx_v_Q1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":197
 * 		def funcIQR():
 * 			result = Q3 - Q1
 * 			return result             # <<<<<<<<<<<<<<
 * 		results["Dispersion"]["Interquartile Range"] = IQR = funcIQR()
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "networkit/profiling/stat.pyx":195
 * 		results["Location"]["Interquartile Mean"] = IQM = funcAlphaTrimmedMean(0.25)
 * 
 * 		def funcIQR():             # <<<<<<<<<<<<<<
 * 			result = Q3 - Q1
 * 			return result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.profiling.stat.Stat.run.funcIQR", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":200
 * 		results["Dispersion"]["Interquartile Range"] = IQR = funcIQR()
 * 
 * 		def funcSampleRange():             # <<<<<<<<<<<<<<
 * 			result = max - min
 * 			return result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_25funcSampleRange(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_25funcSampleRange = {"funcSampleRange", (PyCFunction)__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_25funcSampleRange, METH_NOARGS, 0};
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_25funcSampleRange(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("funcSampleRange (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_24funcSampleRange(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_24funcSampleRange(PyObject *__pyx_self) {
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_cur_scope;
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_outer_scope;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("funcSampleRange", 0);
  __pyx_outer_scope = (struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "networkit/profiling/stat.pyx":201
 * 
 * 		def funcSampleRange():
 * 			result = max - min             # <<<<<<<<<<<<<<
 * 			return result
 * 		results["Dispersion"]["Sample Range"] = sampleRange = funcSampleRange()
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_max)) { __Pyx_RaiseClosureNameError("max"); __PYX_ERR(0, 201, __pyx_L1_error) }
  if (unlikely(!__pyx_cur_scope->__pyx_v_min)) { __Pyx_RaiseClosureNameError("min"); __PYX_ERR(0, 201, __pyx_L1_error) }
  __pyx_t_1 = PyNumber_Subtract(__pyx_cur_scope->__pyx_v_max, __pyx_cur_scope->__pyx_v_min); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":202
 * 		def funcSampleRange():
 * 			result = max - min
 * 			return result             # <<<<<<<<<<<<<<
 * 		results["Dispersion"]["Sample Range"] = sampleRange = funcSampleRange()
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "networkit/profiling/stat.pyx":200
 * 		results["Dispersion"]["Interquartile Range"] = IQR = funcIQR()
 * 
 * 		def funcSampleRange():             # <<<<<<<<<<<<<<
 * 			result = max - min
 * 			return result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.profiling.stat.Stat.run.funcSampleRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":205
 * 		results["Dispersion"]["Sample Range"] = sampleRange = funcSampleRange()
 * 
 * 		def funcMidRange():             # <<<<<<<<<<<<<<
 * 			result = (min + max)/ 2
 * 			return result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_27funcMidRange(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_27funcMidRange = {"funcMidRange", (PyCFunction)__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_27funcMidRange, METH_NOARGS, 0};
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_27funcMidRange(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("funcMidRange (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_26funcMidRange(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_26funcMidRange(PyObject *__pyx_self) {
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_cur_scope;
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_outer_scope;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("funcMidRange", 0);
  __pyx_outer_scope = (struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "networkit/profiling/stat.pyx":206
 * 
 * 		def funcMidRange():
 * 			result = (min + max)/ 2             # <<<<<<<<<<<<<<
 * 			return result
 * 		results["Location"]["Mid-Range"] = midRange = funcMidRange()
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_min)) { __Pyx_RaiseClosureNameError("min"); __PYX_ERR(0, 206, __pyx_L1_error) }
  if (unlikely(!__pyx_cur_scope->__pyx_v_max)) { __Pyx_RaiseClosureNameError("max"); __PYX_ERR(0, 206, __pyx_L1_error) }
  __pyx_t_1 = PyNumber_Add(__pyx_cur_scope->__pyx_v_min, __pyx_cur_scope->__pyx_v_max); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_TrueDivideObjC(__pyx_t_1, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_result = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "networkit/profiling/stat.pyx":207
 * 		def funcMidRange():
 * 			result = (min + max)/ 2
 * 			return result             # <<<<<<<<<<<<<<
 * 		results["Location"]["Mid-Range"] = midRange = funcMidRange()
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "networkit/profiling/stat.pyx":205
 * 		results["Dispersion"]["Sample Range"] = sampleRange = funcSampleRange()
 * 
 * 		def funcMidRange():             # <<<<<<<<<<<<<<
 * 			result = (min + max)/ 2
 * 			return result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.profiling.stat.Stat.run.funcMidRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":210
 * 		results["Location"]["Mid-Range"] = midRange = funcMidRange()
 * 
 * 		def funcSkewnessYP():             # <<<<<<<<<<<<<<
 * 			result = float("nan")
 * 			if s_n != 0:
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_29funcSkewnessYP(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_29funcSkewnessYP = {"funcSkewnessYP", (PyCFunction)__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_29funcSkewnessYP, METH_NOARGS, 0};
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_29funcSkewnessYP(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("funcSkewnessYP (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_28funcSkewnessYP(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_28funcSkewnessYP(PyObject *__pyx_self) {
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_cur_scope;
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_outer_scope;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("funcSkewnessYP", 0);
  __pyx_outer_scope = (struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "networkit/profiling/stat.pyx":211
 * 
 * 		def funcSkewnessYP():
 * 			result = float("nan")             # <<<<<<<<<<<<<<
 * 			if s_n != 0:
 * 				result = 3 * (arithmeticMean - median) / s_n
 */
  __pyx_t_1 = __Pyx_PyNumber_Float(__pyx_n_u_nan); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":212
 * 		def funcSkewnessYP():
 * 			result = float("nan")
 * 			if s_n != 0:             # <<<<<<<<<<<<<<
 * 				result = 3 * (arithmeticMean - median) / s_n
 * 			return result
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_s_n)) { __Pyx_RaiseClosureNameError("s_n"); __PYX_ERR(0, 212, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyInt_NeObjC(__pyx_cur_scope->__pyx_v_s_n, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "networkit/profiling/stat.pyx":213
 * 			result = float("nan")
 * 			if s_n != 0:
 * 				result = 3 * (arithmeticMean - median) / s_n             # <<<<<<<<<<<<<<
 * 			return result
 * 		results["Shape"]["Skewness YP"] = skewness_yp = funcSkewnessYP()
 */
    if (unlikely(!__pyx_cur_scope->__pyx_v_arithmeticMean)) { __Pyx_RaiseClosureNameError("arithmeticMean"); __PYX_ERR(0, 213, __pyx_L1_error) }
    if (unlikely(!__pyx_cur_scope->__pyx_v_median)) { __Pyx_RaiseClosureNameError("median"); __PYX_ERR(0, 213, __pyx_L1_error) }
    __pyx_t_1 = PyNumber_Subtract(__pyx_cur_scope->__pyx_v_arithmeticMean, __pyx_cur_scope->__pyx_v_median); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 213, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyNumber_Multiply(__pyx_int_3, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 213, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_v_s_n)) { __Pyx_RaiseClosureNameError("s_n"); __PYX_ERR(0, 213, __pyx_L1_error) }
    __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_cur_scope->__pyx_v_s_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 213, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "networkit/profiling/stat.pyx":212
 * 		def funcSkewnessYP():
 * 			result = float("nan")
 * 			if s_n != 0:             # <<<<<<<<<<<<<<
 * 				result = 3 * (arithmeticMean - median) / s_n
 * 			return result
 */
  }

  /* "networkit/profiling/stat.pyx":214
 * 			if s_n != 0:
 * 				result = 3 * (arithmeticMean - median) / s_n
 * 			return result             # <<<<<<<<<<<<<<
 * 		results["Shape"]["Skewness YP"] = skewness_yp = funcSkewnessYP()
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "networkit/profiling/stat.pyx":210
 * 		results["Location"]["Mid-Range"] = midRange = funcMidRange()
 * 
 * 		def funcSkewnessYP():             # <<<<<<<<<<<<<<
 * 			result = float("nan")
 * 			if s_n != 0:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.profiling.stat.Stat.run.funcSkewnessYP", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":217
 * 		results["Shape"]["Skewness YP"] = skewness_yp = funcSkewnessYP()
 * 
 * 		def funcMomentum(p):             # <<<<<<<<<<<<<<
 * 			result = float("nan")
 * 			if s_n != 0:
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_31funcMomentum(PyObject *__pyx_self, PyObject *__pyx_v_p); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_31funcMomentum = {"funcMomentum", (PyCFunction)__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_31funcMomentum, METH_O, 0};
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_31funcMomentum(PyObject *__pyx_self, PyObject *__pyx_v_p) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("funcMomentum (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_30funcMomentum(__pyx_self, ((PyObject *)__pyx_v_p));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_30funcMomentum(PyObject *__pyx_self, PyObject *__pyx_v_p) {
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_cur_scope;
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_outer_scope;
  PyObject *__pyx_v_result = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("funcMomentum", 0);
  __pyx_outer_scope = (struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "networkit/profiling/stat.pyx":218
 * 
 * 		def funcMomentum(p):
 * 			result = float("nan")             # <<<<<<<<<<<<<<
 * 			if s_n != 0:
 * 				result = 0
 */
  __pyx_t_1 = __Pyx_PyNumber_Float(__pyx_n_u_nan); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":219
 * 		def funcMomentum(p):
 * 			result = float("nan")
 * 			if s_n != 0:             # <<<<<<<<<<<<<<
 * 				result = 0
 * 				for i in range(n):
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_s_n)) { __Pyx_RaiseClosureNameError("s_n"); __PYX_ERR(0, 219, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyInt_NeObjC(__pyx_cur_scope->__pyx_v_s_n, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 219, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "networkit/profiling/stat.pyx":220
 * 			result = float("nan")
 * 			if s_n != 0:
 * 				result = 0             # <<<<<<<<<<<<<<
 * 				for i in range(n):
 * 					result += ((sample[i] - arithmeticMean) / s_n) ** p
 */
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_DECREF_SET(__pyx_v_result, __pyx_int_0);

    /* "networkit/profiling/stat.pyx":221
 * 			if s_n != 0:
 * 				result = 0
 * 				for i in range(n):             # <<<<<<<<<<<<<<
 * 					result += ((sample[i] - arithmeticMean) / s_n) ** p
 * 				result /= n
 */
    __pyx_t_3 = __pyx_cur_scope->__pyx_v_n;
    __pyx_t_4 = __pyx_t_3;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "networkit/profiling/stat.pyx":222
 * 				result = 0
 * 				for i in range(n):
 * 					result += ((sample[i] - arithmeticMean) / s_n) ** p             # <<<<<<<<<<<<<<
 * 				result /= n
 * 			return result
 */
      if (unlikely(!__pyx_cur_scope->__pyx_v_sample)) { __Pyx_RaiseClosureNameError("sample"); __PYX_ERR(0, 222, __pyx_L1_error) }
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_sample, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 222, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (unlikely(!__pyx_cur_scope->__pyx_v_arithmeticMean)) { __Pyx_RaiseClosureNameError("arithmeticMean"); __PYX_ERR(0, 222, __pyx_L1_error) }
      __pyx_t_6 = PyNumber_Subtract(__pyx_t_1, __pyx_cur_scope->__pyx_v_arithmeticMean); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 222, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_cur_scope->__pyx_v_s_n)) { __Pyx_RaiseClosureNameError("s_n"); __PYX_ERR(0, 222, __pyx_L1_error) }
      __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_6, __pyx_cur_scope->__pyx_v_s_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 222, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyNumber_Power(__pyx_t_1, __pyx_v_p, Py_None); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 222, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_result, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 222, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_1);
      __pyx_t_1 = 0;
    }

    /* "networkit/profiling/stat.pyx":223
 * 				for i in range(n):
 * 					result += ((sample[i] - arithmeticMean) / s_n) ** p
 * 				result /= n             # <<<<<<<<<<<<<<
 * 			return result
 * 
 */
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_cur_scope->__pyx_v_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyNumber_InPlaceDivide(__pyx_v_result, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "networkit/profiling/stat.pyx":219
 * 		def funcMomentum(p):
 * 			result = float("nan")
 * 			if s_n != 0:             # <<<<<<<<<<<<<<
 * 				result = 0
 * 				for i in range(n):
 */
  }

  /* "networkit/profiling/stat.pyx":224
 * 					result += ((sample[i] - arithmeticMean) / s_n) ** p
 * 				result /= n
 * 			return result             # <<<<<<<<<<<<<<
 * 
 * 		def funcSkewnessM():
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "networkit/profiling/stat.pyx":217
 * 		results["Shape"]["Skewness YP"] = skewness_yp = funcSkewnessYP()
 * 
 * 		def funcMomentum(p):             # <<<<<<<<<<<<<<
 * 			result = float("nan")
 * 			if s_n != 0:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("networkit.profiling.stat.Stat.run.funcMomentum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":226
 * 			return result
 * 
 * 		def funcSkewnessM():             # <<<<<<<<<<<<<<
 * 			result = funcMomentum(3)
 * 			return result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_33funcSkewnessM(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_33funcSkewnessM = {"funcSkewnessM", (PyCFunction)__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_33funcSkewnessM, METH_NOARGS, 0};
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_33funcSkewnessM(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("funcSkewnessM (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_32funcSkewnessM(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_32funcSkewnessM(PyObject *__pyx_self) {
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_cur_scope;
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_outer_scope;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("funcSkewnessM", 0);
  __pyx_outer_scope = (struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "networkit/profiling/stat.pyx":227
 * 
 * 		def funcSkewnessM():
 * 			result = funcMomentum(3)             # <<<<<<<<<<<<<<
 * 			return result
 * 		results["Shape"]["Skewness M"] = skewnewss_m = funcSkewnessM()
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_funcMomentum)) { __Pyx_RaiseClosureNameError("funcMomentum"); __PYX_ERR(0, 227, __pyx_L1_error) }
  __pyx_t_1 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_30funcMomentum(__pyx_cur_scope->__pyx_v_funcMomentum, __pyx_int_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":228
 * 		def funcSkewnessM():
 * 			result = funcMomentum(3)
 * 			return result             # <<<<<<<<<<<<<<
 * 		results["Shape"]["Skewness M"] = skewnewss_m = funcSkewnessM()
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "networkit/profiling/stat.pyx":226
 * 			return result
 * 
 * 		def funcSkewnessM():             # <<<<<<<<<<<<<<
 * 			result = funcMomentum(3)
 * 			return result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.profiling.stat.Stat.run.funcSkewnessM", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":231
 * 		results["Shape"]["Skewness M"] = skewnewss_m = funcSkewnessM()
 * 
 * 		def funcKurtosis():             # <<<<<<<<<<<<<<
 * 			result = funcMomentum(4) - 3
 * 			return result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_35funcKurtosis(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_35funcKurtosis = {"funcKurtosis", (PyCFunction)__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_35funcKurtosis, METH_NOARGS, 0};
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_35funcKurtosis(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("funcKurtosis (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_34funcKurtosis(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_34funcKurtosis(PyObject *__pyx_self) {
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_cur_scope;
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_outer_scope;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("funcKurtosis", 0);
  __pyx_outer_scope = (struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "networkit/profiling/stat.pyx":232
 * 
 * 		def funcKurtosis():
 * 			result = funcMomentum(4) - 3             # <<<<<<<<<<<<<<
 * 			return result
 * 		results["Shape"]["Kurtosis"] = kurtosis = funcKurtosis()
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_funcMomentum)) { __Pyx_RaiseClosureNameError("funcMomentum"); __PYX_ERR(0, 232, __pyx_L1_error) }
  __pyx_t_1 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_30funcMomentum(__pyx_cur_scope->__pyx_v_funcMomentum, __pyx_int_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_SubtractObjC(__pyx_t_1, __pyx_int_3, 3, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_result = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "networkit/profiling/stat.pyx":233
 * 		def funcKurtosis():
 * 			result = funcMomentum(4) - 3
 * 			return result             # <<<<<<<<<<<<<<
 * 		results["Shape"]["Kurtosis"] = kurtosis = funcKurtosis()
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "networkit/profiling/stat.pyx":231
 * 		results["Shape"]["Skewness M"] = skewnewss_m = funcSkewnessM()
 * 
 * 		def funcKurtosis():             # <<<<<<<<<<<<<<
 * 			result = funcMomentum(4) - 3
 * 			return result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.profiling.stat.Stat.run.funcKurtosis", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":236
 * 		results["Shape"]["Kurtosis"] = kurtosis = funcKurtosis()
 * 
 * 		def funcNumberOfBins(commulative):             # <<<<<<<<<<<<<<
 * 			result = 1
 * 			if min < max:
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_37funcNumberOfBins(PyObject *__pyx_self, PyObject *__pyx_v_commulative); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_37funcNumberOfBins = {"funcNumberOfBins", (PyCFunction)__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_37funcNumberOfBins, METH_O, 0};
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_37funcNumberOfBins(PyObject *__pyx_self, PyObject *__pyx_v_commulative) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("funcNumberOfBins (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_36funcNumberOfBins(__pyx_self, ((PyObject *)__pyx_v_commulative));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_36funcNumberOfBins(PyObject *__pyx_self, PyObject *__pyx_v_commulative) {
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_cur_scope;
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_outer_scope;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("funcNumberOfBins", 0);
  __pyx_outer_scope = (struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "networkit/profiling/stat.pyx":237
 * 
 * 		def funcNumberOfBins(commulative):
 * 			result = 1             # <<<<<<<<<<<<<<
 * 			if min < max:
 * 				if commulative:
 */
  __Pyx_INCREF(__pyx_int_1);
  __pyx_v_result = __pyx_int_1;

  /* "networkit/profiling/stat.pyx":238
 * 		def funcNumberOfBins(commulative):
 * 			result = 1
 * 			if min < max:             # <<<<<<<<<<<<<<
 * 				if commulative:
 * 					result = 256
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_min)) { __Pyx_RaiseClosureNameError("min"); __PYX_ERR(0, 238, __pyx_L1_error) }
  if (unlikely(!__pyx_cur_scope->__pyx_v_max)) { __Pyx_RaiseClosureNameError("max"); __PYX_ERR(0, 238, __pyx_L1_error) }
  __pyx_t_1 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_min, __pyx_cur_scope->__pyx_v_max, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 238, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "networkit/profiling/stat.pyx":239
 * 			result = 1
 * 			if min < max:
 * 				if commulative:             # <<<<<<<<<<<<<<
 * 					result = 256
 * 				else:
 */
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_commulative); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 239, __pyx_L1_error)
    if (__pyx_t_2) {

      /* "networkit/profiling/stat.pyx":240
 * 			if min < max:
 * 				if commulative:
 * 					result = 256             # <<<<<<<<<<<<<<
 * 				else:
 * 					result = math.sqrt(n)
 */
      __Pyx_INCREF(__pyx_int_256);
      __Pyx_DECREF_SET(__pyx_v_result, __pyx_int_256);

      /* "networkit/profiling/stat.pyx":239
 * 			result = 1
 * 			if min < max:
 * 				if commulative:             # <<<<<<<<<<<<<<
 * 					result = 256
 * 				else:
 */
      goto __pyx_L4;
    }

    /* "networkit/profiling/stat.pyx":242
 * 					result = 256
 * 				else:
 * 					result = math.sqrt(n)             # <<<<<<<<<<<<<<
 * 					if (result < 5):
 * 						result = 5
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_math); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 242, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_sqrt); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 242, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyInt_FromSsize_t(__pyx_cur_scope->__pyx_v_n); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 242, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 242, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "networkit/profiling/stat.pyx":243
 * 				else:
 * 					result = math.sqrt(n)
 * 					if (result < 5):             # <<<<<<<<<<<<<<
 * 						result = 5
 * 					elif (result > 20):
 */
      __pyx_t_1 = PyObject_RichCompare(__pyx_v_result, __pyx_int_5, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 243, __pyx_L1_error)
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 243, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (__pyx_t_2) {

        /* "networkit/profiling/stat.pyx":244
 * 					result = math.sqrt(n)
 * 					if (result < 5):
 * 						result = 5             # <<<<<<<<<<<<<<
 * 					elif (result > 20):
 * 						result = 20
 */
        __Pyx_INCREF(__pyx_int_5);
        __Pyx_DECREF_SET(__pyx_v_result, __pyx_int_5);

        /* "networkit/profiling/stat.pyx":243
 * 				else:
 * 					result = math.sqrt(n)
 * 					if (result < 5):             # <<<<<<<<<<<<<<
 * 						result = 5
 * 					elif (result > 20):
 */
        goto __pyx_L5;
      }

      /* "networkit/profiling/stat.pyx":245
 * 					if (result < 5):
 * 						result = 5
 * 					elif (result > 20):             # <<<<<<<<<<<<<<
 * 						result = 20
 * 			return int(result)
 */
      __pyx_t_1 = PyObject_RichCompare(__pyx_v_result, __pyx_int_20, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 245, __pyx_L1_error)
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 245, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (__pyx_t_2) {

        /* "networkit/profiling/stat.pyx":246
 * 						result = 5
 * 					elif (result > 20):
 * 						result = 20             # <<<<<<<<<<<<<<
 * 			return int(result)
 * 		results["Binning"]["Number Histogram"] = k_Bins_Histogram = funcNumberOfBins(False)
 */
        __Pyx_INCREF(__pyx_int_20);
        __Pyx_DECREF_SET(__pyx_v_result, __pyx_int_20);

        /* "networkit/profiling/stat.pyx":245
 * 					if (result < 5):
 * 						result = 5
 * 					elif (result > 20):             # <<<<<<<<<<<<<<
 * 						result = 20
 * 			return int(result)
 */
      }
      __pyx_L5:;
    }
    __pyx_L4:;

    /* "networkit/profiling/stat.pyx":238
 * 		def funcNumberOfBins(commulative):
 * 			result = 1
 * 			if min < max:             # <<<<<<<<<<<<<<
 * 				if commulative:
 * 					result = 256
 */
  }

  /* "networkit/profiling/stat.pyx":247
 * 					elif (result > 20):
 * 						result = 20
 * 			return int(result)             # <<<<<<<<<<<<<<
 * 		results["Binning"]["Number Histogram"] = k_Bins_Histogram = funcNumberOfBins(False)
 * 		k_Bins_CDF = funcNumberOfBins(True)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyNumber_Int(__pyx_v_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "networkit/profiling/stat.pyx":236
 * 		results["Shape"]["Kurtosis"] = kurtosis = funcKurtosis()
 * 
 * 		def funcNumberOfBins(commulative):             # <<<<<<<<<<<<<<
 * 			result = 1
 * 			if min < max:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("networkit.profiling.stat.Stat.run.funcNumberOfBins", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":251
 * 		k_Bins_CDF = funcNumberOfBins(True)
 * 
 * 		def funcIntervals(numberOfBins):             # <<<<<<<<<<<<<<
 * 			result = []
 * 			w = sampleRange / numberOfBins
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_39funcIntervals(PyObject *__pyx_self, PyObject *__pyx_v_numberOfBins); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_39funcIntervals = {"funcIntervals", (PyCFunction)__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_39funcIntervals, METH_O, 0};
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_39funcIntervals(PyObject *__pyx_self, PyObject *__pyx_v_numberOfBins) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("funcIntervals (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_38funcIntervals(__pyx_self, ((PyObject *)__pyx_v_numberOfBins));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_38funcIntervals(PyObject *__pyx_self, PyObject *__pyx_v_numberOfBins) {
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_cur_scope;
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_outer_scope;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_w = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("funcIntervals", 0);
  __pyx_outer_scope = (struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "networkit/profiling/stat.pyx":252
 * 
 * 		def funcIntervals(numberOfBins):
 * 			result = []             # <<<<<<<<<<<<<<
 * 			w = sampleRange / numberOfBins
 * 			result.append(min)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":253
 * 		def funcIntervals(numberOfBins):
 * 			result = []
 * 			w = sampleRange / numberOfBins             # <<<<<<<<<<<<<<
 * 			result.append(min)
 * 			for i in range(1, numberOfBins):
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_sampleRange)) { __Pyx_RaiseClosureNameError("sampleRange"); __PYX_ERR(0, 253, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_cur_scope->__pyx_v_sampleRange, __pyx_v_numberOfBins); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_w = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":254
 * 			result = []
 * 			w = sampleRange / numberOfBins
 * 			result.append(min)             # <<<<<<<<<<<<<<
 * 			for i in range(1, numberOfBins):
 * 				result.append(min + w * i)
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_min)) { __Pyx_RaiseClosureNameError("min"); __PYX_ERR(0, 254, __pyx_L1_error) }
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_min;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyList_Append(__pyx_v_result, __pyx_t_1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 254, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":255
 * 			w = sampleRange / numberOfBins
 * 			result.append(min)
 * 			for i in range(1, numberOfBins):             # <<<<<<<<<<<<<<
 * 				result.append(min + w * i)
 * 			result.append(max if min < max else max+10e-12)
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_int_1);
  __Pyx_INCREF(__pyx_v_numberOfBins);
  __Pyx_GIVEREF(__pyx_v_numberOfBins);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_numberOfBins);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_1 = __pyx_t_3; __Pyx_INCREF(__pyx_t_1); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 255, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 255, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 255, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 255, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 255, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_5(__pyx_t_1);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 255, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "networkit/profiling/stat.pyx":256
 * 			result.append(min)
 * 			for i in range(1, numberOfBins):
 * 				result.append(min + w * i)             # <<<<<<<<<<<<<<
 * 			result.append(max if min < max else max+10e-12)
 * 			return result
 */
    if (unlikely(!__pyx_cur_scope->__pyx_v_min)) { __Pyx_RaiseClosureNameError("min"); __PYX_ERR(0, 256, __pyx_L1_error) }
    __pyx_t_3 = PyNumber_Multiply(__pyx_v_w, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 256, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = PyNumber_Add(__pyx_cur_scope->__pyx_v_min, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 256, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = __Pyx_PyList_Append(__pyx_v_result, __pyx_t_6); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 256, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "networkit/profiling/stat.pyx":255
 * 			w = sampleRange / numberOfBins
 * 			result.append(min)
 * 			for i in range(1, numberOfBins):             # <<<<<<<<<<<<<<
 * 				result.append(min + w * i)
 * 			result.append(max if min < max else max+10e-12)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":257
 * 			for i in range(1, numberOfBins):
 * 				result.append(min + w * i)
 * 			result.append(max if min < max else max+10e-12)             # <<<<<<<<<<<<<<
 * 			return result
 * 		results["Binning"]["Intervals Histogram"] = intervalsHistogram = funcIntervals(k_Bins_Histogram)
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_min)) { __Pyx_RaiseClosureNameError("min"); __PYX_ERR(0, 257, __pyx_L1_error) }
  if (unlikely(!__pyx_cur_scope->__pyx_v_max)) { __Pyx_RaiseClosureNameError("max"); __PYX_ERR(0, 257, __pyx_L1_error) }
  __pyx_t_6 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_min, __pyx_cur_scope->__pyx_v_max, Py_LT); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 257, __pyx_L1_error)
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__pyx_t_7) {
    if (unlikely(!__pyx_cur_scope->__pyx_v_max)) { __Pyx_RaiseClosureNameError("max"); __PYX_ERR(0, 257, __pyx_L1_error) }
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_max);
    __pyx_t_1 = __pyx_cur_scope->__pyx_v_max;
  } else {
    if (unlikely(!__pyx_cur_scope->__pyx_v_max)) { __Pyx_RaiseClosureNameError("max"); __PYX_ERR(0, 257, __pyx_L1_error) }
    __pyx_t_6 = __Pyx_PyFloat_AddObjC(__pyx_cur_scope->__pyx_v_max, __pyx_float_10eneg_12, 10e-12, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 257, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __pyx_t_6;
    __pyx_t_6 = 0;
  }
  __pyx_t_2 = __Pyx_PyList_Append(__pyx_v_result, __pyx_t_1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":258
 * 				result.append(min + w * i)
 * 			result.append(max if min < max else max+10e-12)
 * 			return result             # <<<<<<<<<<<<<<
 * 		results["Binning"]["Intervals Histogram"] = intervalsHistogram = funcIntervals(k_Bins_Histogram)
 * 		intervalsCDF = funcIntervals(k_Bins_CDF)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "networkit/profiling/stat.pyx":251
 * 		k_Bins_CDF = funcNumberOfBins(True)
 * 
 * 		def funcIntervals(numberOfBins):             # <<<<<<<<<<<<<<
 * 			result = []
 * 			w = sampleRange / numberOfBins
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("networkit.profiling.stat.Stat.run.funcIntervals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_w);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":262
 * 		intervalsCDF = funcIntervals(k_Bins_CDF)
 * 
 * 		def funcBinAbsoluteFrequencies(numberOfBins, intervals, comulative):             # <<<<<<<<<<<<<<
 * 			result = []
 * 			index = 0
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_41funcBinAbsoluteFrequencies(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_41funcBinAbsoluteFrequencies = {"funcBinAbsoluteFrequencies", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_41funcBinAbsoluteFrequencies, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_41funcBinAbsoluteFrequencies(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_numberOfBins = 0;
  PyObject *__pyx_v_intervals = 0;
  PyObject *__pyx_v_comulative = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("funcBinAbsoluteFrequencies (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_numberOfBins,&__pyx_n_s_intervals,&__pyx_n_s_comulative,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_numberOfBins)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_intervals)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("funcBinAbsoluteFrequencies", 1, 3, 3, 1); __PYX_ERR(0, 262, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_comulative)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("funcBinAbsoluteFrequencies", 1, 3, 3, 2); __PYX_ERR(0, 262, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "funcBinAbsoluteFrequencies") < 0)) __PYX_ERR(0, 262, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_numberOfBins = values[0];
    __pyx_v_intervals = values[1];
    __pyx_v_comulative = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("funcBinAbsoluteFrequencies", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 262, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.profiling.stat.Stat.run.funcBinAbsoluteFrequencies", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_40funcBinAbsoluteFrequencies(__pyx_self, __pyx_v_numberOfBins, __pyx_v_intervals, __pyx_v_comulative);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_40funcBinAbsoluteFrequencies(PyObject *__pyx_self, PyObject *__pyx_v_numberOfBins, PyObject *__pyx_v_intervals, PyObject *__pyx_v_comulative) {
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_cur_scope;
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_outer_scope;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_index = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("funcBinAbsoluteFrequencies", 0);
  __pyx_outer_scope = (struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "networkit/profiling/stat.pyx":263
 * 
 * 		def funcBinAbsoluteFrequencies(numberOfBins, intervals, comulative):
 * 			result = []             # <<<<<<<<<<<<<<
 * 			index = 0
 * 			for i in range(numberOfBins):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":264
 * 		def funcBinAbsoluteFrequencies(numberOfBins, intervals, comulative):
 * 			result = []
 * 			index = 0             # <<<<<<<<<<<<<<
 * 			for i in range(numberOfBins):
 * 				result.append(0)
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_index = __pyx_int_0;

  /* "networkit/profiling/stat.pyx":265
 * 			result = []
 * 			index = 0
 * 			for i in range(numberOfBins):             # <<<<<<<<<<<<<<
 * 				result.append(0)
 * 			for i in range(n):
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_v_numberOfBins); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 265, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 265, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 265, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 265, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 265, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 265, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 265, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "networkit/profiling/stat.pyx":266
 * 			index = 0
 * 			for i in range(numberOfBins):
 * 				result.append(0)             # <<<<<<<<<<<<<<
 * 			for i in range(n):
 * 				value = sampleSorted[i]
 */
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_result, __pyx_int_0); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 266, __pyx_L1_error)

    /* "networkit/profiling/stat.pyx":265
 * 			result = []
 * 			index = 0
 * 			for i in range(numberOfBins):             # <<<<<<<<<<<<<<
 * 				result.append(0)
 * 			for i in range(n):
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/profiling/stat.pyx":267
 * 			for i in range(numberOfBins):
 * 				result.append(0)
 * 			for i in range(n):             # <<<<<<<<<<<<<<
 * 				value = sampleSorted[i]
 * 				while intervals[index + 1] < value:
 */
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_cur_scope->__pyx_v_n); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 267, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 267, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 267, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 267, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 267, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 267, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "networkit/profiling/stat.pyx":268
 * 				result.append(0)
 * 			for i in range(n):
 * 				value = sampleSorted[i]             # <<<<<<<<<<<<<<
 * 				while intervals[index + 1] < value:
 * 					index += 1
 */
    if (unlikely(!__pyx_cur_scope->__pyx_v_sampleSorted)) { __Pyx_RaiseClosureNameError("sampleSorted"); __PYX_ERR(0, 268, __pyx_L1_error) }
    __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_cur_scope->__pyx_v_sampleSorted, __pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "networkit/profiling/stat.pyx":269
 * 			for i in range(n):
 * 				value = sampleSorted[i]
 * 				while intervals[index + 1] < value:             # <<<<<<<<<<<<<<
 * 					index += 1
 * 					if comulative and index > 0:
 */
    while (1) {
      __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_v_index, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 269, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_v_intervals, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 269, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyObject_RichCompare(__pyx_t_6, __pyx_v_value, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 269, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 269, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (!__pyx_t_7) break;

      /* "networkit/profiling/stat.pyx":270
 * 				value = sampleSorted[i]
 * 				while intervals[index + 1] < value:
 * 					index += 1             # <<<<<<<<<<<<<<
 * 					if comulative and index > 0:
 * 						result[index] = result[index-1]
 */
      __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_v_index, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 270, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF_SET(__pyx_v_index, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "networkit/profiling/stat.pyx":271
 * 				while intervals[index + 1] < value:
 * 					index += 1
 * 					if comulative and index > 0:             # <<<<<<<<<<<<<<
 * 						result[index] = result[index-1]
 * 				result[index] += 1
 */
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_v_comulative); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 271, __pyx_L1_error)
      if (__pyx_t_8) {
      } else {
        __pyx_t_7 = __pyx_t_8;
        goto __pyx_L10_bool_binop_done;
      }
      __pyx_t_1 = PyObject_RichCompare(__pyx_v_index, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 271, __pyx_L1_error)
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 271, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_7 = __pyx_t_8;
      __pyx_L10_bool_binop_done:;
      if (__pyx_t_7) {

        /* "networkit/profiling/stat.pyx":272
 * 					index += 1
 * 					if comulative and index > 0:
 * 						result[index] = result[index-1]             # <<<<<<<<<<<<<<
 * 				result[index] += 1
 * 			return result
 */
        __pyx_t_1 = __Pyx_PyInt_SubtractObjC(__pyx_v_index, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 272, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_v_result, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 272, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (unlikely(PyObject_SetItem(__pyx_v_result, __pyx_v_index, __pyx_t_6) < 0)) __PYX_ERR(0, 272, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "networkit/profiling/stat.pyx":271
 * 				while intervals[index + 1] < value:
 * 					index += 1
 * 					if comulative and index > 0:             # <<<<<<<<<<<<<<
 * 						result[index] = result[index-1]
 * 				result[index] += 1
 */
      }
    }

    /* "networkit/profiling/stat.pyx":273
 * 					if comulative and index > 0:
 * 						result[index] = result[index-1]
 * 				result[index] += 1             # <<<<<<<<<<<<<<
 * 			return result
 * 		results["Binning"]["Absolute Frequencies Histogram"] = absoluteFrequenciesHistogram = funcBinAbsoluteFrequencies(k_Bins_Histogram, intervalsHistogram, False)
 */
    __Pyx_INCREF(__pyx_v_index);
    __pyx_t_6 = __pyx_v_index;
    __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_result, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(PyObject_SetItem(__pyx_v_result, __pyx_t_6, __pyx_t_9) < 0)) __PYX_ERR(0, 273, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "networkit/profiling/stat.pyx":267
 * 			for i in range(numberOfBins):
 * 				result.append(0)
 * 			for i in range(n):             # <<<<<<<<<<<<<<
 * 				value = sampleSorted[i]
 * 				while intervals[index + 1] < value:
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/profiling/stat.pyx":274
 * 						result[index] = result[index-1]
 * 				result[index] += 1
 * 			return result             # <<<<<<<<<<<<<<
 * 		results["Binning"]["Absolute Frequencies Histogram"] = absoluteFrequenciesHistogram = funcBinAbsoluteFrequencies(k_Bins_Histogram, intervalsHistogram, False)
 * 		absoluteFrequenciesCDF = funcBinAbsoluteFrequencies(k_Bins_CDF, intervalsCDF, True)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "networkit/profiling/stat.pyx":262
 * 		intervalsCDF = funcIntervals(k_Bins_CDF)
 * 
 * 		def funcBinAbsoluteFrequencies(numberOfBins, intervals, comulative):             # <<<<<<<<<<<<<<
 * 			result = []
 * 			index = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("networkit.profiling.stat.Stat.run.funcBinAbsoluteFrequencies", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":278
 * 		absoluteFrequenciesCDF = funcBinAbsoluteFrequencies(k_Bins_CDF, intervalsCDF, True)
 * 
 * 		def funcJoinEmptyBins(k_Bin, intervals, frequencies, commulative):             # <<<<<<<<<<<<<<
 * 			result = k_Bin
 * 			value = 0
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_43funcJoinEmptyBins(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_43funcJoinEmptyBins = {"funcJoinEmptyBins", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_43funcJoinEmptyBins, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_43funcJoinEmptyBins(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_k_Bin = 0;
  PyObject *__pyx_v_intervals = 0;
  PyObject *__pyx_v_frequencies = 0;
  PyObject *__pyx_v_commulative = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("funcJoinEmptyBins (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_k_Bin,&__pyx_n_s_intervals,&__pyx_n_s_frequencies,&__pyx_n_s_commulative,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k_Bin)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_intervals)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("funcJoinEmptyBins", 1, 4, 4, 1); __PYX_ERR(0, 278, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_frequencies)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("funcJoinEmptyBins", 1, 4, 4, 2); __PYX_ERR(0, 278, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_commulative)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("funcJoinEmptyBins", 1, 4, 4, 3); __PYX_ERR(0, 278, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "funcJoinEmptyBins") < 0)) __PYX_ERR(0, 278, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_k_Bin = values[0];
    __pyx_v_intervals = values[1];
    __pyx_v_frequencies = values[2];
    __pyx_v_commulative = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("funcJoinEmptyBins", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 278, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.profiling.stat.Stat.run.funcJoinEmptyBins", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_42funcJoinEmptyBins(__pyx_self, __pyx_v_k_Bin, __pyx_v_intervals, __pyx_v_frequencies, __pyx_v_commulative);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_42funcJoinEmptyBins(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_k_Bin, PyObject *__pyx_v_intervals, PyObject *__pyx_v_frequencies, PyObject *__pyx_v_commulative) {
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("funcJoinEmptyBins", 0);

  /* "networkit/profiling/stat.pyx":279
 * 
 * 		def funcJoinEmptyBins(k_Bin, intervals, frequencies, commulative):
 * 			result = k_Bin             # <<<<<<<<<<<<<<
 * 			value = 0
 * 			for i in range(k_Bin):
 */
  __Pyx_INCREF(__pyx_v_k_Bin);
  __pyx_v_result = __pyx_v_k_Bin;

  /* "networkit/profiling/stat.pyx":280
 * 		def funcJoinEmptyBins(k_Bin, intervals, frequencies, commulative):
 * 			result = k_Bin
 * 			value = 0             # <<<<<<<<<<<<<<
 * 			for i in range(k_Bin):
 * 				if frequencies[k_Bin-i-1] == value:
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_value = __pyx_int_0;

  /* "networkit/profiling/stat.pyx":281
 * 			result = k_Bin
 * 			value = 0
 * 			for i in range(k_Bin):             # <<<<<<<<<<<<<<
 * 				if frequencies[k_Bin-i-1] == value:
 * 					del frequencies[k_Bin-i-1]
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_v_k_Bin); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 281, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 281, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 281, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 281, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 281, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 281, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 281, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "networkit/profiling/stat.pyx":282
 * 			value = 0
 * 			for i in range(k_Bin):
 * 				if frequencies[k_Bin-i-1] == value:             # <<<<<<<<<<<<<<
 * 					del frequencies[k_Bin-i-1]
 * 					del intervals[k_Bin-i]
 */
    __pyx_t_1 = PyNumber_Subtract(__pyx_v_k_Bin, __pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 282, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyInt_SubtractObjC(__pyx_t_1, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 282, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_frequencies, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 282, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_1, __pyx_v_value, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 282, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 282, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_6) {

      /* "networkit/profiling/stat.pyx":283
 * 			for i in range(k_Bin):
 * 				if frequencies[k_Bin-i-1] == value:
 * 					del frequencies[k_Bin-i-1]             # <<<<<<<<<<<<<<
 * 					del intervals[k_Bin-i]
 * 					result -= 1
 */
      __pyx_t_5 = PyNumber_Subtract(__pyx_v_k_Bin, __pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 283, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 = __Pyx_PyInt_SubtractObjC(__pyx_t_5, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 283, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(PyObject_DelItem(__pyx_v_frequencies, __pyx_t_1) < 0)) __PYX_ERR(0, 283, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "networkit/profiling/stat.pyx":284
 * 				if frequencies[k_Bin-i-1] == value:
 * 					del frequencies[k_Bin-i-1]
 * 					del intervals[k_Bin-i]             # <<<<<<<<<<<<<<
 * 					result -= 1
 * 				if commulative:
 */
      __pyx_t_1 = PyNumber_Subtract(__pyx_v_k_Bin, __pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 284, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (unlikely(PyObject_DelItem(__pyx_v_intervals, __pyx_t_1) < 0)) __PYX_ERR(0, 284, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "networkit/profiling/stat.pyx":285
 * 					del frequencies[k_Bin-i-1]
 * 					del intervals[k_Bin-i]
 * 					result -= 1             # <<<<<<<<<<<<<<
 * 				if commulative:
 * 					value = frequencies[k_Bin-i-1]
 */
      __pyx_t_1 = __Pyx_PyInt_SubtractObjC(__pyx_v_result, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 285, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "networkit/profiling/stat.pyx":282
 * 			value = 0
 * 			for i in range(k_Bin):
 * 				if frequencies[k_Bin-i-1] == value:             # <<<<<<<<<<<<<<
 * 					del frequencies[k_Bin-i-1]
 * 					del intervals[k_Bin-i]
 */
    }

    /* "networkit/profiling/stat.pyx":286
 * 					del intervals[k_Bin-i]
 * 					result -= 1
 * 				if commulative:             # <<<<<<<<<<<<<<
 * 					value = frequencies[k_Bin-i-1]
 * 			return result
 */
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_commulative); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 286, __pyx_L1_error)
    if (__pyx_t_6) {

      /* "networkit/profiling/stat.pyx":287
 * 					result -= 1
 * 				if commulative:
 * 					value = frequencies[k_Bin-i-1]             # <<<<<<<<<<<<<<
 * 			return result
 * 		results["Binning"]["Number CDF"] = k_Bins_CDF = funcJoinEmptyBins(k_Bins_CDF, intervalsCDF, absoluteFrequenciesCDF, True)
 */
      __pyx_t_1 = PyNumber_Subtract(__pyx_v_k_Bin, __pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 287, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = __Pyx_PyInt_SubtractObjC(__pyx_t_1, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 287, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_frequencies, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 287, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "networkit/profiling/stat.pyx":286
 * 					del intervals[k_Bin-i]
 * 					result -= 1
 * 				if commulative:             # <<<<<<<<<<<<<<
 * 					value = frequencies[k_Bin-i-1]
 * 			return result
 */
    }

    /* "networkit/profiling/stat.pyx":281
 * 			result = k_Bin
 * 			value = 0
 * 			for i in range(k_Bin):             # <<<<<<<<<<<<<<
 * 				if frequencies[k_Bin-i-1] == value:
 * 					del frequencies[k_Bin-i-1]
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/profiling/stat.pyx":288
 * 				if commulative:
 * 					value = frequencies[k_Bin-i-1]
 * 			return result             # <<<<<<<<<<<<<<
 * 		results["Binning"]["Number CDF"] = k_Bins_CDF = funcJoinEmptyBins(k_Bins_CDF, intervalsCDF, absoluteFrequenciesCDF, True)
 * 		results["Binning"]["Absolute Frequencies CDF"] = absoluteFrequenciesCDF
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "networkit/profiling/stat.pyx":278
 * 		absoluteFrequenciesCDF = funcBinAbsoluteFrequencies(k_Bins_CDF, intervalsCDF, True)
 * 
 * 		def funcJoinEmptyBins(k_Bin, intervals, frequencies, commulative):             # <<<<<<<<<<<<<<
 * 			result = k_Bin
 * 			value = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("networkit.profiling.stat.Stat.run.funcJoinEmptyBins", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":293
 * 		results["Binning"]["Intervals CDF"] = intervalsCDF
 * 
 * 		def funcBinRelativeFrequencies(absoluteFrequencies):             # <<<<<<<<<<<<<<
 * 			result = []
 * 			for H in absoluteFrequencies:
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_45funcBinRelativeFrequencies(PyObject *__pyx_self, PyObject *__pyx_v_absoluteFrequencies); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_45funcBinRelativeFrequencies = {"funcBinRelativeFrequencies", (PyCFunction)__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_45funcBinRelativeFrequencies, METH_O, 0};
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_45funcBinRelativeFrequencies(PyObject *__pyx_self, PyObject *__pyx_v_absoluteFrequencies) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("funcBinRelativeFrequencies (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_44funcBinRelativeFrequencies(__pyx_self, ((PyObject *)__pyx_v_absoluteFrequencies));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_44funcBinRelativeFrequencies(PyObject *__pyx_self, PyObject *__pyx_v_absoluteFrequencies) {
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_cur_scope;
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_outer_scope;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_H = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("funcBinRelativeFrequencies", 0);
  __pyx_outer_scope = (struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "networkit/profiling/stat.pyx":294
 * 
 * 		def funcBinRelativeFrequencies(absoluteFrequencies):
 * 			result = []             # <<<<<<<<<<<<<<
 * 			for H in absoluteFrequencies:
 * 				result.append(H / n)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":295
 * 		def funcBinRelativeFrequencies(absoluteFrequencies):
 * 			result = []
 * 			for H in absoluteFrequencies:             # <<<<<<<<<<<<<<
 * 				result.append(H / n)
 * 			return result
 */
  if (likely(PyList_CheckExact(__pyx_v_absoluteFrequencies)) || PyTuple_CheckExact(__pyx_v_absoluteFrequencies)) {
    __pyx_t_1 = __pyx_v_absoluteFrequencies; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_absoluteFrequencies); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 295, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 295, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 295, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 295, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 295, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 295, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_H, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "networkit/profiling/stat.pyx":296
 * 			result = []
 * 			for H in absoluteFrequencies:
 * 				result.append(H / n)             # <<<<<<<<<<<<<<
 * 			return result
 * 		results["Binning"]["Relative Frequencies Histogram"] = relativeFrequenciesHistogram = funcBinRelativeFrequencies(absoluteFrequenciesHistogram)
 */
    __pyx_t_4 = PyInt_FromSsize_t(__pyx_cur_scope->__pyx_v_n); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_v_H, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_result, __pyx_t_5); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 296, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "networkit/profiling/stat.pyx":295
 * 		def funcBinRelativeFrequencies(absoluteFrequencies):
 * 			result = []
 * 			for H in absoluteFrequencies:             # <<<<<<<<<<<<<<
 * 				result.append(H / n)
 * 			return result
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":297
 * 			for H in absoluteFrequencies:
 * 				result.append(H / n)
 * 			return result             # <<<<<<<<<<<<<<
 * 		results["Binning"]["Relative Frequencies Histogram"] = relativeFrequenciesHistogram = funcBinRelativeFrequencies(absoluteFrequenciesHistogram)
 * 		results["Binning"]["Relative Frequencies CDF"] = relativeFrequenciesCDF = funcBinRelativeFrequencies(absoluteFrequenciesCDF)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "networkit/profiling/stat.pyx":293
 * 		results["Binning"]["Intervals CDF"] = intervalsCDF
 * 
 * 		def funcBinRelativeFrequencies(absoluteFrequencies):             # <<<<<<<<<<<<<<
 * 			result = []
 * 			for H in absoluteFrequencies:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("networkit.profiling.stat.Stat.run.funcBinRelativeFrequencies", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_H);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":301
 * 		results["Binning"]["Relative Frequencies CDF"] = relativeFrequenciesCDF = funcBinRelativeFrequencies(absoluteFrequenciesCDF)
 * 
 * 		def funcMode():             # <<<<<<<<<<<<<<
 * 			index = 0
 * 			max = 0
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_47funcMode(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_47funcMode = {"funcMode", (PyCFunction)__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_47funcMode, METH_NOARGS, 0};
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_47funcMode(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("funcMode (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_46funcMode(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_46funcMode(PyObject *__pyx_self) {
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_cur_scope;
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_outer_scope;
  PyObject *__pyx_v_index = NULL;
  PyObject *__pyx_v_max = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("funcMode", 0);
  __pyx_outer_scope = (struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "networkit/profiling/stat.pyx":302
 * 
 * 		def funcMode():
 * 			index = 0             # <<<<<<<<<<<<<<
 * 			max = 0
 * 			for i in range(len(absoluteFrequenciesHistogram)):
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_index = __pyx_int_0;

  /* "networkit/profiling/stat.pyx":303
 * 		def funcMode():
 * 			index = 0
 * 			max = 0             # <<<<<<<<<<<<<<
 * 			for i in range(len(absoluteFrequenciesHistogram)):
 * 				if absoluteFrequenciesHistogram[i] > max:
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_max = __pyx_int_0;

  /* "networkit/profiling/stat.pyx":304
 * 			index = 0
 * 			max = 0
 * 			for i in range(len(absoluteFrequenciesHistogram)):             # <<<<<<<<<<<<<<
 * 				if absoluteFrequenciesHistogram[i] > max:
 * 					max = absoluteFrequenciesHistogram[i]
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_absoluteFrequenciesHistogram)) { __Pyx_RaiseClosureNameError("absoluteFrequenciesHistogram"); __PYX_ERR(0, 304, __pyx_L1_error) }
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_absoluteFrequenciesHistogram;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "networkit/profiling/stat.pyx":305
 * 			max = 0
 * 			for i in range(len(absoluteFrequenciesHistogram)):
 * 				if absoluteFrequenciesHistogram[i] > max:             # <<<<<<<<<<<<<<
 * 					max = absoluteFrequenciesHistogram[i]
 * 					index = i
 */
    if (unlikely(!__pyx_cur_scope->__pyx_v_absoluteFrequenciesHistogram)) { __Pyx_RaiseClosureNameError("absoluteFrequenciesHistogram"); __PYX_ERR(0, 305, __pyx_L1_error) }
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_absoluteFrequenciesHistogram, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_1, __pyx_v_max, Py_GT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 305, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 305, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_6) {

      /* "networkit/profiling/stat.pyx":306
 * 			for i in range(len(absoluteFrequenciesHistogram)):
 * 				if absoluteFrequenciesHistogram[i] > max:
 * 					max = absoluteFrequenciesHistogram[i]             # <<<<<<<<<<<<<<
 * 					index = i
 * 			result = ((intervalsHistogram[index]+intervalsHistogram[index+1]) / 2, max)
 */
      if (unlikely(!__pyx_cur_scope->__pyx_v_absoluteFrequenciesHistogram)) { __Pyx_RaiseClosureNameError("absoluteFrequenciesHistogram"); __PYX_ERR(0, 306, __pyx_L1_error) }
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_absoluteFrequenciesHistogram, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 306, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF_SET(__pyx_v_max, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "networkit/profiling/stat.pyx":307
 * 				if absoluteFrequenciesHistogram[i] > max:
 * 					max = absoluteFrequenciesHistogram[i]
 * 					index = i             # <<<<<<<<<<<<<<
 * 			result = ((intervalsHistogram[index]+intervalsHistogram[index+1]) / 2, max)
 * 			return result
 */
      __pyx_t_5 = PyInt_FromSsize_t(__pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 307, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF_SET(__pyx_v_index, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "networkit/profiling/stat.pyx":305
 * 			max = 0
 * 			for i in range(len(absoluteFrequenciesHistogram)):
 * 				if absoluteFrequenciesHistogram[i] > max:             # <<<<<<<<<<<<<<
 * 					max = absoluteFrequenciesHistogram[i]
 * 					index = i
 */
    }
  }

  /* "networkit/profiling/stat.pyx":308
 * 					max = absoluteFrequenciesHistogram[i]
 * 					index = i
 * 			result = ((intervalsHistogram[index]+intervalsHistogram[index+1]) / 2, max)             # <<<<<<<<<<<<<<
 * 			return result
 * 		results["Binning"]["Mode"] = mode = funcMode()
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_intervalsHistogram)) { __Pyx_RaiseClosureNameError("intervalsHistogram"); __PYX_ERR(0, 308, __pyx_L1_error) }
  __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_cur_scope->__pyx_v_intervalsHistogram, __pyx_v_index); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (unlikely(!__pyx_cur_scope->__pyx_v_intervalsHistogram)) { __Pyx_RaiseClosureNameError("intervalsHistogram"); __PYX_ERR(0, 308, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_v_index, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_cur_scope->__pyx_v_intervalsHistogram, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_5, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyInt_TrueDivideObjC(__pyx_t_1, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7);
  __Pyx_INCREF(__pyx_v_max);
  __Pyx_GIVEREF(__pyx_v_max);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_max);
  __pyx_t_7 = 0;
  __pyx_v_result = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":309
 * 					index = i
 * 			result = ((intervalsHistogram[index]+intervalsHistogram[index+1]) / 2, max)
 * 			return result             # <<<<<<<<<<<<<<
 * 		results["Binning"]["Mode"] = mode = funcMode()
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "networkit/profiling/stat.pyx":301
 * 		results["Binning"]["Relative Frequencies CDF"] = relativeFrequenciesCDF = funcBinRelativeFrequencies(absoluteFrequenciesCDF)
 * 
 * 		def funcMode():             # <<<<<<<<<<<<<<
 * 			index = 0
 * 			max = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("networkit.profiling.stat.Stat.run.funcMode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_XDECREF(__pyx_v_max);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":312
 * 		results["Binning"]["Mode"] = mode = funcMode()
 * 
 * 		def funcLowerOutliers():             # <<<<<<<<<<<<<<
 * 			lowerBound = Q1 - IQR * 3
 * 			upperBound = Q1 - IQR * 1.5
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_49funcLowerOutliers(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_49funcLowerOutliers = {"funcLowerOutliers", (PyCFunction)__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_49funcLowerOutliers, METH_NOARGS, 0};
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_49funcLowerOutliers(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("funcLowerOutliers (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_48funcLowerOutliers(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_48funcLowerOutliers(PyObject *__pyx_self) {
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_cur_scope;
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_outer_scope;
  PyObject *__pyx_v_lowerBound = NULL;
  PyObject *__pyx_v_upperBound = NULL;
  PyObject *__pyx_v_result_lower = NULL;
  PyObject *__pyx_v_result_upper = NULL;
  long __pyx_v_state;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("funcLowerOutliers", 0);
  __pyx_outer_scope = (struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "networkit/profiling/stat.pyx":313
 * 
 * 		def funcLowerOutliers():
 * 			lowerBound = Q1 - IQR * 3             # <<<<<<<<<<<<<<
 * 			upperBound = Q1 - IQR * 1.5
 * 			result_lower = min
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_Q1)) { __Pyx_RaiseClosureNameError("Q1"); __PYX_ERR(0, 313, __pyx_L1_error) }
  if (unlikely(!__pyx_cur_scope->__pyx_v_IQR)) { __Pyx_RaiseClosureNameError("IQR"); __PYX_ERR(0, 313, __pyx_L1_error) }
  __pyx_t_1 = PyNumber_Multiply(__pyx_cur_scope->__pyx_v_IQR, __pyx_int_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Subtract(__pyx_cur_scope->__pyx_v_Q1, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_lowerBound = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "networkit/profiling/stat.pyx":314
 * 		def funcLowerOutliers():
 * 			lowerBound = Q1 - IQR * 3
 * 			upperBound = Q1 - IQR * 1.5             # <<<<<<<<<<<<<<
 * 			result_lower = min
 * 			result_upper = min
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_Q1)) { __Pyx_RaiseClosureNameError("Q1"); __PYX_ERR(0, 314, __pyx_L1_error) }
  if (unlikely(!__pyx_cur_scope->__pyx_v_IQR)) { __Pyx_RaiseClosureNameError("IQR"); __PYX_ERR(0, 314, __pyx_L1_error) }
  __pyx_t_2 = PyNumber_Multiply(__pyx_cur_scope->__pyx_v_IQR, __pyx_float_1_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyNumber_Subtract(__pyx_cur_scope->__pyx_v_Q1, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_upperBound = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":315
 * 			lowerBound = Q1 - IQR * 3
 * 			upperBound = Q1 - IQR * 1.5
 * 			result_lower = min             # <<<<<<<<<<<<<<
 * 			result_upper = min
 * 			state = 0
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_min)) { __Pyx_RaiseClosureNameError("min"); __PYX_ERR(0, 315, __pyx_L1_error) }
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_min);
  __pyx_v_result_lower = __pyx_cur_scope->__pyx_v_min;

  /* "networkit/profiling/stat.pyx":316
 * 			upperBound = Q1 - IQR * 1.5
 * 			result_lower = min
 * 			result_upper = min             # <<<<<<<<<<<<<<
 * 			state = 0
 * 			for i in range(n):
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_min)) { __Pyx_RaiseClosureNameError("min"); __PYX_ERR(0, 316, __pyx_L1_error) }
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_min);
  __pyx_v_result_upper = __pyx_cur_scope->__pyx_v_min;

  /* "networkit/profiling/stat.pyx":317
 * 			result_lower = min
 * 			result_upper = min
 * 			state = 0             # <<<<<<<<<<<<<<
 * 			for i in range(n):
 * 				value = sampleSorted[i]
 */
  __pyx_v_state = 0;

  /* "networkit/profiling/stat.pyx":318
 * 			result_upper = min
 * 			state = 0
 * 			for i in range(n):             # <<<<<<<<<<<<<<
 * 				value = sampleSorted[i]
 * 				if value >= lowerBound and state == 0:
 */
  __pyx_t_3 = __pyx_cur_scope->__pyx_v_n;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "networkit/profiling/stat.pyx":319
 * 			state = 0
 * 			for i in range(n):
 * 				value = sampleSorted[i]             # <<<<<<<<<<<<<<
 * 				if value >= lowerBound and state == 0:
 * 					result_lower = value
 */
    if (unlikely(!__pyx_cur_scope->__pyx_v_sampleSorted)) { __Pyx_RaiseClosureNameError("sampleSorted"); __PYX_ERR(0, 319, __pyx_L1_error) }
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_sampleSorted, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "networkit/profiling/stat.pyx":320
 * 			for i in range(n):
 * 				value = sampleSorted[i]
 * 				if value >= lowerBound and state == 0:             # <<<<<<<<<<<<<<
 * 					result_lower = value
 * 					state = 1
 */
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_value, __pyx_v_lowerBound, Py_GE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 320, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 320, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_7 = ((__pyx_v_state == 0) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_6) {

      /* "networkit/profiling/stat.pyx":321
 * 				value = sampleSorted[i]
 * 				if value >= lowerBound and state == 0:
 * 					result_lower = value             # <<<<<<<<<<<<<<
 * 					state = 1
 * 				if value >= upperBound and state == 1:
 */
      __Pyx_INCREF(__pyx_v_value);
      __Pyx_DECREF_SET(__pyx_v_result_lower, __pyx_v_value);

      /* "networkit/profiling/stat.pyx":322
 * 				if value >= lowerBound and state == 0:
 * 					result_lower = value
 * 					state = 1             # <<<<<<<<<<<<<<
 * 				if value >= upperBound and state == 1:
 * 					result_upper = value
 */
      __pyx_v_state = 1;

      /* "networkit/profiling/stat.pyx":320
 * 			for i in range(n):
 * 				value = sampleSorted[i]
 * 				if value >= lowerBound and state == 0:             # <<<<<<<<<<<<<<
 * 					result_lower = value
 * 					state = 1
 */
    }

    /* "networkit/profiling/stat.pyx":323
 * 					result_lower = value
 * 					state = 1
 * 				if value >= upperBound and state == 1:             # <<<<<<<<<<<<<<
 * 					result_upper = value
 * 					break
 */
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_value, __pyx_v_upperBound, Py_GE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 323, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 323, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_7 = ((__pyx_v_state == 1) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_6) {

      /* "networkit/profiling/stat.pyx":324
 * 					state = 1
 * 				if value >= upperBound and state == 1:
 * 					result_upper = value             # <<<<<<<<<<<<<<
 * 					break
 * 			return (result_lower, result_upper)
 */
      __Pyx_INCREF(__pyx_v_value);
      __Pyx_DECREF_SET(__pyx_v_result_upper, __pyx_v_value);

      /* "networkit/profiling/stat.pyx":325
 * 				if value >= upperBound and state == 1:
 * 					result_upper = value
 * 					break             # <<<<<<<<<<<<<<
 * 			return (result_lower, result_upper)
 * 		results["Location"]["Outlier (Lower)"] = funcLowerOutliers()
 */
      goto __pyx_L4_break;

      /* "networkit/profiling/stat.pyx":323
 * 					result_lower = value
 * 					state = 1
 * 				if value >= upperBound and state == 1:             # <<<<<<<<<<<<<<
 * 					result_upper = value
 * 					break
 */
    }
  }
  __pyx_L4_break:;

  /* "networkit/profiling/stat.pyx":326
 * 					result_upper = value
 * 					break
 * 			return (result_lower, result_upper)             # <<<<<<<<<<<<<<
 * 		results["Location"]["Outlier (Lower)"] = funcLowerOutliers()
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_result_lower);
  __Pyx_GIVEREF(__pyx_v_result_lower);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_result_lower);
  __Pyx_INCREF(__pyx_v_result_upper);
  __Pyx_GIVEREF(__pyx_v_result_upper);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_result_upper);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "networkit/profiling/stat.pyx":312
 * 		results["Binning"]["Mode"] = mode = funcMode()
 * 
 * 		def funcLowerOutliers():             # <<<<<<<<<<<<<<
 * 			lowerBound = Q1 - IQR * 3
 * 			upperBound = Q1 - IQR * 1.5
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.profiling.stat.Stat.run.funcLowerOutliers", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_lowerBound);
  __Pyx_XDECREF(__pyx_v_upperBound);
  __Pyx_XDECREF(__pyx_v_result_lower);
  __Pyx_XDECREF(__pyx_v_result_upper);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":329
 * 		results["Location"]["Outlier (Lower)"] = funcLowerOutliers()
 * 
 * 		def funcUpperOutliers():             # <<<<<<<<<<<<<<
 * 			lowerBound = Q3 + IQR * 1.5
 * 			upperBound = Q3 + IQR * 3
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_51funcUpperOutliers(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_51funcUpperOutliers = {"funcUpperOutliers", (PyCFunction)__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_51funcUpperOutliers, METH_NOARGS, 0};
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_51funcUpperOutliers(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("funcUpperOutliers (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_50funcUpperOutliers(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_50funcUpperOutliers(PyObject *__pyx_self) {
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_cur_scope;
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_outer_scope;
  PyObject *__pyx_v_lowerBound = NULL;
  PyObject *__pyx_v_upperBound = NULL;
  PyObject *__pyx_v_result_lower = NULL;
  PyObject *__pyx_v_result_upper = NULL;
  long __pyx_v_state;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("funcUpperOutliers", 0);
  __pyx_outer_scope = (struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "networkit/profiling/stat.pyx":330
 * 
 * 		def funcUpperOutliers():
 * 			lowerBound = Q3 + IQR * 1.5             # <<<<<<<<<<<<<<
 * 			upperBound = Q3 + IQR * 3
 * 			result_lower = max
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_Q3)) { __Pyx_RaiseClosureNameError("Q3"); __PYX_ERR(0, 330, __pyx_L1_error) }
  if (unlikely(!__pyx_cur_scope->__pyx_v_IQR)) { __Pyx_RaiseClosureNameError("IQR"); __PYX_ERR(0, 330, __pyx_L1_error) }
  __pyx_t_1 = PyNumber_Multiply(__pyx_cur_scope->__pyx_v_IQR, __pyx_float_1_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_cur_scope->__pyx_v_Q3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_lowerBound = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "networkit/profiling/stat.pyx":331
 * 		def funcUpperOutliers():
 * 			lowerBound = Q3 + IQR * 1.5
 * 			upperBound = Q3 + IQR * 3             # <<<<<<<<<<<<<<
 * 			result_lower = max
 * 			result_upper = max
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_Q3)) { __Pyx_RaiseClosureNameError("Q3"); __PYX_ERR(0, 331, __pyx_L1_error) }
  if (unlikely(!__pyx_cur_scope->__pyx_v_IQR)) { __Pyx_RaiseClosureNameError("IQR"); __PYX_ERR(0, 331, __pyx_L1_error) }
  __pyx_t_2 = PyNumber_Multiply(__pyx_cur_scope->__pyx_v_IQR, __pyx_int_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyNumber_Add(__pyx_cur_scope->__pyx_v_Q3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_upperBound = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":332
 * 			lowerBound = Q3 + IQR * 1.5
 * 			upperBound = Q3 + IQR * 3
 * 			result_lower = max             # <<<<<<<<<<<<<<
 * 			result_upper = max
 * 			state = 0
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_max)) { __Pyx_RaiseClosureNameError("max"); __PYX_ERR(0, 332, __pyx_L1_error) }
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_max);
  __pyx_v_result_lower = __pyx_cur_scope->__pyx_v_max;

  /* "networkit/profiling/stat.pyx":333
 * 			upperBound = Q3 + IQR * 3
 * 			result_lower = max
 * 			result_upper = max             # <<<<<<<<<<<<<<
 * 			state = 0
 * 			for i in range(n):
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_max)) { __Pyx_RaiseClosureNameError("max"); __PYX_ERR(0, 333, __pyx_L1_error) }
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_max);
  __pyx_v_result_upper = __pyx_cur_scope->__pyx_v_max;

  /* "networkit/profiling/stat.pyx":334
 * 			result_lower = max
 * 			result_upper = max
 * 			state = 0             # <<<<<<<<<<<<<<
 * 			for i in range(n):
 * 				value = sampleSorted[n-i-1]
 */
  __pyx_v_state = 0;

  /* "networkit/profiling/stat.pyx":335
 * 			result_upper = max
 * 			state = 0
 * 			for i in range(n):             # <<<<<<<<<<<<<<
 * 				value = sampleSorted[n-i-1]
 * 				if value <= upperBound and state == 0:
 */
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_cur_scope->__pyx_v_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 335, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 335, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 335, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 335, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 335, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_4(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 335, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "networkit/profiling/stat.pyx":336
 * 			state = 0
 * 			for i in range(n):
 * 				value = sampleSorted[n-i-1]             # <<<<<<<<<<<<<<
 * 				if value <= upperBound and state == 0:
 * 					result_upper = value
 */
    if (unlikely(!__pyx_cur_scope->__pyx_v_sampleSorted)) { __Pyx_RaiseClosureNameError("sampleSorted"); __PYX_ERR(0, 336, __pyx_L1_error) }
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_cur_scope->__pyx_v_n); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyNumber_Subtract(__pyx_t_2, __pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyInt_SubtractObjC(__pyx_t_5, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_cur_scope->__pyx_v_sampleSorted, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "networkit/profiling/stat.pyx":337
 * 			for i in range(n):
 * 				value = sampleSorted[n-i-1]
 * 				if value <= upperBound and state == 0:             # <<<<<<<<<<<<<<
 * 					result_upper = value
 * 					state = 1
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_value, __pyx_v_upperBound, Py_LE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 337, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 337, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_7 = ((__pyx_v_state == 0) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_6) {

      /* "networkit/profiling/stat.pyx":338
 * 				value = sampleSorted[n-i-1]
 * 				if value <= upperBound and state == 0:
 * 					result_upper = value             # <<<<<<<<<<<<<<
 * 					state = 1
 * 				if value <= lowerBound and state == 1:
 */
      __Pyx_INCREF(__pyx_v_value);
      __Pyx_DECREF_SET(__pyx_v_result_upper, __pyx_v_value);

      /* "networkit/profiling/stat.pyx":339
 * 				if value <= upperBound and state == 0:
 * 					result_upper = value
 * 					state = 1             # <<<<<<<<<<<<<<
 * 				if value <= lowerBound and state == 1:
 * 					result_lower = value
 */
      __pyx_v_state = 1;

      /* "networkit/profiling/stat.pyx":337
 * 			for i in range(n):
 * 				value = sampleSorted[n-i-1]
 * 				if value <= upperBound and state == 0:             # <<<<<<<<<<<<<<
 * 					result_upper = value
 * 					state = 1
 */
    }

    /* "networkit/profiling/stat.pyx":340
 * 					result_upper = value
 * 					state = 1
 * 				if value <= lowerBound and state == 1:             # <<<<<<<<<<<<<<
 * 					result_lower = value
 * 					break
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_value, __pyx_v_lowerBound, Py_LE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 340, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 340, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_7 = ((__pyx_v_state == 1) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_6) {

      /* "networkit/profiling/stat.pyx":341
 * 					state = 1
 * 				if value <= lowerBound and state == 1:
 * 					result_lower = value             # <<<<<<<<<<<<<<
 * 					break
 * 			return (result_upper, result_lower)
 */
      __Pyx_INCREF(__pyx_v_value);
      __Pyx_DECREF_SET(__pyx_v_result_lower, __pyx_v_value);

      /* "networkit/profiling/stat.pyx":342
 * 				if value <= lowerBound and state == 1:
 * 					result_lower = value
 * 					break             # <<<<<<<<<<<<<<
 * 			return (result_upper, result_lower)
 * 		results["Location"]["Outlier (Upper)"] = funcUpperOutliers()
 */
      goto __pyx_L4_break;

      /* "networkit/profiling/stat.pyx":340
 * 					result_upper = value
 * 					state = 1
 * 				if value <= lowerBound and state == 1:             # <<<<<<<<<<<<<<
 * 					result_lower = value
 * 					break
 */
    }

    /* "networkit/profiling/stat.pyx":335
 * 			result_upper = max
 * 			state = 0
 * 			for i in range(n):             # <<<<<<<<<<<<<<
 * 				value = sampleSorted[n-i-1]
 * 				if value <= upperBound and state == 0:
 */
  }
  __pyx_L4_break:;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":343
 * 					result_lower = value
 * 					break
 * 			return (result_upper, result_lower)             # <<<<<<<<<<<<<<
 * 		results["Location"]["Outlier (Upper)"] = funcUpperOutliers()
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_result_upper);
  __Pyx_GIVEREF(__pyx_v_result_upper);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_result_upper);
  __Pyx_INCREF(__pyx_v_result_lower);
  __Pyx_GIVEREF(__pyx_v_result_lower);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_result_lower);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "networkit/profiling/stat.pyx":329
 * 		results["Location"]["Outlier (Lower)"] = funcLowerOutliers()
 * 
 * 		def funcUpperOutliers():             # <<<<<<<<<<<<<<
 * 			lowerBound = Q3 + IQR * 1.5
 * 			upperBound = Q3 + IQR * 3
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("networkit.profiling.stat.Stat.run.funcUpperOutliers", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_lowerBound);
  __Pyx_XDECREF(__pyx_v_upperBound);
  __Pyx_XDECREF(__pyx_v_result_lower);
  __Pyx_XDECREF(__pyx_v_result_upper);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":347
 * 
 * 		if calculatePie:
 * 			def funcPie():             # <<<<<<<<<<<<<<
 * 				n = len(sample)
 * 				sum = 0
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_53funcPie(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_53funcPie = {"funcPie", (PyCFunction)__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_53funcPie, METH_NOARGS, 0};
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_53funcPie(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("funcPie (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_52funcPie(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_52funcPie(PyObject *__pyx_self) {
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_cur_scope;
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_outer_scope;
  Py_ssize_t __pyx_v_n;
  PyObject *__pyx_v_sum = NULL;
  Py_ssize_t __pyx_v_i;
  double __pyx_v_min;
  PyObject *__pyx_v_cutSize = NULL;
  PyObject *__pyx_v_cutValue = NULL;
  PyObject *__pyx_v_relativeFrequencies = NULL;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("funcPie", 0);
  __pyx_outer_scope = (struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "networkit/profiling/stat.pyx":348
 * 		if calculatePie:
 * 			def funcPie():
 * 				n = len(sample)             # <<<<<<<<<<<<<<
 * 				sum = 0
 * 				for i in range(n):
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_sample)) { __Pyx_RaiseClosureNameError("sample"); __PYX_ERR(0, 348, __pyx_L1_error) }
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_sample;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 348, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_n = __pyx_t_2;

  /* "networkit/profiling/stat.pyx":349
 * 			def funcPie():
 * 				n = len(sample)
 * 				sum = 0             # <<<<<<<<<<<<<<
 * 				for i in range(n):
 * 					sum += sample[i]
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_sum = __pyx_int_0;

  /* "networkit/profiling/stat.pyx":350
 * 				n = len(sample)
 * 				sum = 0
 * 				for i in range(n):             # <<<<<<<<<<<<<<
 * 					sum += sample[i]
 * 
 */
  __pyx_t_2 = __pyx_v_n;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "networkit/profiling/stat.pyx":351
 * 				sum = 0
 * 				for i in range(n):
 * 					sum += sample[i]             # <<<<<<<<<<<<<<
 * 
 * 				min = 0.015
 */
    if (unlikely(!__pyx_cur_scope->__pyx_v_sample)) { __Pyx_RaiseClosureNameError("sample"); __PYX_ERR(0, 351, __pyx_L1_error) }
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_sample, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyNumber_InPlaceAdd(__pyx_v_sum, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_sum, __pyx_t_5);
    __pyx_t_5 = 0;
  }

  /* "networkit/profiling/stat.pyx":353
 * 					sum += sample[i]
 * 
 * 				min = 0.015             # <<<<<<<<<<<<<<
 * 				cutSize = 0
 * 				cutValue = 0
 */
  __pyx_v_min = 0.015;

  /* "networkit/profiling/stat.pyx":354
 * 
 * 				min = 0.015
 * 				cutSize = 0             # <<<<<<<<<<<<<<
 * 				cutValue = 0
 * 				relativeFrequencies = [0]
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_cutSize = __pyx_int_0;

  /* "networkit/profiling/stat.pyx":355
 * 				min = 0.015
 * 				cutSize = 0
 * 				cutValue = 0             # <<<<<<<<<<<<<<
 * 				relativeFrequencies = [0]
 * 				for i in range(n):
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_cutValue = __pyx_int_0;

  /* "networkit/profiling/stat.pyx":356
 * 				cutSize = 0
 * 				cutValue = 0
 * 				relativeFrequencies = [0]             # <<<<<<<<<<<<<<
 * 				for i in range(n):
 * 					value = sampleSorted[i]/sum
 */
  __pyx_t_5 = PyList_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_int_0);
  __pyx_v_relativeFrequencies = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":357
 * 				cutValue = 0
 * 				relativeFrequencies = [0]
 * 				for i in range(n):             # <<<<<<<<<<<<<<
 * 					value = sampleSorted[i]/sum
 * 					if value < min:
 */
  __pyx_t_2 = __pyx_v_n;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "networkit/profiling/stat.pyx":358
 * 				relativeFrequencies = [0]
 * 				for i in range(n):
 * 					value = sampleSorted[i]/sum             # <<<<<<<<<<<<<<
 * 					if value < min:
 * 						relativeFrequencies[0] += value
 */
    if (unlikely(!__pyx_cur_scope->__pyx_v_sampleSorted)) { __Pyx_RaiseClosureNameError("sampleSorted"); __PYX_ERR(0, 358, __pyx_L1_error) }
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_sampleSorted, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_5, __pyx_v_sum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "networkit/profiling/stat.pyx":359
 * 				for i in range(n):
 * 					value = sampleSorted[i]/sum
 * 					if value < min:             # <<<<<<<<<<<<<<
 * 						relativeFrequencies[0] += value
 * 						cutSize += 1
 */
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_min); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_value, __pyx_t_1, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 359, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 359, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_6) {

      /* "networkit/profiling/stat.pyx":360
 * 					value = sampleSorted[i]/sum
 * 					if value < min:
 * 						relativeFrequencies[0] += value             # <<<<<<<<<<<<<<
 * 						cutSize += 1
 * 						cutValue += value
 */
      __pyx_t_7 = 0;
      __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_relativeFrequencies, __pyx_t_7, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 360, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_t_5, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 360, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(__Pyx_SetItemInt(__pyx_v_relativeFrequencies, __pyx_t_7, __pyx_t_1, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1) < 0)) __PYX_ERR(0, 360, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "networkit/profiling/stat.pyx":361
 * 					if value < min:
 * 						relativeFrequencies[0] += value
 * 						cutSize += 1             # <<<<<<<<<<<<<<
 * 						cutValue += value
 * 					else:
 */
      __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_v_cutSize, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 361, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF_SET(__pyx_v_cutSize, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "networkit/profiling/stat.pyx":362
 * 						relativeFrequencies[0] += value
 * 						cutSize += 1
 * 						cutValue += value             # <<<<<<<<<<<<<<
 * 					else:
 * 						relativeFrequencies.append(value)
 */
      __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_cutValue, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 362, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF_SET(__pyx_v_cutValue, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "networkit/profiling/stat.pyx":359
 * 				for i in range(n):
 * 					value = sampleSorted[i]/sum
 * 					if value < min:             # <<<<<<<<<<<<<<
 * 						relativeFrequencies[0] += value
 * 						cutSize += 1
 */
      goto __pyx_L7;
    }

    /* "networkit/profiling/stat.pyx":364
 * 						cutValue += value
 * 					else:
 * 						relativeFrequencies.append(value)             # <<<<<<<<<<<<<<
 * 				return (relativeFrequencies, cutSize)
 * 			results["Binning"]["Pie"] = funcPie()
 */
    /*else*/ {
      __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_relativeFrequencies, __pyx_v_value); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 364, __pyx_L1_error)
    }
    __pyx_L7:;
  }

  /* "networkit/profiling/stat.pyx":365
 * 					else:
 * 						relativeFrequencies.append(value)
 * 				return (relativeFrequencies, cutSize)             # <<<<<<<<<<<<<<
 * 			results["Binning"]["Pie"] = funcPie()
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_relativeFrequencies);
  __Pyx_GIVEREF(__pyx_v_relativeFrequencies);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_relativeFrequencies);
  __Pyx_INCREF(__pyx_v_cutSize);
  __Pyx_GIVEREF(__pyx_v_cutSize);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_cutSize);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "networkit/profiling/stat.pyx":347
 * 
 * 		if calculatePie:
 * 			def funcPie():             # <<<<<<<<<<<<<<
 * 				n = len(sample)
 * 				sum = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("networkit.profiling.stat.Stat.run.funcPie", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_sum);
  __Pyx_XDECREF(__pyx_v_cutSize);
  __Pyx_XDECREF(__pyx_v_cutValue);
  __Pyx_XDECREF(__pyx_v_relativeFrequencies);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":380
 * 		# k_Bins = len(absoluteFrequencies)
 * 
 * 		def funcErf(x):             # <<<<<<<<<<<<<<
 * 			sign = 1 if x >= 0 else -1
 * 			x = abs(x)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_55funcErf(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_55funcErf = {"funcErf", (PyCFunction)__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_55funcErf, METH_O, 0};
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_55funcErf(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("funcErf (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_54funcErf(__pyx_self, ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_54funcErf(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_v_sign = NULL;
  double __pyx_v_a1;
  double __pyx_v_a2;
  double __pyx_v_a3;
  double __pyx_v_a4;
  double __pyx_v_a5;
  double __pyx_v_p;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_v_y = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("funcErf", 0);
  __Pyx_INCREF(__pyx_v_x);

  /* "networkit/profiling/stat.pyx":381
 * 
 * 		def funcErf(x):
 * 			sign = 1 if x >= 0 else -1             # <<<<<<<<<<<<<<
 * 			x = abs(x)
 * 
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_x, __pyx_int_0, Py_GE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 381, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 381, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __Pyx_INCREF(__pyx_int_1);
    __pyx_t_1 = __pyx_int_1;
  } else {
    __Pyx_INCREF(__pyx_int_neg_1);
    __pyx_t_1 = __pyx_int_neg_1;
  }
  __pyx_v_sign = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":382
 * 		def funcErf(x):
 * 			sign = 1 if x >= 0 else -1
 * 			x = abs(x)             # <<<<<<<<<<<<<<
 * 
 * 			a1 =  0.254829592
 */
  __pyx_t_1 = __Pyx_PyNumber_Absolute(__pyx_v_x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF_SET(__pyx_v_x, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":384
 * 			x = abs(x)
 * 
 * 			a1 =  0.254829592             # <<<<<<<<<<<<<<
 * 			a2 = -0.284496736
 * 			a3 =  1.421413741
 */
  __pyx_v_a1 = 0.254829592;

  /* "networkit/profiling/stat.pyx":385
 * 
 * 			a1 =  0.254829592
 * 			a2 = -0.284496736             # <<<<<<<<<<<<<<
 * 			a3 =  1.421413741
 * 			a4 = -1.453152027
 */
  __pyx_v_a2 = -0.284496736;

  /* "networkit/profiling/stat.pyx":386
 * 			a1 =  0.254829592
 * 			a2 = -0.284496736
 * 			a3 =  1.421413741             # <<<<<<<<<<<<<<
 * 			a4 = -1.453152027
 * 			a5 =  1.061405429
 */
  __pyx_v_a3 = 1.421413741;

  /* "networkit/profiling/stat.pyx":387
 * 			a2 = -0.284496736
 * 			a3 =  1.421413741
 * 			a4 = -1.453152027             # <<<<<<<<<<<<<<
 * 			a5 =  1.061405429
 * 			p  =  0.3275911
 */
  __pyx_v_a4 = -1.453152027;

  /* "networkit/profiling/stat.pyx":388
 * 			a3 =  1.421413741
 * 			a4 = -1.453152027
 * 			a5 =  1.061405429             # <<<<<<<<<<<<<<
 * 			p  =  0.3275911
 * 
 */
  __pyx_v_a5 = 1.061405429;

  /* "networkit/profiling/stat.pyx":389
 * 			a4 = -1.453152027
 * 			a5 =  1.061405429
 * 			p  =  0.3275911             # <<<<<<<<<<<<<<
 * 
 * 			t = 1.0/(1.0 + p*x)
 */
  __pyx_v_p = 0.3275911;

  /* "networkit/profiling/stat.pyx":391
 * 			p  =  0.3275911
 * 
 * 			t = 1.0/(1.0 + p*x)             # <<<<<<<<<<<<<<
 * 			y = 1 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1) * t * math.exp(-x*x)
 * 			return sign*y
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_p); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_1, __pyx_v_x); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyFloat_AddCObj(__pyx_float_1_0, __pyx_t_2, 1.0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyFloat_TrueDivideCObj(__pyx_float_1_0, __pyx_t_1, 1.0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_t = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "networkit/profiling/stat.pyx":392
 * 
 * 			t = 1.0/(1.0 + p*x)
 * 			y = 1 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1) * t * math.exp(-x*x)             # <<<<<<<<<<<<<<
 * 			return sign*y
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_a5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_2, __pyx_v_t); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_a4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_4, __pyx_v_t); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_a3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_1, __pyx_v_t); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_a2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_2, __pyx_v_t); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_a1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_4, __pyx_v_t); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_math); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_exp); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Negative(__pyx_v_x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_1, __pyx_v_x); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_4 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_1, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyInt_SubtractCObj(__pyx_int_1, __pyx_t_5, 1, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_y = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "networkit/profiling/stat.pyx":393
 * 			t = 1.0/(1.0 + p*x)
 * 			y = 1 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1) * t * math.exp(-x*x)
 * 			return sign*y             # <<<<<<<<<<<<<<
 * 
 * 		def funcDistributionNormal(x):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyNumber_Multiply(__pyx_v_sign, __pyx_v_y); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "networkit/profiling/stat.pyx":380
 * 		# k_Bins = len(absoluteFrequencies)
 * 
 * 		def funcErf(x):             # <<<<<<<<<<<<<<
 * 			sign = 1 if x >= 0 else -1
 * 			x = abs(x)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("networkit.profiling.stat.Stat.run.funcErf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_sign);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":395
 * 			return sign*y
 * 
 * 		def funcDistributionNormal(x):             # <<<<<<<<<<<<<<
 * 			result = 1/2 * (1 + funcErf((x-arithmeticMean)/(math.sqrt(2) * s_n)))
 * 			return result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_57funcDistributionNormal(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_57funcDistributionNormal = {"funcDistributionNormal", (PyCFunction)__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_57funcDistributionNormal, METH_O, 0};
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_57funcDistributionNormal(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("funcDistributionNormal (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_56funcDistributionNormal(__pyx_self, ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_56funcDistributionNormal(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_cur_scope;
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_outer_scope;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("funcDistributionNormal", 0);
  __pyx_outer_scope = (struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "networkit/profiling/stat.pyx":396
 * 
 * 		def funcDistributionNormal(x):
 * 			result = 1/2 * (1 + funcErf((x-arithmeticMean)/(math.sqrt(2) * s_n)))             # <<<<<<<<<<<<<<
 * 			return result
 * 
 */
  __pyx_t_1 = PyFloat_FromDouble((1.0 / 2.0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(!__pyx_cur_scope->__pyx_v_arithmeticMean)) { __Pyx_RaiseClosureNameError("arithmeticMean"); __PYX_ERR(0, 396, __pyx_L1_error) }
  __pyx_t_2 = PyNumber_Subtract(__pyx_v_x, __pyx_cur_scope->__pyx_v_arithmeticMean); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_math); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_sqrt); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_4, __pyx_int_2) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_int_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_cur_scope->__pyx_v_s_n)) { __Pyx_RaiseClosureNameError("s_n"); __PYX_ERR(0, 396, __pyx_L1_error) }
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_3, __pyx_cur_scope->__pyx_v_s_n); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_cur_scope->__pyx_v_funcErf)) { __Pyx_RaiseClosureNameError("funcErf"); __PYX_ERR(0, 396, __pyx_L1_error) }
  __pyx_t_5 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_54funcErf(__pyx_cur_scope->__pyx_v_funcErf, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_AddCObj(__pyx_int_1, __pyx_t_5, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":397
 * 		def funcDistributionNormal(x):
 * 			result = 1/2 * (1 + funcErf((x-arithmeticMean)/(math.sqrt(2) * s_n)))
 * 			return result             # <<<<<<<<<<<<<<
 * 
 * 		def funcDistributionExponential(x):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "networkit/profiling/stat.pyx":395
 * 			return sign*y
 * 
 * 		def funcDistributionNormal(x):             # <<<<<<<<<<<<<<
 * 			result = 1/2 * (1 + funcErf((x-arithmeticMean)/(math.sqrt(2) * s_n)))
 * 			return result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("networkit.profiling.stat.Stat.run.funcDistributionNormal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":399
 * 			return result
 * 
 * 		def funcDistributionExponential(x):             # <<<<<<<<<<<<<<
 * 			result = 1 - math.exp((-1/arithmeticMean) * x)
 * 			return result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_59funcDistributionExponential(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_59funcDistributionExponential = {"funcDistributionExponential", (PyCFunction)__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_59funcDistributionExponential, METH_O, 0};
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_59funcDistributionExponential(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("funcDistributionExponential (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_58funcDistributionExponential(__pyx_self, ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_58funcDistributionExponential(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_cur_scope;
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_outer_scope;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("funcDistributionExponential", 0);
  __pyx_outer_scope = (struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "networkit/profiling/stat.pyx":400
 * 
 * 		def funcDistributionExponential(x):
 * 			result = 1 - math.exp((-1/arithmeticMean) * x)             # <<<<<<<<<<<<<<
 * 			return result
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_math); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_exp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_cur_scope->__pyx_v_arithmeticMean)) { __Pyx_RaiseClosureNameError("arithmeticMean"); __PYX_ERR(0, 400, __pyx_L1_error) }
  __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_int_neg_1, __pyx_cur_scope->__pyx_v_arithmeticMean); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_2, __pyx_v_x); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_SubtractCObj(__pyx_int_1, __pyx_t_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "networkit/profiling/stat.pyx":401
 * 		def funcDistributionExponential(x):
 * 			result = 1 - math.exp((-1/arithmeticMean) * x)
 * 			return result             # <<<<<<<<<<<<<<
 * 
 * 		def funcDistributionExponentialInverse(x):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "networkit/profiling/stat.pyx":399
 * 			return result
 * 
 * 		def funcDistributionExponential(x):             # <<<<<<<<<<<<<<
 * 			result = 1 - math.exp((-1/arithmeticMean) * x)
 * 			return result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("networkit.profiling.stat.Stat.run.funcDistributionExponential", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":403
 * 			return result
 * 
 * 		def funcDistributionExponentialInverse(x):             # <<<<<<<<<<<<<<
 * 			result = math.ln(1/(1-x))*arithmeticMean
 * 			return result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_61funcDistributionExponentialInverse(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_61funcDistributionExponentialInverse = {"funcDistributionExponentialInverse", (PyCFunction)__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_61funcDistributionExponentialInverse, METH_O, 0};
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_61funcDistributionExponentialInverse(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("funcDistributionExponentialInverse (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_60funcDistributionExponentialInverse(__pyx_self, ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_60funcDistributionExponentialInverse(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_cur_scope;
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_outer_scope;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("funcDistributionExponentialInverse", 0);
  __pyx_outer_scope = (struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "networkit/profiling/stat.pyx":404
 * 
 * 		def funcDistributionExponentialInverse(x):
 * 			result = math.ln(1/(1-x))*arithmeticMean             # <<<<<<<<<<<<<<
 * 			return result
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_math); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_ln); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_SubtractCObj(__pyx_int_1, __pyx_v_x, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_int_1, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_cur_scope->__pyx_v_arithmeticMean)) { __Pyx_RaiseClosureNameError("arithmeticMean"); __PYX_ERR(0, 404, __pyx_L1_error) }
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_cur_scope->__pyx_v_arithmeticMean); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "networkit/profiling/stat.pyx":405
 * 		def funcDistributionExponentialInverse(x):
 * 			result = math.ln(1/(1-x))*arithmeticMean
 * 			return result             # <<<<<<<<<<<<<<
 * 
 * 		def funcIncompleteGamma(s, x):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "networkit/profiling/stat.pyx":403
 * 			return result
 * 
 * 		def funcDistributionExponentialInverse(x):             # <<<<<<<<<<<<<<
 * 			result = math.ln(1/(1-x))*arithmeticMean
 * 			return result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("networkit.profiling.stat.Stat.run.funcDistributionExponentialInverse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":407
 * 			return result
 * 
 * 		def funcIncompleteGamma(s, x):             # <<<<<<<<<<<<<<
 * 			if x < 0.0:
 * 				return 0.0
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_63funcIncompleteGamma(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_63funcIncompleteGamma = {"funcIncompleteGamma", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_63funcIncompleteGamma, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_63funcIncompleteGamma(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_s = 0;
  PyObject *__pyx_v_x = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("funcIncompleteGamma (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s,&__pyx_n_s_x,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_s)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("funcIncompleteGamma", 1, 2, 2, 1); __PYX_ERR(0, 407, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "funcIncompleteGamma") < 0)) __PYX_ERR(0, 407, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_s = values[0];
    __pyx_v_x = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("funcIncompleteGamma", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 407, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.profiling.stat.Stat.run.funcIncompleteGamma", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_62funcIncompleteGamma(__pyx_self, __pyx_v_s, __pyx_v_x);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_62funcIncompleteGamma(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s, PyObject *__pyx_v_x) {
  PyObject *__pyx_v_sc = NULL;
  PyObject *__pyx_v_sum = NULL;
  PyObject *__pyx_v_nom = NULL;
  PyObject *__pyx_v_denom = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  long __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("funcIncompleteGamma", 0);

  /* "networkit/profiling/stat.pyx":408
 * 
 * 		def funcIncompleteGamma(s, x):
 * 			if x < 0.0:             # <<<<<<<<<<<<<<
 * 				return 0.0
 * 			sc = (1.0 / s)
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_x, __pyx_float_0_0, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 408, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 408, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "networkit/profiling/stat.pyx":409
 * 		def funcIncompleteGamma(s, x):
 * 			if x < 0.0:
 * 				return 0.0             # <<<<<<<<<<<<<<
 * 			sc = (1.0 / s)
 * 			sc *= math.pow(x, s)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_float_0_0);
    __pyx_r = __pyx_float_0_0;
    goto __pyx_L0;

    /* "networkit/profiling/stat.pyx":408
 * 
 * 		def funcIncompleteGamma(s, x):
 * 			if x < 0.0:             # <<<<<<<<<<<<<<
 * 				return 0.0
 * 			sc = (1.0 / s)
 */
  }

  /* "networkit/profiling/stat.pyx":410
 * 			if x < 0.0:
 * 				return 0.0
 * 			sc = (1.0 / s)             # <<<<<<<<<<<<<<
 * 			sc *= math.pow(x, s)
 * 			sc *= math.exp(-x)
 */
  __pyx_t_1 = __Pyx_PyFloat_TrueDivideCObj(__pyx_float_1_0, __pyx_v_s, 1.0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_sc = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":411
 * 				return 0.0
 * 			sc = (1.0 / s)
 * 			sc *= math.pow(x, s)             # <<<<<<<<<<<<<<
 * 			sc *= math.exp(-x)
 * 			sum = 1.0
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_math); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_pow); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_x, __pyx_v_s};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 411, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_x, __pyx_v_s};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 411, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 411, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_x);
    __Pyx_GIVEREF(__pyx_v_x);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_x);
    __Pyx_INCREF(__pyx_v_s);
    __Pyx_GIVEREF(__pyx_v_s);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_s);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 411, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_InPlaceMultiply(__pyx_v_sc, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_sc, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "networkit/profiling/stat.pyx":412
 * 			sc = (1.0 / s)
 * 			sc *= math.pow(x, s)
 * 			sc *= math.exp(-x)             # <<<<<<<<<<<<<<
 * 			sum = 1.0
 * 			nom = 1.0
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_math); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_exp); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Negative(__pyx_v_x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_4 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_3, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyNumber_InPlaceMultiply(__pyx_v_sc, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF_SET(__pyx_v_sc, __pyx_t_6);
  __pyx_t_6 = 0;

  /* "networkit/profiling/stat.pyx":413
 * 			sc *= math.pow(x, s)
 * 			sc *= math.exp(-x)
 * 			sum = 1.0             # <<<<<<<<<<<<<<
 * 			nom = 1.0
 * 			denom = 1.0
 */
  __Pyx_INCREF(__pyx_float_1_0);
  __pyx_v_sum = __pyx_float_1_0;

  /* "networkit/profiling/stat.pyx":414
 * 			sc *= math.exp(-x)
 * 			sum = 1.0
 * 			nom = 1.0             # <<<<<<<<<<<<<<
 * 			denom = 1.0
 * 			for i in range(1, 128):
 */
  __Pyx_INCREF(__pyx_float_1_0);
  __pyx_v_nom = __pyx_float_1_0;

  /* "networkit/profiling/stat.pyx":415
 * 			sum = 1.0
 * 			nom = 1.0
 * 			denom = 1.0             # <<<<<<<<<<<<<<
 * 			for i in range(1, 128):
 * 				nom *= x
 */
  __Pyx_INCREF(__pyx_float_1_0);
  __pyx_v_denom = __pyx_float_1_0;

  /* "networkit/profiling/stat.pyx":416
 * 			nom = 1.0
 * 			denom = 1.0
 * 			for i in range(1, 128):             # <<<<<<<<<<<<<<
 * 				nom *= x
 * 				denom *= s + i
 */
  for (__pyx_t_7 = 1; __pyx_t_7 < 0x80; __pyx_t_7+=1) {
    __pyx_t_6 = __Pyx_PyInt_From_long(__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 416, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "networkit/profiling/stat.pyx":417
 * 			denom = 1.0
 * 			for i in range(1, 128):
 * 				nom *= x             # <<<<<<<<<<<<<<
 * 				denom *= s + i
 * 				sum += (nom / denom)
 */
    __pyx_t_6 = PyNumber_InPlaceMultiply(__pyx_v_nom, __pyx_v_x); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 417, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF_SET(__pyx_v_nom, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "networkit/profiling/stat.pyx":418
 * 			for i in range(1, 128):
 * 				nom *= x
 * 				denom *= s + i             # <<<<<<<<<<<<<<
 * 				sum += (nom / denom)
 * 			return sum * sc
 */
    __pyx_t_6 = PyNumber_Add(__pyx_v_s, __pyx_v_i); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = PyNumber_InPlaceMultiply(__pyx_v_denom, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF_SET(__pyx_v_denom, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "networkit/profiling/stat.pyx":419
 * 				nom *= x
 * 				denom *= s + i
 * 				sum += (nom / denom)             # <<<<<<<<<<<<<<
 * 			return sum * sc
 * 
 */
    __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_v_nom, __pyx_v_denom); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 419, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyNumber_InPlaceAdd(__pyx_v_sum, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 419, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_sum, __pyx_t_6);
    __pyx_t_6 = 0;
  }

  /* "networkit/profiling/stat.pyx":420
 * 				denom *= s + i
 * 				sum += (nom / denom)
 * 			return sum * sc             # <<<<<<<<<<<<<<
 * 
 * 		def funcGamma(x):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = PyNumber_Multiply(__pyx_v_sum, __pyx_v_sc); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "networkit/profiling/stat.pyx":407
 * 			return result
 * 
 * 		def funcIncompleteGamma(s, x):             # <<<<<<<<<<<<<<
 * 			if x < 0.0:
 * 				return 0.0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("networkit.profiling.stat.Stat.run.funcIncompleteGamma", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_sc);
  __Pyx_XDECREF(__pyx_v_sum);
  __Pyx_XDECREF(__pyx_v_nom);
  __Pyx_XDECREF(__pyx_v_denom);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":422
 * 			return sum * sc
 * 
 * 		def funcGamma(x):             # <<<<<<<<<<<<<<
 * 			result = (x / math.e) ** x
 * 			result *= math.sqrt(2 * math.pi / x)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_65funcGamma(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_65funcGamma = {"funcGamma", (PyCFunction)__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_65funcGamma, METH_O, 0};
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_65funcGamma(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("funcGamma (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_64funcGamma(__pyx_self, ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_64funcGamma(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("funcGamma", 0);

  /* "networkit/profiling/stat.pyx":423
 * 
 * 		def funcGamma(x):
 * 			result = (x / math.e) ** x             # <<<<<<<<<<<<<<
 * 			result *= math.sqrt(2 * math.pi / x)
 * 			result *= (1 + 1/(12 * x*x - 1/10)) ** x
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_math); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_e); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_v_x, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Power(__pyx_t_1, __pyx_v_x, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_result = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "networkit/profiling/stat.pyx":424
 * 		def funcGamma(x):
 * 			result = (x / math.e) ** x
 * 			result *= math.sqrt(2 * math.pi / x)             # <<<<<<<<<<<<<<
 * 			result *= (1 + 1/(12 * x*x - 1/10)) ** x
 * 			return result
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_math); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_sqrt); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_math); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_pi); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_int_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_v_x); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_1, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_InPlaceMultiply(__pyx_v_result, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "networkit/profiling/stat.pyx":425
 * 			result = (x / math.e) ** x
 * 			result *= math.sqrt(2 * math.pi / x)
 * 			result *= (1 + 1/(12 * x*x - 1/10)) ** x             # <<<<<<<<<<<<<<
 * 			return result
 * 
 */
  __pyx_t_3 = PyNumber_Multiply(__pyx_int_12, __pyx_v_x); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_3, __pyx_v_x); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyFloat_FromDouble((1.0 / 10.0)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyNumber_Subtract(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_int_1, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyInt_AddCObj(__pyx_int_1, __pyx_t_3, 1, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Power(__pyx_t_4, __pyx_v_x, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_InPlaceMultiply(__pyx_v_result, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "networkit/profiling/stat.pyx":426
 * 			result *= math.sqrt(2 * math.pi / x)
 * 			result *= (1 + 1/(12 * x*x - 1/10)) ** x
 * 			return result             # <<<<<<<<<<<<<<
 * 
 * 		def funcPValue(criticalValue, degreesOfFreedom):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "networkit/profiling/stat.pyx":422
 * 			return sum * sc
 * 
 * 		def funcGamma(x):             # <<<<<<<<<<<<<<
 * 			result = (x / math.e) ** x
 * 			result *= math.sqrt(2 * math.pi / x)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("networkit.profiling.stat.Stat.run.funcGamma", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":428
 * 			return result
 * 
 * 		def funcPValue(criticalValue, degreesOfFreedom):             # <<<<<<<<<<<<<<
 * 			if criticalValue < 0.0 or degreesOfFreedom < 1:
 * 				return 0.0
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_67funcPValue(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_67funcPValue = {"funcPValue", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_67funcPValue, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_67funcPValue(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_criticalValue = 0;
  PyObject *__pyx_v_degreesOfFreedom = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("funcPValue (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_criticalValue,&__pyx_n_s_degreesOfFreedom,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_criticalValue)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_degreesOfFreedom)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("funcPValue", 1, 2, 2, 1); __PYX_ERR(0, 428, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "funcPValue") < 0)) __PYX_ERR(0, 428, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_criticalValue = values[0];
    __pyx_v_degreesOfFreedom = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("funcPValue", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 428, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.profiling.stat.Stat.run.funcPValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_66funcPValue(__pyx_self, __pyx_v_criticalValue, __pyx_v_degreesOfFreedom);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_66funcPValue(PyObject *__pyx_self, PyObject *__pyx_v_criticalValue, PyObject *__pyx_v_degreesOfFreedom) {
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_cur_scope;
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_outer_scope;
  PyObject *__pyx_v_k = NULL;
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("funcPValue", 0);
  __pyx_outer_scope = (struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "networkit/profiling/stat.pyx":429
 * 
 * 		def funcPValue(criticalValue, degreesOfFreedom):
 * 			if criticalValue < 0.0 or degreesOfFreedom < 1:             # <<<<<<<<<<<<<<
 * 				return 0.0
 * 			k = degreesOfFreedom * 0.5
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_criticalValue, __pyx_float_0_0, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 429, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_degreesOfFreedom, __pyx_int_1, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 429, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "networkit/profiling/stat.pyx":430
 * 		def funcPValue(criticalValue, degreesOfFreedom):
 * 			if criticalValue < 0.0 or degreesOfFreedom < 1:
 * 				return 0.0             # <<<<<<<<<<<<<<
 * 			k = degreesOfFreedom * 0.5
 * 			x = criticalValue * 0.5
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_float_0_0);
    __pyx_r = __pyx_float_0_0;
    goto __pyx_L0;

    /* "networkit/profiling/stat.pyx":429
 * 
 * 		def funcPValue(criticalValue, degreesOfFreedom):
 * 			if criticalValue < 0.0 or degreesOfFreedom < 1:             # <<<<<<<<<<<<<<
 * 				return 0.0
 * 			k = degreesOfFreedom * 0.5
 */
  }

  /* "networkit/profiling/stat.pyx":431
 * 			if criticalValue < 0.0 or degreesOfFreedom < 1:
 * 				return 0.0
 * 			k = degreesOfFreedom * 0.5             # <<<<<<<<<<<<<<
 * 			x = criticalValue * 0.5
 * 			if degreesOfFreedom == 2:
 */
  __pyx_t_2 = PyNumber_Multiply(__pyx_v_degreesOfFreedom, __pyx_float_0_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_k = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "networkit/profiling/stat.pyx":432
 * 				return 0.0
 * 			k = degreesOfFreedom * 0.5
 * 			x = criticalValue * 0.5             # <<<<<<<<<<<<<<
 * 			if degreesOfFreedom == 2:
 * 				return math.exp(-x)
 */
  __pyx_t_2 = PyNumber_Multiply(__pyx_v_criticalValue, __pyx_float_0_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_x = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "networkit/profiling/stat.pyx":433
 * 			k = degreesOfFreedom * 0.5
 * 			x = criticalValue * 0.5
 * 			if degreesOfFreedom == 2:             # <<<<<<<<<<<<<<
 * 				return math.exp(-x)
 * 			result = funcIncompleteGamma(k, x)
 */
  __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_v_degreesOfFreedom, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 433, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_1) {

    /* "networkit/profiling/stat.pyx":434
 * 			x = criticalValue * 0.5
 * 			if degreesOfFreedom == 2:
 * 				return math.exp(-x)             # <<<<<<<<<<<<<<
 * 			result = funcIncompleteGamma(k, x)
 * 			result /= funcGamma(k)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_math); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 434, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_exp); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 434, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Negative(__pyx_v_x); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 434, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_2 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 434, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "networkit/profiling/stat.pyx":433
 * 			k = degreesOfFreedom * 0.5
 * 			x = criticalValue * 0.5
 * 			if degreesOfFreedom == 2:             # <<<<<<<<<<<<<<
 * 				return math.exp(-x)
 * 			result = funcIncompleteGamma(k, x)
 */
  }

  /* "networkit/profiling/stat.pyx":435
 * 			if degreesOfFreedom == 2:
 * 				return math.exp(-x)
 * 			result = funcIncompleteGamma(k, x)             # <<<<<<<<<<<<<<
 * 			result /= funcGamma(k)
 * 			return 1-result
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_funcIncompleteGamma)) { __Pyx_RaiseClosureNameError("funcIncompleteGamma"); __PYX_ERR(0, 435, __pyx_L1_error) }
  __pyx_t_2 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_62funcIncompleteGamma(__pyx_cur_scope->__pyx_v_funcIncompleteGamma, __pyx_v_k, __pyx_v_x); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_result = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "networkit/profiling/stat.pyx":436
 * 				return math.exp(-x)
 * 			result = funcIncompleteGamma(k, x)
 * 			result /= funcGamma(k)             # <<<<<<<<<<<<<<
 * 			return 1-result
 * 
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_funcGamma)) { __Pyx_RaiseClosureNameError("funcGamma"); __PYX_ERR(0, 436, __pyx_L1_error) }
  __pyx_t_2 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_64funcGamma(__pyx_cur_scope->__pyx_v_funcGamma, __pyx_v_k); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyNumber_InPlaceDivide(__pyx_v_result, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":437
 * 			result = funcIncompleteGamma(k, x)
 * 			result /= funcGamma(k)
 * 			return 1-result             # <<<<<<<<<<<<<<
 * 
 * 		def funcNumberOfBinsChiSquaredTest():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyInt_SubtractCObj(__pyx_int_1, __pyx_v_result, 1, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "networkit/profiling/stat.pyx":428
 * 			return result
 * 
 * 		def funcPValue(criticalValue, degreesOfFreedom):             # <<<<<<<<<<<<<<
 * 			if criticalValue < 0.0 or degreesOfFreedom < 1:
 * 				return 0.0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("networkit.profiling.stat.Stat.run.funcPValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":439
 * 			return 1-result
 * 
 * 		def funcNumberOfBinsChiSquaredTest():             # <<<<<<<<<<<<<<
 * 			result = 1 + math.ln(n)/math.ln(2)
 * 			if result > 128:
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_69funcNumberOfBinsChiSquaredTest(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_69funcNumberOfBinsChiSquaredTest = {"funcNumberOfBinsChiSquaredTest", (PyCFunction)__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_69funcNumberOfBinsChiSquaredTest, METH_NOARGS, 0};
static PyObject *__pyx_pw_9networkit_9profiling_4stat_4Stat_3run_69funcNumberOfBinsChiSquaredTest(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("funcNumberOfBinsChiSquaredTest (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_68funcNumberOfBinsChiSquaredTest(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_3run_68funcNumberOfBinsChiSquaredTest(PyObject *__pyx_self) {
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_cur_scope;
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_outer_scope;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("funcNumberOfBinsChiSquaredTest", 0);
  __pyx_outer_scope = (struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "networkit/profiling/stat.pyx":440
 * 
 * 		def funcNumberOfBinsChiSquaredTest():
 * 			result = 1 + math.ln(n)/math.ln(2)             # <<<<<<<<<<<<<<
 * 			if result > 128:
 * 				result = 128
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_math); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_ln); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_cur_scope->__pyx_v_n); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_math); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_ln); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_int_2) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_int_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_AddCObj(__pyx_int_1, __pyx_t_4, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "networkit/profiling/stat.pyx":441
 * 		def funcNumberOfBinsChiSquaredTest():
 * 			result = 1 + math.ln(n)/math.ln(2)
 * 			if result > 128:             # <<<<<<<<<<<<<<
 * 				result = 128
 * 			return int(result)
 */
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_result, __pyx_int_128, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 441, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 441, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_5) {

    /* "networkit/profiling/stat.pyx":442
 * 			result = 1 + math.ln(n)/math.ln(2)
 * 			if result > 128:
 * 				result = 128             # <<<<<<<<<<<<<<
 * 			return int(result)
 * 
 */
    __Pyx_INCREF(__pyx_int_128);
    __Pyx_DECREF_SET(__pyx_v_result, __pyx_int_128);

    /* "networkit/profiling/stat.pyx":441
 * 		def funcNumberOfBinsChiSquaredTest():
 * 			result = 1 + math.ln(n)/math.ln(2)
 * 			if result > 128:             # <<<<<<<<<<<<<<
 * 				result = 128
 * 			return int(result)
 */
  }

  /* "networkit/profiling/stat.pyx":443
 * 			if result > 128:
 * 				result = 128
 * 			return int(result)             # <<<<<<<<<<<<<<
 * 
 * 		# TODO:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyNumber_Int(__pyx_v_result); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "networkit/profiling/stat.pyx":439
 * 			return 1-result
 * 
 * 		def funcNumberOfBinsChiSquaredTest():             # <<<<<<<<<<<<<<
 * 			result = 1 + math.ln(n)/math.ln(2)
 * 			if result > 128:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("networkit.profiling.stat.Stat.run.funcNumberOfBinsChiSquaredTest", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":86
 * 		self.__params = params
 * 
 * 	def run(self):             # <<<<<<<<<<<<<<
 * 		""" computation """
 * 		(sample, sampleSorted, sampleRanked, calculatePie) = self.__params
 */

static PyObject *__pyx_pf_9networkit_9profiling_4stat_4Stat_2run(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_cur_scope;
  PyObject *__pyx_v_sampleRanked = NULL;
  PyObject *__pyx_v_calculatePie = NULL;
  PyObject *__pyx_v_results = NULL;
  PyObject *__pyx_v_funcMin = 0;
  PyObject *__pyx_v_funcMax = 0;
  PyObject *__pyx_v_funcBesselsCorrection = 0;
  PyObject *__pyx_v_hoelderMean = 0;
  CYTHON_UNUSED PyObject *__pyx_v_quadraticMean = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_cubicMean = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_harmonicMean = NULL;
  PyObject *__pyx_v_funcArithmeticMeanRank = 0;
  PyObject *__pyx_v_arithmeticMean_Rank = NULL;
  PyObject *__pyx_v_funcUncorrectedVariance = 0;
  PyObject *__pyx_v_variance_uncorrected = NULL;
  PyObject *__pyx_v_variance_Rank_uncorrected = NULL;
  PyObject *__pyx_v_funcVariance = 0;
  PyObject *__pyx_v_variance = NULL;
  PyObject *__pyx_v_variance_Rank = NULL;
  PyObject *__pyx_v_funcStandardDeviation = 0;
  PyObject *__pyx_v_s_n_Rank = NULL;
  PyObject *__pyx_v_s_n_uncorrected = NULL;
  PyObject *__pyx_v_s_n_Rank_uncorrected = NULL;
  PyObject *__pyx_v_funcCoefficientOfVariation = 0;
  CYTHON_UNUSED PyObject *__pyx_v_c_v = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_c_v_Rank = NULL;
  PyObject *__pyx_v_funcAlphaQuartile = 0;
  PyObject *__pyx_v_funcAlphaTrimmedMean = 0;
  CYTHON_UNUSED PyObject *__pyx_v_IQM = NULL;
  PyObject *__pyx_v_funcIQR = 0;
  PyObject *__pyx_v_funcSampleRange = 0;
  PyObject *__pyx_v_funcMidRange = 0;
  CYTHON_UNUSED PyObject *__pyx_v_midRange = NULL;
  PyObject *__pyx_v_funcSkewnessYP = 0;
  CYTHON_UNUSED PyObject *__pyx_v_skewness_yp = NULL;
  PyObject *__pyx_v_funcSkewnessM = 0;
  CYTHON_UNUSED PyObject *__pyx_v_skewnewss_m = NULL;
  PyObject *__pyx_v_funcKurtosis = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kurtosis = NULL;
  PyObject *__pyx_v_funcNumberOfBins = 0;
  PyObject *__pyx_v_k_Bins_Histogram = NULL;
  PyObject *__pyx_v_k_Bins_CDF = NULL;
  PyObject *__pyx_v_funcIntervals = 0;
  PyObject *__pyx_v_intervalsCDF = NULL;
  PyObject *__pyx_v_funcBinAbsoluteFrequencies = 0;
  PyObject *__pyx_v_absoluteFrequenciesCDF = NULL;
  PyObject *__pyx_v_funcJoinEmptyBins = 0;
  PyObject *__pyx_v_funcBinRelativeFrequencies = 0;
  CYTHON_UNUSED PyObject *__pyx_v_relativeFrequenciesHistogram = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_relativeFrequenciesCDF = NULL;
  PyObject *__pyx_v_funcMode = 0;
  CYTHON_UNUSED PyObject *__pyx_v_mode = NULL;
  PyObject *__pyx_v_funcLowerOutliers = 0;
  PyObject *__pyx_v_funcUpperOutliers = 0;
  PyObject *__pyx_v_funcPie = 0;
  CYTHON_UNUSED PyObject *__pyx_v_funcDistributionNormal = 0;
  CYTHON_UNUSED PyObject *__pyx_v_funcDistributionExponential = 0;
  CYTHON_UNUSED PyObject *__pyx_v_funcDistributionExponentialInverse = 0;
  CYTHON_UNUSED PyObject *__pyx_v_funcPValue = 0;
  CYTHON_UNUSED PyObject *__pyx_v_funcNumberOfBinsChiSquaredTest = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("run", 0);
  __pyx_cur_scope = (struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *)__pyx_tp_new_9networkit_9profiling_4stat___pyx_scope_struct__run(__pyx_ptype_9networkit_9profiling_4stat___pyx_scope_struct__run, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 86, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }

  /* "networkit/profiling/stat.pyx":88
 * 	def run(self):
 * 		""" computation """
 * 		(sample, sampleSorted, sampleRanked, calculatePie) = self.__params             # <<<<<<<<<<<<<<
 * 		n = len(sample)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Stat__params); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 4)) {
      if (size > 4) __Pyx_RaiseTooManyValuesError(4);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 88, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 3); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 3); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[4] = {&__pyx_t_2,&__pyx_t_3,&__pyx_t_4,&__pyx_t_5};
      for (i=0; i < 4; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 88, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[4] = {&__pyx_t_2,&__pyx_t_3,&__pyx_t_4,&__pyx_t_5};
    __pyx_t_6 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = Py_TYPE(__pyx_t_6)->tp_iternext;
    for (index=0; index < 4; index++) {
      PyObject* item = __pyx_t_7(__pyx_t_6); if (unlikely(!item)) goto __pyx_L3_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 4) < 0) __PYX_ERR(0, 88, __pyx_L1_error)
    __pyx_t_7 = NULL;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 88, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_cur_scope->__pyx_v_sample = __pyx_t_2;
  __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_cur_scope->__pyx_v_sampleSorted = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_sampleRanked = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_calculatePie = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":89
 * 		""" computation """
 * 		(sample, sampleSorted, sampleRanked, calculatePie) = self.__params
 * 		n = len(sample)             # <<<<<<<<<<<<<<
 * 
 * 		results = {}
 */
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_sample;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_8 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_cur_scope->__pyx_v_n = __pyx_t_8;

  /* "networkit/profiling/stat.pyx":91
 * 		n = len(sample)
 * 
 * 		results = {}             # <<<<<<<<<<<<<<
 * 		results["Properties"] = {}
 * 		results["Location"] =  {}
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_results = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":92
 * 
 * 		results = {}
 * 		results["Properties"] = {}             # <<<<<<<<<<<<<<
 * 		results["Location"] =  {}
 * 		results["Dispersion"] =  {}
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_results, __pyx_n_u_Properties, __pyx_t_1) < 0)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":93
 * 		results = {}
 * 		results["Properties"] = {}
 * 		results["Location"] =  {}             # <<<<<<<<<<<<<<
 * 		results["Dispersion"] =  {}
 * 		results["Shape"] =  {}
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_results, __pyx_n_u_Location, __pyx_t_1) < 0)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":94
 * 		results["Properties"] = {}
 * 		results["Location"] =  {}
 * 		results["Dispersion"] =  {}             # <<<<<<<<<<<<<<
 * 		results["Shape"] =  {}
 * 		results["Binning"] = {}
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_results, __pyx_n_u_Dispersion, __pyx_t_1) < 0)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":95
 * 		results["Location"] =  {}
 * 		results["Dispersion"] =  {}
 * 		results["Shape"] =  {}             # <<<<<<<<<<<<<<
 * 		results["Binning"] = {}
 * 		results["Distribution"] = {}
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_results, __pyx_n_u_Shape, __pyx_t_1) < 0)) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":96
 * 		results["Dispersion"] =  {}
 * 		results["Shape"] =  {}
 * 		results["Binning"] = {}             # <<<<<<<<<<<<<<
 * 		results["Distribution"] = {}
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_results, __pyx_n_u_Binning, __pyx_t_1) < 0)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":97
 * 		results["Shape"] =  {}
 * 		results["Binning"] = {}
 * 		results["Distribution"] = {}             # <<<<<<<<<<<<<<
 * 
 * 		results["Properties"]["Size"] = n
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_results, __pyx_n_u_Distribution, __pyx_t_1) < 0)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":99
 * 		results["Distribution"] = {}
 * 
 * 		results["Properties"]["Size"] = n             # <<<<<<<<<<<<<<
 * 
 * 		def funcMin():
 */
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_cur_scope->__pyx_v_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Properties); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (unlikely(PyObject_SetItem(__pyx_t_5, __pyx_n_u_Size, __pyx_t_1) < 0)) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":101
 * 		results["Properties"]["Size"] = n
 * 
 * 		def funcMin():             # <<<<<<<<<<<<<<
 * 			result = sampleSorted[0]
 * 			return result
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_1funcMin, 0, __pyx_n_s_Stat_run_locals_funcMin, ((PyObject*)__pyx_cur_scope), __pyx_n_s_networkit_profiling_stat, __pyx_d, ((PyObject *)__pyx_codeobj__2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_funcMin = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":104
 * 			result = sampleSorted[0]
 * 			return result
 * 		results["Location"]["Min"] = min = funcMin()             # <<<<<<<<<<<<<<
 * 
 * 		def funcMax():
 */
  __pyx_t_1 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_funcMin(__pyx_v_funcMin); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Location); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (unlikely(PyObject_SetItem(__pyx_t_5, __pyx_n_u_Min, __pyx_t_1) < 0)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_min = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":106
 * 		results["Location"]["Min"] = min = funcMin()
 * 
 * 		def funcMax():             # <<<<<<<<<<<<<<
 * 			result = sampleSorted[n-1]
 * 			return result
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_3funcMax, 0, __pyx_n_s_Stat_run_locals_funcMax, ((PyObject*)__pyx_cur_scope), __pyx_n_s_networkit_profiling_stat, __pyx_d, ((PyObject *)__pyx_codeobj__4)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_funcMax = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":109
 * 			result = sampleSorted[n-1]
 * 			return result
 * 		results["Location"]["Max"] = max = funcMax()             # <<<<<<<<<<<<<<
 * 
 * 		def funcBesselsCorrection():
 */
  __pyx_t_1 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_2funcMax(__pyx_v_funcMax); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Location); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (unlikely(PyObject_SetItem(__pyx_t_5, __pyx_n_u_Max, __pyx_t_1) < 0)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_max = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":111
 * 		results["Location"]["Max"] = max = funcMax()
 * 
 * 		def funcBesselsCorrection():             # <<<<<<<<<<<<<<
 * 			try:
 * 				result = n / (n-1)
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_5funcBesselsCorrection, 0, __pyx_n_s_Stat_run_locals_funcBesselsCorre, ((PyObject*)__pyx_cur_scope), __pyx_n_s_networkit_profiling_stat, __pyx_d, ((PyObject *)__pyx_codeobj__6)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_funcBesselsCorrection = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":117
 * 				result = float("nan")
 * 			return result
 * 		results["Properties"]["Bessel's Correction"] = besselsCorrection = funcBesselsCorrection()             # <<<<<<<<<<<<<<
 * 
 * 		def hoelderMean(sample, p):
 */
  __pyx_t_1 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_4funcBesselsCorrection(__pyx_v_funcBesselsCorrection); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Properties); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (unlikely(PyObject_SetItem(__pyx_t_5, __pyx_kp_u_Bessel_s_Correction, __pyx_t_1) < 0)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_besselsCorrection = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":119
 * 		results["Properties"]["Bessel's Correction"] = besselsCorrection = funcBesselsCorrection()
 * 
 * 		def hoelderMean(sample, p):             # <<<<<<<<<<<<<<
 * 			result = 0
 * 			for i in range(n):
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_7hoelderMean, 0, __pyx_n_s_Stat_run_locals_hoelderMean, ((PyObject*)__pyx_cur_scope), __pyx_n_s_networkit_profiling_stat, __pyx_d, ((PyObject *)__pyx_codeobj__8)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_hoelderMean = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":126
 * 			result **= 1 / p
 * 			return result
 * 		results["Location"]["Arithmetic Mean"] = arithmeticMean = hoelderMean(sample, 1)             # <<<<<<<<<<<<<<
 * 		results["Location"]["Quadratic Mean"] = quadraticMean = hoelderMean(sample, 2)
 * 		results["Location"]["Cubic Mean"] = cubicMean = hoelderMean(sample, 3)
 */
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_sample;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_5 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_6hoelderMean(__pyx_v_hoelderMean, __pyx_t_1, __pyx_int_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Location); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_kp_u_Arithmetic_Mean, __pyx_t_5) < 0)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_INCREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_cur_scope->__pyx_v_arithmeticMean = __pyx_t_5;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":127
 * 			return result
 * 		results["Location"]["Arithmetic Mean"] = arithmeticMean = hoelderMean(sample, 1)
 * 		results["Location"]["Quadratic Mean"] = quadraticMean = hoelderMean(sample, 2)             # <<<<<<<<<<<<<<
 * 		results["Location"]["Cubic Mean"] = cubicMean = hoelderMean(sample, 3)
 * 		if min > 0:
 */
  __pyx_t_5 = __pyx_cur_scope->__pyx_v_sample;
  __Pyx_INCREF(__pyx_t_5);
  __pyx_t_1 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_6hoelderMean(__pyx_v_hoelderMean, __pyx_t_5, __pyx_int_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Location); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (unlikely(PyObject_SetItem(__pyx_t_5, __pyx_kp_u_Quadratic_Mean, __pyx_t_1) < 0)) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_quadraticMean = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":128
 * 		results["Location"]["Arithmetic Mean"] = arithmeticMean = hoelderMean(sample, 1)
 * 		results["Location"]["Quadratic Mean"] = quadraticMean = hoelderMean(sample, 2)
 * 		results["Location"]["Cubic Mean"] = cubicMean = hoelderMean(sample, 3)             # <<<<<<<<<<<<<<
 * 		if min > 0:
 * 			results["Location"]["Harmonic Mean"] = harmonicMean = hoelderMean(sample, -1)
 */
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_sample;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_5 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_6hoelderMean(__pyx_v_hoelderMean, __pyx_t_1, __pyx_int_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Location); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_kp_u_Cubic_Mean, __pyx_t_5) < 0)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_INCREF(__pyx_t_5);
  __pyx_v_cubicMean = __pyx_t_5;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":129
 * 		results["Location"]["Quadratic Mean"] = quadraticMean = hoelderMean(sample, 2)
 * 		results["Location"]["Cubic Mean"] = cubicMean = hoelderMean(sample, 3)
 * 		if min > 0:             # <<<<<<<<<<<<<<
 * 			results["Location"]["Harmonic Mean"] = harmonicMean = hoelderMean(sample, -1)
 * 		else:
 */
  __pyx_t_5 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_min, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 129, __pyx_L1_error)
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_9) {

    /* "networkit/profiling/stat.pyx":130
 * 		results["Location"]["Cubic Mean"] = cubicMean = hoelderMean(sample, 3)
 * 		if min > 0:
 * 			results["Location"]["Harmonic Mean"] = harmonicMean = hoelderMean(sample, -1)             # <<<<<<<<<<<<<<
 * 		else:
 * 			results["Location"]["Harmonic Mean"] = harmonicMean = float("nan")
 */
    __pyx_t_5 = __pyx_cur_scope->__pyx_v_sample;
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_1 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_6hoelderMean(__pyx_v_hoelderMean, __pyx_t_5, __pyx_int_neg_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Location); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(PyObject_SetItem(__pyx_t_5, __pyx_kp_u_Harmonic_Mean, __pyx_t_1) < 0)) __PYX_ERR(0, 130, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_harmonicMean = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "networkit/profiling/stat.pyx":129
 * 		results["Location"]["Quadratic Mean"] = quadraticMean = hoelderMean(sample, 2)
 * 		results["Location"]["Cubic Mean"] = cubicMean = hoelderMean(sample, 3)
 * 		if min > 0:             # <<<<<<<<<<<<<<
 * 			results["Location"]["Harmonic Mean"] = harmonicMean = hoelderMean(sample, -1)
 * 		else:
 */
    goto __pyx_L5;
  }

  /* "networkit/profiling/stat.pyx":132
 * 			results["Location"]["Harmonic Mean"] = harmonicMean = hoelderMean(sample, -1)
 * 		else:
 * 			results["Location"]["Harmonic Mean"] = harmonicMean = float("nan")             # <<<<<<<<<<<<<<
 * 
 * 		def funcArithmeticMeanRank():
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyNumber_Float(__pyx_n_u_nan); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 132, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Location); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 132, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(PyObject_SetItem(__pyx_t_5, __pyx_kp_u_Harmonic_Mean, __pyx_t_1) < 0)) __PYX_ERR(0, 132, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_harmonicMean = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_L5:;

  /* "networkit/profiling/stat.pyx":134
 * 			results["Location"]["Harmonic Mean"] = harmonicMean = float("nan")
 * 
 * 		def funcArithmeticMeanRank():             # <<<<<<<<<<<<<<
 * 			result = (n + 1) / 2
 * 			return result
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_9funcArithmeticMeanRank, 0, __pyx_n_s_Stat_run_locals_funcArithmeticMe, ((PyObject*)__pyx_cur_scope), __pyx_n_s_networkit_profiling_stat, __pyx_d, ((PyObject *)__pyx_codeobj__10)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_funcArithmeticMeanRank = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":137
 * 			result = (n + 1) / 2
 * 			return result
 * 		results["Location"]["Arithmetic Mean (Rank)"] = arithmeticMean_Rank = funcArithmeticMeanRank()             # <<<<<<<<<<<<<<
 * 
 * 		def funcUncorrectedVariance(sample, arithmeticMean):
 */
  __pyx_t_1 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_8funcArithmeticMeanRank(__pyx_v_funcArithmeticMeanRank); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Location); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (unlikely(PyObject_SetItem(__pyx_t_5, __pyx_kp_u_Arithmetic_Mean_Rank, __pyx_t_1) < 0)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_arithmeticMean_Rank = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":139
 * 		results["Location"]["Arithmetic Mean (Rank)"] = arithmeticMean_Rank = funcArithmeticMeanRank()
 * 
 * 		def funcUncorrectedVariance(sample, arithmeticMean):             # <<<<<<<<<<<<<<
 * 			result = 0
 * 			for i in range(n):
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_11funcUncorrectedVariance, 0, __pyx_n_s_Stat_run_locals_funcUncorrectedV, ((PyObject*)__pyx_cur_scope), __pyx_n_s_networkit_profiling_stat, __pyx_d, ((PyObject *)__pyx_codeobj__12)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_funcUncorrectedVariance = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":145
 * 			result /= n
 * 			return result
 * 		results["Dispersion"]["Uncorrected Variance"] = variance_uncorrected = funcUncorrectedVariance(sample, arithmeticMean)             # <<<<<<<<<<<<<<
 * 		results["Dispersion"]["Uncorrected Variance (Rank)"] = variance_Rank_uncorrected = funcUncorrectedVariance(sampleRanked, arithmeticMean_Rank)
 * 
 */
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_sample;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_5 = __pyx_cur_scope->__pyx_v_arithmeticMean;
  __Pyx_INCREF(__pyx_t_5);
  __pyx_t_4 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_10funcUncorrectedVariance(__pyx_v_funcUncorrectedVariance, __pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Dispersion); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (unlikely(PyObject_SetItem(__pyx_t_5, __pyx_kp_u_Uncorrected_Variance, __pyx_t_4) < 0)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_v_variance_uncorrected = __pyx_t_4;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/profiling/stat.pyx":146
 * 			return result
 * 		results["Dispersion"]["Uncorrected Variance"] = variance_uncorrected = funcUncorrectedVariance(sample, arithmeticMean)
 * 		results["Dispersion"]["Uncorrected Variance (Rank)"] = variance_Rank_uncorrected = funcUncorrectedVariance(sampleRanked, arithmeticMean_Rank)             # <<<<<<<<<<<<<<
 * 
 * 		def funcVariance(variance_uncorrected):
 */
  __pyx_t_4 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_10funcUncorrectedVariance(__pyx_v_funcUncorrectedVariance, __pyx_v_sampleRanked, __pyx_v_arithmeticMean_Rank); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Dispersion); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (unlikely(PyObject_SetItem(__pyx_t_5, __pyx_kp_u_Uncorrected_Variance_Rank, __pyx_t_4) < 0)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_v_variance_Rank_uncorrected = __pyx_t_4;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/profiling/stat.pyx":148
 * 		results["Dispersion"]["Uncorrected Variance (Rank)"] = variance_Rank_uncorrected = funcUncorrectedVariance(sampleRanked, arithmeticMean_Rank)
 * 
 * 		def funcVariance(variance_uncorrected):             # <<<<<<<<<<<<<<
 * 			result = variance_uncorrected * besselsCorrection
 * 			return result
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_13funcVariance, 0, __pyx_n_s_Stat_run_locals_funcVariance, ((PyObject*)__pyx_cur_scope), __pyx_n_s_networkit_profiling_stat, __pyx_d, ((PyObject *)__pyx_codeobj__14)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_funcVariance = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "networkit/profiling/stat.pyx":151
 * 			result = variance_uncorrected * besselsCorrection
 * 			return result
 * 		results["Dispersion"]["Variance"] = variance = funcVariance(variance_uncorrected)             # <<<<<<<<<<<<<<
 * 		results["Dispersion"]["Variance (Rank)"] = variance_Rank = funcVariance(variance_Rank_uncorrected)
 * 
 */
  __pyx_t_4 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_12funcVariance(__pyx_v_funcVariance, __pyx_v_variance_uncorrected); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Dispersion); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (unlikely(PyObject_SetItem(__pyx_t_5, __pyx_n_u_Variance, __pyx_t_4) < 0)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_v_variance = __pyx_t_4;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/profiling/stat.pyx":152
 * 			return result
 * 		results["Dispersion"]["Variance"] = variance = funcVariance(variance_uncorrected)
 * 		results["Dispersion"]["Variance (Rank)"] = variance_Rank = funcVariance(variance_Rank_uncorrected)             # <<<<<<<<<<<<<<
 * 
 * 		def funcStandardDeviation(variance):
 */
  __pyx_t_4 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_12funcVariance(__pyx_v_funcVariance, __pyx_v_variance_Rank_uncorrected); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Dispersion); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (unlikely(PyObject_SetItem(__pyx_t_5, __pyx_kp_u_Variance_Rank, __pyx_t_4) < 0)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_v_variance_Rank = __pyx_t_4;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/profiling/stat.pyx":154
 * 		results["Dispersion"]["Variance (Rank)"] = variance_Rank = funcVariance(variance_Rank_uncorrected)
 * 
 * 		def funcStandardDeviation(variance):             # <<<<<<<<<<<<<<
 * 			result = math.sqrt(variance)
 * 			return result
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_15funcStandardDeviation, 0, __pyx_n_s_Stat_run_locals_funcStandardDevi, NULL, __pyx_n_s_networkit_profiling_stat, __pyx_d, ((PyObject *)__pyx_codeobj__16)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_funcStandardDeviation = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "networkit/profiling/stat.pyx":157
 * 			result = math.sqrt(variance)
 * 			return result
 * 		results["Dispersion"]["Standard Deviation"] = s_n = funcStandardDeviation(variance)             # <<<<<<<<<<<<<<
 * 		results["Dispersion"]["Standard Deviation (Rank)"] = s_n_Rank = funcStandardDeviation(variance_Rank)
 * 		results["Dispersion"]["Uncorrected Standard Deviation"] = s_n_uncorrected = funcStandardDeviation(variance_uncorrected)
 */
  __pyx_t_4 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_14funcStandardDeviation(__pyx_v_funcStandardDeviation, __pyx_v_variance); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Dispersion); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (unlikely(PyObject_SetItem(__pyx_t_5, __pyx_kp_u_Standard_Deviation, __pyx_t_4) < 0)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_cur_scope->__pyx_v_s_n = __pyx_t_4;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/profiling/stat.pyx":158
 * 			return result
 * 		results["Dispersion"]["Standard Deviation"] = s_n = funcStandardDeviation(variance)
 * 		results["Dispersion"]["Standard Deviation (Rank)"] = s_n_Rank = funcStandardDeviation(variance_Rank)             # <<<<<<<<<<<<<<
 * 		results["Dispersion"]["Uncorrected Standard Deviation"] = s_n_uncorrected = funcStandardDeviation(variance_uncorrected)
 * 		results["Dispersion"]["Uncorrected Standard Deviation (Rank)"] = s_n_Rank_uncorrected = funcStandardDeviation(variance_Rank_uncorrected)
 */
  __pyx_t_4 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_14funcStandardDeviation(__pyx_v_funcStandardDeviation, __pyx_v_variance_Rank); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Dispersion); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (unlikely(PyObject_SetItem(__pyx_t_5, __pyx_kp_u_Standard_Deviation_Rank, __pyx_t_4) < 0)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_v_s_n_Rank = __pyx_t_4;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/profiling/stat.pyx":159
 * 		results["Dispersion"]["Standard Deviation"] = s_n = funcStandardDeviation(variance)
 * 		results["Dispersion"]["Standard Deviation (Rank)"] = s_n_Rank = funcStandardDeviation(variance_Rank)
 * 		results["Dispersion"]["Uncorrected Standard Deviation"] = s_n_uncorrected = funcStandardDeviation(variance_uncorrected)             # <<<<<<<<<<<<<<
 * 		results["Dispersion"]["Uncorrected Standard Deviation (Rank)"] = s_n_Rank_uncorrected = funcStandardDeviation(variance_Rank_uncorrected)
 * 
 */
  __pyx_t_4 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_14funcStandardDeviation(__pyx_v_funcStandardDeviation, __pyx_v_variance_uncorrected); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Dispersion); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (unlikely(PyObject_SetItem(__pyx_t_5, __pyx_kp_u_Uncorrected_Standard_Deviation, __pyx_t_4) < 0)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_v_s_n_uncorrected = __pyx_t_4;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/profiling/stat.pyx":160
 * 		results["Dispersion"]["Standard Deviation (Rank)"] = s_n_Rank = funcStandardDeviation(variance_Rank)
 * 		results["Dispersion"]["Uncorrected Standard Deviation"] = s_n_uncorrected = funcStandardDeviation(variance_uncorrected)
 * 		results["Dispersion"]["Uncorrected Standard Deviation (Rank)"] = s_n_Rank_uncorrected = funcStandardDeviation(variance_Rank_uncorrected)             # <<<<<<<<<<<<<<
 * 
 * 		def funcCoefficientOfVariation(s_n, arithmeticMean):
 */
  __pyx_t_4 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_14funcStandardDeviation(__pyx_v_funcStandardDeviation, __pyx_v_variance_Rank_uncorrected); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Dispersion); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (unlikely(PyObject_SetItem(__pyx_t_5, __pyx_kp_u_Uncorrected_Standard_Deviation_R, __pyx_t_4) < 0)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_v_s_n_Rank_uncorrected = __pyx_t_4;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/profiling/stat.pyx":162
 * 		results["Dispersion"]["Uncorrected Standard Deviation (Rank)"] = s_n_Rank_uncorrected = funcStandardDeviation(variance_Rank_uncorrected)
 * 
 * 		def funcCoefficientOfVariation(s_n, arithmeticMean):             # <<<<<<<<<<<<<<
 * 			result = float("nan")
 * 			if arithmeticMean != 0:
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_17funcCoefficientOfVariation, 0, __pyx_n_s_Stat_run_locals_funcCoefficientO, NULL, __pyx_n_s_networkit_profiling_stat, __pyx_d, ((PyObject *)__pyx_codeobj__18)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_funcCoefficientOfVariation = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "networkit/profiling/stat.pyx":167
 * 				result = s_n / arithmeticMean
 * 			return result
 * 		results["Dispersion"]["Coefficient Of Variation"] = c_v = funcCoefficientOfVariation(s_n, arithmeticMean)             # <<<<<<<<<<<<<<
 * 		results["Dispersion"]["Coefficient Of Variation (Rank)"] = c_v_Rank = funcCoefficientOfVariation(s_n_Rank, arithmeticMean_Rank)
 * 		results["Dispersion"]["Uncorrected Coefficient Of Variation"] = c_v = funcCoefficientOfVariation(s_n_uncorrected, arithmeticMean)
 */
  __pyx_t_4 = __pyx_cur_scope->__pyx_v_s_n;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_5 = __pyx_cur_scope->__pyx_v_arithmeticMean;
  __Pyx_INCREF(__pyx_t_5);
  __pyx_t_1 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_16funcCoefficientOfVariation(__pyx_v_funcCoefficientOfVariation, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Dispersion); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (unlikely(PyObject_SetItem(__pyx_t_5, __pyx_kp_u_Coefficient_Of_Variation, __pyx_t_1) < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_c_v = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":168
 * 			return result
 * 		results["Dispersion"]["Coefficient Of Variation"] = c_v = funcCoefficientOfVariation(s_n, arithmeticMean)
 * 		results["Dispersion"]["Coefficient Of Variation (Rank)"] = c_v_Rank = funcCoefficientOfVariation(s_n_Rank, arithmeticMean_Rank)             # <<<<<<<<<<<<<<
 * 		results["Dispersion"]["Uncorrected Coefficient Of Variation"] = c_v = funcCoefficientOfVariation(s_n_uncorrected, arithmeticMean)
 * 		results["Dispersion"]["Uncorrected Coefficient Of Variation (Rank)"] = c_v_Rank = funcCoefficientOfVariation(s_n_Rank_uncorrected, arithmeticMean_Rank)
 */
  __pyx_t_1 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_16funcCoefficientOfVariation(__pyx_v_funcCoefficientOfVariation, __pyx_v_s_n_Rank, __pyx_v_arithmeticMean_Rank); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Dispersion); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (unlikely(PyObject_SetItem(__pyx_t_5, __pyx_kp_u_Coefficient_Of_Variation_Rank, __pyx_t_1) < 0)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_c_v_Rank = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":169
 * 		results["Dispersion"]["Coefficient Of Variation"] = c_v = funcCoefficientOfVariation(s_n, arithmeticMean)
 * 		results["Dispersion"]["Coefficient Of Variation (Rank)"] = c_v_Rank = funcCoefficientOfVariation(s_n_Rank, arithmeticMean_Rank)
 * 		results["Dispersion"]["Uncorrected Coefficient Of Variation"] = c_v = funcCoefficientOfVariation(s_n_uncorrected, arithmeticMean)             # <<<<<<<<<<<<<<
 * 		results["Dispersion"]["Uncorrected Coefficient Of Variation (Rank)"] = c_v_Rank = funcCoefficientOfVariation(s_n_Rank_uncorrected, arithmeticMean_Rank)
 * 
 */
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_arithmeticMean;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_5 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_16funcCoefficientOfVariation(__pyx_v_funcCoefficientOfVariation, __pyx_v_s_n_uncorrected, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Dispersion); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_kp_u_Uncorrected_Coefficient_Of_Varia, __pyx_t_5) < 0)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_INCREF(__pyx_t_5);
  __Pyx_DECREF_SET(__pyx_v_c_v, __pyx_t_5);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":170
 * 		results["Dispersion"]["Coefficient Of Variation (Rank)"] = c_v_Rank = funcCoefficientOfVariation(s_n_Rank, arithmeticMean_Rank)
 * 		results["Dispersion"]["Uncorrected Coefficient Of Variation"] = c_v = funcCoefficientOfVariation(s_n_uncorrected, arithmeticMean)
 * 		results["Dispersion"]["Uncorrected Coefficient Of Variation (Rank)"] = c_v_Rank = funcCoefficientOfVariation(s_n_Rank_uncorrected, arithmeticMean_Rank)             # <<<<<<<<<<<<<<
 * 
 * 		def funcAlphaQuartile(alpha):
 */
  __pyx_t_5 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_16funcCoefficientOfVariation(__pyx_v_funcCoefficientOfVariation, __pyx_v_s_n_Rank_uncorrected, __pyx_v_arithmeticMean_Rank); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Dispersion); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_kp_u_Uncorrected_Coefficient_Of_Varia_2, __pyx_t_5) < 0)) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_INCREF(__pyx_t_5);
  __Pyx_DECREF_SET(__pyx_v_c_v_Rank, __pyx_t_5);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":172
 * 		results["Dispersion"]["Uncorrected Coefficient Of Variation (Rank)"] = c_v_Rank = funcCoefficientOfVariation(s_n_Rank_uncorrected, arithmeticMean_Rank)
 * 
 * 		def funcAlphaQuartile(alpha):             # <<<<<<<<<<<<<<
 * 			k_real = (alpha * n)
 * 			k = math.floor(k_real)
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_19funcAlphaQuartile, 0, __pyx_n_s_Stat_run_locals_funcAlphaQuartil, ((PyObject*)__pyx_cur_scope), __pyx_n_s_networkit_profiling_stat, __pyx_d, ((PyObject *)__pyx_codeobj__20)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_funcAlphaQuartile = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":180
 * 				result = 0.5 * (sampleSorted[(k-1)] + sampleSorted[(k-1)+1])
 * 			return result
 * 		results["Location"]["1st Quartile"] = Q1 = funcAlphaQuartile(0.25)             # <<<<<<<<<<<<<<
 * 		results["Location"]["Median"] = median = funcAlphaQuartile(0.5)
 * 		results["Location"]["3rd Quartile"] = Q3 = funcAlphaQuartile(0.75)
 */
  __pyx_t_5 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_18funcAlphaQuartile(__pyx_v_funcAlphaQuartile, __pyx_float_0_25); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Location); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_kp_u_1st_Quartile, __pyx_t_5) < 0)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_INCREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_cur_scope->__pyx_v_Q1 = __pyx_t_5;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":181
 * 			return result
 * 		results["Location"]["1st Quartile"] = Q1 = funcAlphaQuartile(0.25)
 * 		results["Location"]["Median"] = median = funcAlphaQuartile(0.5)             # <<<<<<<<<<<<<<
 * 		results["Location"]["3rd Quartile"] = Q3 = funcAlphaQuartile(0.75)
 * 
 */
  __pyx_t_5 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_18funcAlphaQuartile(__pyx_v_funcAlphaQuartile, __pyx_float_0_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Location); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_n_u_Median, __pyx_t_5) < 0)) __PYX_ERR(0, 181, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_INCREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_cur_scope->__pyx_v_median = __pyx_t_5;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":182
 * 		results["Location"]["1st Quartile"] = Q1 = funcAlphaQuartile(0.25)
 * 		results["Location"]["Median"] = median = funcAlphaQuartile(0.5)
 * 		results["Location"]["3rd Quartile"] = Q3 = funcAlphaQuartile(0.75)             # <<<<<<<<<<<<<<
 * 
 * 		def funcAlphaTrimmedMean(alpha):
 */
  __pyx_t_5 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_18funcAlphaQuartile(__pyx_v_funcAlphaQuartile, __pyx_float_0_75); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Location); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_kp_u_3rd_Quartile, __pyx_t_5) < 0)) __PYX_ERR(0, 182, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_INCREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_cur_scope->__pyx_v_Q3 = __pyx_t_5;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":184
 * 		results["Location"]["3rd Quartile"] = Q3 = funcAlphaQuartile(0.75)
 * 
 * 		def funcAlphaTrimmedMean(alpha):             # <<<<<<<<<<<<<<
 * 			k = math.floor(alpha * n)
 * 			i = k+1
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_21funcAlphaTrimmedMean, 0, __pyx_n_s_Stat_run_locals_funcAlphaTrimmed, ((PyObject*)__pyx_cur_scope), __pyx_n_s_networkit_profiling_stat, __pyx_d, ((PyObject *)__pyx_codeobj__22)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_funcAlphaTrimmedMean = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":193
 * 			result /= n	- 2*(k)
 * 			return result
 * 		results["Location"]["Interquartile Mean"] = IQM = funcAlphaTrimmedMean(0.25)             # <<<<<<<<<<<<<<
 * 
 * 		def funcIQR():
 */
  __pyx_t_5 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_20funcAlphaTrimmedMean(__pyx_v_funcAlphaTrimmedMean, __pyx_float_0_25); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Location); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_kp_u_Interquartile_Mean, __pyx_t_5) < 0)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_INCREF(__pyx_t_5);
  __pyx_v_IQM = __pyx_t_5;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":195
 * 		results["Location"]["Interquartile Mean"] = IQM = funcAlphaTrimmedMean(0.25)
 * 
 * 		def funcIQR():             # <<<<<<<<<<<<<<
 * 			result = Q3 - Q1
 * 			return result
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_23funcIQR, 0, __pyx_n_s_Stat_run_locals_funcIQR, ((PyObject*)__pyx_cur_scope), __pyx_n_s_networkit_profiling_stat, __pyx_d, ((PyObject *)__pyx_codeobj__24)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_funcIQR = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":198
 * 			result = Q3 - Q1
 * 			return result
 * 		results["Dispersion"]["Interquartile Range"] = IQR = funcIQR()             # <<<<<<<<<<<<<<
 * 
 * 		def funcSampleRange():
 */
  __pyx_t_5 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_22funcIQR(__pyx_v_funcIQR); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Dispersion); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_kp_u_Interquartile_Range, __pyx_t_5) < 0)) __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_INCREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_cur_scope->__pyx_v_IQR = __pyx_t_5;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":200
 * 		results["Dispersion"]["Interquartile Range"] = IQR = funcIQR()
 * 
 * 		def funcSampleRange():             # <<<<<<<<<<<<<<
 * 			result = max - min
 * 			return result
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_25funcSampleRange, 0, __pyx_n_s_Stat_run_locals_funcSampleRange, ((PyObject*)__pyx_cur_scope), __pyx_n_s_networkit_profiling_stat, __pyx_d, ((PyObject *)__pyx_codeobj__26)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_funcSampleRange = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":203
 * 			result = max - min
 * 			return result
 * 		results["Dispersion"]["Sample Range"] = sampleRange = funcSampleRange()             # <<<<<<<<<<<<<<
 * 
 * 		def funcMidRange():
 */
  __pyx_t_5 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_24funcSampleRange(__pyx_v_funcSampleRange); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Dispersion); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_kp_u_Sample_Range, __pyx_t_5) < 0)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_INCREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_cur_scope->__pyx_v_sampleRange = __pyx_t_5;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":205
 * 		results["Dispersion"]["Sample Range"] = sampleRange = funcSampleRange()
 * 
 * 		def funcMidRange():             # <<<<<<<<<<<<<<
 * 			result = (min + max)/ 2
 * 			return result
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_27funcMidRange, 0, __pyx_n_s_Stat_run_locals_funcMidRange, ((PyObject*)__pyx_cur_scope), __pyx_n_s_networkit_profiling_stat, __pyx_d, ((PyObject *)__pyx_codeobj__28)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_funcMidRange = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":208
 * 			result = (min + max)/ 2
 * 			return result
 * 		results["Location"]["Mid-Range"] = midRange = funcMidRange()             # <<<<<<<<<<<<<<
 * 
 * 		def funcSkewnessYP():
 */
  __pyx_t_5 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_26funcMidRange(__pyx_v_funcMidRange); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Location); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_kp_u_Mid_Range, __pyx_t_5) < 0)) __PYX_ERR(0, 208, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_INCREF(__pyx_t_5);
  __pyx_v_midRange = __pyx_t_5;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":210
 * 		results["Location"]["Mid-Range"] = midRange = funcMidRange()
 * 
 * 		def funcSkewnessYP():             # <<<<<<<<<<<<<<
 * 			result = float("nan")
 * 			if s_n != 0:
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_29funcSkewnessYP, 0, __pyx_n_s_Stat_run_locals_funcSkewnessYP, ((PyObject*)__pyx_cur_scope), __pyx_n_s_networkit_profiling_stat, __pyx_d, ((PyObject *)__pyx_codeobj__30)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_funcSkewnessYP = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":215
 * 				result = 3 * (arithmeticMean - median) / s_n
 * 			return result
 * 		results["Shape"]["Skewness YP"] = skewness_yp = funcSkewnessYP()             # <<<<<<<<<<<<<<
 * 
 * 		def funcMomentum(p):
 */
  __pyx_t_5 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_28funcSkewnessYP(__pyx_v_funcSkewnessYP); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_kp_u_Skewness_YP, __pyx_t_5) < 0)) __PYX_ERR(0, 215, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_INCREF(__pyx_t_5);
  __pyx_v_skewness_yp = __pyx_t_5;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":217
 * 		results["Shape"]["Skewness YP"] = skewness_yp = funcSkewnessYP()
 * 
 * 		def funcMomentum(p):             # <<<<<<<<<<<<<<
 * 			result = float("nan")
 * 			if s_n != 0:
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_31funcMomentum, 0, __pyx_n_s_Stat_run_locals_funcMomentum, ((PyObject*)__pyx_cur_scope), __pyx_n_s_networkit_profiling_stat, __pyx_d, ((PyObject *)__pyx_codeobj__32)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_cur_scope->__pyx_v_funcMomentum = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":226
 * 			return result
 * 
 * 		def funcSkewnessM():             # <<<<<<<<<<<<<<
 * 			result = funcMomentum(3)
 * 			return result
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_33funcSkewnessM, 0, __pyx_n_s_Stat_run_locals_funcSkewnessM, ((PyObject*)__pyx_cur_scope), __pyx_n_s_networkit_profiling_stat, __pyx_d, ((PyObject *)__pyx_codeobj__34)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_funcSkewnessM = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":229
 * 			result = funcMomentum(3)
 * 			return result
 * 		results["Shape"]["Skewness M"] = skewnewss_m = funcSkewnessM()             # <<<<<<<<<<<<<<
 * 
 * 		def funcKurtosis():
 */
  __pyx_t_5 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_32funcSkewnessM(__pyx_v_funcSkewnessM); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_kp_u_Skewness_M, __pyx_t_5) < 0)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_INCREF(__pyx_t_5);
  __pyx_v_skewnewss_m = __pyx_t_5;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":231
 * 		results["Shape"]["Skewness M"] = skewnewss_m = funcSkewnessM()
 * 
 * 		def funcKurtosis():             # <<<<<<<<<<<<<<
 * 			result = funcMomentum(4) - 3
 * 			return result
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_35funcKurtosis, 0, __pyx_n_s_Stat_run_locals_funcKurtosis, ((PyObject*)__pyx_cur_scope), __pyx_n_s_networkit_profiling_stat, __pyx_d, ((PyObject *)__pyx_codeobj__36)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_funcKurtosis = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":234
 * 			result = funcMomentum(4) - 3
 * 			return result
 * 		results["Shape"]["Kurtosis"] = kurtosis = funcKurtosis()             # <<<<<<<<<<<<<<
 * 
 * 		def funcNumberOfBins(commulative):
 */
  __pyx_t_5 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_34funcKurtosis(__pyx_v_funcKurtosis); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_n_u_Kurtosis, __pyx_t_5) < 0)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_INCREF(__pyx_t_5);
  __pyx_v_kurtosis = __pyx_t_5;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":236
 * 		results["Shape"]["Kurtosis"] = kurtosis = funcKurtosis()
 * 
 * 		def funcNumberOfBins(commulative):             # <<<<<<<<<<<<<<
 * 			result = 1
 * 			if min < max:
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_37funcNumberOfBins, 0, __pyx_n_s_Stat_run_locals_funcNumberOfBins, ((PyObject*)__pyx_cur_scope), __pyx_n_s_networkit_profiling_stat, __pyx_d, ((PyObject *)__pyx_codeobj__38)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_funcNumberOfBins = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":248
 * 						result = 20
 * 			return int(result)
 * 		results["Binning"]["Number Histogram"] = k_Bins_Histogram = funcNumberOfBins(False)             # <<<<<<<<<<<<<<
 * 		k_Bins_CDF = funcNumberOfBins(True)
 * 
 */
  __pyx_t_5 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_36funcNumberOfBins(__pyx_v_funcNumberOfBins, Py_False); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Binning); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_kp_u_Number_Histogram, __pyx_t_5) < 0)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_INCREF(__pyx_t_5);
  __pyx_v_k_Bins_Histogram = __pyx_t_5;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":249
 * 			return int(result)
 * 		results["Binning"]["Number Histogram"] = k_Bins_Histogram = funcNumberOfBins(False)
 * 		k_Bins_CDF = funcNumberOfBins(True)             # <<<<<<<<<<<<<<
 * 
 * 		def funcIntervals(numberOfBins):
 */
  __pyx_t_5 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_36funcNumberOfBins(__pyx_v_funcNumberOfBins, Py_True); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_k_Bins_CDF = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":251
 * 		k_Bins_CDF = funcNumberOfBins(True)
 * 
 * 		def funcIntervals(numberOfBins):             # <<<<<<<<<<<<<<
 * 			result = []
 * 			w = sampleRange / numberOfBins
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_39funcIntervals, 0, __pyx_n_s_Stat_run_locals_funcIntervals, ((PyObject*)__pyx_cur_scope), __pyx_n_s_networkit_profiling_stat, __pyx_d, ((PyObject *)__pyx_codeobj__40)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_funcIntervals = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":259
 * 			result.append(max if min < max else max+10e-12)
 * 			return result
 * 		results["Binning"]["Intervals Histogram"] = intervalsHistogram = funcIntervals(k_Bins_Histogram)             # <<<<<<<<<<<<<<
 * 		intervalsCDF = funcIntervals(k_Bins_CDF)
 * 
 */
  __pyx_t_5 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_38funcIntervals(__pyx_v_funcIntervals, __pyx_v_k_Bins_Histogram); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Binning); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_kp_u_Intervals_Histogram, __pyx_t_5) < 0)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_INCREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_cur_scope->__pyx_v_intervalsHistogram = __pyx_t_5;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":260
 * 			return result
 * 		results["Binning"]["Intervals Histogram"] = intervalsHistogram = funcIntervals(k_Bins_Histogram)
 * 		intervalsCDF = funcIntervals(k_Bins_CDF)             # <<<<<<<<<<<<<<
 * 
 * 		def funcBinAbsoluteFrequencies(numberOfBins, intervals, comulative):
 */
  __pyx_t_5 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_38funcIntervals(__pyx_v_funcIntervals, __pyx_v_k_Bins_CDF); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_intervalsCDF = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":262
 * 		intervalsCDF = funcIntervals(k_Bins_CDF)
 * 
 * 		def funcBinAbsoluteFrequencies(numberOfBins, intervals, comulative):             # <<<<<<<<<<<<<<
 * 			result = []
 * 			index = 0
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_41funcBinAbsoluteFrequencies, 0, __pyx_n_s_Stat_run_locals_funcBinAbsoluteF, ((PyObject*)__pyx_cur_scope), __pyx_n_s_networkit_profiling_stat, __pyx_d, ((PyObject *)__pyx_codeobj__42)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_funcBinAbsoluteFrequencies = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":275
 * 				result[index] += 1
 * 			return result
 * 		results["Binning"]["Absolute Frequencies Histogram"] = absoluteFrequenciesHistogram = funcBinAbsoluteFrequencies(k_Bins_Histogram, intervalsHistogram, False)             # <<<<<<<<<<<<<<
 * 		absoluteFrequenciesCDF = funcBinAbsoluteFrequencies(k_Bins_CDF, intervalsCDF, True)
 * 
 */
  __pyx_t_5 = __pyx_cur_scope->__pyx_v_intervalsHistogram;
  __Pyx_INCREF(__pyx_t_5);
  __pyx_t_1 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_40funcBinAbsoluteFrequencies(__pyx_v_funcBinAbsoluteFrequencies, __pyx_v_k_Bins_Histogram, __pyx_t_5, Py_False); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Binning); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (unlikely(PyObject_SetItem(__pyx_t_5, __pyx_kp_u_Absolute_Frequencies_Histogram, __pyx_t_1) < 0)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_absoluteFrequenciesHistogram = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":276
 * 			return result
 * 		results["Binning"]["Absolute Frequencies Histogram"] = absoluteFrequenciesHistogram = funcBinAbsoluteFrequencies(k_Bins_Histogram, intervalsHistogram, False)
 * 		absoluteFrequenciesCDF = funcBinAbsoluteFrequencies(k_Bins_CDF, intervalsCDF, True)             # <<<<<<<<<<<<<<
 * 
 * 		def funcJoinEmptyBins(k_Bin, intervals, frequencies, commulative):
 */
  __pyx_t_1 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_40funcBinAbsoluteFrequencies(__pyx_v_funcBinAbsoluteFrequencies, __pyx_v_k_Bins_CDF, __pyx_v_intervalsCDF, Py_True); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_absoluteFrequenciesCDF = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":278
 * 		absoluteFrequenciesCDF = funcBinAbsoluteFrequencies(k_Bins_CDF, intervalsCDF, True)
 * 
 * 		def funcJoinEmptyBins(k_Bin, intervals, frequencies, commulative):             # <<<<<<<<<<<<<<
 * 			result = k_Bin
 * 			value = 0
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_43funcJoinEmptyBins, 0, __pyx_n_s_Stat_run_locals_funcJoinEmptyBin, NULL, __pyx_n_s_networkit_profiling_stat, __pyx_d, ((PyObject *)__pyx_codeobj__44)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_funcJoinEmptyBins = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":289
 * 					value = frequencies[k_Bin-i-1]
 * 			return result
 * 		results["Binning"]["Number CDF"] = k_Bins_CDF = funcJoinEmptyBins(k_Bins_CDF, intervalsCDF, absoluteFrequenciesCDF, True)             # <<<<<<<<<<<<<<
 * 		results["Binning"]["Absolute Frequencies CDF"] = absoluteFrequenciesCDF
 * 		results["Binning"]["Intervals CDF"] = intervalsCDF
 */
  __pyx_t_1 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_42funcJoinEmptyBins(__pyx_v_funcJoinEmptyBins, __pyx_v_k_Bins_CDF, __pyx_v_intervalsCDF, __pyx_v_absoluteFrequenciesCDF, Py_True); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Binning); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (unlikely(PyObject_SetItem(__pyx_t_5, __pyx_kp_u_Number_CDF, __pyx_t_1) < 0)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_DECREF_SET(__pyx_v_k_Bins_CDF, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":290
 * 			return result
 * 		results["Binning"]["Number CDF"] = k_Bins_CDF = funcJoinEmptyBins(k_Bins_CDF, intervalsCDF, absoluteFrequenciesCDF, True)
 * 		results["Binning"]["Absolute Frequencies CDF"] = absoluteFrequenciesCDF             # <<<<<<<<<<<<<<
 * 		results["Binning"]["Intervals CDF"] = intervalsCDF
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Binning); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_kp_u_Absolute_Frequencies_CDF, __pyx_v_absoluteFrequenciesCDF) < 0)) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":291
 * 		results["Binning"]["Number CDF"] = k_Bins_CDF = funcJoinEmptyBins(k_Bins_CDF, intervalsCDF, absoluteFrequenciesCDF, True)
 * 		results["Binning"]["Absolute Frequencies CDF"] = absoluteFrequenciesCDF
 * 		results["Binning"]["Intervals CDF"] = intervalsCDF             # <<<<<<<<<<<<<<
 * 
 * 		def funcBinRelativeFrequencies(absoluteFrequencies):
 */
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Binning); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_kp_u_Intervals_CDF, __pyx_v_intervalsCDF) < 0)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":293
 * 		results["Binning"]["Intervals CDF"] = intervalsCDF
 * 
 * 		def funcBinRelativeFrequencies(absoluteFrequencies):             # <<<<<<<<<<<<<<
 * 			result = []
 * 			for H in absoluteFrequencies:
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_45funcBinRelativeFrequencies, 0, __pyx_n_s_Stat_run_locals_funcBinRelativeF, ((PyObject*)__pyx_cur_scope), __pyx_n_s_networkit_profiling_stat, __pyx_d, ((PyObject *)__pyx_codeobj__46)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_funcBinRelativeFrequencies = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":298
 * 				result.append(H / n)
 * 			return result
 * 		results["Binning"]["Relative Frequencies Histogram"] = relativeFrequenciesHistogram = funcBinRelativeFrequencies(absoluteFrequenciesHistogram)             # <<<<<<<<<<<<<<
 * 		results["Binning"]["Relative Frequencies CDF"] = relativeFrequenciesCDF = funcBinRelativeFrequencies(absoluteFrequenciesCDF)
 * 
 */
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_absoluteFrequenciesHistogram;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_5 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_44funcBinRelativeFrequencies(__pyx_v_funcBinRelativeFrequencies, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Binning); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_kp_u_Relative_Frequencies_Histogram, __pyx_t_5) < 0)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_INCREF(__pyx_t_5);
  __pyx_v_relativeFrequenciesHistogram = __pyx_t_5;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":299
 * 			return result
 * 		results["Binning"]["Relative Frequencies Histogram"] = relativeFrequenciesHistogram = funcBinRelativeFrequencies(absoluteFrequenciesHistogram)
 * 		results["Binning"]["Relative Frequencies CDF"] = relativeFrequenciesCDF = funcBinRelativeFrequencies(absoluteFrequenciesCDF)             # <<<<<<<<<<<<<<
 * 
 * 		def funcMode():
 */
  __pyx_t_5 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_44funcBinRelativeFrequencies(__pyx_v_funcBinRelativeFrequencies, __pyx_v_absoluteFrequenciesCDF); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Binning); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_kp_u_Relative_Frequencies_CDF, __pyx_t_5) < 0)) __PYX_ERR(0, 299, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_INCREF(__pyx_t_5);
  __pyx_v_relativeFrequenciesCDF = __pyx_t_5;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":301
 * 		results["Binning"]["Relative Frequencies CDF"] = relativeFrequenciesCDF = funcBinRelativeFrequencies(absoluteFrequenciesCDF)
 * 
 * 		def funcMode():             # <<<<<<<<<<<<<<
 * 			index = 0
 * 			max = 0
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_47funcMode, 0, __pyx_n_s_Stat_run_locals_funcMode, ((PyObject*)__pyx_cur_scope), __pyx_n_s_networkit_profiling_stat, __pyx_d, ((PyObject *)__pyx_codeobj__48)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_funcMode = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":310
 * 			result = ((intervalsHistogram[index]+intervalsHistogram[index+1]) / 2, max)
 * 			return result
 * 		results["Binning"]["Mode"] = mode = funcMode()             # <<<<<<<<<<<<<<
 * 
 * 		def funcLowerOutliers():
 */
  __pyx_t_5 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_46funcMode(__pyx_v_funcMode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Binning); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_n_u_Mode, __pyx_t_5) < 0)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_INCREF(__pyx_t_5);
  __pyx_v_mode = __pyx_t_5;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":312
 * 		results["Binning"]["Mode"] = mode = funcMode()
 * 
 * 		def funcLowerOutliers():             # <<<<<<<<<<<<<<
 * 			lowerBound = Q1 - IQR * 3
 * 			upperBound = Q1 - IQR * 1.5
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_49funcLowerOutliers, 0, __pyx_n_s_Stat_run_locals_funcLowerOutlier, ((PyObject*)__pyx_cur_scope), __pyx_n_s_networkit_profiling_stat, __pyx_d, ((PyObject *)__pyx_codeobj__50)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_funcLowerOutliers = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":327
 * 					break
 * 			return (result_lower, result_upper)
 * 		results["Location"]["Outlier (Lower)"] = funcLowerOutliers()             # <<<<<<<<<<<<<<
 * 
 * 		def funcUpperOutliers():
 */
  __pyx_t_5 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_48funcLowerOutliers(__pyx_v_funcLowerOutliers); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Location); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_kp_u_Outlier_Lower, __pyx_t_5) < 0)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":329
 * 		results["Location"]["Outlier (Lower)"] = funcLowerOutliers()
 * 
 * 		def funcUpperOutliers():             # <<<<<<<<<<<<<<
 * 			lowerBound = Q3 + IQR * 1.5
 * 			upperBound = Q3 + IQR * 3
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_51funcUpperOutliers, 0, __pyx_n_s_Stat_run_locals_funcUpperOutlier, ((PyObject*)__pyx_cur_scope), __pyx_n_s_networkit_profiling_stat, __pyx_d, ((PyObject *)__pyx_codeobj__52)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_funcUpperOutliers = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":344
 * 					break
 * 			return (result_upper, result_lower)
 * 		results["Location"]["Outlier (Upper)"] = funcUpperOutliers()             # <<<<<<<<<<<<<<
 * 
 * 		if calculatePie:
 */
  __pyx_t_5 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_50funcUpperOutliers(__pyx_v_funcUpperOutliers); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Location); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_kp_u_Outlier_Upper, __pyx_t_5) < 0)) __PYX_ERR(0, 344, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":346
 * 		results["Location"]["Outlier (Upper)"] = funcUpperOutliers()
 * 
 * 		if calculatePie:             # <<<<<<<<<<<<<<
 * 			def funcPie():
 * 				n = len(sample)
 */
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_v_calculatePie); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 346, __pyx_L1_error)
  if (__pyx_t_9) {

    /* "networkit/profiling/stat.pyx":347
 * 
 * 		if calculatePie:
 * 			def funcPie():             # <<<<<<<<<<<<<<
 * 				n = len(sample)
 * 				sum = 0
 */
    __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_53funcPie, 0, __pyx_n_s_Stat_run_locals_funcPie, ((PyObject*)__pyx_cur_scope), __pyx_n_s_networkit_profiling_stat, __pyx_d, ((PyObject *)__pyx_codeobj__54)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_v_funcPie = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "networkit/profiling/stat.pyx":366
 * 						relativeFrequencies.append(value)
 * 				return (relativeFrequencies, cutSize)
 * 			results["Binning"]["Pie"] = funcPie()             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_5 = __pyx_pf_9networkit_9profiling_4stat_4Stat_3run_52funcPie(__pyx_v_funcPie); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Binning); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_n_u_Pie, __pyx_t_5) < 0)) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "networkit/profiling/stat.pyx":346
 * 		results["Location"]["Outlier (Upper)"] = funcUpperOutliers()
 * 
 * 		if calculatePie:             # <<<<<<<<<<<<<<
 * 			def funcPie():
 * 				n = len(sample)
 */
  }

  /* "networkit/profiling/stat.pyx":380
 * 		# k_Bins = len(absoluteFrequencies)
 * 
 * 		def funcErf(x):             # <<<<<<<<<<<<<<
 * 			sign = 1 if x >= 0 else -1
 * 			x = abs(x)
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_55funcErf, 0, __pyx_n_s_Stat_run_locals_funcErf, NULL, __pyx_n_s_networkit_profiling_stat, __pyx_d, ((PyObject *)__pyx_codeobj__56)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_cur_scope->__pyx_v_funcErf = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":395
 * 			return sign*y
 * 
 * 		def funcDistributionNormal(x):             # <<<<<<<<<<<<<<
 * 			result = 1/2 * (1 + funcErf((x-arithmeticMean)/(math.sqrt(2) * s_n)))
 * 			return result
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_57funcDistributionNormal, 0, __pyx_n_s_Stat_run_locals_funcDistribution, ((PyObject*)__pyx_cur_scope), __pyx_n_s_networkit_profiling_stat, __pyx_d, ((PyObject *)__pyx_codeobj__58)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_funcDistributionNormal = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":399
 * 			return result
 * 
 * 		def funcDistributionExponential(x):             # <<<<<<<<<<<<<<
 * 			result = 1 - math.exp((-1/arithmeticMean) * x)
 * 			return result
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_59funcDistributionExponential, 0, __pyx_n_s_Stat_run_locals_funcDistribution_2, ((PyObject*)__pyx_cur_scope), __pyx_n_s_networkit_profiling_stat, __pyx_d, ((PyObject *)__pyx_codeobj__60)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_funcDistributionExponential = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":403
 * 			return result
 * 
 * 		def funcDistributionExponentialInverse(x):             # <<<<<<<<<<<<<<
 * 			result = math.ln(1/(1-x))*arithmeticMean
 * 			return result
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_61funcDistributionExponentialInverse, 0, __pyx_n_s_Stat_run_locals_funcDistribution_3, ((PyObject*)__pyx_cur_scope), __pyx_n_s_networkit_profiling_stat, __pyx_d, ((PyObject *)__pyx_codeobj__62)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_funcDistributionExponentialInverse = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":407
 * 			return result
 * 
 * 		def funcIncompleteGamma(s, x):             # <<<<<<<<<<<<<<
 * 			if x < 0.0:
 * 				return 0.0
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_63funcIncompleteGamma, 0, __pyx_n_s_Stat_run_locals_funcIncompleteGa, NULL, __pyx_n_s_networkit_profiling_stat, __pyx_d, ((PyObject *)__pyx_codeobj__64)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_cur_scope->__pyx_v_funcIncompleteGamma = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":422
 * 			return sum * sc
 * 
 * 		def funcGamma(x):             # <<<<<<<<<<<<<<
 * 			result = (x / math.e) ** x
 * 			result *= math.sqrt(2 * math.pi / x)
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_65funcGamma, 0, __pyx_n_s_Stat_run_locals_funcGamma, NULL, __pyx_n_s_networkit_profiling_stat, __pyx_d, ((PyObject *)__pyx_codeobj__66)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_cur_scope->__pyx_v_funcGamma = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":428
 * 			return result
 * 
 * 		def funcPValue(criticalValue, degreesOfFreedom):             # <<<<<<<<<<<<<<
 * 			if criticalValue < 0.0 or degreesOfFreedom < 1:
 * 				return 0.0
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_67funcPValue, 0, __pyx_n_s_Stat_run_locals_funcPValue, ((PyObject*)__pyx_cur_scope), __pyx_n_s_networkit_profiling_stat, __pyx_d, ((PyObject *)__pyx_codeobj__68)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_funcPValue = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":439
 * 			return 1-result
 * 
 * 		def funcNumberOfBinsChiSquaredTest():             # <<<<<<<<<<<<<<
 * 			result = 1 + math.ln(n)/math.ln(2)
 * 			if result > 128:
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9profiling_4stat_4Stat_3run_69funcNumberOfBinsChiSquaredTest, 0, __pyx_n_s_Stat_run_locals_funcNumberOfBins_2, ((PyObject*)__pyx_cur_scope), __pyx_n_s_networkit_profiling_stat, __pyx_d, ((PyObject *)__pyx_codeobj__70)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_funcNumberOfBinsChiSquaredTest = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "networkit/profiling/stat.pyx":471
 * 		# results["Distribution"]["Chi-Square-Test (Exponential)"] = funcChiSquaredTest(funcDistributionExponential, 1)
 * 
 * 		return results             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_results);
  __pyx_r = __pyx_v_results;
  goto __pyx_L0;

  /* "networkit/profiling/stat.pyx":86
 * 		self.__params = params
 * 
 * 	def run(self):             # <<<<<<<<<<<<<<
 * 		""" computation """
 * 		(sample, sampleSorted, sampleRanked, calculatePie) = self.__params
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("networkit.profiling.stat.Stat.run", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_sampleRanked);
  __Pyx_XDECREF(__pyx_v_calculatePie);
  __Pyx_XDECREF(__pyx_v_results);
  __Pyx_XDECREF(__pyx_v_funcMin);
  __Pyx_XDECREF(__pyx_v_funcMax);
  __Pyx_XDECREF(__pyx_v_funcBesselsCorrection);
  __Pyx_XDECREF(__pyx_v_hoelderMean);
  __Pyx_XDECREF(__pyx_v_quadraticMean);
  __Pyx_XDECREF(__pyx_v_cubicMean);
  __Pyx_XDECREF(__pyx_v_harmonicMean);
  __Pyx_XDECREF(__pyx_v_funcArithmeticMeanRank);
  __Pyx_XDECREF(__pyx_v_arithmeticMean_Rank);
  __Pyx_XDECREF(__pyx_v_funcUncorrectedVariance);
  __Pyx_XDECREF(__pyx_v_variance_uncorrected);
  __Pyx_XDECREF(__pyx_v_variance_Rank_uncorrected);
  __Pyx_XDECREF(__pyx_v_funcVariance);
  __Pyx_XDECREF(__pyx_v_variance);
  __Pyx_XDECREF(__pyx_v_variance_Rank);
  __Pyx_XDECREF(__pyx_v_funcStandardDeviation);
  __Pyx_XDECREF(__pyx_v_s_n_Rank);
  __Pyx_XDECREF(__pyx_v_s_n_uncorrected);
  __Pyx_XDECREF(__pyx_v_s_n_Rank_uncorrected);
  __Pyx_XDECREF(__pyx_v_funcCoefficientOfVariation);
  __Pyx_XDECREF(__pyx_v_c_v);
  __Pyx_XDECREF(__pyx_v_c_v_Rank);
  __Pyx_XDECREF(__pyx_v_funcAlphaQuartile);
  __Pyx_XDECREF(__pyx_v_funcAlphaTrimmedMean);
  __Pyx_XDECREF(__pyx_v_IQM);
  __Pyx_XDECREF(__pyx_v_funcIQR);
  __Pyx_XDECREF(__pyx_v_funcSampleRange);
  __Pyx_XDECREF(__pyx_v_funcMidRange);
  __Pyx_XDECREF(__pyx_v_midRange);
  __Pyx_XDECREF(__pyx_v_funcSkewnessYP);
  __Pyx_XDECREF(__pyx_v_skewness_yp);
  __Pyx_XDECREF(__pyx_v_funcSkewnessM);
  __Pyx_XDECREF(__pyx_v_skewnewss_m);
  __Pyx_XDECREF(__pyx_v_funcKurtosis);
  __Pyx_XDECREF(__pyx_v_kurtosis);
  __Pyx_XDECREF(__pyx_v_funcNumberOfBins);
  __Pyx_XDECREF(__pyx_v_k_Bins_Histogram);
  __Pyx_XDECREF(__pyx_v_k_Bins_CDF);
  __Pyx_XDECREF(__pyx_v_funcIntervals);
  __Pyx_XDECREF(__pyx_v_intervalsCDF);
  __Pyx_XDECREF(__pyx_v_funcBinAbsoluteFrequencies);
  __Pyx_XDECREF(__pyx_v_absoluteFrequenciesCDF);
  __Pyx_XDECREF(__pyx_v_funcJoinEmptyBins);
  __Pyx_XDECREF(__pyx_v_funcBinRelativeFrequencies);
  __Pyx_XDECREF(__pyx_v_relativeFrequenciesHistogram);
  __Pyx_XDECREF(__pyx_v_relativeFrequenciesCDF);
  __Pyx_XDECREF(__pyx_v_funcMode);
  __Pyx_XDECREF(__pyx_v_mode);
  __Pyx_XDECREF(__pyx_v_funcLowerOutliers);
  __Pyx_XDECREF(__pyx_v_funcUpperOutliers);
  __Pyx_XDECREF(__pyx_v_funcPie);
  __Pyx_XDECREF(__pyx_v_funcDistributionNormal);
  __Pyx_XDECREF(__pyx_v_funcDistributionExponential);
  __Pyx_XDECREF(__pyx_v_funcDistributionExponentialInverse);
  __Pyx_XDECREF(__pyx_v_funcPValue);
  __Pyx_XDECREF(__pyx_v_funcNumberOfBinsChiSquaredTest);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":477
 * 	""" correlation computation object """
 * 
 * 	def __init__(self, name, params):             # <<<<<<<<<<<<<<
 * 		""" constructor: see PlotJob and .run() """
 * 		job.Job.__init__(
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9profiling_4stat_11Correlation_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_9profiling_4stat_11Correlation___init__[] = " constructor: see PlotJob and .run() ";
static PyMethodDef __pyx_mdef_9networkit_9profiling_4stat_11Correlation_1__init__ = {"__init__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_9profiling_4stat_11Correlation_1__init__, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_9profiling_4stat_11Correlation___init__};
static PyObject *__pyx_pw_9networkit_9profiling_4stat_11Correlation_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_params = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_name,&__pyx_n_s_params,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 1); __PYX_ERR(0, 477, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_params)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 2); __PYX_ERR(0, 477, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 477, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_name = values[1];
    __pyx_v_params = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 477, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.profiling.stat.Correlation.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9profiling_4stat_11Correlation___init__(__pyx_self, __pyx_v_self, __pyx_v_name, __pyx_v_params);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9profiling_4stat_11Correlation___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_params) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "networkit/profiling/stat.pyx":479
 * 	def __init__(self, name, params):
 * 		""" constructor: see PlotJob and .run() """
 * 		job.Job.__init__(             # <<<<<<<<<<<<<<
 * 			self,
 * 			"Correlation",
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_job); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Job); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "networkit/profiling/stat.pyx":482
 * 			self,
 * 			"Correlation",
 * 			name             # <<<<<<<<<<<<<<
 * 		)
 * 		self.__params = params
 */
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_self, __pyx_n_u_Correlation, __pyx_v_name};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 479, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_self, __pyx_n_u_Correlation, __pyx_v_name};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 479, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 479, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self);
    __Pyx_GIVEREF(__pyx_v_self);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_self);
    __Pyx_INCREF(__pyx_n_u_Correlation);
    __Pyx_GIVEREF(__pyx_n_u_Correlation);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_u_Correlation);
    __Pyx_INCREF(__pyx_v_name);
    __Pyx_GIVEREF(__pyx_v_name);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_v_name);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 479, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":484
 * 			name
 * 		)
 * 		self.__params = params             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_Correlation__params, __pyx_v_params) < 0) __PYX_ERR(0, 484, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":477
 * 	""" correlation computation object """
 * 
 * 	def __init__(self, name, params):             # <<<<<<<<<<<<<<
 * 		""" constructor: see PlotJob and .run() """
 * 		job.Job.__init__(
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("networkit.profiling.stat.Correlation.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":487
 * 
 * 
 * 	def run(self):             # <<<<<<<<<<<<<<
 * 		""" computation """
 * 		(nameB, sample_1, sampleRanked_1, stat_1, sample_2, sampleRanked_2, stat_2) = self.__params
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9profiling_4stat_11Correlation_3run(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_9networkit_9profiling_4stat_11Correlation_2run[] = " computation ";
static PyMethodDef __pyx_mdef_9networkit_9profiling_4stat_11Correlation_3run = {"run", (PyCFunction)__pyx_pw_9networkit_9profiling_4stat_11Correlation_3run, METH_O, __pyx_doc_9networkit_9profiling_4stat_11Correlation_2run};
static PyObject *__pyx_pw_9networkit_9profiling_4stat_11Correlation_3run(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("run (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_9profiling_4stat_11Correlation_2run(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":496
 * 		results["Value"] = {}
 * 
 * 		def funcCovariance(sample_1, arithmeticMean_1, sample_2, arithmeticMean_2):             # <<<<<<<<<<<<<<
 * 			result = 0
 * 			for i in range(n):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9profiling_4stat_11Correlation_3run_1funcCovariance(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9profiling_4stat_11Correlation_3run_1funcCovariance = {"funcCovariance", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_9profiling_4stat_11Correlation_3run_1funcCovariance, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9profiling_4stat_11Correlation_3run_1funcCovariance(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_sample_1 = 0;
  PyObject *__pyx_v_arithmeticMean_1 = 0;
  PyObject *__pyx_v_sample_2 = 0;
  PyObject *__pyx_v_arithmeticMean_2 = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("funcCovariance (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_sample_1,&__pyx_n_s_arithmeticMean_1,&__pyx_n_s_sample_2,&__pyx_n_s_arithmeticMean_2,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sample_1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_arithmeticMean_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("funcCovariance", 1, 4, 4, 1); __PYX_ERR(0, 496, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sample_2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("funcCovariance", 1, 4, 4, 2); __PYX_ERR(0, 496, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_arithmeticMean_2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("funcCovariance", 1, 4, 4, 3); __PYX_ERR(0, 496, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "funcCovariance") < 0)) __PYX_ERR(0, 496, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_sample_1 = values[0];
    __pyx_v_arithmeticMean_1 = values[1];
    __pyx_v_sample_2 = values[2];
    __pyx_v_arithmeticMean_2 = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("funcCovariance", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 496, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.profiling.stat.Correlation.run.funcCovariance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9profiling_4stat_11Correlation_3run_funcCovariance(__pyx_self, __pyx_v_sample_1, __pyx_v_arithmeticMean_1, __pyx_v_sample_2, __pyx_v_arithmeticMean_2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9profiling_4stat_11Correlation_3run_funcCovariance(PyObject *__pyx_self, PyObject *__pyx_v_sample_1, PyObject *__pyx_v_arithmeticMean_1, PyObject *__pyx_v_sample_2, PyObject *__pyx_v_arithmeticMean_2) {
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct_1_run *__pyx_cur_scope;
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct_1_run *__pyx_outer_scope;
  PyObject *__pyx_v_result = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("funcCovariance", 0);
  __pyx_outer_scope = (struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct_1_run *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "networkit/profiling/stat.pyx":497
 * 
 * 		def funcCovariance(sample_1, arithmeticMean_1, sample_2, arithmeticMean_2):
 * 			result = 0             # <<<<<<<<<<<<<<
 * 			for i in range(n):
 * 				result += (sample_1[i]- arithmeticMean_1) * (sample_2[i] - arithmeticMean_2)
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_result = __pyx_int_0;

  /* "networkit/profiling/stat.pyx":498
 * 		def funcCovariance(sample_1, arithmeticMean_1, sample_2, arithmeticMean_2):
 * 			result = 0
 * 			for i in range(n):             # <<<<<<<<<<<<<<
 * 				result += (sample_1[i]- arithmeticMean_1) * (sample_2[i] - arithmeticMean_2)
 * 			result /= n
 */
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_n;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "networkit/profiling/stat.pyx":499
 * 			result = 0
 * 			for i in range(n):
 * 				result += (sample_1[i]- arithmeticMean_1) * (sample_2[i] - arithmeticMean_2)             # <<<<<<<<<<<<<<
 * 			result /= n
 * 			return result
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_sample_1, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyNumber_Subtract(__pyx_t_4, __pyx_v_arithmeticMean_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_sample_2, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyNumber_Subtract(__pyx_t_4, __pyx_v_arithmeticMean_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Multiply(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_InPlaceAdd(__pyx_v_result, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_6);
    __pyx_t_6 = 0;
  }

  /* "networkit/profiling/stat.pyx":500
 * 			for i in range(n):
 * 				result += (sample_1[i]- arithmeticMean_1) * (sample_2[i] - arithmeticMean_2)
 * 			result /= n             # <<<<<<<<<<<<<<
 * 			return result
 * 		results["Value"]["Covariance"] = covariance = funcCovariance(
 */
  __pyx_t_6 = PyInt_FromSsize_t(__pyx_cur_scope->__pyx_v_n); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_PyNumber_InPlaceDivide(__pyx_v_result, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "networkit/profiling/stat.pyx":501
 * 				result += (sample_1[i]- arithmeticMean_1) * (sample_2[i] - arithmeticMean_2)
 * 			result /= n
 * 			return result             # <<<<<<<<<<<<<<
 * 		results["Value"]["Covariance"] = covariance = funcCovariance(
 * 			sample_1,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "networkit/profiling/stat.pyx":496
 * 		results["Value"] = {}
 * 
 * 		def funcCovariance(sample_1, arithmeticMean_1, sample_2, arithmeticMean_2):             # <<<<<<<<<<<<<<
 * 			result = 0
 * 			for i in range(n):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("networkit.profiling.stat.Correlation.run.funcCovariance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":515
 * 		)
 * 
 * 		def funcPearsonsCorrelationCoefficient(covariance, uncorrectedStandardDeviation_1, uncorrectedStandardDeviation_2):             # <<<<<<<<<<<<<<
 * 			result = float("nan")
 * 			if uncorrectedStandardDeviation_1 * uncorrectedStandardDeviation_2 != 0:
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9profiling_4stat_11Correlation_3run_3funcPearsonsCorrelationCoefficient(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9profiling_4stat_11Correlation_3run_3funcPearsonsCorrelationCoefficient = {"funcPearsonsCorrelationCoefficient", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_9profiling_4stat_11Correlation_3run_3funcPearsonsCorrelationCoefficient, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9profiling_4stat_11Correlation_3run_3funcPearsonsCorrelationCoefficient(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_covariance = 0;
  PyObject *__pyx_v_uncorrectedStandardDeviation_1 = 0;
  PyObject *__pyx_v_uncorrectedStandardDeviation_2 = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("funcPearsonsCorrelationCoefficient (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_covariance,&__pyx_n_s_uncorrectedStandardDeviation_1,&__pyx_n_s_uncorrectedStandardDeviation_2,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_covariance)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uncorrectedStandardDeviation_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("funcPearsonsCorrelationCoefficient", 1, 3, 3, 1); __PYX_ERR(0, 515, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uncorrectedStandardDeviation_2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("funcPearsonsCorrelationCoefficient", 1, 3, 3, 2); __PYX_ERR(0, 515, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "funcPearsonsCorrelationCoefficient") < 0)) __PYX_ERR(0, 515, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_covariance = values[0];
    __pyx_v_uncorrectedStandardDeviation_1 = values[1];
    __pyx_v_uncorrectedStandardDeviation_2 = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("funcPearsonsCorrelationCoefficient", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 515, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.profiling.stat.Correlation.run.funcPearsonsCorrelationCoefficient", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9profiling_4stat_11Correlation_3run_2funcPearsonsCorrelationCoefficient(__pyx_self, __pyx_v_covariance, __pyx_v_uncorrectedStandardDeviation_1, __pyx_v_uncorrectedStandardDeviation_2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9profiling_4stat_11Correlation_3run_2funcPearsonsCorrelationCoefficient(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_covariance, PyObject *__pyx_v_uncorrectedStandardDeviation_1, PyObject *__pyx_v_uncorrectedStandardDeviation_2) {
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("funcPearsonsCorrelationCoefficient", 0);

  /* "networkit/profiling/stat.pyx":516
 * 
 * 		def funcPearsonsCorrelationCoefficient(covariance, uncorrectedStandardDeviation_1, uncorrectedStandardDeviation_2):
 * 			result = float("nan")             # <<<<<<<<<<<<<<
 * 			if uncorrectedStandardDeviation_1 * uncorrectedStandardDeviation_2 != 0:
 * 				result = covariance / (uncorrectedStandardDeviation_1 * uncorrectedStandardDeviation_2)
 */
  __pyx_t_1 = __Pyx_PyNumber_Float(__pyx_n_u_nan); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":517
 * 		def funcPearsonsCorrelationCoefficient(covariance, uncorrectedStandardDeviation_1, uncorrectedStandardDeviation_2):
 * 			result = float("nan")
 * 			if uncorrectedStandardDeviation_1 * uncorrectedStandardDeviation_2 != 0:             # <<<<<<<<<<<<<<
 * 				result = covariance / (uncorrectedStandardDeviation_1 * uncorrectedStandardDeviation_2)
 * 			return result
 */
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_uncorrectedStandardDeviation_1, __pyx_v_uncorrectedStandardDeviation_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_NeObjC(__pyx_t_1, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "networkit/profiling/stat.pyx":518
 * 			result = float("nan")
 * 			if uncorrectedStandardDeviation_1 * uncorrectedStandardDeviation_2 != 0:
 * 				result = covariance / (uncorrectedStandardDeviation_1 * uncorrectedStandardDeviation_2)             # <<<<<<<<<<<<<<
 * 			return result
 * 		results["Value"]["Pearson's Correlation Coefficient"] = funcPearsonsCorrelationCoefficient(
 */
    __pyx_t_2 = PyNumber_Multiply(__pyx_v_uncorrectedStandardDeviation_1, __pyx_v_uncorrectedStandardDeviation_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 518, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_v_covariance, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 518, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "networkit/profiling/stat.pyx":517
 * 		def funcPearsonsCorrelationCoefficient(covariance, uncorrectedStandardDeviation_1, uncorrectedStandardDeviation_2):
 * 			result = float("nan")
 * 			if uncorrectedStandardDeviation_1 * uncorrectedStandardDeviation_2 != 0:             # <<<<<<<<<<<<<<
 * 				result = covariance / (uncorrectedStandardDeviation_1 * uncorrectedStandardDeviation_2)
 * 			return result
 */
  }

  /* "networkit/profiling/stat.pyx":519
 * 			if uncorrectedStandardDeviation_1 * uncorrectedStandardDeviation_2 != 0:
 * 				result = covariance / (uncorrectedStandardDeviation_1 * uncorrectedStandardDeviation_2)
 * 			return result             # <<<<<<<<<<<<<<
 * 		results["Value"]["Pearson's Correlation Coefficient"] = funcPearsonsCorrelationCoefficient(
 * 			covariance,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "networkit/profiling/stat.pyx":515
 * 		)
 * 
 * 		def funcPearsonsCorrelationCoefficient(covariance, uncorrectedStandardDeviation_1, uncorrectedStandardDeviation_2):             # <<<<<<<<<<<<<<
 * 			result = float("nan")
 * 			if uncorrectedStandardDeviation_1 * uncorrectedStandardDeviation_2 != 0:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.profiling.stat.Correlation.run.funcPearsonsCorrelationCoefficient", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":531
 * 		)
 * 
 * 		def funcFechnersCorrelationCoefficent(arithmeticMean_1, arithmeticMean_2):             # <<<<<<<<<<<<<<
 * 			result = 0
 * 			for i in range(n):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9profiling_4stat_11Correlation_3run_5funcFechnersCorrelationCoefficent(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_9profiling_4stat_11Correlation_3run_5funcFechnersCorrelationCoefficent = {"funcFechnersCorrelationCoefficent", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_9profiling_4stat_11Correlation_3run_5funcFechnersCorrelationCoefficent, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_9profiling_4stat_11Correlation_3run_5funcFechnersCorrelationCoefficent(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arithmeticMean_1 = 0;
  PyObject *__pyx_v_arithmeticMean_2 = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("funcFechnersCorrelationCoefficent (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arithmeticMean_1,&__pyx_n_s_arithmeticMean_2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_arithmeticMean_1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_arithmeticMean_2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("funcFechnersCorrelationCoefficent", 1, 2, 2, 1); __PYX_ERR(0, 531, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "funcFechnersCorrelationCoefficent") < 0)) __PYX_ERR(0, 531, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_arithmeticMean_1 = values[0];
    __pyx_v_arithmeticMean_2 = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("funcFechnersCorrelationCoefficent", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 531, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.profiling.stat.Correlation.run.funcFechnersCorrelationCoefficent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9profiling_4stat_11Correlation_3run_4funcFechnersCorrelationCoefficent(__pyx_self, __pyx_v_arithmeticMean_1, __pyx_v_arithmeticMean_2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9profiling_4stat_11Correlation_3run_4funcFechnersCorrelationCoefficent(PyObject *__pyx_self, PyObject *__pyx_v_arithmeticMean_1, PyObject *__pyx_v_arithmeticMean_2) {
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct_1_run *__pyx_cur_scope;
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct_1_run *__pyx_outer_scope;
  PyObject *__pyx_v_result = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("funcFechnersCorrelationCoefficent", 0);
  __pyx_outer_scope = (struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct_1_run *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "networkit/profiling/stat.pyx":532
 * 
 * 		def funcFechnersCorrelationCoefficent(arithmeticMean_1, arithmeticMean_2):
 * 			result = 0             # <<<<<<<<<<<<<<
 * 			for i in range(n):
 * 				result += math.copysign(1.0, (sample_1[i] - arithmeticMean_1) * (sample_2[i] - arithmeticMean_2))
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_result = __pyx_int_0;

  /* "networkit/profiling/stat.pyx":533
 * 		def funcFechnersCorrelationCoefficent(arithmeticMean_1, arithmeticMean_2):
 * 			result = 0
 * 			for i in range(n):             # <<<<<<<<<<<<<<
 * 				result += math.copysign(1.0, (sample_1[i] - arithmeticMean_1) * (sample_2[i] - arithmeticMean_2))
 * 			result /= n
 */
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_n;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "networkit/profiling/stat.pyx":534
 * 			result = 0
 * 			for i in range(n):
 * 				result += math.copysign(1.0, (sample_1[i] - arithmeticMean_1) * (sample_2[i] - arithmeticMean_2))             # <<<<<<<<<<<<<<
 * 			result /= n
 * 			return result
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_math); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_copysign); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_v_sample_1)) { __Pyx_RaiseClosureNameError("sample_1"); __PYX_ERR(0, 534, __pyx_L1_error) }
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_sample_1, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = PyNumber_Subtract(__pyx_t_5, __pyx_v_arithmeticMean_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_v_sample_2)) { __Pyx_RaiseClosureNameError("sample_2"); __PYX_ERR(0, 534, __pyx_L1_error) }
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_sample_2, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = PyNumber_Subtract(__pyx_t_5, __pyx_v_arithmeticMean_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Multiply(__pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_9 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_float_1_0, __pyx_t_5};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 534, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_float_1_0, __pyx_t_5};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 534, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 534, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_8) {
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8); __pyx_t_8 = NULL;
      }
      __Pyx_INCREF(__pyx_float_1_0);
      __Pyx_GIVEREF(__pyx_float_1_0);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_9, __pyx_float_1_0);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_9, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 534, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_InPlaceAdd(__pyx_v_result, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_6);
    __pyx_t_6 = 0;
  }

  /* "networkit/profiling/stat.pyx":535
 * 			for i in range(n):
 * 				result += math.copysign(1.0, (sample_1[i] - arithmeticMean_1) * (sample_2[i] - arithmeticMean_2))
 * 			result /= n             # <<<<<<<<<<<<<<
 * 			return result
 * 		results["Value"]["Fechner's Correlation Coefficient"] = funcFechnersCorrelationCoefficent(
 */
  __pyx_t_6 = PyInt_FromSsize_t(__pyx_cur_scope->__pyx_v_n); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_PyNumber_InPlaceDivide(__pyx_v_result, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "networkit/profiling/stat.pyx":536
 * 				result += math.copysign(1.0, (sample_1[i] - arithmeticMean_1) * (sample_2[i] - arithmeticMean_2))
 * 			result /= n
 * 			return result             # <<<<<<<<<<<<<<
 * 		results["Value"]["Fechner's Correlation Coefficient"] = funcFechnersCorrelationCoefficent(
 * 			stat_1["Location"]["Arithmetic Mean"],
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "networkit/profiling/stat.pyx":531
 * 		)
 * 
 * 		def funcFechnersCorrelationCoefficent(arithmeticMean_1, arithmeticMean_2):             # <<<<<<<<<<<<<<
 * 			result = 0
 * 			for i in range(n):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("networkit.profiling.stat.Correlation.run.funcFechnersCorrelationCoefficent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":542
 * 		)
 * 
 * 		def funcHexBinning(sample_1, sample_2):             # <<<<<<<<<<<<<<
 * 			""" binning for scatter plots """
 * 			result = {}
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_9profiling_4stat_11Correlation_3run_7funcHexBinning(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_9profiling_4stat_11Correlation_3run_6funcHexBinning[] = " binning for scatter plots ";
static PyMethodDef __pyx_mdef_9networkit_9profiling_4stat_11Correlation_3run_7funcHexBinning = {"funcHexBinning", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_9profiling_4stat_11Correlation_3run_7funcHexBinning, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_9profiling_4stat_11Correlation_3run_6funcHexBinning};
static PyObject *__pyx_pw_9networkit_9profiling_4stat_11Correlation_3run_7funcHexBinning(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_sample_1 = 0;
  PyObject *__pyx_v_sample_2 = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("funcHexBinning (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_sample_1,&__pyx_n_s_sample_2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sample_1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sample_2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("funcHexBinning", 1, 2, 2, 1); __PYX_ERR(0, 542, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "funcHexBinning") < 0)) __PYX_ERR(0, 542, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_sample_1 = values[0];
    __pyx_v_sample_2 = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("funcHexBinning", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 542, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.profiling.stat.Correlation.run.funcHexBinning", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_9profiling_4stat_11Correlation_3run_6funcHexBinning(__pyx_self, __pyx_v_sample_1, __pyx_v_sample_2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_9profiling_4stat_11Correlation_3run_6funcHexBinning(PyObject *__pyx_self, PyObject *__pyx_v_sample_1, PyObject *__pyx_v_sample_2) {
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct_1_run *__pyx_cur_scope;
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct_1_run *__pyx_outer_scope;
  PyObject *__pyx_v_result = NULL;
  long __pyx_v_n;
  PyObject *__pyx_v_fig = NULL;
  PyObject *__pyx_v_extent = NULL;
  PyObject *__pyx_v_image = NULL;
  PyObject *__pyx_v_frequencies = NULL;
  PyObject *__pyx_v_max = NULL;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("funcHexBinning", 0);
  __pyx_outer_scope = (struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct_1_run *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "networkit/profiling/stat.pyx":544
 * 		def funcHexBinning(sample_1, sample_2):
 * 			""" binning for scatter plots """
 * 			result = {}             # <<<<<<<<<<<<<<
 * 			n = 32
 * 			if not have_plt:
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":545
 * 			""" binning for scatter plots """
 * 			result = {}
 * 			n = 32             # <<<<<<<<<<<<<<
 * 			if not have_plt:
 * 				raise MissingDependencyError("matplotlib")
 */
  __pyx_v_n = 32;

  /* "networkit/profiling/stat.pyx":546
 * 			result = {}
 * 			n = 32
 * 			if not have_plt:             # <<<<<<<<<<<<<<
 * 				raise MissingDependencyError("matplotlib")
 * 			fig = plt.figure()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_have_plt); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 546, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = ((!__pyx_t_2) != 0);
  if (unlikely(__pyx_t_3)) {

    /* "networkit/profiling/stat.pyx":547
 * 			n = 32
 * 			if not have_plt:
 * 				raise MissingDependencyError("matplotlib")             # <<<<<<<<<<<<<<
 * 			fig = plt.figure()
 * 			extent = [
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_MissingDependencyError); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 547, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_n_u_matplotlib) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_n_u_matplotlib);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 547, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 547, __pyx_L1_error)

    /* "networkit/profiling/stat.pyx":546
 * 			result = {}
 * 			n = 32
 * 			if not have_plt:             # <<<<<<<<<<<<<<
 * 				raise MissingDependencyError("matplotlib")
 * 			fig = plt.figure()
 */
  }

  /* "networkit/profiling/stat.pyx":548
 * 			if not have_plt:
 * 				raise MissingDependencyError("matplotlib")
 * 			fig = plt.figure()             # <<<<<<<<<<<<<<
 * 			extent = [
 * 				stat_1["Location"]["Min"],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_plt); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_figure); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_fig = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":550
 * 			fig = plt.figure()
 * 			extent = [
 * 				stat_1["Location"]["Min"],             # <<<<<<<<<<<<<<
 * 				stat_1["Location"]["Max"],
 * 				stat_2["Location"]["Min"],
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_stat_1)) { __Pyx_RaiseClosureNameError("stat_1"); __PYX_ERR(0, 550, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_stat_1, __pyx_n_u_Location); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_u_Min); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":551
 * 			extent = [
 * 				stat_1["Location"]["Min"],
 * 				stat_1["Location"]["Max"],             # <<<<<<<<<<<<<<
 * 				stat_2["Location"]["Min"],
 * 				stat_2["Location"]["Max"]
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_stat_1)) { __Pyx_RaiseClosureNameError("stat_1"); __PYX_ERR(0, 551, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_stat_1, __pyx_n_u_Location); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_u_Max); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":552
 * 				stat_1["Location"]["Min"],
 * 				stat_1["Location"]["Max"],
 * 				stat_2["Location"]["Min"],             # <<<<<<<<<<<<<<
 * 				stat_2["Location"]["Max"]
 * 			]
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_stat_2)) { __Pyx_RaiseClosureNameError("stat_2"); __PYX_ERR(0, 552, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_stat_2, __pyx_n_u_Location); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_u_Min); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":553
 * 				stat_1["Location"]["Max"],
 * 				stat_2["Location"]["Min"],
 * 				stat_2["Location"]["Max"]             # <<<<<<<<<<<<<<
 * 			]
 * 			image = plt.hexbin(
 */
  if (unlikely(!__pyx_cur_scope->__pyx_v_stat_2)) { __Pyx_RaiseClosureNameError("stat_2"); __PYX_ERR(0, 553, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_stat_2, __pyx_n_u_Location); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_u_Max); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":549
 * 				raise MissingDependencyError("matplotlib")
 * 			fig = plt.figure()
 * 			extent = [             # <<<<<<<<<<<<<<
 * 				stat_1["Location"]["Min"],
 * 				stat_1["Location"]["Max"],
 */
  __pyx_t_1 = PyList_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_t_7);
  __pyx_t_5 = 0;
  __pyx_t_4 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_v_extent = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":555
 * 				stat_2["Location"]["Max"]
 * 			]
 * 			image = plt.hexbin(             # <<<<<<<<<<<<<<
 * 				sample_1,
 * 				sample_2,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_plt); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_hexbin); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":557
 * 			image = plt.hexbin(
 * 				sample_1,
 * 				sample_2,             # <<<<<<<<<<<<<<
 * 				gridsize = n,
 * 				extent = extent
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_sample_1);
  __Pyx_GIVEREF(__pyx_v_sample_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_sample_1);
  __Pyx_INCREF(__pyx_v_sample_2);
  __Pyx_GIVEREF(__pyx_v_sample_2);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_sample_2);

  /* "networkit/profiling/stat.pyx":558
 * 				sample_1,
 * 				sample_2,
 * 				gridsize = n,             # <<<<<<<<<<<<<<
 * 				extent = extent
 * 			)
 */
  __pyx_t_6 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_n); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_gridsize, __pyx_t_4) < 0) __PYX_ERR(0, 558, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/profiling/stat.pyx":559
 * 				sample_2,
 * 				gridsize = n,
 * 				extent = extent             # <<<<<<<<<<<<<<
 * 			)
 * 
 */
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_extent, __pyx_v_extent) < 0) __PYX_ERR(0, 558, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":555
 * 				stat_2["Location"]["Max"]
 * 			]
 * 			image = plt.hexbin(             # <<<<<<<<<<<<<<
 * 				sample_1,
 * 				sample_2,
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_image = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "networkit/profiling/stat.pyx":562
 * 			)
 * 
 * 			result["Grid Size"] = n             # <<<<<<<<<<<<<<
 * 			result["Absolute Frequencies"] = frequencies = image.get_array()
 * 			max = 0
 */
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_n); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(PyDict_SetItem(__pyx_v_result, __pyx_kp_u_Grid_Size, __pyx_t_4) < 0)) __PYX_ERR(0, 562, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/profiling/stat.pyx":563
 * 
 * 			result["Grid Size"] = n
 * 			result["Absolute Frequencies"] = frequencies = image.get_array()             # <<<<<<<<<<<<<<
 * 			max = 0
 * 			for value in frequencies:
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_image, __pyx_n_s_get_array); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_4 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(PyDict_SetItem(__pyx_v_result, __pyx_kp_u_Absolute_Frequencies, __pyx_t_4) < 0)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_INCREF(__pyx_t_4);
  __pyx_v_frequencies = __pyx_t_4;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/profiling/stat.pyx":564
 * 			result["Grid Size"] = n
 * 			result["Absolute Frequencies"] = frequencies = image.get_array()
 * 			max = 0             # <<<<<<<<<<<<<<
 * 			for value in frequencies:
 * 				if max < value:
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_max = __pyx_int_0;

  /* "networkit/profiling/stat.pyx":565
 * 			result["Absolute Frequencies"] = frequencies = image.get_array()
 * 			max = 0
 * 			for value in frequencies:             # <<<<<<<<<<<<<<
 * 				if max < value:
 * 					max = value
 */
  if (likely(PyList_CheckExact(__pyx_v_frequencies)) || PyTuple_CheckExact(__pyx_v_frequencies)) {
    __pyx_t_4 = __pyx_v_frequencies; __Pyx_INCREF(__pyx_t_4); __pyx_t_8 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_8 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_frequencies); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 565, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_9 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 565, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_8); __Pyx_INCREF(__pyx_t_6); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 565, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_4, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 565, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      } else {
        if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_8); __Pyx_INCREF(__pyx_t_6); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 565, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_4, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 565, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      }
    } else {
      __pyx_t_6 = __pyx_t_9(__pyx_t_4);
      if (unlikely(!__pyx_t_6)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 565, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_6);
    }
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "networkit/profiling/stat.pyx":566
 * 			max = 0
 * 			for value in frequencies:
 * 				if max < value:             # <<<<<<<<<<<<<<
 * 					max = value
 * 			result["Max Frequency"] = max
 */
    __pyx_t_6 = PyObject_RichCompare(__pyx_v_max, __pyx_v_value, Py_LT); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 566, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 566, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_3) {

      /* "networkit/profiling/stat.pyx":567
 * 			for value in frequencies:
 * 				if max < value:
 * 					max = value             # <<<<<<<<<<<<<<
 * 			result["Max Frequency"] = max
 * 			result["Offsets"] = image.get_offsets()
 */
      __Pyx_INCREF(__pyx_v_value);
      __Pyx_DECREF_SET(__pyx_v_max, __pyx_v_value);

      /* "networkit/profiling/stat.pyx":566
 * 			max = 0
 * 			for value in frequencies:
 * 				if max < value:             # <<<<<<<<<<<<<<
 * 					max = value
 * 			result["Max Frequency"] = max
 */
    }

    /* "networkit/profiling/stat.pyx":565
 * 			result["Absolute Frequencies"] = frequencies = image.get_array()
 * 			max = 0
 * 			for value in frequencies:             # <<<<<<<<<<<<<<
 * 				if max < value:
 * 					max = value
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/profiling/stat.pyx":568
 * 				if max < value:
 * 					max = value
 * 			result["Max Frequency"] = max             # <<<<<<<<<<<<<<
 * 			result["Offsets"] = image.get_offsets()
 * 			result["Paths"] = image.get_paths()[0]
 */
  if (unlikely(PyDict_SetItem(__pyx_v_result, __pyx_kp_u_Max_Frequency, __pyx_v_max) < 0)) __PYX_ERR(0, 568, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":569
 * 					max = value
 * 			result["Max Frequency"] = max
 * 			result["Offsets"] = image.get_offsets()             # <<<<<<<<<<<<<<
 * 			result["Paths"] = image.get_paths()[0]
 * 			plt.close(fig)
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_image, __pyx_n_s_get_offsets); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_4 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(PyDict_SetItem(__pyx_v_result, __pyx_n_u_Offsets, __pyx_t_4) < 0)) __PYX_ERR(0, 569, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/profiling/stat.pyx":570
 * 			result["Max Frequency"] = max
 * 			result["Offsets"] = image.get_offsets()
 * 			result["Paths"] = image.get_paths()[0]             # <<<<<<<<<<<<<<
 * 			plt.close(fig)
 * 			return result
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_image, __pyx_n_s_get_paths); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_4 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_4, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(PyDict_SetItem(__pyx_v_result, __pyx_n_u_Paths, __pyx_t_6) < 0)) __PYX_ERR(0, 570, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/profiling/stat.pyx":571
 * 			result["Offsets"] = image.get_offsets()
 * 			result["Paths"] = image.get_paths()[0]
 * 			plt.close(fig)             # <<<<<<<<<<<<<<
 * 			return result
 * 		results["Binning"] = funcHexBinning(
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_plt); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_close); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_6 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_4, __pyx_v_fig) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_fig);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/profiling/stat.pyx":572
 * 			result["Paths"] = image.get_paths()[0]
 * 			plt.close(fig)
 * 			return result             # <<<<<<<<<<<<<<
 * 		results["Binning"] = funcHexBinning(
 * 			sample_1,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "networkit/profiling/stat.pyx":542
 * 		)
 * 
 * 		def funcHexBinning(sample_1, sample_2):             # <<<<<<<<<<<<<<
 * 			""" binning for scatter plots """
 * 			result = {}
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("networkit.profiling.stat.Correlation.run.funcHexBinning", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_fig);
  __Pyx_XDECREF(__pyx_v_extent);
  __Pyx_XDECREF(__pyx_v_image);
  __Pyx_XDECREF(__pyx_v_frequencies);
  __Pyx_XDECREF(__pyx_v_max);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/profiling/stat.pyx":487
 * 
 * 
 * 	def run(self):             # <<<<<<<<<<<<<<
 * 		""" computation """
 * 		(nameB, sample_1, sampleRanked_1, stat_1, sample_2, sampleRanked_2, stat_2) = self.__params
 */

static PyObject *__pyx_pf_9networkit_9profiling_4stat_11Correlation_2run(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct_1_run *__pyx_cur_scope;
  PyObject *__pyx_v_nameB = NULL;
  PyObject *__pyx_v_sampleRanked_1 = NULL;
  PyObject *__pyx_v_sampleRanked_2 = NULL;
  PyObject *__pyx_v_results = NULL;
  PyObject *__pyx_v_funcCovariance = 0;
  PyObject *__pyx_v_covariance = NULL;
  PyObject *__pyx_v_covarianceRanked = NULL;
  PyObject *__pyx_v_funcPearsonsCorrelationCoefficient = 0;
  PyObject *__pyx_v_funcFechnersCorrelationCoefficent = 0;
  PyObject *__pyx_v_funcHexBinning = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  Py_ssize_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("run", 0);
  __pyx_cur_scope = (struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct_1_run *)__pyx_tp_new_9networkit_9profiling_4stat___pyx_scope_struct_1_run(__pyx_ptype_9networkit_9profiling_4stat___pyx_scope_struct_1_run, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct_1_run *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 487, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }

  /* "networkit/profiling/stat.pyx":489
 * 	def run(self):
 * 		""" computation """
 * 		(nameB, sample_1, sampleRanked_1, stat_1, sample_2, sampleRanked_2, stat_2) = self.__params             # <<<<<<<<<<<<<<
 * 		n = len(sample_1)
 * 		assert (n == len(sample_2)), "sample sizes are not equal"
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Correlation__params); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 7)) {
      if (size > 7) __Pyx_RaiseTooManyValuesError(7);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 489, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 3); 
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 4); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 5); 
      __pyx_t_8 = PyTuple_GET_ITEM(sequence, 6); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 3); 
      __pyx_t_6 = PyList_GET_ITEM(sequence, 4); 
      __pyx_t_7 = PyList_GET_ITEM(sequence, 5); 
      __pyx_t_8 = PyList_GET_ITEM(sequence, 6); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_t_8);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[7] = {&__pyx_t_2,&__pyx_t_3,&__pyx_t_4,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8};
      for (i=0; i < 7; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 489, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[7] = {&__pyx_t_2,&__pyx_t_3,&__pyx_t_4,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8};
    __pyx_t_9 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 489, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_10 = Py_TYPE(__pyx_t_9)->tp_iternext;
    for (index=0; index < 7; index++) {
      PyObject* item = __pyx_t_10(__pyx_t_9); if (unlikely(!item)) goto __pyx_L3_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 7) < 0) __PYX_ERR(0, 489, __pyx_L1_error)
    __pyx_t_10 = NULL;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_10 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 489, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_nameB = __pyx_t_2;
  __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_cur_scope->__pyx_v_sample_1 = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_sampleRanked_1 = __pyx_t_4;
  __pyx_t_4 = 0;
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_cur_scope->__pyx_v_stat_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  __Pyx_GIVEREF(__pyx_t_6);
  __pyx_cur_scope->__pyx_v_sample_2 = __pyx_t_6;
  __pyx_t_6 = 0;
  __pyx_v_sampleRanked_2 = __pyx_t_7;
  __pyx_t_7 = 0;
  __Pyx_GIVEREF(__pyx_t_8);
  __pyx_cur_scope->__pyx_v_stat_2 = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "networkit/profiling/stat.pyx":490
 * 		""" computation """
 * 		(nameB, sample_1, sampleRanked_1, stat_1, sample_2, sampleRanked_2, stat_2) = self.__params
 * 		n = len(sample_1)             # <<<<<<<<<<<<<<
 * 		assert (n == len(sample_2)), "sample sizes are not equal"
 * 
 */
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_sample_1;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_11 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_11 == ((Py_ssize_t)-1))) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_cur_scope->__pyx_v_n = __pyx_t_11;

  /* "networkit/profiling/stat.pyx":491
 * 		(nameB, sample_1, sampleRanked_1, stat_1, sample_2, sampleRanked_2, stat_2) = self.__params
 * 		n = len(sample_1)
 * 		assert (n == len(sample_2)), "sample sizes are not equal"             # <<<<<<<<<<<<<<
 * 
 * 		results = {}
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_v_sample_2;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_11 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_11 == ((Py_ssize_t)-1))) __PYX_ERR(0, 491, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!((__pyx_cur_scope->__pyx_v_n == __pyx_t_11) != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_sample_sizes_are_not_equal);
      __PYX_ERR(0, 491, __pyx_L1_error)
    }
  }
  #endif

  /* "networkit/profiling/stat.pyx":493
 * 		assert (n == len(sample_2)), "sample sizes are not equal"
 * 
 * 		results = {}             # <<<<<<<<<<<<<<
 * 		results["Value"] = {}
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_results = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":494
 * 
 * 		results = {}
 * 		results["Value"] = {}             # <<<<<<<<<<<<<<
 * 
 * 		def funcCovariance(sample_1, arithmeticMean_1, sample_2, arithmeticMean_2):
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_results, __pyx_n_u_Value, __pyx_t_1) < 0)) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":496
 * 		results["Value"] = {}
 * 
 * 		def funcCovariance(sample_1, arithmeticMean_1, sample_2, arithmeticMean_2):             # <<<<<<<<<<<<<<
 * 			result = 0
 * 			for i in range(n):
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9profiling_4stat_11Correlation_3run_1funcCovariance, 0, __pyx_n_s_Correlation_run_locals_funcCovar, ((PyObject*)__pyx_cur_scope), __pyx_n_s_networkit_profiling_stat, __pyx_d, ((PyObject *)__pyx_codeobj__72)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_funcCovariance = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/profiling/stat.pyx":503
 * 			return result
 * 		results["Value"]["Covariance"] = covariance = funcCovariance(
 * 			sample_1,             # <<<<<<<<<<<<<<
 * 			stat_1["Location"]["Arithmetic Mean"],
 * 			sample_2,
 */
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_sample_1;
  __Pyx_INCREF(__pyx_t_1);

  /* "networkit/profiling/stat.pyx":504
 * 		results["Value"]["Covariance"] = covariance = funcCovariance(
 * 			sample_1,
 * 			stat_1["Location"]["Arithmetic Mean"],             # <<<<<<<<<<<<<<
 * 			sample_2,
 * 			stat_2["Location"]["Arithmetic Mean"]
 */
  __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_stat_1, __pyx_n_u_Location); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_7 = __Pyx_PyObject_Dict_GetItem(__pyx_t_8, __pyx_kp_u_Arithmetic_Mean); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "networkit/profiling/stat.pyx":505
 * 			sample_1,
 * 			stat_1["Location"]["Arithmetic Mean"],
 * 			sample_2,             # <<<<<<<<<<<<<<
 * 			stat_2["Location"]["Arithmetic Mean"]
 * 		)
 */
  __pyx_t_8 = __pyx_cur_scope->__pyx_v_sample_2;
  __Pyx_INCREF(__pyx_t_8);

  /* "networkit/profiling/stat.pyx":506
 * 			stat_1["Location"]["Arithmetic Mean"],
 * 			sample_2,
 * 			stat_2["Location"]["Arithmetic Mean"]             # <<<<<<<<<<<<<<
 * 		)
 * 		results["Value"]["Covariance (Rank)"] = covarianceRanked = funcCovariance(
 */
  __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_stat_2, __pyx_n_u_Location); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_t_6, __pyx_kp_u_Arithmetic_Mean); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/profiling/stat.pyx":502
 * 			result /= n
 * 			return result
 * 		results["Value"]["Covariance"] = covariance = funcCovariance(             # <<<<<<<<<<<<<<
 * 			sample_1,
 * 			stat_1["Location"]["Arithmetic Mean"],
 */
  __pyx_t_6 = __pyx_pf_9networkit_9profiling_4stat_11Correlation_3run_funcCovariance(__pyx_v_funcCovariance, __pyx_t_1, __pyx_t_7, __pyx_t_8, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Value); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (unlikely(PyObject_SetItem(__pyx_t_5, __pyx_n_u_Covariance, __pyx_t_6) < 0)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_t_6);
  __pyx_v_covariance = __pyx_t_6;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/profiling/stat.pyx":510
 * 		results["Value"]["Covariance (Rank)"] = covarianceRanked = funcCovariance(
 * 			sampleRanked_1,
 * 			stat_1["Location"]["Arithmetic Mean (Rank)"],             # <<<<<<<<<<<<<<
 * 			sampleRanked_2,
 * 			stat_2["Location"]["Arithmetic Mean (Rank)"]
 */
  __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_stat_1, __pyx_n_u_Location); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_t_6, __pyx_kp_u_Arithmetic_Mean_Rank); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/profiling/stat.pyx":512
 * 			stat_1["Location"]["Arithmetic Mean (Rank)"],
 * 			sampleRanked_2,
 * 			stat_2["Location"]["Arithmetic Mean (Rank)"]             # <<<<<<<<<<<<<<
 * 		)
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_stat_2, __pyx_n_u_Location); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_t_6, __pyx_kp_u_Arithmetic_Mean_Rank); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/profiling/stat.pyx":508
 * 			stat_2["Location"]["Arithmetic Mean"]
 * 		)
 * 		results["Value"]["Covariance (Rank)"] = covarianceRanked = funcCovariance(             # <<<<<<<<<<<<<<
 * 			sampleRanked_1,
 * 			stat_1["Location"]["Arithmetic Mean (Rank)"],
 */
  __pyx_t_6 = __pyx_pf_9networkit_9profiling_4stat_11Correlation_3run_funcCovariance(__pyx_v_funcCovariance, __pyx_v_sampleRanked_1, __pyx_t_5, __pyx_v_sampleRanked_2, __pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Value); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (unlikely(PyObject_SetItem(__pyx_t_8, __pyx_kp_u_Covariance_Rank, __pyx_t_6) < 0)) __PYX_ERR(0, 508, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_INCREF(__pyx_t_6);
  __pyx_v_covarianceRanked = __pyx_t_6;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/profiling/stat.pyx":515
 * 		)
 * 
 * 		def funcPearsonsCorrelationCoefficient(covariance, uncorrectedStandardDeviation_1, uncorrectedStandardDeviation_2):             # <<<<<<<<<<<<<<
 * 			result = float("nan")
 * 			if uncorrectedStandardDeviation_1 * uncorrectedStandardDeviation_2 != 0:
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9profiling_4stat_11Correlation_3run_3funcPearsonsCorrelationCoefficient, 0, __pyx_n_s_Correlation_run_locals_funcPears, NULL, __pyx_n_s_networkit_profiling_stat, __pyx_d, ((PyObject *)__pyx_codeobj__74)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_funcPearsonsCorrelationCoefficient = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "networkit/profiling/stat.pyx":522
 * 		results["Value"]["Pearson's Correlation Coefficient"] = funcPearsonsCorrelationCoefficient(
 * 			covariance,
 * 			stat_1["Dispersion"]["Uncorrected Standard Deviation"],             # <<<<<<<<<<<<<<
 * 			stat_2["Dispersion"]["Uncorrected Standard Deviation"]
 * 		)
 */
  __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_stat_1, __pyx_n_u_Dispersion); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_t_6, __pyx_kp_u_Uncorrected_Standard_Deviation); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/profiling/stat.pyx":523
 * 			covariance,
 * 			stat_1["Dispersion"]["Uncorrected Standard Deviation"],
 * 			stat_2["Dispersion"]["Uncorrected Standard Deviation"]             # <<<<<<<<<<<<<<
 * 		)
 * 		results["Value"]["Spearman's Rank Correlation Coefficient"] = funcPearsonsCorrelationCoefficient(
 */
  __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_stat_2, __pyx_n_u_Dispersion); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_t_6, __pyx_kp_u_Uncorrected_Standard_Deviation); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/profiling/stat.pyx":520
 * 				result = covariance / (uncorrectedStandardDeviation_1 * uncorrectedStandardDeviation_2)
 * 			return result
 * 		results["Value"]["Pearson's Correlation Coefficient"] = funcPearsonsCorrelationCoefficient(             # <<<<<<<<<<<<<<
 * 			covariance,
 * 			stat_1["Dispersion"]["Uncorrected Standard Deviation"],
 */
  __pyx_t_6 = __pyx_pf_9networkit_9profiling_4stat_11Correlation_3run_2funcPearsonsCorrelationCoefficient(__pyx_v_funcPearsonsCorrelationCoefficient, __pyx_v_covariance, __pyx_t_8, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Value); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (unlikely(PyObject_SetItem(__pyx_t_5, __pyx_kp_u_Pearson_s_Correlation_Coefficien, __pyx_t_6) < 0)) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/profiling/stat.pyx":527
 * 		results["Value"]["Spearman's Rank Correlation Coefficient"] = funcPearsonsCorrelationCoefficient(
 * 			covarianceRanked,
 * 			stat_1["Dispersion"]["Uncorrected Standard Deviation (Rank)"],             # <<<<<<<<<<<<<<
 * 			stat_2["Dispersion"]["Uncorrected Standard Deviation (Rank)"]
 * 		)
 */
  __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_stat_1, __pyx_n_u_Dispersion); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 527, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_t_6, __pyx_kp_u_Uncorrected_Standard_Deviation_R); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 527, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/profiling/stat.pyx":528
 * 			covarianceRanked,
 * 			stat_1["Dispersion"]["Uncorrected Standard Deviation (Rank)"],
 * 			stat_2["Dispersion"]["Uncorrected Standard Deviation (Rank)"]             # <<<<<<<<<<<<<<
 * 		)
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_stat_2, __pyx_n_u_Dispersion); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_t_6, __pyx_kp_u_Uncorrected_Standard_Deviation_R); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/profiling/stat.pyx":525
 * 			stat_2["Dispersion"]["Uncorrected Standard Deviation"]
 * 		)
 * 		results["Value"]["Spearman's Rank Correlation Coefficient"] = funcPearsonsCorrelationCoefficient(             # <<<<<<<<<<<<<<
 * 			covarianceRanked,
 * 			stat_1["Dispersion"]["Uncorrected Standard Deviation (Rank)"],
 */
  __pyx_t_6 = __pyx_pf_9networkit_9profiling_4stat_11Correlation_3run_2funcPearsonsCorrelationCoefficient(__pyx_v_funcPearsonsCorrelationCoefficient, __pyx_v_covarianceRanked, __pyx_t_5, __pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Value); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (unlikely(PyObject_SetItem(__pyx_t_8, __pyx_kp_u_Spearman_s_Rank_Correlation_Coef, __pyx_t_6) < 0)) __PYX_ERR(0, 525, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/profiling/stat.pyx":531
 * 		)
 * 
 * 		def funcFechnersCorrelationCoefficent(arithmeticMean_1, arithmeticMean_2):             # <<<<<<<<<<<<<<
 * 			result = 0
 * 			for i in range(n):
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9profiling_4stat_11Correlation_3run_5funcFechnersCorrelationCoefficent, 0, __pyx_n_s_Correlation_run_locals_funcFechn, ((PyObject*)__pyx_cur_scope), __pyx_n_s_networkit_profiling_stat, __pyx_d, ((PyObject *)__pyx_codeobj__76)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_funcFechnersCorrelationCoefficent = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "networkit/profiling/stat.pyx":538
 * 			return result
 * 		results["Value"]["Fechner's Correlation Coefficient"] = funcFechnersCorrelationCoefficent(
 * 			stat_1["Location"]["Arithmetic Mean"],             # <<<<<<<<<<<<<<
 * 			stat_2["Location"]["Arithmetic Mean"]
 * 		)
 */
  __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_stat_1, __pyx_n_u_Location); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 538, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_t_6, __pyx_kp_u_Arithmetic_Mean); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 538, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/profiling/stat.pyx":539
 * 		results["Value"]["Fechner's Correlation Coefficient"] = funcFechnersCorrelationCoefficent(
 * 			stat_1["Location"]["Arithmetic Mean"],
 * 			stat_2["Location"]["Arithmetic Mean"]             # <<<<<<<<<<<<<<
 * 		)
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_stat_2, __pyx_n_u_Location); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_t_6, __pyx_kp_u_Arithmetic_Mean); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/profiling/stat.pyx":537
 * 			result /= n
 * 			return result
 * 		results["Value"]["Fechner's Correlation Coefficient"] = funcFechnersCorrelationCoefficent(             # <<<<<<<<<<<<<<
 * 			stat_1["Location"]["Arithmetic Mean"],
 * 			stat_2["Location"]["Arithmetic Mean"]
 */
  __pyx_t_6 = __pyx_pf_9networkit_9profiling_4stat_11Correlation_3run_4funcFechnersCorrelationCoefficent(__pyx_v_funcFechnersCorrelationCoefficent, __pyx_t_8, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 537, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_results, __pyx_n_u_Value); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 537, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (unlikely(PyObject_SetItem(__pyx_t_5, __pyx_kp_u_Fechner_s_Correlation_Coefficien, __pyx_t_6) < 0)) __PYX_ERR(0, 537, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "networkit/profiling/stat.pyx":542
 * 		)
 * 
 * 		def funcHexBinning(sample_1, sample_2):             # <<<<<<<<<<<<<<
 * 			""" binning for scatter plots """
 * 			result = {}
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9profiling_4stat_11Correlation_3run_7funcHexBinning, 0, __pyx_n_s_Correlation_run_locals_funcHexBi, ((PyObject*)__pyx_cur_scope), __pyx_n_s_networkit_profiling_stat, __pyx_d, ((PyObject *)__pyx_codeobj__78)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_funcHexBinning = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "networkit/profiling/stat.pyx":574
 * 			return result
 * 		results["Binning"] = funcHexBinning(
 * 			sample_1,             # <<<<<<<<<<<<<<
 * 			sample_2
 * 		)
 */
  __pyx_t_6 = __pyx_cur_scope->__pyx_v_sample_1;
  __Pyx_INCREF(__pyx_t_6);

  /* "networkit/profiling/stat.pyx":575
 * 		results["Binning"] = funcHexBinning(
 * 			sample_1,
 * 			sample_2             # <<<<<<<<<<<<<<
 * 		)
 * 
 */
  __pyx_t_5 = __pyx_cur_scope->__pyx_v_sample_2;
  __Pyx_INCREF(__pyx_t_5);

  /* "networkit/profiling/stat.pyx":573
 * 			plt.close(fig)
 * 			return result
 * 		results["Binning"] = funcHexBinning(             # <<<<<<<<<<<<<<
 * 			sample_1,
 * 			sample_2
 */
  __pyx_t_8 = __pyx_pf_9networkit_9profiling_4stat_11Correlation_3run_6funcHexBinning(__pyx_v_funcHexBinning, __pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(PyDict_SetItem(__pyx_v_results, __pyx_n_u_Binning, __pyx_t_8) < 0)) __PYX_ERR(0, 573, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "networkit/profiling/stat.pyx":578
 * 		)
 * 
 * 		return (nameB, results)             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_INCREF(__pyx_v_nameB);
  __Pyx_GIVEREF(__pyx_v_nameB);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_nameB);
  __Pyx_INCREF(__pyx_v_results);
  __Pyx_GIVEREF(__pyx_v_results);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_v_results);
  __pyx_r = __pyx_t_8;
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "networkit/profiling/stat.pyx":487
 * 
 * 
 * 	def run(self):             # <<<<<<<<<<<<<<
 * 		""" computation """
 * 		(nameB, sample_1, sampleRanked_1, stat_1, sample_2, sampleRanked_2, stat_2) = self.__params
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("networkit.profiling.stat.Correlation.run", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_nameB);
  __Pyx_XDECREF(__pyx_v_sampleRanked_1);
  __Pyx_XDECREF(__pyx_v_sampleRanked_2);
  __Pyx_XDECREF(__pyx_v_results);
  __Pyx_XDECREF(__pyx_v_funcCovariance);
  __Pyx_XDECREF(__pyx_v_covariance);
  __Pyx_XDECREF(__pyx_v_covarianceRanked);
  __Pyx_XDECREF(__pyx_v_funcPearsonsCorrelationCoefficient);
  __Pyx_XDECREF(__pyx_v_funcFechnersCorrelationCoefficent);
  __Pyx_XDECREF(__pyx_v_funcHexBinning);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pair.from_py":145
 * 
 * @cname("__pyx_convert_pair_from_py_double__and___pyx_t_9networkit_9profiling_4stat_count")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_double__and___pyx_t_9networkit_9profiling_4stat_count(object o) except *:             # <<<<<<<<<<<<<<
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)
 */

static std::pair<double,__pyx_t_9networkit_9profiling_4stat_count>  __pyx_convert_pair_from_py_double__and___pyx_t_9networkit_9profiling_4stat_count(PyObject *__pyx_v_o) {
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_y = NULL;
  std::pair<double,__pyx_t_9networkit_9profiling_4stat_count>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  double __pyx_t_5;
  __pyx_t_9networkit_9profiling_4stat_count __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_from_py_double__and___pyx_t_9networkit_9profiling_4stat_count", 0);

  /* "pair.from_py":146
 * @cname("__pyx_convert_pair_from_py_double__and___pyx_t_9networkit_9profiling_4stat_count")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_double__and___pyx_t_9networkit_9profiling_4stat_count(object o) except *:
 *     x, y = o             # <<<<<<<<<<<<<<
 *     return pair[X,Y](<X>x, <Y>y)
 * 
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_o))) || (PyList_CheckExact(__pyx_v_o))) {
    PyObject* sequence = __pyx_v_o;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(1, 146, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
  } else {
    Py_ssize_t index = -1;
    __pyx_t_3 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = Py_TYPE(__pyx_t_3)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_2 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_4(__pyx_t_3), 2) < 0) __PYX_ERR(1, 146, __pyx_L1_error)
    __pyx_t_4 = NULL;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(1, 146, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_x = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_y = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pair.from_py":147
 * cdef pair[X,Y] __pyx_convert_pair_from_py_double__and___pyx_t_9networkit_9profiling_4stat_count(object o) except *:
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 147, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyInt_As_uint64_t(__pyx_v_y); if (unlikely((__pyx_t_6 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 147, __pyx_L1_error)
  __pyx_r = std::pair<double,__pyx_t_9networkit_9profiling_4stat_count> (((double)__pyx_t_5), ((__pyx_t_9networkit_9profiling_4stat_count)__pyx_t_6));
  goto __pyx_L0;

  /* "pair.from_py":145
 * 
 * @cname("__pyx_convert_pair_from_py_double__and___pyx_t_9networkit_9profiling_4stat_count")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_double__and___pyx_t_9networkit_9profiling_4stat_count(object o) except *:             # <<<<<<<<<<<<<<
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.from_py.__pyx_convert_pair_from_py_double__and___pyx_t_9networkit_9profiling_4stat_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_double(const std::vector<double>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_double", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = PyFloat_FromDouble((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_double")
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<double>  __pyx_convert_vector_from_py_double(PyObject *__pyx_v_o) {
  std::vector<double>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<double>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_double", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_item); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((double)__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_double")
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *__pyx_freelist_9networkit_9profiling_4stat___pyx_scope_struct__run[8];
static int __pyx_freecount_9networkit_9profiling_4stat___pyx_scope_struct__run = 0;

static PyObject *__pyx_tp_new_9networkit_9profiling_4stat___pyx_scope_struct__run(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_9networkit_9profiling_4stat___pyx_scope_struct__run > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run)))) {
    o = (PyObject*)__pyx_freelist_9networkit_9profiling_4stat___pyx_scope_struct__run[--__pyx_freecount_9networkit_9profiling_4stat___pyx_scope_struct__run];
    memset(o, 0, sizeof(struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9networkit_9profiling_4stat___pyx_scope_struct__run(PyObject *o) {
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *p = (struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_IQR);
  Py_CLEAR(p->__pyx_v_Q1);
  Py_CLEAR(p->__pyx_v_Q3);
  Py_CLEAR(p->__pyx_v_absoluteFrequenciesHistogram);
  Py_CLEAR(p->__pyx_v_arithmeticMean);
  Py_CLEAR(p->__pyx_v_besselsCorrection);
  Py_CLEAR(p->__pyx_v_funcErf);
  Py_CLEAR(p->__pyx_v_funcGamma);
  Py_CLEAR(p->__pyx_v_funcIncompleteGamma);
  Py_CLEAR(p->__pyx_v_funcMomentum);
  Py_CLEAR(p->__pyx_v_intervalsHistogram);
  Py_CLEAR(p->__pyx_v_max);
  Py_CLEAR(p->__pyx_v_median);
  Py_CLEAR(p->__pyx_v_min);
  Py_CLEAR(p->__pyx_v_s_n);
  Py_CLEAR(p->__pyx_v_sample);
  Py_CLEAR(p->__pyx_v_sampleRange);
  Py_CLEAR(p->__pyx_v_sampleSorted);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_9networkit_9profiling_4stat___pyx_scope_struct__run < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run)))) {
    __pyx_freelist_9networkit_9profiling_4stat___pyx_scope_struct__run[__pyx_freecount_9networkit_9profiling_4stat___pyx_scope_struct__run++] = ((struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_9networkit_9profiling_4stat___pyx_scope_struct__run(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *p = (struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *)o;
  if (p->__pyx_v_IQR) {
    e = (*v)(p->__pyx_v_IQR, a); if (e) return e;
  }
  if (p->__pyx_v_Q1) {
    e = (*v)(p->__pyx_v_Q1, a); if (e) return e;
  }
  if (p->__pyx_v_Q3) {
    e = (*v)(p->__pyx_v_Q3, a); if (e) return e;
  }
  if (p->__pyx_v_absoluteFrequenciesHistogram) {
    e = (*v)(p->__pyx_v_absoluteFrequenciesHistogram, a); if (e) return e;
  }
  if (p->__pyx_v_arithmeticMean) {
    e = (*v)(p->__pyx_v_arithmeticMean, a); if (e) return e;
  }
  if (p->__pyx_v_besselsCorrection) {
    e = (*v)(p->__pyx_v_besselsCorrection, a); if (e) return e;
  }
  if (p->__pyx_v_funcErf) {
    e = (*v)(p->__pyx_v_funcErf, a); if (e) return e;
  }
  if (p->__pyx_v_funcGamma) {
    e = (*v)(p->__pyx_v_funcGamma, a); if (e) return e;
  }
  if (p->__pyx_v_funcIncompleteGamma) {
    e = (*v)(p->__pyx_v_funcIncompleteGamma, a); if (e) return e;
  }
  if (p->__pyx_v_funcMomentum) {
    e = (*v)(p->__pyx_v_funcMomentum, a); if (e) return e;
  }
  if (p->__pyx_v_intervalsHistogram) {
    e = (*v)(p->__pyx_v_intervalsHistogram, a); if (e) return e;
  }
  if (p->__pyx_v_max) {
    e = (*v)(p->__pyx_v_max, a); if (e) return e;
  }
  if (p->__pyx_v_median) {
    e = (*v)(p->__pyx_v_median, a); if (e) return e;
  }
  if (p->__pyx_v_min) {
    e = (*v)(p->__pyx_v_min, a); if (e) return e;
  }
  if (p->__pyx_v_s_n) {
    e = (*v)(p->__pyx_v_s_n, a); if (e) return e;
  }
  if (p->__pyx_v_sample) {
    e = (*v)(p->__pyx_v_sample, a); if (e) return e;
  }
  if (p->__pyx_v_sampleRange) {
    e = (*v)(p->__pyx_v_sampleRange, a); if (e) return e;
  }
  if (p->__pyx_v_sampleSorted) {
    e = (*v)(p->__pyx_v_sampleSorted, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_9profiling_4stat___pyx_scope_struct__run(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *p = (struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run *)o;
  tmp = ((PyObject*)p->__pyx_v_IQR);
  p->__pyx_v_IQR = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_Q1);
  p->__pyx_v_Q1 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_Q3);
  p->__pyx_v_Q3 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_absoluteFrequenciesHistogram);
  p->__pyx_v_absoluteFrequenciesHistogram = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_arithmeticMean);
  p->__pyx_v_arithmeticMean = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_besselsCorrection);
  p->__pyx_v_besselsCorrection = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_funcErf);
  p->__pyx_v_funcErf = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_funcGamma);
  p->__pyx_v_funcGamma = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_funcIncompleteGamma);
  p->__pyx_v_funcIncompleteGamma = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_funcMomentum);
  p->__pyx_v_funcMomentum = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_intervalsHistogram);
  p->__pyx_v_intervalsHistogram = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_max);
  p->__pyx_v_max = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_median);
  p->__pyx_v_median = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_min);
  p->__pyx_v_min = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_s_n);
  p->__pyx_v_s_n = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_sample);
  p->__pyx_v_sample = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_sampleRange);
  p->__pyx_v_sampleRange = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_sampleSorted);
  p->__pyx_v_sampleSorted = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_9networkit_9profiling_4stat___pyx_scope_struct__run = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.profiling.stat.__pyx_scope_struct__run", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct__run), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_9profiling_4stat___pyx_scope_struct__run, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9networkit_9profiling_4stat___pyx_scope_struct__run, /*tp_traverse*/
  __pyx_tp_clear_9networkit_9profiling_4stat___pyx_scope_struct__run, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_9profiling_4stat___pyx_scope_struct__run, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct_1_run *__pyx_freelist_9networkit_9profiling_4stat___pyx_scope_struct_1_run[8];
static int __pyx_freecount_9networkit_9profiling_4stat___pyx_scope_struct_1_run = 0;

static PyObject *__pyx_tp_new_9networkit_9profiling_4stat___pyx_scope_struct_1_run(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_9networkit_9profiling_4stat___pyx_scope_struct_1_run > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct_1_run)))) {
    o = (PyObject*)__pyx_freelist_9networkit_9profiling_4stat___pyx_scope_struct_1_run[--__pyx_freecount_9networkit_9profiling_4stat___pyx_scope_struct_1_run];
    memset(o, 0, sizeof(struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct_1_run));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_9networkit_9profiling_4stat___pyx_scope_struct_1_run(PyObject *o) {
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct_1_run *p = (struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct_1_run *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_sample_1);
  Py_CLEAR(p->__pyx_v_sample_2);
  Py_CLEAR(p->__pyx_v_stat_1);
  Py_CLEAR(p->__pyx_v_stat_2);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_9networkit_9profiling_4stat___pyx_scope_struct_1_run < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct_1_run)))) {
    __pyx_freelist_9networkit_9profiling_4stat___pyx_scope_struct_1_run[__pyx_freecount_9networkit_9profiling_4stat___pyx_scope_struct_1_run++] = ((struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct_1_run *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_9networkit_9profiling_4stat___pyx_scope_struct_1_run(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct_1_run *p = (struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct_1_run *)o;
  if (p->__pyx_v_sample_1) {
    e = (*v)(p->__pyx_v_sample_1, a); if (e) return e;
  }
  if (p->__pyx_v_sample_2) {
    e = (*v)(p->__pyx_v_sample_2, a); if (e) return e;
  }
  if (p->__pyx_v_stat_1) {
    e = (*v)(p->__pyx_v_stat_1, a); if (e) return e;
  }
  if (p->__pyx_v_stat_2) {
    e = (*v)(p->__pyx_v_stat_2, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_9profiling_4stat___pyx_scope_struct_1_run(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct_1_run *p = (struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct_1_run *)o;
  tmp = ((PyObject*)p->__pyx_v_sample_1);
  p->__pyx_v_sample_1 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_sample_2);
  p->__pyx_v_sample_2 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_stat_1);
  p->__pyx_v_stat_1 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_stat_2);
  p->__pyx_v_stat_2 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_9networkit_9profiling_4stat___pyx_scope_struct_1_run = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.profiling.stat.__pyx_scope_struct_1_run", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_9profiling_4stat___pyx_scope_struct_1_run), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_9profiling_4stat___pyx_scope_struct_1_run, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9networkit_9profiling_4stat___pyx_scope_struct_1_run, /*tp_traverse*/
  __pyx_tp_clear_9networkit_9profiling_4stat___pyx_scope_struct_1_run, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_9profiling_4stat___pyx_scope_struct_1_run, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_stat(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_stat},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "stat",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_u_1st_Quartile, __pyx_k_1st_Quartile, sizeof(__pyx_k_1st_Quartile), 0, 1, 0, 0},
  {&__pyx_kp_u_3rd_Quartile, __pyx_k_3rd_Quartile, sizeof(__pyx_k_3rd_Quartile), 0, 1, 0, 0},
  {&__pyx_kp_u_Absolute_Frequencies, __pyx_k_Absolute_Frequencies, sizeof(__pyx_k_Absolute_Frequencies), 0, 1, 0, 0},
  {&__pyx_kp_u_Absolute_Frequencies_CDF, __pyx_k_Absolute_Frequencies_CDF, sizeof(__pyx_k_Absolute_Frequencies_CDF), 0, 1, 0, 0},
  {&__pyx_kp_u_Absolute_Frequencies_Histogram, __pyx_k_Absolute_Frequencies_Histogram, sizeof(__pyx_k_Absolute_Frequencies_Histogram), 0, 1, 0, 0},
  {&__pyx_kp_u_Arithmetic_Mean, __pyx_k_Arithmetic_Mean, sizeof(__pyx_k_Arithmetic_Mean), 0, 1, 0, 0},
  {&__pyx_kp_u_Arithmetic_Mean_Rank, __pyx_k_Arithmetic_Mean_Rank, sizeof(__pyx_k_Arithmetic_Mean_Rank), 0, 1, 0, 0},
  {&__pyx_kp_u_Bessel_s_Correction, __pyx_k_Bessel_s_Correction, sizeof(__pyx_k_Bessel_s_Correction), 0, 1, 0, 0},
  {&__pyx_n_u_Binning, __pyx_k_Binning, sizeof(__pyx_k_Binning), 0, 1, 0, 1},
  {&__pyx_kp_u_Coefficient_Of_Variation, __pyx_k_Coefficient_Of_Variation, sizeof(__pyx_k_Coefficient_Of_Variation), 0, 1, 0, 0},
  {&__pyx_kp_u_Coefficient_Of_Variation_Rank, __pyx_k_Coefficient_Of_Variation_Rank, sizeof(__pyx_k_Coefficient_Of_Variation_Rank), 0, 1, 0, 0},
  {&__pyx_n_s_Correlation, __pyx_k_Correlation, sizeof(__pyx_k_Correlation), 0, 0, 1, 1},
  {&__pyx_n_u_Correlation, __pyx_k_Correlation, sizeof(__pyx_k_Correlation), 0, 1, 0, 1},
  {&__pyx_n_s_Correlation___init, __pyx_k_Correlation___init, sizeof(__pyx_k_Correlation___init), 0, 0, 1, 1},
  {&__pyx_n_s_Correlation__params, __pyx_k_Correlation__params, sizeof(__pyx_k_Correlation__params), 0, 0, 1, 1},
  {&__pyx_n_s_Correlation_run, __pyx_k_Correlation_run, sizeof(__pyx_k_Correlation_run), 0, 0, 1, 1},
  {&__pyx_n_s_Correlation_run_locals_funcCovar, __pyx_k_Correlation_run_locals_funcCovar, sizeof(__pyx_k_Correlation_run_locals_funcCovar), 0, 0, 1, 1},
  {&__pyx_n_s_Correlation_run_locals_funcFechn, __pyx_k_Correlation_run_locals_funcFechn, sizeof(__pyx_k_Correlation_run_locals_funcFechn), 0, 0, 1, 1},
  {&__pyx_n_s_Correlation_run_locals_funcHexBi, __pyx_k_Correlation_run_locals_funcHexBi, sizeof(__pyx_k_Correlation_run_locals_funcHexBi), 0, 0, 1, 1},
  {&__pyx_n_s_Correlation_run_locals_funcPears, __pyx_k_Correlation_run_locals_funcPears, sizeof(__pyx_k_Correlation_run_locals_funcPears), 0, 0, 1, 1},
  {&__pyx_n_u_Covariance, __pyx_k_Covariance, sizeof(__pyx_k_Covariance), 0, 1, 0, 1},
  {&__pyx_kp_u_Covariance_Rank, __pyx_k_Covariance_Rank, sizeof(__pyx_k_Covariance_Rank), 0, 1, 0, 0},
  {&__pyx_kp_u_Cubic_Mean, __pyx_k_Cubic_Mean, sizeof(__pyx_k_Cubic_Mean), 0, 1, 0, 0},
  {&__pyx_n_u_Dispersion, __pyx_k_Dispersion, sizeof(__pyx_k_Dispersion), 0, 1, 0, 1},
  {&__pyx_n_u_Distribution, __pyx_k_Distribution, sizeof(__pyx_k_Distribution), 0, 1, 0, 1},
  {&__pyx_kp_u_Fechner_s_Correlation_Coefficien, __pyx_k_Fechner_s_Correlation_Coefficien, sizeof(__pyx_k_Fechner_s_Correlation_Coefficien), 0, 1, 0, 0},
  {&__pyx_kp_u_Grid_Size, __pyx_k_Grid_Size, sizeof(__pyx_k_Grid_Size), 0, 1, 0, 0},
  {&__pyx_n_s_H, __pyx_k_H, sizeof(__pyx_k_H), 0, 0, 1, 1},
  {&__pyx_kp_u_Harmonic_Mean, __pyx_k_Harmonic_Mean, sizeof(__pyx_k_Harmonic_Mean), 0, 1, 0, 0},
  {&__pyx_n_s_IQM, __pyx_k_IQM, sizeof(__pyx_k_IQM), 0, 0, 1, 1},
  {&__pyx_n_s_IQR, __pyx_k_IQR, sizeof(__pyx_k_IQR), 0, 0, 1, 1},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_kp_u_Interquartile_Mean, __pyx_k_Interquartile_Mean, sizeof(__pyx_k_Interquartile_Mean), 0, 1, 0, 0},
  {&__pyx_kp_u_Interquartile_Range, __pyx_k_Interquartile_Range, sizeof(__pyx_k_Interquartile_Range), 0, 1, 0, 0},
  {&__pyx_kp_u_Intervals_CDF, __pyx_k_Intervals_CDF, sizeof(__pyx_k_Intervals_CDF), 0, 1, 0, 0},
  {&__pyx_kp_u_Intervals_Histogram, __pyx_k_Intervals_Histogram, sizeof(__pyx_k_Intervals_Histogram), 0, 1, 0, 0},
  {&__pyx_n_s_Job, __pyx_k_Job, sizeof(__pyx_k_Job), 0, 0, 1, 1},
  {&__pyx_n_u_Kurtosis, __pyx_k_Kurtosis, sizeof(__pyx_k_Kurtosis), 0, 1, 0, 1},
  {&__pyx_n_u_Location, __pyx_k_Location, sizeof(__pyx_k_Location), 0, 1, 0, 1},
  {&__pyx_n_u_Max, __pyx_k_Max, sizeof(__pyx_k_Max), 0, 1, 0, 1},
  {&__pyx_kp_u_Max_Frequency, __pyx_k_Max_Frequency, sizeof(__pyx_k_Max_Frequency), 0, 1, 0, 0},
  {&__pyx_n_u_Median, __pyx_k_Median, sizeof(__pyx_k_Median), 0, 1, 0, 1},
  {&__pyx_kp_u_Mid_Range, __pyx_k_Mid_Range, sizeof(__pyx_k_Mid_Range), 0, 1, 0, 0},
  {&__pyx_n_u_Min, __pyx_k_Min, sizeof(__pyx_k_Min), 0, 1, 0, 1},
  {&__pyx_n_s_MissingDependencyError, __pyx_k_MissingDependencyError, sizeof(__pyx_k_MissingDependencyError), 0, 0, 1, 1},
  {&__pyx_n_u_Mode, __pyx_k_Mode, sizeof(__pyx_k_Mode), 0, 1, 0, 1},
  {&__pyx_kp_u_Number_CDF, __pyx_k_Number_CDF, sizeof(__pyx_k_Number_CDF), 0, 1, 0, 0},
  {&__pyx_kp_u_Number_Histogram, __pyx_k_Number_Histogram, sizeof(__pyx_k_Number_Histogram), 0, 1, 0, 0},
  {&__pyx_n_u_Offsets, __pyx_k_Offsets, sizeof(__pyx_k_Offsets), 0, 1, 0, 1},
  {&__pyx_kp_u_Outlier_Lower, __pyx_k_Outlier_Lower, sizeof(__pyx_k_Outlier_Lower), 0, 1, 0, 0},
  {&__pyx_kp_u_Outlier_Upper, __pyx_k_Outlier_Upper, sizeof(__pyx_k_Outlier_Upper), 0, 1, 0, 0},
  {&__pyx_n_u_Paths, __pyx_k_Paths, sizeof(__pyx_k_Paths), 0, 1, 0, 1},
  {&__pyx_kp_u_Pearson_s_Correlation_Coefficien, __pyx_k_Pearson_s_Correlation_Coefficien, sizeof(__pyx_k_Pearson_s_Correlation_Coefficien), 0, 1, 0, 0},
  {&__pyx_n_u_Pie, __pyx_k_Pie, sizeof(__pyx_k_Pie), 0, 1, 0, 1},
  {&__pyx_n_u_Properties, __pyx_k_Properties, sizeof(__pyx_k_Properties), 0, 1, 0, 1},
  {&__pyx_n_s_Q1, __pyx_k_Q1, sizeof(__pyx_k_Q1), 0, 0, 1, 1},
  {&__pyx_n_s_Q3, __pyx_k_Q3, sizeof(__pyx_k_Q3), 0, 0, 1, 1},
  {&__pyx_kp_u_Quadratic_Mean, __pyx_k_Quadratic_Mean, sizeof(__pyx_k_Quadratic_Mean), 0, 1, 0, 0},
  {&__pyx_kp_u_Relative_Frequencies_CDF, __pyx_k_Relative_Frequencies_CDF, sizeof(__pyx_k_Relative_Frequencies_CDF), 0, 1, 0, 0},
  {&__pyx_kp_u_Relative_Frequencies_Histogram, __pyx_k_Relative_Frequencies_Histogram, sizeof(__pyx_k_Relative_Frequencies_Histogram), 0, 1, 0, 0},
  {&__pyx_kp_u_Sample_Range, __pyx_k_Sample_Range, sizeof(__pyx_k_Sample_Range), 0, 1, 0, 0},
  {&__pyx_n_u_Shape, __pyx_k_Shape, sizeof(__pyx_k_Shape), 0, 1, 0, 1},
  {&__pyx_n_u_Size, __pyx_k_Size, sizeof(__pyx_k_Size), 0, 1, 0, 1},
  {&__pyx_kp_u_Skewness_M, __pyx_k_Skewness_M, sizeof(__pyx_k_Skewness_M), 0, 1, 0, 0},
  {&__pyx_kp_u_Skewness_YP, __pyx_k_Skewness_YP, sizeof(__pyx_k_Skewness_YP), 0, 1, 0, 0},
  {&__pyx_kp_u_Spearman_s_Rank_Correlation_Coef, __pyx_k_Spearman_s_Rank_Correlation_Coef, sizeof(__pyx_k_Spearman_s_Rank_Correlation_Coef), 0, 1, 0, 0},
  {&__pyx_kp_u_Standard_Deviation, __pyx_k_Standard_Deviation, sizeof(__pyx_k_Standard_Deviation), 0, 1, 0, 0},
  {&__pyx_kp_u_Standard_Deviation_Rank, __pyx_k_Standard_Deviation_Rank, sizeof(__pyx_k_Standard_Deviation_Rank), 0, 1, 0, 0},
  {&__pyx_n_s_Stat, __pyx_k_Stat, sizeof(__pyx_k_Stat), 0, 0, 1, 1},
  {&__pyx_n_u_Stat, __pyx_k_Stat, sizeof(__pyx_k_Stat), 0, 1, 0, 1},
  {&__pyx_n_s_Stat___init, __pyx_k_Stat___init, sizeof(__pyx_k_Stat___init), 0, 0, 1, 1},
  {&__pyx_n_s_Stat__params, __pyx_k_Stat__params, sizeof(__pyx_k_Stat__params), 0, 0, 1, 1},
  {&__pyx_n_s_Stat_run, __pyx_k_Stat_run, sizeof(__pyx_k_Stat_run), 0, 0, 1, 1},
  {&__pyx_n_s_Stat_run_locals_funcAlphaQuartil, __pyx_k_Stat_run_locals_funcAlphaQuartil, sizeof(__pyx_k_Stat_run_locals_funcAlphaQuartil), 0, 0, 1, 1},
  {&__pyx_n_s_Stat_run_locals_funcAlphaTrimmed, __pyx_k_Stat_run_locals_funcAlphaTrimmed, sizeof(__pyx_k_Stat_run_locals_funcAlphaTrimmed), 0, 0, 1, 1},
  {&__pyx_n_s_Stat_run_locals_funcArithmeticMe, __pyx_k_Stat_run_locals_funcArithmeticMe, sizeof(__pyx_k_Stat_run_locals_funcArithmeticMe), 0, 0, 1, 1},
  {&__pyx_n_s_Stat_run_locals_funcBesselsCorre, __pyx_k_Stat_run_locals_funcBesselsCorre, sizeof(__pyx_k_Stat_run_locals_funcBesselsCorre), 0, 0, 1, 1},
  {&__pyx_n_s_Stat_run_locals_funcBinAbsoluteF, __pyx_k_Stat_run_locals_funcBinAbsoluteF, sizeof(__pyx_k_Stat_run_locals_funcBinAbsoluteF), 0, 0, 1, 1},
  {&__pyx_n_s_Stat_run_locals_funcBinRelativeF, __pyx_k_Stat_run_locals_funcBinRelativeF, sizeof(__pyx_k_Stat_run_locals_funcBinRelativeF), 0, 0, 1, 1},
  {&__pyx_n_s_Stat_run_locals_funcCoefficientO, __pyx_k_Stat_run_locals_funcCoefficientO, sizeof(__pyx_k_Stat_run_locals_funcCoefficientO), 0, 0, 1, 1},
  {&__pyx_n_s_Stat_run_locals_funcDistribution, __pyx_k_Stat_run_locals_funcDistribution, sizeof(__pyx_k_Stat_run_locals_funcDistribution), 0, 0, 1, 1},
  {&__pyx_n_s_Stat_run_locals_funcDistribution_2, __pyx_k_Stat_run_locals_funcDistribution_2, sizeof(__pyx_k_Stat_run_locals_funcDistribution_2), 0, 0, 1, 1},
  {&__pyx_n_s_Stat_run_locals_funcDistribution_3, __pyx_k_Stat_run_locals_funcDistribution_3, sizeof(__pyx_k_Stat_run_locals_funcDistribution_3), 0, 0, 1, 1},
  {&__pyx_n_s_Stat_run_locals_funcErf, __pyx_k_Stat_run_locals_funcErf, sizeof(__pyx_k_Stat_run_locals_funcErf), 0, 0, 1, 1},
  {&__pyx_n_s_Stat_run_locals_funcGamma, __pyx_k_Stat_run_locals_funcGamma, sizeof(__pyx_k_Stat_run_locals_funcGamma), 0, 0, 1, 1},
  {&__pyx_n_s_Stat_run_locals_funcIQR, __pyx_k_Stat_run_locals_funcIQR, sizeof(__pyx_k_Stat_run_locals_funcIQR), 0, 0, 1, 1},
  {&__pyx_n_s_Stat_run_locals_funcIncompleteGa, __pyx_k_Stat_run_locals_funcIncompleteGa, sizeof(__pyx_k_Stat_run_locals_funcIncompleteGa), 0, 0, 1, 1},
  {&__pyx_n_s_Stat_run_locals_funcIntervals, __pyx_k_Stat_run_locals_funcIntervals, sizeof(__pyx_k_Stat_run_locals_funcIntervals), 0, 0, 1, 1},
  {&__pyx_n_s_Stat_run_locals_funcJoinEmptyBin, __pyx_k_Stat_run_locals_funcJoinEmptyBin, sizeof(__pyx_k_Stat_run_locals_funcJoinEmptyBin), 0, 0, 1, 1},
  {&__pyx_n_s_Stat_run_locals_funcKurtosis, __pyx_k_Stat_run_locals_funcKurtosis, sizeof(__pyx_k_Stat_run_locals_funcKurtosis), 0, 0, 1, 1},
  {&__pyx_n_s_Stat_run_locals_funcLowerOutlier, __pyx_k_Stat_run_locals_funcLowerOutlier, sizeof(__pyx_k_Stat_run_locals_funcLowerOutlier), 0, 0, 1, 1},
  {&__pyx_n_s_Stat_run_locals_funcMax, __pyx_k_Stat_run_locals_funcMax, sizeof(__pyx_k_Stat_run_locals_funcMax), 0, 0, 1, 1},
  {&__pyx_n_s_Stat_run_locals_funcMidRange, __pyx_k_Stat_run_locals_funcMidRange, sizeof(__pyx_k_Stat_run_locals_funcMidRange), 0, 0, 1, 1},
  {&__pyx_n_s_Stat_run_locals_funcMin, __pyx_k_Stat_run_locals_funcMin, sizeof(__pyx_k_Stat_run_locals_funcMin), 0, 0, 1, 1},
  {&__pyx_n_s_Stat_run_locals_funcMode, __pyx_k_Stat_run_locals_funcMode, sizeof(__pyx_k_Stat_run_locals_funcMode), 0, 0, 1, 1},
  {&__pyx_n_s_Stat_run_locals_funcMomentum, __pyx_k_Stat_run_locals_funcMomentum, sizeof(__pyx_k_Stat_run_locals_funcMomentum), 0, 0, 1, 1},
  {&__pyx_n_s_Stat_run_locals_funcNumberOfBins, __pyx_k_Stat_run_locals_funcNumberOfBins, sizeof(__pyx_k_Stat_run_locals_funcNumberOfBins), 0, 0, 1, 1},
  {&__pyx_n_s_Stat_run_locals_funcNumberOfBins_2, __pyx_k_Stat_run_locals_funcNumberOfBins_2, sizeof(__pyx_k_Stat_run_locals_funcNumberOfBins_2), 0, 0, 1, 1},
  {&__pyx_n_s_Stat_run_locals_funcPValue, __pyx_k_Stat_run_locals_funcPValue, sizeof(__pyx_k_Stat_run_locals_funcPValue), 0, 0, 1, 1},
  {&__pyx_n_s_Stat_run_locals_funcPie, __pyx_k_Stat_run_locals_funcPie, sizeof(__pyx_k_Stat_run_locals_funcPie), 0, 0, 1, 1},
  {&__pyx_n_s_Stat_run_locals_funcSampleRange, __pyx_k_Stat_run_locals_funcSampleRange, sizeof(__pyx_k_Stat_run_locals_funcSampleRange), 0, 0, 1, 1},
  {&__pyx_n_s_Stat_run_locals_funcSkewnessM, __pyx_k_Stat_run_locals_funcSkewnessM, sizeof(__pyx_k_Stat_run_locals_funcSkewnessM), 0, 0, 1, 1},
  {&__pyx_n_s_Stat_run_locals_funcSkewnessYP, __pyx_k_Stat_run_locals_funcSkewnessYP, sizeof(__pyx_k_Stat_run_locals_funcSkewnessYP), 0, 0, 1, 1},
  {&__pyx_n_s_Stat_run_locals_funcStandardDevi, __pyx_k_Stat_run_locals_funcStandardDevi, sizeof(__pyx_k_Stat_run_locals_funcStandardDevi), 0, 0, 1, 1},
  {&__pyx_n_s_Stat_run_locals_funcUncorrectedV, __pyx_k_Stat_run_locals_funcUncorrectedV, sizeof(__pyx_k_Stat_run_locals_funcUncorrectedV), 0, 0, 1, 1},
  {&__pyx_n_s_Stat_run_locals_funcUpperOutlier, __pyx_k_Stat_run_locals_funcUpperOutlier, sizeof(__pyx_k_Stat_run_locals_funcUpperOutlier), 0, 0, 1, 1},
  {&__pyx_n_s_Stat_run_locals_funcVariance, __pyx_k_Stat_run_locals_funcVariance, sizeof(__pyx_k_Stat_run_locals_funcVariance), 0, 0, 1, 1},
  {&__pyx_n_s_Stat_run_locals_hoelderMean, __pyx_k_Stat_run_locals_hoelderMean, sizeof(__pyx_k_Stat_run_locals_hoelderMean), 0, 0, 1, 1},
  {&__pyx_kp_u_Uncorrected_Coefficient_Of_Varia, __pyx_k_Uncorrected_Coefficient_Of_Varia, sizeof(__pyx_k_Uncorrected_Coefficient_Of_Varia), 0, 1, 0, 0},
  {&__pyx_kp_u_Uncorrected_Coefficient_Of_Varia_2, __pyx_k_Uncorrected_Coefficient_Of_Varia_2, sizeof(__pyx_k_Uncorrected_Coefficient_Of_Varia_2), 0, 1, 0, 0},
  {&__pyx_kp_u_Uncorrected_Standard_Deviation, __pyx_k_Uncorrected_Standard_Deviation, sizeof(__pyx_k_Uncorrected_Standard_Deviation), 0, 1, 0, 0},
  {&__pyx_kp_u_Uncorrected_Standard_Deviation_R, __pyx_k_Uncorrected_Standard_Deviation_R, sizeof(__pyx_k_Uncorrected_Standard_Deviation_R), 0, 1, 0, 0},
  {&__pyx_kp_u_Uncorrected_Variance, __pyx_k_Uncorrected_Variance, sizeof(__pyx_k_Uncorrected_Variance), 0, 1, 0, 0},
  {&__pyx_kp_u_Uncorrected_Variance_Rank, __pyx_k_Uncorrected_Variance_Rank, sizeof(__pyx_k_Uncorrected_Variance_Rank), 0, 1, 0, 0},
  {&__pyx_n_u_Value, __pyx_k_Value, sizeof(__pyx_k_Value), 0, 1, 0, 1},
  {&__pyx_n_u_Variance, __pyx_k_Variance, sizeof(__pyx_k_Variance), 0, 1, 0, 1},
  {&__pyx_kp_u_Variance_Rank, __pyx_k_Variance_Rank, sizeof(__pyx_k_Variance_Rank), 0, 1, 0, 0},
  {&__pyx_n_s__79, __pyx_k__79, sizeof(__pyx_k__79), 0, 0, 1, 1},
  {&__pyx_n_s__80, __pyx_k__80, sizeof(__pyx_k__80), 0, 0, 1, 1},
  {&__pyx_n_s_a1, __pyx_k_a1, sizeof(__pyx_k_a1), 0, 0, 1, 1},
  {&__pyx_n_s_a2, __pyx_k_a2, sizeof(__pyx_k_a2), 0, 0, 1, 1},
  {&__pyx_n_s_a3, __pyx_k_a3, sizeof(__pyx_k_a3), 0, 0, 1, 1},
  {&__pyx_n_s_a4, __pyx_k_a4, sizeof(__pyx_k_a4), 0, 0, 1, 1},
  {&__pyx_n_s_a5, __pyx_k_a5, sizeof(__pyx_k_a5), 0, 0, 1, 1},
  {&__pyx_n_s_absoluteFrequencies, __pyx_k_absoluteFrequencies, sizeof(__pyx_k_absoluteFrequencies), 0, 0, 1, 1},
  {&__pyx_n_s_absoluteFrequenciesCDF, __pyx_k_absoluteFrequenciesCDF, sizeof(__pyx_k_absoluteFrequenciesCDF), 0, 0, 1, 1},
  {&__pyx_n_s_absoluteFrequenciesHistogram, __pyx_k_absoluteFrequenciesHistogram, sizeof(__pyx_k_absoluteFrequenciesHistogram), 0, 0, 1, 1},
  {&__pyx_n_s_alpha, __pyx_k_alpha, sizeof(__pyx_k_alpha), 0, 0, 1, 1},
  {&__pyx_n_s_arithmeticMean, __pyx_k_arithmeticMean, sizeof(__pyx_k_arithmeticMean), 0, 0, 1, 1},
  {&__pyx_n_s_arithmeticMean_1, __pyx_k_arithmeticMean_1, sizeof(__pyx_k_arithmeticMean_1), 0, 0, 1, 1},
  {&__pyx_n_s_arithmeticMean_2, __pyx_k_arithmeticMean_2, sizeof(__pyx_k_arithmeticMean_2), 0, 0, 1, 1},
  {&__pyx_n_s_arithmeticMean_Rank, __pyx_k_arithmeticMean_Rank, sizeof(__pyx_k_arithmeticMean_Rank), 0, 0, 1, 1},
  {&__pyx_n_s_besselsCorrection, __pyx_k_besselsCorrection, sizeof(__pyx_k_besselsCorrection), 0, 0, 1, 1},
  {&__pyx_n_s_c_v, __pyx_k_c_v, sizeof(__pyx_k_c_v), 0, 0, 1, 1},
  {&__pyx_n_s_c_v_Rank, __pyx_k_c_v_Rank, sizeof(__pyx_k_c_v_Rank), 0, 0, 1, 1},
  {&__pyx_n_s_calculatePie, __pyx_k_calculatePie, sizeof(__pyx_k_calculatePie), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_commulative, __pyx_k_commulative, sizeof(__pyx_k_commulative), 0, 0, 1, 1},
  {&__pyx_n_s_comulative, __pyx_k_comulative, sizeof(__pyx_k_comulative), 0, 0, 1, 1},
  {&__pyx_n_s_copysign, __pyx_k_copysign, sizeof(__pyx_k_copysign), 0, 0, 1, 1},
  {&__pyx_kp_s_correlation_computation_object, __pyx_k_correlation_computation_object, sizeof(__pyx_k_correlation_computation_object), 0, 0, 1, 0},
  {&__pyx_n_s_covariance, __pyx_k_covariance, sizeof(__pyx_k_covariance), 0, 0, 1, 1},
  {&__pyx_n_s_covarianceRanked, __pyx_k_covarianceRanked, sizeof(__pyx_k_covarianceRanked), 0, 0, 1, 1},
  {&__pyx_n_s_criticalValue, __pyx_k_criticalValue, sizeof(__pyx_k_criticalValue), 0, 0, 1, 1},
  {&__pyx_n_s_cubicMean, __pyx_k_cubicMean, sizeof(__pyx_k_cubicMean), 0, 0, 1, 1},
  {&__pyx_n_s_cutSize, __pyx_k_cutSize, sizeof(__pyx_k_cutSize), 0, 0, 1, 1},
  {&__pyx_n_s_cutValue, __pyx_k_cutValue, sizeof(__pyx_k_cutValue), 0, 0, 1, 1},
  {&__pyx_n_s_degreesOfFreedom, __pyx_k_degreesOfFreedom, sizeof(__pyx_k_degreesOfFreedom), 0, 0, 1, 1},
  {&__pyx_n_s_denom, __pyx_k_denom, sizeof(__pyx_k_denom), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_e, __pyx_k_e, sizeof(__pyx_k_e), 0, 0, 1, 1},
  {&__pyx_n_s_exp, __pyx_k_exp, sizeof(__pyx_k_exp), 0, 0, 1, 1},
  {&__pyx_n_s_extent, __pyx_k_extent, sizeof(__pyx_k_extent), 0, 0, 1, 1},
  {&__pyx_n_s_fig, __pyx_k_fig, sizeof(__pyx_k_fig), 0, 0, 1, 1},
  {&__pyx_n_s_figure, __pyx_k_figure, sizeof(__pyx_k_figure), 0, 0, 1, 1},
  {&__pyx_n_s_floor, __pyx_k_floor, sizeof(__pyx_k_floor), 0, 0, 1, 1},
  {&__pyx_n_s_frequencies, __pyx_k_frequencies, sizeof(__pyx_k_frequencies), 0, 0, 1, 1},
  {&__pyx_n_s_funcAlphaQuartile, __pyx_k_funcAlphaQuartile, sizeof(__pyx_k_funcAlphaQuartile), 0, 0, 1, 1},
  {&__pyx_n_s_funcAlphaTrimmedMean, __pyx_k_funcAlphaTrimmedMean, sizeof(__pyx_k_funcAlphaTrimmedMean), 0, 0, 1, 1},
  {&__pyx_n_s_funcArithmeticMeanRank, __pyx_k_funcArithmeticMeanRank, sizeof(__pyx_k_funcArithmeticMeanRank), 0, 0, 1, 1},
  {&__pyx_n_s_funcBesselsCorrection, __pyx_k_funcBesselsCorrection, sizeof(__pyx_k_funcBesselsCorrection), 0, 0, 1, 1},
  {&__pyx_n_s_funcBinAbsoluteFrequencies, __pyx_k_funcBinAbsoluteFrequencies, sizeof(__pyx_k_funcBinAbsoluteFrequencies), 0, 0, 1, 1},
  {&__pyx_n_s_funcBinRelativeFrequencies, __pyx_k_funcBinRelativeFrequencies, sizeof(__pyx_k_funcBinRelativeFrequencies), 0, 0, 1, 1},
  {&__pyx_n_s_funcCoefficientOfVariation, __pyx_k_funcCoefficientOfVariation, sizeof(__pyx_k_funcCoefficientOfVariation), 0, 0, 1, 1},
  {&__pyx_n_s_funcCovariance, __pyx_k_funcCovariance, sizeof(__pyx_k_funcCovariance), 0, 0, 1, 1},
  {&__pyx_n_s_funcDistributionExponential, __pyx_k_funcDistributionExponential, sizeof(__pyx_k_funcDistributionExponential), 0, 0, 1, 1},
  {&__pyx_n_s_funcDistributionExponentialInver, __pyx_k_funcDistributionExponentialInver, sizeof(__pyx_k_funcDistributionExponentialInver), 0, 0, 1, 1},
  {&__pyx_n_s_funcDistributionNormal, __pyx_k_funcDistributionNormal, sizeof(__pyx_k_funcDistributionNormal), 0, 0, 1, 1},
  {&__pyx_n_s_funcErf, __pyx_k_funcErf, sizeof(__pyx_k_funcErf), 0, 0, 1, 1},
  {&__pyx_n_s_funcFechnersCorrelationCoefficen, __pyx_k_funcFechnersCorrelationCoefficen, sizeof(__pyx_k_funcFechnersCorrelationCoefficen), 0, 0, 1, 1},
  {&__pyx_n_s_funcGamma, __pyx_k_funcGamma, sizeof(__pyx_k_funcGamma), 0, 0, 1, 1},
  {&__pyx_n_s_funcHexBinning, __pyx_k_funcHexBinning, sizeof(__pyx_k_funcHexBinning), 0, 0, 1, 1},
  {&__pyx_n_s_funcIQR, __pyx_k_funcIQR, sizeof(__pyx_k_funcIQR), 0, 0, 1, 1},
  {&__pyx_n_s_funcIncompleteGamma, __pyx_k_funcIncompleteGamma, sizeof(__pyx_k_funcIncompleteGamma), 0, 0, 1, 1},
  {&__pyx_n_s_funcIntervals, __pyx_k_funcIntervals, sizeof(__pyx_k_funcIntervals), 0, 0, 1, 1},
  {&__pyx_n_s_funcJoinEmptyBins, __pyx_k_funcJoinEmptyBins, sizeof(__pyx_k_funcJoinEmptyBins), 0, 0, 1, 1},
  {&__pyx_n_s_funcKurtosis, __pyx_k_funcKurtosis, sizeof(__pyx_k_funcKurtosis), 0, 0, 1, 1},
  {&__pyx_n_s_funcLowerOutliers, __pyx_k_funcLowerOutliers, sizeof(__pyx_k_funcLowerOutliers), 0, 0, 1, 1},
  {&__pyx_n_s_funcMax, __pyx_k_funcMax, sizeof(__pyx_k_funcMax), 0, 0, 1, 1},
  {&__pyx_n_s_funcMidRange, __pyx_k_funcMidRange, sizeof(__pyx_k_funcMidRange), 0, 0, 1, 1},
  {&__pyx_n_s_funcMin, __pyx_k_funcMin, sizeof(__pyx_k_funcMin), 0, 0, 1, 1},
  {&__pyx_n_s_funcMode, __pyx_k_funcMode, sizeof(__pyx_k_funcMode), 0, 0, 1, 1},
  {&__pyx_n_s_funcMomentum, __pyx_k_funcMomentum, sizeof(__pyx_k_funcMomentum), 0, 0, 1, 1},
  {&__pyx_n_s_funcNumberOfBins, __pyx_k_funcNumberOfBins, sizeof(__pyx_k_funcNumberOfBins), 0, 0, 1, 1},
  {&__pyx_n_s_funcNumberOfBinsChiSquaredTest, __pyx_k_funcNumberOfBinsChiSquaredTest, sizeof(__pyx_k_funcNumberOfBinsChiSquaredTest), 0, 0, 1, 1},
  {&__pyx_n_s_funcPValue, __pyx_k_funcPValue, sizeof(__pyx_k_funcPValue), 0, 0, 1, 1},
  {&__pyx_n_s_funcPearsonsCorrelationCoefficie, __pyx_k_funcPearsonsCorrelationCoefficie, sizeof(__pyx_k_funcPearsonsCorrelationCoefficie), 0, 0, 1, 1},
  {&__pyx_n_s_funcPie, __pyx_k_funcPie, sizeof(__pyx_k_funcPie), 0, 0, 1, 1},
  {&__pyx_n_s_funcSampleRange, __pyx_k_funcSampleRange, sizeof(__pyx_k_funcSampleRange), 0, 0, 1, 1},
  {&__pyx_n_s_funcSkewnessM, __pyx_k_funcSkewnessM, sizeof(__pyx_k_funcSkewnessM), 0, 0, 1, 1},
  {&__pyx_n_s_funcSkewnessYP, __pyx_k_funcSkewnessYP, sizeof(__pyx_k_funcSkewnessYP), 0, 0, 1, 1},
  {&__pyx_n_s_funcStandardDeviation, __pyx_k_funcStandardDeviation, sizeof(__pyx_k_funcStandardDeviation), 0, 0, 1, 1},
  {&__pyx_n_s_funcUncorrectedVariance, __pyx_k_funcUncorrectedVariance, sizeof(__pyx_k_funcUncorrectedVariance), 0, 0, 1, 1},
  {&__pyx_n_s_funcUpperOutliers, __pyx_k_funcUpperOutliers, sizeof(__pyx_k_funcUpperOutliers), 0, 0, 1, 1},
  {&__pyx_n_s_funcVariance, __pyx_k_funcVariance, sizeof(__pyx_k_funcVariance), 0, 0, 1, 1},
  {&__pyx_n_s_get_array, __pyx_k_get_array, sizeof(__pyx_k_get_array), 0, 0, 1, 1},
  {&__pyx_n_s_get_offsets, __pyx_k_get_offsets, sizeof(__pyx_k_get_offsets), 0, 0, 1, 1},
  {&__pyx_n_s_get_paths, __pyx_k_get_paths, sizeof(__pyx_k_get_paths), 0, 0, 1, 1},
  {&__pyx_n_s_gridsize, __pyx_k_gridsize, sizeof(__pyx_k_gridsize), 0, 0, 1, 1},
  {&__pyx_n_s_harmonicMean, __pyx_k_harmonicMean, sizeof(__pyx_k_harmonicMean), 0, 0, 1, 1},
  {&__pyx_n_s_have_plt, __pyx_k_have_plt, sizeof(__pyx_k_have_plt), 0, 0, 1, 1},
  {&__pyx_n_s_helper, __pyx_k_helper, sizeof(__pyx_k_helper), 0, 0, 1, 1},
  {&__pyx_n_s_hexbin, __pyx_k_hexbin, sizeof(__pyx_k_hexbin), 0, 0, 1, 1},
  {&__pyx_n_s_hoelderMean, __pyx_k_hoelderMean, sizeof(__pyx_k_hoelderMean), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_image, __pyx_k_image, sizeof(__pyx_k_image), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_intervals, __pyx_k_intervals, sizeof(__pyx_k_intervals), 0, 0, 1, 1},
  {&__pyx_n_s_intervalsCDF, __pyx_k_intervalsCDF, sizeof(__pyx_k_intervalsCDF), 0, 0, 1, 1},
  {&__pyx_n_s_intervalsHistogram, __pyx_k_intervalsHistogram, sizeof(__pyx_k_intervalsHistogram), 0, 0, 1, 1},
  {&__pyx_n_s_j, __pyx_k_j, sizeof(__pyx_k_j), 0, 0, 1, 1},
  {&__pyx_n_s_job, __pyx_k_job, sizeof(__pyx_k_job), 0, 0, 1, 1},
  {&__pyx_n_s_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 0, 1, 1},
  {&__pyx_n_s_k_Bin, __pyx_k_k_Bin, sizeof(__pyx_k_k_Bin), 0, 0, 1, 1},
  {&__pyx_n_s_k_Bins_CDF, __pyx_k_k_Bins_CDF, sizeof(__pyx_k_k_Bins_CDF), 0, 0, 1, 1},
  {&__pyx_n_s_k_Bins_Histogram, __pyx_k_k_Bins_Histogram, sizeof(__pyx_k_k_Bins_Histogram), 0, 0, 1, 1},
  {&__pyx_n_s_k_real, __pyx_k_k_real, sizeof(__pyx_k_k_real), 0, 0, 1, 1},
  {&__pyx_n_s_kurtosis, __pyx_k_kurtosis, sizeof(__pyx_k_kurtosis), 0, 0, 1, 1},
  {&__pyx_n_s_length, __pyx_k_length, sizeof(__pyx_k_length), 0, 0, 1, 1},
  {&__pyx_n_s_ln, __pyx_k_ln, sizeof(__pyx_k_ln), 0, 0, 1, 1},
  {&__pyx_n_s_lowerBound, __pyx_k_lowerBound, sizeof(__pyx_k_lowerBound), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_math, __pyx_k_math, sizeof(__pyx_k_math), 0, 0, 1, 1},
  {&__pyx_n_u_matplotlib, __pyx_k_matplotlib, sizeof(__pyx_k_matplotlib), 0, 1, 0, 1},
  {&__pyx_n_s_matplotlib_pyplot, __pyx_k_matplotlib_pyplot, sizeof(__pyx_k_matplotlib_pyplot), 0, 0, 1, 1},
  {&__pyx_n_s_max, __pyx_k_max, sizeof(__pyx_k_max), 0, 0, 1, 1},
  {&__pyx_n_s_median, __pyx_k_median, sizeof(__pyx_k_median), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_midRange, __pyx_k_midRange, sizeof(__pyx_k_midRange), 0, 0, 1, 1},
  {&__pyx_n_s_min, __pyx_k_min, sizeof(__pyx_k_min), 0, 0, 1, 1},
  {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_n, __pyx_k_n, sizeof(__pyx_k_n), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_nameB, __pyx_k_nameB, sizeof(__pyx_k_nameB), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_u_nan, __pyx_k_nan, sizeof(__pyx_k_nan), 0, 1, 0, 1},
  {&__pyx_n_s_networkit_profiling_stat, __pyx_k_networkit_profiling_stat, sizeof(__pyx_k_networkit_profiling_stat), 0, 0, 1, 1},
  {&__pyx_kp_s_networkit_profiling_stat_pyx, __pyx_k_networkit_profiling_stat_pyx, sizeof(__pyx_k_networkit_profiling_stat_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_nom, __pyx_k_nom, sizeof(__pyx_k_nom), 0, 0, 1, 1},
  {&__pyx_n_s_numberOfBins, __pyx_k_numberOfBins, sizeof(__pyx_k_numberOfBins), 0, 0, 1, 1},
  {&__pyx_n_s_p, __pyx_k_p, sizeof(__pyx_k_p), 0, 0, 1, 1},
  {&__pyx_n_s_params, __pyx_k_params, sizeof(__pyx_k_params), 0, 0, 1, 1},
  {&__pyx_n_s_pi, __pyx_k_pi, sizeof(__pyx_k_pi), 0, 0, 1, 1},
  {&__pyx_n_s_plt, __pyx_k_plt, sizeof(__pyx_k_plt), 0, 0, 1, 1},
  {&__pyx_n_s_pow, __pyx_k_pow, sizeof(__pyx_k_pow), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_quadraticMean, __pyx_k_quadraticMean, sizeof(__pyx_k_quadraticMean), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_ranked, __pyx_k_ranked, sizeof(__pyx_k_ranked), 0, 0, 1, 1},
  {&__pyx_n_s_relativeFrequencies, __pyx_k_relativeFrequencies, sizeof(__pyx_k_relativeFrequencies), 0, 0, 1, 1},
  {&__pyx_n_s_relativeFrequenciesCDF, __pyx_k_relativeFrequenciesCDF, sizeof(__pyx_k_relativeFrequenciesCDF), 0, 0, 1, 1},
  {&__pyx_n_s_relativeFrequenciesHistogram, __pyx_k_relativeFrequenciesHistogram, sizeof(__pyx_k_relativeFrequenciesHistogram), 0, 0, 1, 1},
  {&__pyx_n_s_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
  {&__pyx_n_s_result_lower, __pyx_k_result_lower, sizeof(__pyx_k_result_lower), 0, 0, 1, 1},
  {&__pyx_n_s_result_upper, __pyx_k_result_upper, sizeof(__pyx_k_result_upper), 0, 0, 1, 1},
  {&__pyx_n_s_results, __pyx_k_results, sizeof(__pyx_k_results), 0, 0, 1, 1},
  {&__pyx_n_s_run, __pyx_k_run, sizeof(__pyx_k_run), 0, 0, 1, 1},
  {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
  {&__pyx_n_s_s_n, __pyx_k_s_n, sizeof(__pyx_k_s_n), 0, 0, 1, 1},
  {&__pyx_n_s_s_n_Rank, __pyx_k_s_n_Rank, sizeof(__pyx_k_s_n_Rank), 0, 0, 1, 1},
  {&__pyx_n_s_s_n_Rank_uncorrected, __pyx_k_s_n_Rank_uncorrected, sizeof(__pyx_k_s_n_Rank_uncorrected), 0, 0, 1, 1},
  {&__pyx_n_s_s_n_uncorrected, __pyx_k_s_n_uncorrected, sizeof(__pyx_k_s_n_uncorrected), 0, 0, 1, 1},
  {&__pyx_n_s_sample, __pyx_k_sample, sizeof(__pyx_k_sample), 0, 0, 1, 1},
  {&__pyx_n_s_sampleRange, __pyx_k_sampleRange, sizeof(__pyx_k_sampleRange), 0, 0, 1, 1},
  {&__pyx_n_s_sampleRanked, __pyx_k_sampleRanked, sizeof(__pyx_k_sampleRanked), 0, 0, 1, 1},
  {&__pyx_n_s_sampleRanked_1, __pyx_k_sampleRanked_1, sizeof(__pyx_k_sampleRanked_1), 0, 0, 1, 1},
  {&__pyx_n_s_sampleRanked_2, __pyx_k_sampleRanked_2, sizeof(__pyx_k_sampleRanked_2), 0, 0, 1, 1},
  {&__pyx_n_s_sampleSorted, __pyx_k_sampleSorted, sizeof(__pyx_k_sampleSorted), 0, 0, 1, 1},
  {&__pyx_n_s_sample_1, __pyx_k_sample_1, sizeof(__pyx_k_sample_1), 0, 0, 1, 1},
  {&__pyx_n_s_sample_2, __pyx_k_sample_2, sizeof(__pyx_k_sample_2), 0, 0, 1, 1},
  {&__pyx_kp_u_sample_sizes_are_not_equal, __pyx_k_sample_sizes_are_not_equal, sizeof(__pyx_k_sample_sizes_are_not_equal), 0, 1, 0, 0},
  {&__pyx_n_s_sc, __pyx_k_sc, sizeof(__pyx_k_sc), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_sign, __pyx_k_sign, sizeof(__pyx_k_sign), 0, 0, 1, 1},
  {&__pyx_n_s_skewness_yp, __pyx_k_skewness_yp, sizeof(__pyx_k_skewness_yp), 0, 0, 1, 1},
  {&__pyx_n_s_skewnewss_m, __pyx_k_skewnewss_m, sizeof(__pyx_k_skewnewss_m), 0, 0, 1, 1},
  {&__pyx_n_s_sort2, __pyx_k_sort2, sizeof(__pyx_k_sort2), 0, 0, 1, 1},
  {&__pyx_n_s_sorted, __pyx_k_sorted, sizeof(__pyx_k_sorted), 0, 0, 1, 1},
  {&__pyx_n_s_sqrt, __pyx_k_sqrt, sizeof(__pyx_k_sqrt), 0, 0, 1, 1},
  {&__pyx_n_s_stat_1, __pyx_k_stat_1, sizeof(__pyx_k_stat_1), 0, 0, 1, 1},
  {&__pyx_n_s_stat_2, __pyx_k_stat_2, sizeof(__pyx_k_stat_2), 0, 0, 1, 1},
  {&__pyx_n_s_state, __pyx_k_state, sizeof(__pyx_k_state), 0, 0, 1, 1},
  {&__pyx_kp_s_statistical_computation_object, __pyx_k_statistical_computation_object, sizeof(__pyx_k_statistical_computation_object), 0, 0, 1, 0},
  {&__pyx_n_s_sum, __pyx_k_sum, sizeof(__pyx_k_sum), 0, 0, 1, 1},
  {&__pyx_n_s_summ, __pyx_k_summ, sizeof(__pyx_k_summ), 0, 0, 1, 1},
  {&__pyx_n_s_support, __pyx_k_support, sizeof(__pyx_k_support), 0, 0, 1, 1},
  {&__pyx_n_s_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_uncorrectedStandardDeviation_1, __pyx_k_uncorrectedStandardDeviation_1, sizeof(__pyx_k_uncorrectedStandardDeviation_1), 0, 0, 1, 1},
  {&__pyx_n_s_uncorrectedStandardDeviation_2, __pyx_k_uncorrectedStandardDeviation_2, sizeof(__pyx_k_uncorrectedStandardDeviation_2), 0, 0, 1, 1},
  {&__pyx_n_s_upperBound, __pyx_k_upperBound, sizeof(__pyx_k_upperBound), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_variance, __pyx_k_variance, sizeof(__pyx_k_variance), 0, 0, 1, 1},
  {&__pyx_n_s_variance_Rank, __pyx_k_variance_Rank, sizeof(__pyx_k_variance_Rank), 0, 0, 1, 1},
  {&__pyx_n_s_variance_Rank_uncorrected, __pyx_k_variance_Rank_uncorrected, sizeof(__pyx_k_variance_Rank_uncorrected), 0, 0, 1, 1},
  {&__pyx_n_s_variance_uncorrected, __pyx_k_variance_uncorrected, sizeof(__pyx_k_variance_uncorrected), 0, 0, 1, 1},
  {&__pyx_n_s_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(0, 18, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 39, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "networkit/profiling/stat.pyx":101
 * 		results["Properties"]["Size"] = n
 * 
 * 		def funcMin():             # <<<<<<<<<<<<<<
 * 			result = sampleSorted[0]
 * 			return result
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_n_s_result); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);
  __pyx_codeobj__2 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple_, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_profiling_stat_pyx, __pyx_n_s_funcMin, 101, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__2)) __PYX_ERR(0, 101, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":106
 * 		results["Location"]["Min"] = min = funcMin()
 * 
 * 		def funcMax():             # <<<<<<<<<<<<<<
 * 			result = sampleSorted[n-1]
 * 			return result
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_n_s_result); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);
  __pyx_codeobj__4 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__3, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_profiling_stat_pyx, __pyx_n_s_funcMax, 106, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__4)) __PYX_ERR(0, 106, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":111
 * 		results["Location"]["Max"] = max = funcMax()
 * 
 * 		def funcBesselsCorrection():             # <<<<<<<<<<<<<<
 * 			try:
 * 				result = n / (n-1)
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_n_s_result); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);
  __pyx_codeobj__6 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__5, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_profiling_stat_pyx, __pyx_n_s_funcBesselsCorrection, 111, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__6)) __PYX_ERR(0, 111, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":119
 * 		results["Properties"]["Bessel's Correction"] = besselsCorrection = funcBesselsCorrection()
 * 
 * 		def hoelderMean(sample, p):             # <<<<<<<<<<<<<<
 * 			result = 0
 * 			for i in range(n):
 */
  __pyx_tuple__7 = PyTuple_Pack(4, __pyx_n_s_sample, __pyx_n_s_p, __pyx_n_s_result, __pyx_n_s_i); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);
  __pyx_codeobj__8 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__7, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_profiling_stat_pyx, __pyx_n_s_hoelderMean, 119, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__8)) __PYX_ERR(0, 119, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":134
 * 			results["Location"]["Harmonic Mean"] = harmonicMean = float("nan")
 * 
 * 		def funcArithmeticMeanRank():             # <<<<<<<<<<<<<<
 * 			result = (n + 1) / 2
 * 			return result
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_n_s_result); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);
  __pyx_codeobj__10 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__9, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_profiling_stat_pyx, __pyx_n_s_funcArithmeticMeanRank, 134, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__10)) __PYX_ERR(0, 134, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":139
 * 		results["Location"]["Arithmetic Mean (Rank)"] = arithmeticMean_Rank = funcArithmeticMeanRank()
 * 
 * 		def funcUncorrectedVariance(sample, arithmeticMean):             # <<<<<<<<<<<<<<
 * 			result = 0
 * 			for i in range(n):
 */
  __pyx_tuple__11 = PyTuple_Pack(4, __pyx_n_s_sample, __pyx_n_s_arithmeticMean, __pyx_n_s_result, __pyx_n_s_i); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);
  __pyx_codeobj__12 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_profiling_stat_pyx, __pyx_n_s_funcUncorrectedVariance, 139, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__12)) __PYX_ERR(0, 139, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":148
 * 		results["Dispersion"]["Uncorrected Variance (Rank)"] = variance_Rank_uncorrected = funcUncorrectedVariance(sampleRanked, arithmeticMean_Rank)
 * 
 * 		def funcVariance(variance_uncorrected):             # <<<<<<<<<<<<<<
 * 			result = variance_uncorrected * besselsCorrection
 * 			return result
 */
  __pyx_tuple__13 = PyTuple_Pack(2, __pyx_n_s_variance_uncorrected, __pyx_n_s_result); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);
  __pyx_codeobj__14 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_profiling_stat_pyx, __pyx_n_s_funcVariance, 148, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__14)) __PYX_ERR(0, 148, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":154
 * 		results["Dispersion"]["Variance (Rank)"] = variance_Rank = funcVariance(variance_Rank_uncorrected)
 * 
 * 		def funcStandardDeviation(variance):             # <<<<<<<<<<<<<<
 * 			result = math.sqrt(variance)
 * 			return result
 */
  __pyx_tuple__15 = PyTuple_Pack(2, __pyx_n_s_variance, __pyx_n_s_result); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);
  __pyx_codeobj__16 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__15, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_profiling_stat_pyx, __pyx_n_s_funcStandardDeviation, 154, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__16)) __PYX_ERR(0, 154, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":162
 * 		results["Dispersion"]["Uncorrected Standard Deviation (Rank)"] = s_n_Rank_uncorrected = funcStandardDeviation(variance_Rank_uncorrected)
 * 
 * 		def funcCoefficientOfVariation(s_n, arithmeticMean):             # <<<<<<<<<<<<<<
 * 			result = float("nan")
 * 			if arithmeticMean != 0:
 */
  __pyx_tuple__17 = PyTuple_Pack(3, __pyx_n_s_s_n, __pyx_n_s_arithmeticMean, __pyx_n_s_result); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);
  __pyx_codeobj__18 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__17, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_profiling_stat_pyx, __pyx_n_s_funcCoefficientOfVariation, 162, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__18)) __PYX_ERR(0, 162, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":172
 * 		results["Dispersion"]["Uncorrected Coefficient Of Variation (Rank)"] = c_v_Rank = funcCoefficientOfVariation(s_n_Rank_uncorrected, arithmeticMean_Rank)
 * 
 * 		def funcAlphaQuartile(alpha):             # <<<<<<<<<<<<<<
 * 			k_real = (alpha * n)
 * 			k = math.floor(k_real)
 */
  __pyx_tuple__19 = PyTuple_Pack(4, __pyx_n_s_alpha, __pyx_n_s_k_real, __pyx_n_s_k, __pyx_n_s_result); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);
  __pyx_codeobj__20 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_profiling_stat_pyx, __pyx_n_s_funcAlphaQuartile, 172, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__20)) __PYX_ERR(0, 172, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":184
 * 		results["Location"]["3rd Quartile"] = Q3 = funcAlphaQuartile(0.75)
 * 
 * 		def funcAlphaTrimmedMean(alpha):             # <<<<<<<<<<<<<<
 * 			k = math.floor(alpha * n)
 * 			i = k+1
 */
  __pyx_tuple__21 = PyTuple_Pack(4, __pyx_n_s_alpha, __pyx_n_s_k, __pyx_n_s_i, __pyx_n_s_result); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);
  __pyx_codeobj__22 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_profiling_stat_pyx, __pyx_n_s_funcAlphaTrimmedMean, 184, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__22)) __PYX_ERR(0, 184, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":195
 * 		results["Location"]["Interquartile Mean"] = IQM = funcAlphaTrimmedMean(0.25)
 * 
 * 		def funcIQR():             # <<<<<<<<<<<<<<
 * 			result = Q3 - Q1
 * 			return result
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_n_s_result); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);
  __pyx_codeobj__24 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__23, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_profiling_stat_pyx, __pyx_n_s_funcIQR, 195, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__24)) __PYX_ERR(0, 195, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":200
 * 		results["Dispersion"]["Interquartile Range"] = IQR = funcIQR()
 * 
 * 		def funcSampleRange():             # <<<<<<<<<<<<<<
 * 			result = max - min
 * 			return result
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_n_s_result); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);
  __pyx_codeobj__26 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__25, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_profiling_stat_pyx, __pyx_n_s_funcSampleRange, 200, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__26)) __PYX_ERR(0, 200, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":205
 * 		results["Dispersion"]["Sample Range"] = sampleRange = funcSampleRange()
 * 
 * 		def funcMidRange():             # <<<<<<<<<<<<<<
 * 			result = (min + max)/ 2
 * 			return result
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_n_s_result); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);
  __pyx_codeobj__28 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__27, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_profiling_stat_pyx, __pyx_n_s_funcMidRange, 205, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__28)) __PYX_ERR(0, 205, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":210
 * 		results["Location"]["Mid-Range"] = midRange = funcMidRange()
 * 
 * 		def funcSkewnessYP():             # <<<<<<<<<<<<<<
 * 			result = float("nan")
 * 			if s_n != 0:
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_n_s_result); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);
  __pyx_codeobj__30 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__29, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_profiling_stat_pyx, __pyx_n_s_funcSkewnessYP, 210, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__30)) __PYX_ERR(0, 210, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":217
 * 		results["Shape"]["Skewness YP"] = skewness_yp = funcSkewnessYP()
 * 
 * 		def funcMomentum(p):             # <<<<<<<<<<<<<<
 * 			result = float("nan")
 * 			if s_n != 0:
 */
  __pyx_tuple__31 = PyTuple_Pack(3, __pyx_n_s_p, __pyx_n_s_result, __pyx_n_s_i); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);
  __pyx_codeobj__32 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__31, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_profiling_stat_pyx, __pyx_n_s_funcMomentum, 217, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__32)) __PYX_ERR(0, 217, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":226
 * 			return result
 * 
 * 		def funcSkewnessM():             # <<<<<<<<<<<<<<
 * 			result = funcMomentum(3)
 * 			return result
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_n_s_result); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);
  __pyx_codeobj__34 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__33, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_profiling_stat_pyx, __pyx_n_s_funcSkewnessM, 226, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__34)) __PYX_ERR(0, 226, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":231
 * 		results["Shape"]["Skewness M"] = skewnewss_m = funcSkewnessM()
 * 
 * 		def funcKurtosis():             # <<<<<<<<<<<<<<
 * 			result = funcMomentum(4) - 3
 * 			return result
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_n_s_result); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);
  __pyx_codeobj__36 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__35, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_profiling_stat_pyx, __pyx_n_s_funcKurtosis, 231, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__36)) __PYX_ERR(0, 231, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":236
 * 		results["Shape"]["Kurtosis"] = kurtosis = funcKurtosis()
 * 
 * 		def funcNumberOfBins(commulative):             # <<<<<<<<<<<<<<
 * 			result = 1
 * 			if min < max:
 */
  __pyx_tuple__37 = PyTuple_Pack(2, __pyx_n_s_commulative, __pyx_n_s_result); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);
  __pyx_codeobj__38 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_profiling_stat_pyx, __pyx_n_s_funcNumberOfBins, 236, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__38)) __PYX_ERR(0, 236, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":251
 * 		k_Bins_CDF = funcNumberOfBins(True)
 * 
 * 		def funcIntervals(numberOfBins):             # <<<<<<<<<<<<<<
 * 			result = []
 * 			w = sampleRange / numberOfBins
 */
  __pyx_tuple__39 = PyTuple_Pack(4, __pyx_n_s_numberOfBins, __pyx_n_s_result, __pyx_n_s_w, __pyx_n_s_i); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(0, 251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);
  __pyx_codeobj__40 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__39, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_profiling_stat_pyx, __pyx_n_s_funcIntervals, 251, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__40)) __PYX_ERR(0, 251, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":262
 * 		intervalsCDF = funcIntervals(k_Bins_CDF)
 * 
 * 		def funcBinAbsoluteFrequencies(numberOfBins, intervals, comulative):             # <<<<<<<<<<<<<<
 * 			result = []
 * 			index = 0
 */
  __pyx_tuple__41 = PyTuple_Pack(7, __pyx_n_s_numberOfBins, __pyx_n_s_intervals, __pyx_n_s_comulative, __pyx_n_s_result, __pyx_n_s_index, __pyx_n_s_i, __pyx_n_s_value); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);
  __pyx_codeobj__42 = (PyObject*)__Pyx_PyCode_New(3, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_profiling_stat_pyx, __pyx_n_s_funcBinAbsoluteFrequencies, 262, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__42)) __PYX_ERR(0, 262, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":278
 * 		absoluteFrequenciesCDF = funcBinAbsoluteFrequencies(k_Bins_CDF, intervalsCDF, True)
 * 
 * 		def funcJoinEmptyBins(k_Bin, intervals, frequencies, commulative):             # <<<<<<<<<<<<<<
 * 			result = k_Bin
 * 			value = 0
 */
  __pyx_tuple__43 = PyTuple_Pack(7, __pyx_n_s_k_Bin, __pyx_n_s_intervals, __pyx_n_s_frequencies, __pyx_n_s_commulative, __pyx_n_s_result, __pyx_n_s_value, __pyx_n_s_i); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);
  __pyx_codeobj__44 = (PyObject*)__Pyx_PyCode_New(4, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__43, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_profiling_stat_pyx, __pyx_n_s_funcJoinEmptyBins, 278, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__44)) __PYX_ERR(0, 278, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":293
 * 		results["Binning"]["Intervals CDF"] = intervalsCDF
 * 
 * 		def funcBinRelativeFrequencies(absoluteFrequencies):             # <<<<<<<<<<<<<<
 * 			result = []
 * 			for H in absoluteFrequencies:
 */
  __pyx_tuple__45 = PyTuple_Pack(3, __pyx_n_s_absoluteFrequencies, __pyx_n_s_result, __pyx_n_s_H); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(0, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);
  __pyx_codeobj__46 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__45, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_profiling_stat_pyx, __pyx_n_s_funcBinRelativeFrequencies, 293, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__46)) __PYX_ERR(0, 293, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":301
 * 		results["Binning"]["Relative Frequencies CDF"] = relativeFrequenciesCDF = funcBinRelativeFrequencies(absoluteFrequenciesCDF)
 * 
 * 		def funcMode():             # <<<<<<<<<<<<<<
 * 			index = 0
 * 			max = 0
 */
  __pyx_tuple__47 = PyTuple_Pack(4, __pyx_n_s_index, __pyx_n_s_max, __pyx_n_s_i, __pyx_n_s_result); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);
  __pyx_codeobj__48 = (PyObject*)__Pyx_PyCode_New(0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__47, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_profiling_stat_pyx, __pyx_n_s_funcMode, 301, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__48)) __PYX_ERR(0, 301, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":312
 * 		results["Binning"]["Mode"] = mode = funcMode()
 * 
 * 		def funcLowerOutliers():             # <<<<<<<<<<<<<<
 * 			lowerBound = Q1 - IQR * 3
 * 			upperBound = Q1 - IQR * 1.5
 */
  __pyx_tuple__49 = PyTuple_Pack(7, __pyx_n_s_lowerBound, __pyx_n_s_upperBound, __pyx_n_s_result_lower, __pyx_n_s_result_upper, __pyx_n_s_state, __pyx_n_s_i, __pyx_n_s_value); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);
  __pyx_codeobj__50 = (PyObject*)__Pyx_PyCode_New(0, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__49, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_profiling_stat_pyx, __pyx_n_s_funcLowerOutliers, 312, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__50)) __PYX_ERR(0, 312, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":329
 * 		results["Location"]["Outlier (Lower)"] = funcLowerOutliers()
 * 
 * 		def funcUpperOutliers():             # <<<<<<<<<<<<<<
 * 			lowerBound = Q3 + IQR * 1.5
 * 			upperBound = Q3 + IQR * 3
 */
  __pyx_tuple__51 = PyTuple_Pack(7, __pyx_n_s_lowerBound, __pyx_n_s_upperBound, __pyx_n_s_result_lower, __pyx_n_s_result_upper, __pyx_n_s_state, __pyx_n_s_i, __pyx_n_s_value); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);
  __pyx_codeobj__52 = (PyObject*)__Pyx_PyCode_New(0, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__51, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_profiling_stat_pyx, __pyx_n_s_funcUpperOutliers, 329, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__52)) __PYX_ERR(0, 329, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":347
 * 
 * 		if calculatePie:
 * 			def funcPie():             # <<<<<<<<<<<<<<
 * 				n = len(sample)
 * 				sum = 0
 */
  __pyx_tuple__53 = PyTuple_Pack(8, __pyx_n_s_n, __pyx_n_s_sum, __pyx_n_s_i, __pyx_n_s_min, __pyx_n_s_cutSize, __pyx_n_s_cutValue, __pyx_n_s_relativeFrequencies, __pyx_n_s_value); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(0, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);
  __pyx_codeobj__54 = (PyObject*)__Pyx_PyCode_New(0, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__53, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_profiling_stat_pyx, __pyx_n_s_funcPie, 347, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__54)) __PYX_ERR(0, 347, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":380
 * 		# k_Bins = len(absoluteFrequencies)
 * 
 * 		def funcErf(x):             # <<<<<<<<<<<<<<
 * 			sign = 1 if x >= 0 else -1
 * 			x = abs(x)
 */
  __pyx_tuple__55 = PyTuple_Pack(10, __pyx_n_s_x, __pyx_n_s_sign, __pyx_n_s_a1, __pyx_n_s_a2, __pyx_n_s_a3, __pyx_n_s_a4, __pyx_n_s_a5, __pyx_n_s_p, __pyx_n_s_t, __pyx_n_s_y); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);
  __pyx_codeobj__56 = (PyObject*)__Pyx_PyCode_New(1, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__55, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_profiling_stat_pyx, __pyx_n_s_funcErf, 380, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__56)) __PYX_ERR(0, 380, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":395
 * 			return sign*y
 * 
 * 		def funcDistributionNormal(x):             # <<<<<<<<<<<<<<
 * 			result = 1/2 * (1 + funcErf((x-arithmeticMean)/(math.sqrt(2) * s_n)))
 * 			return result
 */
  __pyx_tuple__57 = PyTuple_Pack(2, __pyx_n_s_x, __pyx_n_s_result); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(0, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);
  __pyx_codeobj__58 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__57, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_profiling_stat_pyx, __pyx_n_s_funcDistributionNormal, 395, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__58)) __PYX_ERR(0, 395, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":399
 * 			return result
 * 
 * 		def funcDistributionExponential(x):             # <<<<<<<<<<<<<<
 * 			result = 1 - math.exp((-1/arithmeticMean) * x)
 * 			return result
 */
  __pyx_tuple__59 = PyTuple_Pack(2, __pyx_n_s_x, __pyx_n_s_result); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);
  __pyx_codeobj__60 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__59, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_profiling_stat_pyx, __pyx_n_s_funcDistributionExponential, 399, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__60)) __PYX_ERR(0, 399, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":403
 * 			return result
 * 
 * 		def funcDistributionExponentialInverse(x):             # <<<<<<<<<<<<<<
 * 			result = math.ln(1/(1-x))*arithmeticMean
 * 			return result
 */
  __pyx_tuple__61 = PyTuple_Pack(2, __pyx_n_s_x, __pyx_n_s_result); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);
  __pyx_codeobj__62 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__61, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_profiling_stat_pyx, __pyx_n_s_funcDistributionExponentialInver, 403, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__62)) __PYX_ERR(0, 403, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":407
 * 			return result
 * 
 * 		def funcIncompleteGamma(s, x):             # <<<<<<<<<<<<<<
 * 			if x < 0.0:
 * 				return 0.0
 */
  __pyx_tuple__63 = PyTuple_Pack(7, __pyx_n_s_s, __pyx_n_s_x, __pyx_n_s_sc, __pyx_n_s_sum, __pyx_n_s_nom, __pyx_n_s_denom, __pyx_n_s_i); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);
  __pyx_codeobj__64 = (PyObject*)__Pyx_PyCode_New(2, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__63, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_profiling_stat_pyx, __pyx_n_s_funcIncompleteGamma, 407, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__64)) __PYX_ERR(0, 407, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":422
 * 			return sum * sc
 * 
 * 		def funcGamma(x):             # <<<<<<<<<<<<<<
 * 			result = (x / math.e) ** x
 * 			result *= math.sqrt(2 * math.pi / x)
 */
  __pyx_tuple__65 = PyTuple_Pack(2, __pyx_n_s_x, __pyx_n_s_result); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(0, 422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);
  __pyx_codeobj__66 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__65, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_profiling_stat_pyx, __pyx_n_s_funcGamma, 422, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__66)) __PYX_ERR(0, 422, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":428
 * 			return result
 * 
 * 		def funcPValue(criticalValue, degreesOfFreedom):             # <<<<<<<<<<<<<<
 * 			if criticalValue < 0.0 or degreesOfFreedom < 1:
 * 				return 0.0
 */
  __pyx_tuple__67 = PyTuple_Pack(5, __pyx_n_s_criticalValue, __pyx_n_s_degreesOfFreedom, __pyx_n_s_k, __pyx_n_s_x, __pyx_n_s_result); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(0, 428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);
  __pyx_codeobj__68 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__67, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_profiling_stat_pyx, __pyx_n_s_funcPValue, 428, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__68)) __PYX_ERR(0, 428, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":439
 * 			return 1-result
 * 
 * 		def funcNumberOfBinsChiSquaredTest():             # <<<<<<<<<<<<<<
 * 			result = 1 + math.ln(n)/math.ln(2)
 * 			if result > 128:
 */
  __pyx_tuple__69 = PyTuple_Pack(1, __pyx_n_s_result); if (unlikely(!__pyx_tuple__69)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);
  __pyx_codeobj__70 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__69, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_profiling_stat_pyx, __pyx_n_s_funcNumberOfBinsChiSquaredTest, 439, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__70)) __PYX_ERR(0, 439, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":496
 * 		results["Value"] = {}
 * 
 * 		def funcCovariance(sample_1, arithmeticMean_1, sample_2, arithmeticMean_2):             # <<<<<<<<<<<<<<
 * 			result = 0
 * 			for i in range(n):
 */
  __pyx_tuple__71 = PyTuple_Pack(6, __pyx_n_s_sample_1, __pyx_n_s_arithmeticMean_1, __pyx_n_s_sample_2, __pyx_n_s_arithmeticMean_2, __pyx_n_s_result, __pyx_n_s_i); if (unlikely(!__pyx_tuple__71)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__71);
  __Pyx_GIVEREF(__pyx_tuple__71);
  __pyx_codeobj__72 = (PyObject*)__Pyx_PyCode_New(4, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__71, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_profiling_stat_pyx, __pyx_n_s_funcCovariance, 496, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__72)) __PYX_ERR(0, 496, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":515
 * 		)
 * 
 * 		def funcPearsonsCorrelationCoefficient(covariance, uncorrectedStandardDeviation_1, uncorrectedStandardDeviation_2):             # <<<<<<<<<<<<<<
 * 			result = float("nan")
 * 			if uncorrectedStandardDeviation_1 * uncorrectedStandardDeviation_2 != 0:
 */
  __pyx_tuple__73 = PyTuple_Pack(4, __pyx_n_s_covariance, __pyx_n_s_uncorrectedStandardDeviation_1, __pyx_n_s_uncorrectedStandardDeviation_2, __pyx_n_s_result); if (unlikely(!__pyx_tuple__73)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);
  __pyx_codeobj__74 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__73, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_profiling_stat_pyx, __pyx_n_s_funcPearsonsCorrelationCoefficie, 515, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__74)) __PYX_ERR(0, 515, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":531
 * 		)
 * 
 * 		def funcFechnersCorrelationCoefficent(arithmeticMean_1, arithmeticMean_2):             # <<<<<<<<<<<<<<
 * 			result = 0
 * 			for i in range(n):
 */
  __pyx_tuple__75 = PyTuple_Pack(4, __pyx_n_s_arithmeticMean_1, __pyx_n_s_arithmeticMean_2, __pyx_n_s_result, __pyx_n_s_i); if (unlikely(!__pyx_tuple__75)) __PYX_ERR(0, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__75);
  __Pyx_GIVEREF(__pyx_tuple__75);
  __pyx_codeobj__76 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__75, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_profiling_stat_pyx, __pyx_n_s_funcFechnersCorrelationCoefficen, 531, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__76)) __PYX_ERR(0, 531, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":542
 * 		)
 * 
 * 		def funcHexBinning(sample_1, sample_2):             # <<<<<<<<<<<<<<
 * 			""" binning for scatter plots """
 * 			result = {}
 */
  __pyx_tuple__77 = PyTuple_Pack(10, __pyx_n_s_sample_1, __pyx_n_s_sample_2, __pyx_n_s_result, __pyx_n_s_n, __pyx_n_s_fig, __pyx_n_s_extent, __pyx_n_s_image, __pyx_n_s_frequencies, __pyx_n_s_max, __pyx_n_s_value); if (unlikely(!__pyx_tuple__77)) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__77);
  __Pyx_GIVEREF(__pyx_tuple__77);
  __pyx_codeobj__78 = (PyObject*)__Pyx_PyCode_New(2, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__77, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_profiling_stat_pyx, __pyx_n_s_funcHexBinning, 542, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__78)) __PYX_ERR(0, 542, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":30
 * 	void sort[Iter, Comp](Iter begin, Iter end, Comp compare) nogil
 * 
 * def ranked(sample):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Given a list of numbers, this function computes the rank of each value
 */
  __pyx_tuple__81 = PyTuple_Pack(8, __pyx_n_s_sample, __pyx_n_s_helper, __pyx_n_s_result, __pyx_n_s_i, __pyx_n_s_value, __pyx_n_s_summ, __pyx_n_s_length, __pyx_n_s_j); if (unlikely(!__pyx_tuple__81)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__81);
  __Pyx_GIVEREF(__pyx_tuple__81);
  __pyx_codeobj__82 = (PyObject*)__Pyx_PyCode_New(1, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__81, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_profiling_stat_pyx, __pyx_n_s_ranked, 30, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__82)) __PYX_ERR(0, 30, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":61
 * 	return result
 * 
 * def sort2(sample):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Sorts a given list of numbers.
 */
  __pyx_tuple__83 = PyTuple_Pack(2, __pyx_n_s_sample, __pyx_n_s_result); if (unlikely(!__pyx_tuple__83)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__83);
  __Pyx_GIVEREF(__pyx_tuple__83);
  __pyx_codeobj__84 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__83, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_profiling_stat_pyx, __pyx_n_s_sort2, 61, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__84)) __PYX_ERR(0, 61, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":70
 * 	return result
 * 
 * def sorted(sample):             # <<<<<<<<<<<<<<
 * 	"""	returns a sorted list of given numbers """
 * 	return sort2(sample)
 */
  __pyx_tuple__85 = PyTuple_Pack(1, __pyx_n_s_sample); if (unlikely(!__pyx_tuple__85)) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__85);
  __Pyx_GIVEREF(__pyx_tuple__85);
  __pyx_codeobj__86 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__85, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_profiling_stat_pyx, __pyx_n_s_sorted, 70, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__86)) __PYX_ERR(0, 70, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":77
 * 	""" statistical computation object """
 * 
 * 	def __init__(self, name, params):             # <<<<<<<<<<<<<<
 * 		""" constructor: see PlotJob and .run() """
 * 		job.Job.__init__(
 */
  __pyx_tuple__87 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_name, __pyx_n_s_params); if (unlikely(!__pyx_tuple__87)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__87);
  __Pyx_GIVEREF(__pyx_tuple__87);
  __pyx_codeobj__88 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__87, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_profiling_stat_pyx, __pyx_n_s_init, 77, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__88)) __PYX_ERR(0, 77, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":86
 * 		self.__params = params
 * 
 * 	def run(self):             # <<<<<<<<<<<<<<
 * 		""" computation """
 * 		(sample, sampleSorted, sampleRanked, calculatePie) = self.__params
 */
  __pyx_tuple__89 = PyTuple_Pack(114, __pyx_n_s_self, __pyx_n_s_sample, __pyx_n_s_sampleSorted, __pyx_n_s_sampleRanked, __pyx_n_s_calculatePie, __pyx_n_s_n, __pyx_n_s_results, __pyx_n_s_funcMin, __pyx_n_s_funcMin, __pyx_n_s_min, __pyx_n_s_funcMax, __pyx_n_s_funcMax, __pyx_n_s_max, __pyx_n_s_funcBesselsCorrection, __pyx_n_s_funcBesselsCorrection, __pyx_n_s_besselsCorrection, __pyx_n_s_hoelderMean, __pyx_n_s_hoelderMean, __pyx_n_s_arithmeticMean, __pyx_n_s_quadraticMean, __pyx_n_s_cubicMean, __pyx_n_s_harmonicMean, __pyx_n_s_funcArithmeticMeanRank, __pyx_n_s_funcArithmeticMeanRank, __pyx_n_s_arithmeticMean_Rank, __pyx_n_s_funcUncorrectedVariance, __pyx_n_s_funcUncorrectedVariance, __pyx_n_s_variance_uncorrected, __pyx_n_s_variance_Rank_uncorrected, __pyx_n_s_funcVariance, __pyx_n_s_funcVariance, __pyx_n_s_variance, __pyx_n_s_variance_Rank, __pyx_n_s_funcStandardDeviation, __pyx_n_s_funcStandardDeviation, __pyx_n_s_s_n, __pyx_n_s_s_n_Rank, __pyx_n_s_s_n_uncorrected, __pyx_n_s_s_n_Rank_uncorrected, __pyx_n_s_funcCoefficientOfVariation, __pyx_n_s_funcCoefficientOfVariation, __pyx_n_s_c_v, __pyx_n_s_c_v_Rank, __pyx_n_s_funcAlphaQuartile, __pyx_n_s_funcAlphaQuartile, __pyx_n_s_Q1, __pyx_n_s_median, __pyx_n_s_Q3, __pyx_n_s_funcAlphaTrimmedMean, __pyx_n_s_funcAlphaTrimmedMean, __pyx_n_s_IQM, __pyx_n_s_funcIQR, __pyx_n_s_funcIQR, __pyx_n_s_IQR, __pyx_n_s_funcSampleRange, __pyx_n_s_funcSampleRange, __pyx_n_s_sampleRange, __pyx_n_s_funcMidRange, __pyx_n_s_funcMidRange, __pyx_n_s_midRange, __pyx_n_s_funcSkewnessYP, __pyx_n_s_funcSkewnessYP, __pyx_n_s_skewness_yp, __pyx_n_s_funcMomentum, __pyx_n_s_funcMomentum, __pyx_n_s_funcSkewnessM, __pyx_n_s_funcSkewnessM, __pyx_n_s_skewnewss_m, __pyx_n_s_funcKurtosis, __pyx_n_s_funcKurtosis, __pyx_n_s_kurtosis, __pyx_n_s_funcNumberOfBins, __pyx_n_s_funcNumberOfBins, __pyx_n_s_k_Bins_Histogram, __pyx_n_s_k_Bins_CDF, __pyx_n_s_funcIntervals, __pyx_n_s_funcIntervals, __pyx_n_s_intervalsHistogram, __pyx_n_s_intervalsCDF, __pyx_n_s_funcBinAbsoluteFrequencies, __pyx_n_s_funcBinAbsoluteFrequencies, __pyx_n_s_absoluteFrequenciesHistogram, __pyx_n_s_absoluteFrequenciesCDF, __pyx_n_s_funcJoinEmptyBins, __pyx_n_s_funcJoinEmptyBins, __pyx_n_s_funcBinRelativeFrequencies, __pyx_n_s_funcBinRelativeFrequencies, __pyx_n_s_relativeFrequenciesHistogram, __pyx_n_s_relativeFrequenciesCDF, __pyx_n_s_funcMode, __pyx_n_s_funcMode, __pyx_n_s_mode, __pyx_n_s_funcLowerOutliers, __pyx_n_s_funcLowerOutliers, __pyx_n_s_funcUpperOutliers, __pyx_n_s_funcUpperOutliers, __pyx_n_s_funcPie, __pyx_n_s_funcPie, __pyx_n_s_funcErf, __pyx_n_s_funcErf, __pyx_n_s_funcDistributionNormal, __pyx_n_s_funcDistributionNormal, __pyx_n_s_funcDistributionExponential, __pyx_n_s_funcDistributionExponential, __pyx_n_s_funcDistributionExponentialInver, __pyx_n_s_funcDistributionExponentialInver, __pyx_n_s_funcIncompleteGamma, __pyx_n_s_funcIncompleteGamma, __pyx_n_s_funcGamma, __pyx_n_s_funcGamma, __pyx_n_s_funcPValue, __pyx_n_s_funcPValue, __pyx_n_s_funcNumberOfBinsChiSquaredTest, __pyx_n_s_funcNumberOfBinsChiSquaredTest); if (unlikely(!__pyx_tuple__89)) __PYX_ERR(0, 86, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__89);
  __Pyx_GIVEREF(__pyx_tuple__89);
  __pyx_codeobj__90 = (PyObject*)__Pyx_PyCode_New(1, 0, 114, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__89, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_profiling_stat_pyx, __pyx_n_s_run, 86, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__90)) __PYX_ERR(0, 86, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":477
 * 	""" correlation computation object """
 * 
 * 	def __init__(self, name, params):             # <<<<<<<<<<<<<<
 * 		""" constructor: see PlotJob and .run() """
 * 		job.Job.__init__(
 */
  __pyx_tuple__91 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_name, __pyx_n_s_params); if (unlikely(!__pyx_tuple__91)) __PYX_ERR(0, 477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__91);
  __Pyx_GIVEREF(__pyx_tuple__91);
  __pyx_codeobj__92 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__91, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_profiling_stat_pyx, __pyx_n_s_init, 477, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__92)) __PYX_ERR(0, 477, __pyx_L1_error)

  /* "networkit/profiling/stat.pyx":487
 * 
 * 
 * 	def run(self):             # <<<<<<<<<<<<<<
 * 		""" computation """
 * 		(nameB, sample_1, sampleRanked_1, stat_1, sample_2, sampleRanked_2, stat_2) = self.__params
 */
  __pyx_tuple__93 = PyTuple_Pack(20, __pyx_n_s_self, __pyx_n_s_nameB, __pyx_n_s_sample_1, __pyx_n_s_sampleRanked_1, __pyx_n_s_stat_1, __pyx_n_s_sample_2, __pyx_n_s_sampleRanked_2, __pyx_n_s_stat_2, __pyx_n_s_n, __pyx_n_s_results, __pyx_n_s_funcCovariance, __pyx_n_s_funcCovariance, __pyx_n_s_covariance, __pyx_n_s_covarianceRanked, __pyx_n_s_funcPearsonsCorrelationCoefficie, __pyx_n_s_funcPearsonsCorrelationCoefficie, __pyx_n_s_funcFechnersCorrelationCoefficen, __pyx_n_s_funcFechnersCorrelationCoefficen, __pyx_n_s_funcHexBinning, __pyx_n_s_funcHexBinning); if (unlikely(!__pyx_tuple__93)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__93);
  __Pyx_GIVEREF(__pyx_tuple__93);
  __pyx_codeobj__94 = (PyObject*)__Pyx_PyCode_New(1, 0, 20, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__93, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_profiling_stat_pyx, __pyx_n_s_run, 487, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__94)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_0_0 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_float_0_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_5 = PyFloat_FromDouble(0.5); if (unlikely(!__pyx_float_0_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1_0 = PyFloat_FromDouble(1.0); if (unlikely(!__pyx_float_1_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1_5 = PyFloat_FromDouble(1.5); if (unlikely(!__pyx_float_1_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_25 = PyFloat_FromDouble(0.25); if (unlikely(!__pyx_float_0_25)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_75 = PyFloat_FromDouble(0.75); if (unlikely(!__pyx_float_0_75)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_10eneg_12 = PyFloat_FromDouble(10e-12); if (unlikely(!__pyx_float_10eneg_12)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_12 = PyInt_FromLong(12); if (unlikely(!__pyx_int_12)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_20 = PyInt_FromLong(20); if (unlikely(!__pyx_int_20)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_128 = PyInt_FromLong(128); if (unlikely(!__pyx_int_128)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_256 = PyInt_FromLong(256); if (unlikely(!__pyx_int_256)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_9networkit_9profiling_4stat___pyx_scope_struct__run) < 0) __PYX_ERR(0, 86, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_9profiling_4stat___pyx_scope_struct__run.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_9profiling_4stat___pyx_scope_struct__run.tp_dictoffset && __pyx_type_9networkit_9profiling_4stat___pyx_scope_struct__run.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_9profiling_4stat___pyx_scope_struct__run.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_9networkit_9profiling_4stat___pyx_scope_struct__run = &__pyx_type_9networkit_9profiling_4stat___pyx_scope_struct__run;
  if (PyType_Ready(&__pyx_type_9networkit_9profiling_4stat___pyx_scope_struct_1_run) < 0) __PYX_ERR(0, 487, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_9profiling_4stat___pyx_scope_struct_1_run.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_9profiling_4stat___pyx_scope_struct_1_run.tp_dictoffset && __pyx_type_9networkit_9profiling_4stat___pyx_scope_struct_1_run.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_9profiling_4stat___pyx_scope_struct_1_run.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_9networkit_9profiling_4stat___pyx_scope_struct_1_run = &__pyx_type_9networkit_9profiling_4stat___pyx_scope_struct_1_run;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initstat(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initstat(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_stat(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_stat(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_stat(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'stat' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_stat(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("stat", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_networkit__profiling__stat) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name_2, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "networkit.profiling.stat")) {
      if (unlikely(PyDict_SetItemString(modules, "networkit.profiling.stat", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "networkit/profiling/stat.pyx":13
 * ctypedef uint64_t count
 * 
 * from . import job             # <<<<<<<<<<<<<<
 * 
 * import math
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_job);
  __Pyx_GIVEREF(__pyx_n_s_job);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_job);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s__79, __pyx_t_1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_job); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_job, __pyx_t_1) < 0) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/profiling/stat.pyx":15
 * from . import job
 * 
 * import math             # <<<<<<<<<<<<<<
 * try:
 * 	import matplotlib.pyplot as plt
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_math, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_math, __pyx_t_2) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/profiling/stat.pyx":16
 * 
 * import math
 * try:             # <<<<<<<<<<<<<<
 * 	import matplotlib.pyplot as plt
 * except ImportError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "networkit/profiling/stat.pyx":17
 * import math
 * try:
 * 	import matplotlib.pyplot as plt             # <<<<<<<<<<<<<<
 * except ImportError:
 * 	have_plt = False
 */
      __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 17, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_n_s__80);
      __Pyx_GIVEREF(__pyx_n_s__80);
      PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s__80);
      __pyx_t_1 = __Pyx_Import(__pyx_n_s_matplotlib_pyplot, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_plt, __pyx_t_1) < 0) __PYX_ERR(0, 17, __pyx_L2_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "networkit/profiling/stat.pyx":16
 * 
 * import math
 * try:             # <<<<<<<<<<<<<<
 * 	import matplotlib.pyplot as plt
 * except ImportError:
 */
    }

    /* "networkit/profiling/stat.pyx":21
 * 	have_plt = False
 * else:
 * 	have_plt = True             # <<<<<<<<<<<<<<
 * 
 * from ..support import MissingDependencyError
 */
    /*else:*/ {
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_have_plt, Py_True) < 0) __PYX_ERR(0, 21, __pyx_L4_except_error)
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L7_try_end;
    __pyx_L2_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "networkit/profiling/stat.pyx":18
 * try:
 * 	import matplotlib.pyplot as plt
 * except ImportError:             # <<<<<<<<<<<<<<
 * 	have_plt = False
 * else:
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ImportError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("networkit.profiling.stat", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_2, &__pyx_t_7) < 0) __PYX_ERR(0, 18, __pyx_L4_except_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_7);

      /* "networkit/profiling/stat.pyx":19
 * 	import matplotlib.pyplot as plt
 * except ImportError:
 * 	have_plt = False             # <<<<<<<<<<<<<<
 * else:
 * 	have_plt = True
 */
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_have_plt, Py_False) < 0) __PYX_ERR(0, 19, __pyx_L4_except_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L3_exception_handled;
    }
    goto __pyx_L4_except_error;
    __pyx_L4_except_error:;

    /* "networkit/profiling/stat.pyx":16
 * 
 * import math
 * try:             # <<<<<<<<<<<<<<
 * 	import matplotlib.pyplot as plt
 * except ImportError:
 */
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L3_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    __pyx_L7_try_end:;
  }

  /* "networkit/profiling/stat.pyx":23
 * 	have_plt = True
 * 
 * from ..support import MissingDependencyError             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/auxiliary/Parallel.hpp>" namespace "Aux::Parallel":
 */
  __pyx_t_7 = PyList_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_n_s_MissingDependencyError);
  __Pyx_GIVEREF(__pyx_n_s_MissingDependencyError);
  PyList_SET_ITEM(__pyx_t_7, 0, __pyx_n_s_MissingDependencyError);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_support, __pyx_t_7, 2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_MissingDependencyError); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MissingDependencyError, __pyx_t_7) < 0) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/profiling/stat.pyx":30
 * 	void sort[Iter, Comp](Iter begin, Iter end, Comp compare) nogil
 * 
 * def ranked(sample):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Given a list of numbers, this function computes the rank of each value
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9networkit_9profiling_4stat_1ranked, NULL, __pyx_n_s_networkit_profiling_stat); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ranked, __pyx_t_2) < 0) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/profiling/stat.pyx":61
 * 	return result
 * 
 * def sort2(sample):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Sorts a given list of numbers.
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9networkit_9profiling_4stat_3sort2, NULL, __pyx_n_s_networkit_profiling_stat); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sort2, __pyx_t_2) < 0) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/profiling/stat.pyx":70
 * 	return result
 * 
 * def sorted(sample):             # <<<<<<<<<<<<<<
 * 	"""	returns a sorted list of given numbers """
 * 	return sort2(sample)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9networkit_9profiling_4stat_5sorted, NULL, __pyx_n_s_networkit_profiling_stat); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sorted, __pyx_t_2) < 0) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/profiling/stat.pyx":74
 * 	return sort2(sample)
 * 
 * class Stat(job.Job):             # <<<<<<<<<<<<<<
 * 	""" statistical computation object """
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_job); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Job); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare(__pyx_t_7, __pyx_t_2, __pyx_n_s_Stat, __pyx_n_s_Stat, (PyObject *) NULL, __pyx_n_s_networkit_profiling_stat, __pyx_kp_s_statistical_computation_object); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "networkit/profiling/stat.pyx":77
 * 	""" statistical computation object """
 * 
 * 	def __init__(self, name, params):             # <<<<<<<<<<<<<<
 * 		""" constructor: see PlotJob and .run() """
 * 		job.Job.__init__(
 */
  __pyx_t_8 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9profiling_4stat_4Stat_1__init__, 0, __pyx_n_s_Stat___init, NULL, __pyx_n_s_networkit_profiling_stat, __pyx_d, ((PyObject *)__pyx_codeobj__88)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_init, __pyx_t_8) < 0) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "networkit/profiling/stat.pyx":86
 * 		self.__params = params
 * 
 * 	def run(self):             # <<<<<<<<<<<<<<
 * 		""" computation """
 * 		(sample, sampleSorted, sampleRanked, calculatePie) = self.__params
 */
  __pyx_t_8 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9profiling_4stat_4Stat_3run, 0, __pyx_n_s_Stat_run, NULL, __pyx_n_s_networkit_profiling_stat, __pyx_d, ((PyObject *)__pyx_codeobj__90)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 86, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_run, __pyx_t_8) < 0) __PYX_ERR(0, 86, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "networkit/profiling/stat.pyx":74
 * 	return sort2(sample)
 * 
 * class Stat(job.Job):             # <<<<<<<<<<<<<<
 * 	""" statistical computation object """
 * 
 */
  __pyx_t_8 = __Pyx_Py3ClassCreate(__pyx_t_7, __pyx_n_s_Stat, __pyx_t_2, __pyx_t_1, NULL, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Stat, __pyx_t_8) < 0) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/profiling/stat.pyx":474
 * 
 * 
 * class Correlation(job.Job):             # <<<<<<<<<<<<<<
 * 	""" correlation computation object """
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_job); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Job); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare(__pyx_t_7, __pyx_t_2, __pyx_n_s_Correlation, __pyx_n_s_Correlation, (PyObject *) NULL, __pyx_n_s_networkit_profiling_stat, __pyx_kp_s_correlation_computation_object); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "networkit/profiling/stat.pyx":477
 * 	""" correlation computation object """
 * 
 * 	def __init__(self, name, params):             # <<<<<<<<<<<<<<
 * 		""" constructor: see PlotJob and .run() """
 * 		job.Job.__init__(
 */
  __pyx_t_8 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9profiling_4stat_11Correlation_1__init__, 0, __pyx_n_s_Correlation___init, NULL, __pyx_n_s_networkit_profiling_stat, __pyx_d, ((PyObject *)__pyx_codeobj__92)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_init, __pyx_t_8) < 0) __PYX_ERR(0, 477, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "networkit/profiling/stat.pyx":487
 * 
 * 
 * 	def run(self):             # <<<<<<<<<<<<<<
 * 		""" computation """
 * 		(nameB, sample_1, sampleRanked_1, stat_1, sample_2, sampleRanked_2, stat_2) = self.__params
 */
  __pyx_t_8 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_9profiling_4stat_11Correlation_3run, 0, __pyx_n_s_Correlation_run, NULL, __pyx_n_s_networkit_profiling_stat, __pyx_d, ((PyObject *)__pyx_codeobj__94)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_run, __pyx_t_8) < 0) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "networkit/profiling/stat.pyx":474
 * 
 * 
 * class Correlation(job.Job):             # <<<<<<<<<<<<<<
 * 	""" correlation computation object """
 * 
 */
  __pyx_t_8 = __Pyx_Py3ClassCreate(__pyx_t_7, __pyx_n_s_Correlation, __pyx_t_2, __pyx_t_1, NULL, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Correlation, __pyx_t_8) < 0) __PYX_ERR(0, 474, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/profiling/stat.pyx":1
 * # distutils: language=c++             # <<<<<<<<<<<<<<
 * 
 * #
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_double")
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init networkit.profiling.stat", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init networkit.profiling.stat");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* None */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* pyobject_as_double */
static double __Pyx__PyObject_AsDouble(PyObject* obj) {
    PyObject* float_value;
#if !CYTHON_USE_TYPE_SLOTS
    float_value = PyNumber_Float(obj);  if ((0)) goto bad;
#else
    PyNumberMethods *nb = Py_TYPE(obj)->tp_as_number;
    if (likely(nb) && likely(nb->nb_float)) {
        float_value = nb->nb_float(obj);
        if (likely(float_value) && unlikely(!PyFloat_Check(float_value))) {
            PyErr_Format(PyExc_TypeError,
                "__float__ returned non-float (type %.200s)",
                Py_TYPE(float_value)->tp_name);
            Py_DECREF(float_value);
            goto bad;
        }
    } else if (PyUnicode_CheckExact(obj) || PyBytes_CheckExact(obj)) {
#if PY_MAJOR_VERSION >= 3
        float_value = PyFloat_FromString(obj);
#else
        float_value = PyFloat_FromString(obj, 0);
#endif
    } else {
        PyObject* args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        PyTuple_SET_ITEM(args, 0, obj);
        float_value = PyObject_Call((PyObject*)&PyFloat_Type, args, 0);
        PyTuple_SET_ITEM(args, 0, 0);
        Py_DECREF(args);
    }
#endif
    if (likely(float_value)) {
        double value = PyFloat_AS_DOUBLE(float_value);
        Py_DECREF(float_value);
        return value;
    }
bad:
    return (double)-1;
}

/* PyIntCompare */
static CYTHON_INLINE PyObject* __Pyx_PyInt_NeObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_FALSE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a != b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size != 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_TRUE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_TRUE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal != 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a != (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_NE));
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
#if PY_MAJOR_VERSION < 3 || CYTHON_USE_PYLONG_INTERNALS
#define __Pyx_PyInt_TrueDivideObjC_ZeroDivisionError(operand)\
    if (unlikely(zerodivision_check && ((operand) == 0))) {\
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division by zero");\
        return NULL;\
    }
#endif
static PyObject* __Pyx_PyInt_TrueDivideObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
            __Pyx_PyInt_TrueDivideObjC_ZeroDivisionError(b)
            if (8 * sizeof(long) <= 53 || likely(labs(a) <= ((PY_LONG_LONG)1 << 53))) {
                return PyFloat_FromDouble((double)a / (double)b);
            }
            return PyInt_Type.tp_as_number->nb_true_divide(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT && 1 * PyLong_SHIFT < 53) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT && 1 * PyLong_SHIFT < 53) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT && 2 * PyLong_SHIFT < 53) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT && 2 * PyLong_SHIFT < 53) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT && 3 * PyLong_SHIFT < 53) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT && 3 * PyLong_SHIFT < 53) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_true_divide(op1, op2);
            }
        }
                __Pyx_PyInt_TrueDivideObjC_ZeroDivisionError(b)
                if ((8 * sizeof(long) <= 53 || likely(labs(a) <= ((PY_LONG_LONG)1 << 53)))
                        || __Pyx_sst_abs(size) <= 52 / PyLong_SHIFT) {
                    return PyFloat_FromDouble((double)a / (double)b);
                }
                return PyLong_Type.tp_as_number->nb_true_divide(op1, op2);
            return PyLong_FromLong(x);
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            if (unlikely(zerodivision_check && b == 0)) {
                PyErr_SetString(PyExc_ZeroDivisionError, "float division by zero");
                return NULL;
            }
            PyFPE_START_PROTECT("divide", return NULL)
            result = ((double)a) / (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceTrueDivide : PyNumber_TrueDivide)(op1, op2);
}
#endif

/* PyFloatBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_AddObjC(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check) {
    const double b = floatval;
    double a, result;
    (void)inplace;
    (void)zerodivision_check;
    if (likely(PyFloat_CheckExact(op1))) {
        a = PyFloat_AS_DOUBLE(op1);
        
    } else
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        a = (double) PyInt_AS_LONG(op1);
        
    } else
    #endif
    if (likely(PyLong_CheckExact(op1))) {
        #if CYTHON_USE_PYLONG_INTERNALS
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        switch (size) {
            case  0: a = 0.0; break;
            case -1: a = -(double) digits[0]; break;
            case  1: a = (double) digits[0]; break;
            case -2:
            case 2:
                if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (1 * PyLong_SHIFT < 53))) {
                    a = (double) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -2)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -3:
            case 3:
                if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -3)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -4:
            case 4:
                if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (4 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -4)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            default:
        #else
        {
        #endif
            a = PyLong_AsDouble(op1);
            if (unlikely(a == -1.0 && PyErr_Occurred())) return NULL;
            
        }
    } else {
        return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
    }
        
        PyFPE_START_PROTECT("add", return NULL)
        result = a + b;
        PyFPE_END_PROTECT(result)
        return PyFloat_FromDouble(result);
}
#endif

/* SetItemInt */
  static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o)))
#else
    if (is_list || PySequence_Check(o))
#endif
    {
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* py_abs */
  #if CYTHON_USE_PYLONG_INTERNALS
static PyObject *__Pyx_PyLong_AbsNeg(PyObject *n) {
    if (likely(Py_SIZE(n) == -1)) {
        return PyLong_FromLong(((PyLongObject*)n)->ob_digit[0]);
    }
#if CYTHON_COMPILING_IN_CPYTHON
    {
        PyObject *copy = _PyLong_Copy((PyLongObject*)n);
        if (likely(copy)) {
            __Pyx_SET_SIZE(copy, -Py_SIZE(copy));
        }
        return copy;
    }
#else
    return PyNumber_Negative(n);
#endif
}
#endif

/* PyFloatBinop */
  #if !CYTHON_COMPILING_IN_PYPY
#define __Pyx_PyFloat_TrueDivideCObj_ZeroDivisionError(operand) if (unlikely(zerodivision_check && ((operand) == 0))) {\
    PyErr_SetString(PyExc_ZeroDivisionError, "float division by zero");\
    return NULL;\
}
static PyObject* __Pyx_PyFloat_TrueDivideCObj(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check) {
    const double a = floatval;
    double b, result;
    (void)inplace;
    (void)zerodivision_check;
    if (likely(PyFloat_CheckExact(op2))) {
        b = PyFloat_AS_DOUBLE(op2);
        __Pyx_PyFloat_TrueDivideCObj_ZeroDivisionError(b)
    } else
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op2))) {
        b = (double) PyInt_AS_LONG(op2);
        __Pyx_PyFloat_TrueDivideCObj_ZeroDivisionError(b)
    } else
    #endif
    if (likely(PyLong_CheckExact(op2))) {
        #if CYTHON_USE_PYLONG_INTERNALS
        const digit* digits = ((PyLongObject*)op2)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op2);
        switch (size) {
            case  0: __Pyx_PyFloat_TrueDivideCObj_ZeroDivisionError(0) break;
            case -1: b = -(double) digits[0]; break;
            case  1: b = (double) digits[0]; break;
            case -2:
            case 2:
                if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (1 * PyLong_SHIFT < 53))) {
                    b = (double) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53) || (b < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -2)
                            b = -b;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -3:
            case 3:
                if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53))) {
                    b = (double) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53) || (b < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -3)
                            b = -b;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -4:
            case 4:
                if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53))) {
                    b = (double) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (4 * PyLong_SHIFT < 53) || (b < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -4)
                            b = -b;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            default:
        #else
        {
        #endif
            b = PyLong_AsDouble(op2);
            if (unlikely(b == -1.0 && PyErr_Occurred())) return NULL;
            __Pyx_PyFloat_TrueDivideCObj_ZeroDivisionError(b)
        }
    } else {
        return (inplace ? PyNumber_InPlaceTrueDivide : PyNumber_TrueDivide)(op1, op2);
    }
        __Pyx_PyFloat_TrueDivideCObj_ZeroDivisionError(b)
        PyFPE_START_PROTECT("divide", return NULL)
        result = a / b;
        PyFPE_END_PROTECT(result)
        return PyFloat_FromDouble(result);
}
#endif

/* PyFloatBinop */
    #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_AddCObj(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check) {
    const double a = floatval;
    double b, result;
    (void)inplace;
    (void)zerodivision_check;
    if (likely(PyFloat_CheckExact(op2))) {
        b = PyFloat_AS_DOUBLE(op2);
        
    } else
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op2))) {
        b = (double) PyInt_AS_LONG(op2);
        
    } else
    #endif
    if (likely(PyLong_CheckExact(op2))) {
        #if CYTHON_USE_PYLONG_INTERNALS
        const digit* digits = ((PyLongObject*)op2)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op2);
        switch (size) {
            case  0: b = 0.0; break;
            case -1: b = -(double) digits[0]; break;
            case  1: b = (double) digits[0]; break;
            case -2:
            case 2:
                if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (1 * PyLong_SHIFT < 53))) {
                    b = (double) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53) || (b < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -2)
                            b = -b;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -3:
            case 3:
                if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53))) {
                    b = (double) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53) || (b < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -3)
                            b = -b;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -4:
            case 4:
                if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53))) {
                    b = (double) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (4 * PyLong_SHIFT < 53) || (b < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -4)
                            b = -b;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            default:
        #else
        {
        #endif
            b = PyLong_AsDouble(op2);
            if (unlikely(b == -1.0 && PyErr_Occurred())) return NULL;
            
        }
    } else {
        return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
    }
        
        PyFPE_START_PROTECT("add", return NULL)
        result = a + b;
        PyFPE_END_PROTECT(result)
        return PyFloat_FromDouble(result);
}
#endif

/* PyIntBinop */
      #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractCObj(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op2))) {
        const long a = intval;
        long x;
        long b = PyInt_AS_LONG(op2);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op2))) {
        const long a = intval;
        long b, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG lla = intval;
        PY_LONG_LONG llb, llx;
#endif
        const digit* digits = ((PyLongObject*)op2)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op2);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            b = likely(size) ? digits[0] : 0;
            if (size == -1) b = -b;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        b = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        b = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        b = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        b = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        b = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        b = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op2)) {
        const long a = intval;
        double b = PyFloat_AS_DOUBLE(op2);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* PyIntBinop */
      #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddCObj(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op2))) {
        const long a = intval;
        long x;
        long b = PyInt_AS_LONG(op2);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op2))) {
        const long a = intval;
        long b, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG lla = intval;
        PY_LONG_LONG llb, llx;
#endif
        const digit* digits = ((PyLongObject*)op2)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op2);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            b = likely(size) ? digits[0] : 0;
            if (size == -1) b = -b;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        b = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        b = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        b = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        b = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        b = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        b = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op2)) {
        const long a = intval;
        double b = PyFloat_AS_DOUBLE(op2);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* PyIntCompare */
      static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_FALSE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_FALSE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a == (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* RaiseTooManyValuesToUnpack */
      static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
      static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
      static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
      static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* DictGetItem */
      #if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* FetchCommonType */
      static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunctionShared */
      #include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    if (unlikely(op == NULL))
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
#if PY_MAJOR_VERSION < 3
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
#endif
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
      static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* PyErrFetchRestore */
      #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
      #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyObjectCallNoArg */
      #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyObject_GenericGetAttrNoDict */
      #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* Import */
      static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
      static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* PyErrExceptionMatches */
      #if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* CalculateMetaclass */
      static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* Py3ClassCreate */
      static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* CLineInTraceback */
      #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
      static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
      #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
      #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
      static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value) {
    const uint64_t neg_one = (uint64_t) ((uint64_t) 0 - (uint64_t) 1), const_zero = (uint64_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint64_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint64_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint64_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(uint64_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint64_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint64_t),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
      static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
      static CYTHON_INLINE uint64_t __Pyx_PyInt_As_uint64_t(PyObject *x) {
    const uint64_t neg_one = (uint64_t) ((uint64_t) 0 - (uint64_t) 1), const_zero = (uint64_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(uint64_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(uint64_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (uint64_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint64_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(uint64_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(uint64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) >= 2 * PyLong_SHIFT) {
                            return (uint64_t) (((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) >= 3 * PyLong_SHIFT) {
                            return (uint64_t) (((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) >= 4 * PyLong_SHIFT) {
                            return (uint64_t) (((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (uint64_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(uint64_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint64_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint64_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(uint64_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(uint64_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(uint64_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint64_t) (((uint64_t)-1)*(((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(uint64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint64_t) ((((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint64_t) (((uint64_t)-1)*(((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint64_t) ((((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint64_t) (((uint64_t)-1)*(((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint64_t) ((((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(uint64_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint64_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            uint64_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (uint64_t) -1;
        }
    } else {
        uint64_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (uint64_t) -1;
        val = __Pyx_PyInt_As_uint64_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to uint64_t");
    return (uint64_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to uint64_t");
    return (uint64_t) -1;
}

/* CIntFromPy */
      static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) ((size_t) 0 - (size_t) 1), const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
      static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
      static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* FastTypeChecks */
      #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
      static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
      static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
