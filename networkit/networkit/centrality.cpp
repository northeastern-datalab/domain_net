/* Generated by Cython 0.29.21 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "networkit/cython_helper.h"
        ],
        "include_dirs": [
            "./networkit"
        ],
        "language": "c++",
        "name": "networkit.centrality",
        "sources": [
            "networkit/centrality.pyx"
        ]
    },
    "module_name": "networkit.centrality"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_21"
#define CYTHON_HEX_VERSION 0x001D15F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__networkit__centrality
#define __PYX_HAVE_API__networkit__centrality
/* Early includes */
#include <stdint.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <utility>

    #if __cplusplus > 199711L
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <string.h>
#include <string>
#include <networkit/base/Algorithm.hpp>
#include <networkit/dynamics/GraphEvent.hpp>
#include <unordered_set>
#include <algorithm>
#include "cython_helper.h"
#include <networkit/Globals.hpp>
#include <networkit/graph/Graph.hpp>
#include <networkit/graph/SpanningForest.hpp>
#include <networkit/graph/RandomMaximumSpanningForest.hpp>
#include <networkit/graph/UnionMaximumSpanningForest.hpp>
#include <map>
#include <set>
#include <networkit/structures/Cover.hpp>
#include <networkit/structures/Partition.hpp>
#include <networkit/centrality/Centrality.hpp>
#include <networkit/centrality/Betweenness.hpp>
#include <networkit/centrality/ApproxBetweenness.hpp>
#include <networkit/centrality/EstimateBetweenness.hpp>
#include <networkit/centrality/KadabraBetweenness.hpp>
#include <networkit/centrality/DynBetweenness.hpp>
#include <networkit/centrality/DynApproxBetweenness.hpp>
#include <networkit/centrality/DynBetweennessOneNode.hpp>
#include <networkit/centrality/Closeness.hpp>
#include <networkit/centrality/ApproxCloseness.hpp>
#include <networkit/centrality/DegreeCentrality.hpp>
#include <networkit/centrality/HarmonicCloseness.hpp>
#include <networkit/centrality/TopCloseness.hpp>
#include <networkit/centrality/TopHarmonicCloseness.hpp>
#include <networkit/centrality/DynTopHarmonicCloseness.hpp>
#include <networkit/centrality/LocalPartitionCoverage.hpp>
#include <networkit/centrality/GroupDegree.hpp>
#include <networkit/centrality/GedWalk.hpp>
#include <networkit/centrality/ApproxGroupBetweenness.hpp>
#include <networkit/centrality/GroupCloseness.hpp>
#include <networkit/centrality/KPathCentrality.hpp>
#include <networkit/centrality/KatzCentrality.hpp>
#include <networkit/centrality/DynKatzCentrality.hpp>
#include <networkit/centrality/LocalClusteringCoefficient.hpp>
#include <networkit/centrality/Sfigality.hpp>
#include <networkit/centrality/PermanenceCentrality.hpp>
#include <networkit/centrality/LaplacianCentrality.hpp>
#include <networkit/centrality/CoreDecomposition.hpp>
#include <networkit/centrality/EigenvectorCentrality.hpp>
#include <networkit/centrality/PageRank.hpp>
#include <networkit/centrality/SpanningEdgeCentrality.hpp>
#include <networkit/centrality/ApproxElectricalCloseness.hpp>
#include <networkit/centrality/ApproxSpanningEdge.hpp>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "networkit/centrality.pyx",
  "stringsource",
  "networkit/dynamics.pxd",
  "networkit/graph.pxd",
  "networkit/structures.pxd",
};
/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()

/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif


/* "dynamics.pxd":7
 * from libcpp.utility cimport pair
 * 
 * ctypedef uint64_t count             # <<<<<<<<<<<<<<
 * ctypedef uint64_t index
 * ctypedef index node
 */
typedef uint64_t __pyx_t_9networkit_8dynamics_count;

/* "dynamics.pxd":8
 * 
 * ctypedef uint64_t count
 * ctypedef uint64_t index             # <<<<<<<<<<<<<<
 * ctypedef index node
 * ctypedef double edgeweight
 */
typedef uint64_t __pyx_t_9networkit_8dynamics_index;

/* "dynamics.pxd":9
 * ctypedef uint64_t count
 * ctypedef uint64_t index
 * ctypedef index node             # <<<<<<<<<<<<<<
 * ctypedef double edgeweight
 * 
 */
typedef __pyx_t_9networkit_8dynamics_index __pyx_t_9networkit_8dynamics_node;

/* "dynamics.pxd":10
 * ctypedef uint64_t index
 * ctypedef index node
 * ctypedef double edgeweight             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/dynamics/GraphEvent.hpp>" namespace "NetworKit::GraphEvent::Type":
 */
typedef double __pyx_t_9networkit_8dynamics_edgeweight;

/* "graph.pxd":13
 * from libcpp.unordered_set cimport unordered_set
 * 
 * ctypedef uint64_t edgeid             # <<<<<<<<<<<<<<
 * ctypedef uint64_t index
 * ctypedef uint64_t count
 */
typedef uint64_t __pyx_t_9networkit_5graph_edgeid;

/* "graph.pxd":14
 * 
 * ctypedef uint64_t edgeid
 * ctypedef uint64_t index             # <<<<<<<<<<<<<<
 * ctypedef uint64_t count
 * ctypedef index node
 */
typedef uint64_t __pyx_t_9networkit_5graph_index;

/* "graph.pxd":15
 * ctypedef uint64_t edgeid
 * ctypedef uint64_t index
 * ctypedef uint64_t count             # <<<<<<<<<<<<<<
 * ctypedef index node
 * ctypedef double edgeweight
 */
typedef uint64_t __pyx_t_9networkit_5graph_count;

/* "graph.pxd":16
 * ctypedef uint64_t index
 * ctypedef uint64_t count
 * ctypedef index node             # <<<<<<<<<<<<<<
 * ctypedef double edgeweight
 * 
 */
typedef __pyx_t_9networkit_5graph_index __pyx_t_9networkit_5graph_node;

/* "graph.pxd":17
 * ctypedef uint64_t count
 * ctypedef index node
 * ctypedef double edgeweight             # <<<<<<<<<<<<<<
 * 
 * from .base cimport _Algorithm
 */
typedef double __pyx_t_9networkit_5graph_edgeweight;

/* "structures.pxd":8
 * from libcpp.string cimport string
 * 
 * ctypedef uint64_t count             # <<<<<<<<<<<<<<
 * ctypedef uint64_t index
 * 
 */
typedef uint64_t __pyx_t_9networkit_10structures_count;

/* "structures.pxd":9
 * 
 * ctypedef uint64_t count
 * ctypedef uint64_t index             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "cython_helper.h":
 */
typedef uint64_t __pyx_t_9networkit_10structures_index;

/* "networkit/centrality.pyx":8
 * from libcpp cimport bool as bool_t
 * 
 * ctypedef uint64_t count             # <<<<<<<<<<<<<<
 * ctypedef uint64_t index
 * ctypedef index node
 */
typedef uint64_t __pyx_t_9networkit_10centrality_count;

/* "networkit/centrality.pyx":9
 * 
 * ctypedef uint64_t count
 * ctypedef uint64_t index             # <<<<<<<<<<<<<<
 * ctypedef index node
 * ctypedef double edgeweight
 */
typedef uint64_t __pyx_t_9networkit_10centrality_index;

/* "networkit/centrality.pyx":10
 * ctypedef uint64_t count
 * ctypedef uint64_t index
 * ctypedef index node             # <<<<<<<<<<<<<<
 * ctypedef double edgeweight
 * 
 */
typedef __pyx_t_9networkit_10centrality_index __pyx_t_9networkit_10centrality_node;

/* "networkit/centrality.pyx":11
 * ctypedef uint64_t index
 * ctypedef index node
 * ctypedef double edgeweight             # <<<<<<<<<<<<<<
 * 
 * import math
 */
typedef double __pyx_t_9networkit_10centrality_edgeweight;

/*--- Type declarations ---*/
struct __pyx_obj_9networkit_4base_Algorithm;
struct __pyx_obj_9networkit_8dynamics_GraphEvent;
struct __pyx_obj_9networkit_5graph_Graph;
struct __pyx_obj_9networkit_5graph_RandomMaximumSpanningForest;
struct __pyx_obj_9networkit_5graph_UnionMaximumSpanningForest;
struct __pyx_obj_9networkit_10structures_Cover;
struct __pyx_obj_9networkit_10structures_Partition;
struct __pyx_obj_9networkit_10centrality_Centrality;
struct __pyx_obj_9networkit_10centrality_Betweenness;
struct __pyx_obj_9networkit_10centrality_ApproxBetweenness;
struct __pyx_obj_9networkit_10centrality_EstimateBetweenness;
struct __pyx_obj_9networkit_10centrality_KadabraBetweenness;
struct __pyx_obj_9networkit_10centrality_DynBetweenness;
struct __pyx_obj_9networkit_10centrality_DynApproxBetweenness;
struct __pyx_obj_9networkit_10centrality_DynBetweennessOneNode;
struct __pyx_obj_9networkit_10centrality_Closeness;
struct __pyx_obj_9networkit_10centrality_ApproxCloseness;
struct __pyx_obj_9networkit_10centrality_DegreeCentrality;
struct __pyx_obj_9networkit_10centrality_HarmonicCloseness;
struct __pyx_obj_9networkit_10centrality_TopCloseness;
struct __pyx_obj_9networkit_10centrality_TopHarmonicCloseness;
struct __pyx_obj_9networkit_10centrality_DynTopHarmonicCloseness;
struct __pyx_obj_9networkit_10centrality_LocalPartitionCoverage;
struct __pyx_obj_9networkit_10centrality_GroupDegree;
struct __pyx_obj_9networkit_10centrality_GedWalk;
struct __pyx_obj_9networkit_10centrality_ApproxGroupBetweenness;
struct __pyx_obj_9networkit_10centrality_GroupCloseness;
struct __pyx_obj_9networkit_10centrality_KPathCentrality;
struct __pyx_obj_9networkit_10centrality_KatzCentrality;
struct __pyx_obj_9networkit_10centrality_DynKatzCentrality;
struct __pyx_obj_9networkit_10centrality_LocalClusteringCoefficient;
struct __pyx_obj_9networkit_10centrality_Sfigality;
struct __pyx_obj_9networkit_10centrality_PermanenceCentrality;
struct __pyx_obj_9networkit_10centrality_LaplacianCentrality;
struct __pyx_obj_9networkit_10centrality_CoreDecomposition;
struct __pyx_obj_9networkit_10centrality_EigenvectorCentrality;
struct __pyx_obj_9networkit_10centrality_PageRank;
struct __pyx_obj_9networkit_10centrality_SpanningEdgeCentrality;
struct __pyx_obj_9networkit_10centrality_ApproxElectricalCloseness;
struct __pyx_obj_9networkit_10centrality_ApproxSpanningEdge;

/* "base.pxd":13
 * 		bool_t isParallel() except +
 * 
 * cdef class Algorithm:             # <<<<<<<<<<<<<<
 * 	cdef _Algorithm *_this
 * 
 */
struct __pyx_obj_9networkit_4base_Algorithm {
  PyObject_HEAD
  NetworKit::Algorithm *_this;
};


/* "dynamics.pxd":34
 * 		string toString() except +
 * 
 * cdef class GraphEvent:             # <<<<<<<<<<<<<<
 * 	cdef _GraphEvent _this
 * 
 */
struct __pyx_obj_9networkit_8dynamics_GraphEvent {
  PyObject_HEAD
  NetworKit::GraphEvent _this;
};


/* "graph.pxd":150
 * 		_NeighborIterator end() except +
 * 
 * cdef class Graph:             # <<<<<<<<<<<<<<
 * 	cdef _Graph _this
 * 	cdef setThis(self, _Graph& other)
 */
struct __pyx_obj_9networkit_5graph_Graph {
  PyObject_HEAD
  struct __pyx_vtabstruct_9networkit_5graph_Graph *__pyx_vtab;
  NetworKit::Graph _this;
};


/* "graph.pxd":172
 * 		bool_t inMSF(node u, node v) except +
 * 
 * cdef class RandomMaximumSpanningForest(Algorithm):             # <<<<<<<<<<<<<<
 * 	cdef vector[double] _attribute
 * 	cdef Graph _G
 */
struct __pyx_obj_9networkit_5graph_RandomMaximumSpanningForest {
  struct __pyx_obj_9networkit_4base_Algorithm __pyx_base;
  std::vector<double>  _attribute;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
};


/* "graph.pxd":187
 * 		bool_t inUMSF(node u, node v) except +
 * 
 * cdef class UnionMaximumSpanningForest(Algorithm):             # <<<<<<<<<<<<<<
 * 	cdef Graph _G
 * 
 */
struct __pyx_obj_9networkit_5graph_UnionMaximumSpanningForest {
  struct __pyx_obj_9networkit_4base_Algorithm __pyx_base;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
};


/* "structures.pxd":46
 * 		set[index] getSubsetIds() except +
 * 
 * cdef class Cover:             # <<<<<<<<<<<<<<
 * 	cdef _Cover _this
 * 	cdef setThis(self, _Cover& other)
 */
struct __pyx_obj_9networkit_10structures_Cover {
  PyObject_HEAD
  struct __pyx_vtabstruct_9networkit_10structures_Cover *__pyx_vtab;
  NetworKit::Cover _this;
};


/* "structures.pxd":82
 * 		index operator[](index) except +
 * 
 * cdef class Partition:             # <<<<<<<<<<<<<<
 * 	cdef _Partition _this
 * 	cdef setThis(self, _Partition& other)
 */
struct __pyx_obj_9networkit_10structures_Partition {
  PyObject_HEAD
  struct __pyx_vtabstruct_9networkit_10structures_Partition *__pyx_vtab;
  NetworKit::Partition _this;
};


/* "networkit/centrality.pyx":31
 * 		double centralization() except +
 * 
 * cdef class Centrality(Algorithm):             # <<<<<<<<<<<<<<
 * 	""" Abstract base class for centrality measures"""
 * 
 */
struct __pyx_obj_9networkit_10centrality_Centrality {
  struct __pyx_obj_9networkit_4base_Algorithm __pyx_base;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
};


/* "networkit/centrality.pyx":105
 * 		vector[double] edgeScores() except +
 * 
 * cdef class Betweenness(Centrality):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Betweenness(G, normalized=False, computeEdgeCentrality=False)
 */
struct __pyx_obj_9networkit_10centrality_Betweenness {
  struct __pyx_obj_9networkit_10centrality_Centrality __pyx_base;
};


/* "networkit/centrality.pyx":144
 * 		count numberOfSamples() except +
 * 
 * cdef class ApproxBetweenness(Centrality):             # <<<<<<<<<<<<<<
 * 	""" Approximation of betweenness centrality according to algorithm described in
 *  	Matteo Riondato and Evgenios M. Kornaropoulos: Fast Approximation of Betweenness Centrality through Sampling
 */
struct __pyx_obj_9networkit_10centrality_ApproxBetweenness {
  struct __pyx_obj_9networkit_10centrality_Centrality __pyx_base;
};


/* "networkit/centrality.pyx":184
 * 		_EstimateBetweenness(_Graph, count, bool_t, bool_t, unsigned, vector[size_t] sources_vec, vector[size_t] targets_vec) except +
 * 
 * cdef class EstimateBetweenness(Centrality):             # <<<<<<<<<<<<<<
 * 	""" Estimation of betweenness centrality according to algorithm described in
 * 	Sanders, Geisberger, Schultes: Better Approximation of Betweenness Centrality
 */
struct __pyx_obj_9networkit_10centrality_EstimateBetweenness {
  struct __pyx_obj_9networkit_10centrality_Centrality __pyx_base;
};


/* "networkit/centrality.pyx":251
 * 		double getOmega() except +
 * 
 * cdef class KadabraBetweenness(Algorithm):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Approximation of the betweenness centrality and computation of the top-k
 */
struct __pyx_obj_9networkit_10centrality_KadabraBetweenness {
  struct __pyx_obj_9networkit_4base_Algorithm __pyx_base;
};


/* "networkit/centrality.pyx":379
 * 		double score(node) except +
 * 
 * cdef class DynBetweenness(Algorithm):             # <<<<<<<<<<<<<<
 * 	""" The algorithm computes the betweenness centrality of all nodes
 * 	and updates them after an edge insertion.
 */
struct __pyx_obj_9networkit_10centrality_DynBetweenness {
  struct __pyx_obj_9networkit_4base_Algorithm __pyx_base;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
};


/* "networkit/centrality.pyx":464
 * 		count getNumberOfSamples() except +
 * 
 * cdef class DynApproxBetweenness(Algorithm):             # <<<<<<<<<<<<<<
 * 	""" The algorithm approximates the betweenness of all vertices so that the scores are
 * 	within an additive error @a epsilon with probability at least (1- @a delta).
 */
struct __pyx_obj_9networkit_10centrality_DynApproxBetweenness {
  struct __pyx_obj_9networkit_4base_Algorithm __pyx_base;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
};


/* "networkit/centrality.pyx":571
 * 		double getbcx() except +
 * 
 * cdef class DynBetweennessOneNode:             # <<<<<<<<<<<<<<
 * 	""" Dynamic exact algorithm for updating the betweenness of a specific node
 * 
 */
struct __pyx_obj_9networkit_10centrality_DynBetweennessOneNode {
  PyObject_HEAD
  NetworKit::DynBetweennessOneNode *_this;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
};


/* "networkit/centrality.pyx":660
 * 		_Closeness(_Graph, bool, bool) except +
 * 
 * cdef class Closeness(Centrality):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Closeness(G, normalized, bool checkConnectdedness)
 */
struct __pyx_obj_9networkit_10centrality_Closeness {
  struct __pyx_obj_9networkit_10centrality_Centrality __pyx_base;
};


/* "networkit/centrality.pyx":712
 * 		vector[double] getSquareErrorEstimates() except +
 * 
 * cdef class ApproxCloseness(Centrality):             # <<<<<<<<<<<<<<
 * 	""" Approximation of closeness centrality according to algorithm described in
 *   	Cohen et al., Computing Classic Closeness Centrality, at Scale.
 */
struct __pyx_obj_9networkit_10centrality_ApproxCloseness {
  struct __pyx_obj_9networkit_10centrality_Centrality __pyx_base;
};


/* "networkit/centrality.pyx":761
 * 		_DegreeCentrality(_Graph, bool_t normalized, bool_t outdeg, bool_t ignoreSelfLoops) except +
 * 
 * cdef class DegreeCentrality(Centrality):             # <<<<<<<<<<<<<<
 * 	""" Node centrality index which ranks nodes by their degree.
 * 	Optional normalization by maximum degree. The run() method runs in O(m) time, where m is the number of
 */
struct __pyx_obj_9networkit_10centrality_DegreeCentrality {
  struct __pyx_obj_9networkit_10centrality_Centrality __pyx_base;
};


/* "networkit/centrality.pyx":792
 * 		_HarmonicCloseness(_Graph, bool_t) except +
 * 
 * cdef class HarmonicCloseness(Centrality):             # <<<<<<<<<<<<<<
 * 	"""
 * 	HarmonicCloseness(G, normalized=True)
 */
struct __pyx_obj_9networkit_10centrality_HarmonicCloseness {
  struct __pyx_obj_9networkit_10centrality_Centrality __pyx_base;
};


/* "networkit/centrality.pyx":828
 * 
 * 
 * cdef class TopCloseness(Algorithm):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Finds the top k nodes with highest closeness centrality faster than computing it for all nodes, based on "Computing Top-k Closeness Centrality Faster in Unweighted Graphs", Bergamini et al., ALENEX16.
 */
struct __pyx_obj_9networkit_10centrality_TopCloseness {
  struct __pyx_obj_9networkit_4base_Algorithm __pyx_base;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
};


/* "networkit/centrality.pyx":894
 * 
 * 
 * cdef class TopHarmonicCloseness(Algorithm):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Finds the top k nodes with highest harmonic closeness centrality faster
 */
struct __pyx_obj_9networkit_10centrality_TopHarmonicCloseness {
  struct __pyx_obj_9networkit_4base_Algorithm __pyx_base;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
};


/* "networkit/centrality.pyx":979
 * 		void updateBatch(vector[_GraphEvent]) except +
 * 
 * cdef class DynTopHarmonicCloseness(Algorithm):             # <<<<<<<<<<<<<<
 * 	""" Finds the top k nodes with highest harmonic closeness centrality faster
 * 	than computing it for all nodes and updates them after a single or multiple
 */
struct __pyx_obj_9networkit_10centrality_DynTopHarmonicCloseness {
  struct __pyx_obj_9networkit_4base_Algorithm __pyx_base;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
};


/* "networkit/centrality.pyx":1085
 * 		_LocalPartitionCoverage(_Graph, _Partition) except +
 * 
 * cdef class LocalPartitionCoverage(Centrality):             # <<<<<<<<<<<<<<
 * 	"""
 * 	The local partition coverage is the amount of neighbors of a node u that are in the same partition as u.
 */
struct __pyx_obj_9networkit_10centrality_LocalPartitionCoverage {
  struct __pyx_obj_9networkit_10centrality_Centrality __pyx_base;
  struct __pyx_obj_9networkit_10structures_Partition *_P;
};


/* "networkit/centrality.pyx":1114
 * 		count scoreOfGroup(vector[node]) except +
 * 
 * cdef class GroupDegree(Algorithm):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Finds the group with the highest group degree centrality according to the
 */
struct __pyx_obj_9networkit_10centrality_GroupDegree {
  struct __pyx_obj_9networkit_4base_Algorithm __pyx_base;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
};


/* "networkit/centrality.pyx":1212
 * 		double scoreOfGroup[InputIt](InputIt first, InputIt last, double epsilon) except +
 * 
 * cdef class GedWalk(Algorithm):             # <<<<<<<<<<<<<<
 * 	cdef Graph _G
 * 
 */
struct __pyx_obj_9networkit_10centrality_GedWalk {
  struct __pyx_obj_9networkit_4base_Algorithm __pyx_base;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
};


/* "networkit/centrality.pyx":1303
 * 		count scoreOfGroup(vector[node]) except +
 * 
 * cdef class ApproxGroupBetweenness(Algorithm):             # <<<<<<<<<<<<<<
 * 	"""
 * 	ApproxGroupBetweenness(G, groupSize, epsilon)
 */
struct __pyx_obj_9networkit_10centrality_ApproxGroupBetweenness {
  struct __pyx_obj_9networkit_4base_Algorithm __pyx_base;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
};


/* "networkit/centrality.pyx":1361
 * 			double scoreOfGroup(vector[node]) except +
 * 
 * cdef class GroupCloseness(Algorithm):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Finds the group of nodes with highest (group) closeness centrality. The algorithm is the one proposed in Bergamini et al., ALENEX 2018 and finds a solution that is a (1-1/e)-approximation of the optimum.
 */
struct __pyx_obj_9networkit_10centrality_GroupCloseness {
  struct __pyx_obj_9networkit_4base_Algorithm __pyx_base;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
};


/* "networkit/centrality.pyx":1422
 * 		_KPathCentrality(_Graph, double, count) except +
 * 
 * cdef class KPathCentrality(Centrality):             # <<<<<<<<<<<<<<
 * 	"""
 * 	KPathCentrality(G, alpha=0.2, k=0)
 */
struct __pyx_obj_9networkit_10centrality_KPathCentrality {
  struct __pyx_obj_9networkit_10centrality_Centrality __pyx_base;
};


/* "networkit/centrality.pyx":1459
 * 		_EdgeDirection edgeDirection
 * 
 * cdef class KatzCentrality(Centrality):             # <<<<<<<<<<<<<<
 * 	"""
 * 	KatzCentrality(G, alpha=0, beta=0.1, tol=1e-8)
 */
struct __pyx_obj_9networkit_10centrality_KatzCentrality {
  struct __pyx_obj_9networkit_10centrality_Centrality __pyx_base;
};


/* "networkit/centrality.pyx":1503
 * 		bool_t areDistinguished(node, node) except +
 * 
 * cdef class DynKatzCentrality(Centrality):             # <<<<<<<<<<<<<<
 * 	""" Finds the top-k nodes with highest Katz centrality.
 * 
 */
struct __pyx_obj_9networkit_10centrality_DynKatzCentrality {
  struct __pyx_obj_9networkit_10centrality_Centrality __pyx_base;
};


/* "networkit/centrality.pyx":1536
 * 		_LocalClusteringCoefficient(_Graph, bool_t) except +
 * 
 * cdef class LocalClusteringCoefficient(Centrality):             # <<<<<<<<<<<<<<
 * 	"""
 * 	LocalClusteringCoefficient(G, turbo=False)
 */
struct __pyx_obj_9networkit_10centrality_LocalClusteringCoefficient {
  struct __pyx_obj_9networkit_10centrality_Centrality __pyx_base;
};


/* "networkit/centrality.pyx":1571
 * 		_Sfigality(_Graph) except +
 * 
 * cdef class Sfigality(Centrality):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Sfigality is a new type of node centrality measures that is high if neighboring nodes have a higher degree, e.g. in social networks, if your friends have more friends than you. Formally:
 */
struct __pyx_obj_9networkit_10centrality_Sfigality {
  struct __pyx_obj_9networkit_10centrality_Centrality __pyx_base;
};


/* "networkit/centrality.pyx":1594
 * 		double getPermanence(node u) except +
 * 
 * cdef class PermanenceCentrality(Algorithm):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Permanence centrality
 */
struct __pyx_obj_9networkit_10centrality_PermanenceCentrality {
  struct __pyx_obj_9networkit_4base_Algorithm __pyx_base;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
  struct __pyx_obj_9networkit_10structures_Partition *_P;
};


/* "networkit/centrality.pyx":1628
 * 		_LaplacianCentrality(_Graph, bool_t) except +
 * 
 * cdef class LaplacianCentrality(Centrality):             # <<<<<<<<<<<<<<
 * 	""" Computes the Laplacian centrality of the graph.
 * 
 */
struct __pyx_obj_9networkit_10centrality_LaplacianCentrality {
  struct __pyx_obj_9networkit_10centrality_Centrality __pyx_base;
};


/* "networkit/centrality.pyx":1659
 * 		vector[node] getNodeOrder() except +
 * 
 * cdef class CoreDecomposition(Centrality):             # <<<<<<<<<<<<<<
 * 	""" Computes k-core decomposition of a graph.
 * 
 */
struct __pyx_obj_9networkit_10centrality_CoreDecomposition {
  struct __pyx_obj_9networkit_10centrality_Centrality __pyx_base;
};


/* "networkit/centrality.pyx":1731
 * 		_EigenvectorCentrality(_Graph, double tol) except +
 * 
 * cdef class EigenvectorCentrality(Centrality):             # <<<<<<<<<<<<<<
 * 	"""	Computes the leading eigenvector of the graph's adjacency matrix (normalized in 2-norm).
 * 	Interpreted as eigenvector centrality score.
 */
struct __pyx_obj_9networkit_10centrality_EigenvectorCentrality {
  struct __pyx_obj_9networkit_10centrality_Centrality __pyx_base;
};


/* "networkit/centrality.pyx":1770
 * 		count maxIterations
 * 
 * cdef class PageRank(Centrality):             # <<<<<<<<<<<<<<
 * 	""" Compute PageRank as node centrality measure.
 * 
 */
struct __pyx_obj_9networkit_10centrality_PageRank {
  struct __pyx_obj_9networkit_10centrality_Centrality __pyx_base;
};


/* "networkit/centrality.pyx":1826
 * 		vector[double] scores() except +
 * 
 * cdef class SpanningEdgeCentrality(Algorithm):             # <<<<<<<<<<<<<<
 * 	""" Computes the Spanning Edge centrality for the edges of the graph.
 * 
 */
struct __pyx_obj_9networkit_10centrality_SpanningEdgeCentrality {
  struct __pyx_obj_9networkit_4base_Algorithm __pyx_base;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
};


/* "networkit/centrality.pyx":1870
 * 		vector[double] computeExactDiagonal(double tol) except +
 * 
 * cdef class ApproxElectricalCloseness(Centrality):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Approximates the electrical closeness of all the vertices of the graph by approximating the
 */
struct __pyx_obj_9networkit_10centrality_ApproxElectricalCloseness {
  struct __pyx_obj_9networkit_10centrality_Centrality __pyx_base;
};


/* "networkit/centrality.pyx":1930
 * 		vector[edgeweight] scores() except +
 * 
 * cdef class ApproxSpanningEdge(Algorithm):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Computes an epsilon-approximation of the spanning edge centrality of every edge of the input
 */
struct __pyx_obj_9networkit_10centrality_ApproxSpanningEdge {
  struct __pyx_obj_9networkit_4base_Algorithm __pyx_base;
  struct __pyx_obj_9networkit_5graph_Graph *_G;
};



/* "graph.pxd":150
 * 		_NeighborIterator end() except +
 * 
 * cdef class Graph:             # <<<<<<<<<<<<<<
 * 	cdef _Graph _this
 * 	cdef setThis(self, _Graph& other)
 */

struct __pyx_vtabstruct_9networkit_5graph_Graph {
  PyObject *(*setThis)(struct __pyx_obj_9networkit_5graph_Graph *, NetworKit::Graph &);
};
static struct __pyx_vtabstruct_9networkit_5graph_Graph *__pyx_vtabptr_9networkit_5graph_Graph;


/* "structures.pxd":46
 * 		set[index] getSubsetIds() except +
 * 
 * cdef class Cover:             # <<<<<<<<<<<<<<
 * 	cdef _Cover _this
 * 	cdef setThis(self, _Cover& other)
 */

struct __pyx_vtabstruct_9networkit_10structures_Cover {
  PyObject *(*setThis)(struct __pyx_obj_9networkit_10structures_Cover *, NetworKit::Cover &);
};
static struct __pyx_vtabstruct_9networkit_10structures_Cover *__pyx_vtabptr_9networkit_10structures_Cover;


/* "structures.pxd":82
 * 		index operator[](index) except +
 * 
 * cdef class Partition:             # <<<<<<<<<<<<<<
 * 	cdef _Partition _this
 * 	cdef setThis(self, _Partition& other)
 */

struct __pyx_vtabstruct_9networkit_10structures_Partition {
  PyObject *(*setThis)(struct __pyx_obj_9networkit_10structures_Partition *, NetworKit::Partition &);
};
static struct __pyx_vtabstruct_9networkit_10structures_Partition *__pyx_vtabptr_9networkit_10structures_Partition;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_SubtractObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
#define __Pyx_unpack_tuple2(tuple, value1, value2, is_tuple, has_known_size, decref_tuple)\
    (likely(is_tuple || PyTuple_Check(tuple)) ?\
        (likely(has_known_size || PyTuple_GET_SIZE(tuple) == 2) ?\
            __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple) :\
            (__Pyx_UnpackTupleError(tuple, 2), -1)) :\
        __Pyx_unpack_tuple2_generic(tuple, value1, value2, has_known_size, decref_tuple))
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
    PyObject* tuple, PyObject** value1, PyObject** value2, int decref_tuple);
static int __Pyx_unpack_tuple2_generic(
    PyObject* tuple, PyObject** value1, PyObject** value2, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_Check(obj)  (__Pyx_TypeCheck(obj, __pyx_CyFunctionType))
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* CallNextTpDealloc.proto */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc);

/* CallNextTpTraverse.proto */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

/* CallNextTpClear.proto */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_dealloc);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* SetNameInClass.proto */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? _PyDict_SetItem_KnownHash(ns, name, value, ((PyASCIIObject *) name)->hash) : PyObject_SetItem(ns, name, value))
#elif CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? PyDict_SetItem(ns, name, value) : PyObject_SetItem(ns, name, value))
#else
#define __Pyx_SetNameInClass(ns, name, value)  PyObject_SetItem(ns, name, value)
#endif

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NetworKit_3a__3a_ClosenessVariant(enum NetworKit::ClosenessVariant value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NetworKit_3a__3a_GedWalk_3a__3a_BoundStrategy(enum NetworKit::GedWalk::BoundStrategy value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NetworKit_3a__3a_GedWalk_3a__3a_GreedyStrategy(enum NetworKit::GedWalk::GreedyStrategy value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NetworKit_3a__3a_EdgeDirection(enum NetworKit::EdgeDirection value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NetworKit_3a__3a_PageRank_3a__3a_Norm(enum NetworKit::PageRank::Norm value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* None.proto */
#include <new>

/* CIntFromPy.proto */
static CYTHON_INLINE enum NetworKit::ApproxCloseness::CLOSENESS_TYPE __Pyx_PyInt_As_enum__NetworKit_3a__3a_ApproxCloseness_3a__3a_CLOSENESS_TYPE(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE uint64_t __Pyx_PyInt_As_uint64_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE enum NetworKit::EdgeDirection __Pyx_PyInt_As_enum__NetworKit_3a__3a_EdgeDirection(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE enum NetworKit::PageRank::Norm __Pyx_PyInt_As_enum__NetworKit_3a__3a_PageRank_3a__3a_Norm(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE enum NetworKit::GraphEvent::Type __Pyx_PyInt_As_enum__NetworKit_3a__3a_GraphEvent_3a__3a_Type(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE enum NetworKit::ClosenessVariant __Pyx_PyInt_As_enum__NetworKit_3a__3a_ClosenessVariant(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE enum NetworKit::GedWalk::BoundStrategy __Pyx_PyInt_As_enum__NetworKit_3a__3a_GedWalk_3a__3a_BoundStrategy(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE enum NetworKit::GedWalk::GreedyStrategy __Pyx_PyInt_As_enum__NetworKit_3a__3a_GedWalk_3a__3a_GreedyStrategy(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libc.stdint' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'networkit.base' */
static PyTypeObject *__pyx_ptype_9networkit_4base_Algorithm = 0;

/* Module declarations from 'networkit.dynamics' */
static PyTypeObject *__pyx_ptype_9networkit_8dynamics_GraphEvent = 0;

/* Module declarations from 'libcpp.unordered_set' */

/* Module declarations from 'networkit.graph' */
static PyTypeObject *__pyx_ptype_9networkit_5graph_Graph = 0;
static PyTypeObject *__pyx_ptype_9networkit_5graph_RandomMaximumSpanningForest = 0;
static PyTypeObject *__pyx_ptype_9networkit_5graph_UnionMaximumSpanningForest = 0;

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'libcpp.set' */

/* Module declarations from 'networkit.structures' */
static PyTypeObject *__pyx_ptype_9networkit_10structures_Cover = 0;
static PyTypeObject *__pyx_ptype_9networkit_10structures_Partition = 0;

/* Module declarations from 'networkit.centrality' */
static PyTypeObject *__pyx_ptype_9networkit_10centrality_Centrality = 0;
static PyTypeObject *__pyx_ptype_9networkit_10centrality_Betweenness = 0;
static PyTypeObject *__pyx_ptype_9networkit_10centrality_ApproxBetweenness = 0;
static PyTypeObject *__pyx_ptype_9networkit_10centrality_EstimateBetweenness = 0;
static PyTypeObject *__pyx_ptype_9networkit_10centrality_KadabraBetweenness = 0;
static PyTypeObject *__pyx_ptype_9networkit_10centrality_DynBetweenness = 0;
static PyTypeObject *__pyx_ptype_9networkit_10centrality_DynApproxBetweenness = 0;
static PyTypeObject *__pyx_ptype_9networkit_10centrality_DynBetweennessOneNode = 0;
static PyTypeObject *__pyx_ptype_9networkit_10centrality_Closeness = 0;
static PyTypeObject *__pyx_ptype_9networkit_10centrality_ApproxCloseness = 0;
static PyTypeObject *__pyx_ptype_9networkit_10centrality_DegreeCentrality = 0;
static PyTypeObject *__pyx_ptype_9networkit_10centrality_HarmonicCloseness = 0;
static PyTypeObject *__pyx_ptype_9networkit_10centrality_TopCloseness = 0;
static PyTypeObject *__pyx_ptype_9networkit_10centrality_TopHarmonicCloseness = 0;
static PyTypeObject *__pyx_ptype_9networkit_10centrality_DynTopHarmonicCloseness = 0;
static PyTypeObject *__pyx_ptype_9networkit_10centrality_LocalPartitionCoverage = 0;
static PyTypeObject *__pyx_ptype_9networkit_10centrality_GroupDegree = 0;
static PyTypeObject *__pyx_ptype_9networkit_10centrality_GedWalk = 0;
static PyTypeObject *__pyx_ptype_9networkit_10centrality_ApproxGroupBetweenness = 0;
static PyTypeObject *__pyx_ptype_9networkit_10centrality_GroupCloseness = 0;
static PyTypeObject *__pyx_ptype_9networkit_10centrality_KPathCentrality = 0;
static PyTypeObject *__pyx_ptype_9networkit_10centrality_KatzCentrality = 0;
static PyTypeObject *__pyx_ptype_9networkit_10centrality_DynKatzCentrality = 0;
static PyTypeObject *__pyx_ptype_9networkit_10centrality_LocalClusteringCoefficient = 0;
static PyTypeObject *__pyx_ptype_9networkit_10centrality_Sfigality = 0;
static PyTypeObject *__pyx_ptype_9networkit_10centrality_PermanenceCentrality = 0;
static PyTypeObject *__pyx_ptype_9networkit_10centrality_LaplacianCentrality = 0;
static PyTypeObject *__pyx_ptype_9networkit_10centrality_CoreDecomposition = 0;
static PyTypeObject *__pyx_ptype_9networkit_10centrality_EigenvectorCentrality = 0;
static PyTypeObject *__pyx_ptype_9networkit_10centrality_PageRank = 0;
static PyTypeObject *__pyx_ptype_9networkit_10centrality_SpanningEdgeCentrality = 0;
static PyTypeObject *__pyx_ptype_9networkit_10centrality_ApproxElectricalCloseness = 0;
static PyTypeObject *__pyx_ptype_9networkit_10centrality_ApproxSpanningEdge = 0;
static std::vector<__pyx_t_9networkit_10centrality_node>  __pyx_convert_vector_from_py___pyx_t_9networkit_10centrality_node(PyObject *); /*proto*/
static PyObject *__pyx_convert_vector_to_py_double(const std::vector<double>  &); /*proto*/
static PyObject *__pyx_convert_pair_to_py___pyx_t_9networkit_10centrality_node____double(std::pair<__pyx_t_9networkit_10centrality_node,double>  const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_pair_3c___pyx_t_9networkit_10centrality_node_2c_double_3e___(const std::vector<std::pair<__pyx_t_9networkit_10centrality_node,double> >  &); /*proto*/
static std::vector<size_t>  __pyx_convert_vector_from_py_size_t(PyObject *); /*proto*/
static PyObject *__pyx_convert_vector_to_py___pyx_t_9networkit_10centrality_node(const std::vector<__pyx_t_9networkit_10centrality_node>  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py___pyx_t_9networkit_10centrality_edgeweight(const std::vector<__pyx_t_9networkit_10centrality_edgeweight>  &); /*proto*/
static PyObject *__pyx_convert_pair_to_py___pyx_t_9networkit_10centrality_node______pyx_t_9networkit_10centrality_edgeweight(std::pair<__pyx_t_9networkit_10centrality_node,__pyx_t_9networkit_10centrality_edgeweight>  const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_pair_3c___pyx_t_9networkit_10centrality_node_2c___pyx_t_9networkit_10centrality_edgeweight_3e___(const std::vector<std::pair<__pyx_t_9networkit_10centrality_node,__pyx_t_9networkit_10centrality_edgeweight> >  &); /*proto*/
#define __Pyx_MODULE_NAME "networkit.centrality"
extern int __pyx_module_is_main_networkit__centrality;
int __pyx_module_is_main_networkit__centrality = 0;

/* Implementation of 'networkit.centrality' */
static PyObject *__pyx_builtin_object;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_print;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_super;
static PyObject *__pyx_builtin_NotImplemented;
static PyObject *__pyx_builtin_sorted;
static PyObject *__pyx_builtin_NotImplementedError;
static PyObject *__pyx_builtin_sum;
static const char __pyx_k_G[] = "G";
static const char __pyx_k_H[] = "H";
static const char __pyx_k_P[] = "P";
static const char __pyx_k_S[] = "S";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_k[] = "k";
static const char __pyx_k_n[] = "n";
static const char __pyx_k_u[] = "u";
static const char __pyx_k_v[] = "v";
static const char __pyx_k_w[] = "w";
static const char __pyx_k_No[] = "No";
static const char __pyx_k_bs[] = "bs";
static const char __pyx_k_gs[] = "gs";
static const char __pyx_k_rx[] = "rx";
static const char __pyx_k_ry[] = "ry";
static const char __pyx_k_SUM[] = "SUM";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_eps[] = "eps";
static const char __pyx_k_err[] = "err";
static const char __pyx_k_evz[] = "evz";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_run[] = "run";
static const char __pyx_k_sum[] = "sum";
static const char __pyx_k_tol[] = "tol";
static const char __pyx_k_val[] = "val";
static const char __pyx_k_Lazy[] = "Lazy";
static const char __pyx_k_Norm[] = "Norm";
static const char __pyx_k_beta[] = "beta";
static const char __pyx_k_damp[] = "damp";
static const char __pyx_k_diff[] = "diff";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_math[] = "math";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_node[] = "node";
static const char __pyx_k_pair[] = "pair";
static const char __pyx_k_seed[] = "seed";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_sqrt[] = "sqrt";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_type[] = "type";
static const char __pyx_k_alpha[] = "alpha";
static const char __pyx_k_delta[] = "delta";
static const char __pyx_k_graph[] = "graph";
static const char __pyx_k_group[] = "group";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_kappa[] = "kappa";
static const char __pyx_k_order[] = "order";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_super[] = "super";
static const char __pyx_k_third[] = "third";
static const char __pyx_k_turbo[] = "turbo";
static const char __pyx_k_cutoff[] = "cutoff";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_l1norm[] = "l1norm";
static const char __pyx_k_l2norm[] = "l2norm";
static const char __pyx_k_length[] = "_length";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_object[] = "object";
static const char __pyx_k_outDeg[] = "outDeg";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_scores[] = "scores";
static const char __pyx_k_sorted[] = "sorted";
static const char __pyx_k_square[] = "square";
static const char __pyx_k_vector[] = "vector";
static const char __pyx_k_GedWalk[] = "GedWalk";
static const char __pyx_k_INBOUND[] = "INBOUND";
static const char __pyx_k_epsilon[] = "epsilon";
static const char __pyx_k_inEdges[] = "inEdges";
static const char __pyx_k_n_nodes[] = "n_nodes";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_ranking[] = "ranking";
static const char __pyx_k_reverse[] = "reverse";
static const char __pyx_k_rnode_x[] = "rnode_x";
static const char __pyx_k_rnode_y[] = "rnode_y";
static const char __pyx_k_sec_heu[] = "sec_heu";
static const char __pyx_k_sources[] = "sources";
static const char __pyx_k_targets[] = "targets";
static const char __pyx_k_OUTBOUND[] = "OUTBOUND";
static const char __pyx_k_PageRank[] = "PageRank";
static const char __pyx_k_SciPyEVZ[] = "SciPyEVZ";
static const char __pyx_k_Spectral[] = "Spectral";
static const char __pyx_k_Standard[] = "Standard";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_nSamples[] = "nSamples";
static const char __pyx_k_outEdges[] = "outEdges";
static const char __pyx_k_parallel[] = "parallel";
static const char __pyx_k_prMatrix[] = "prMatrix";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_rankList[] = "rankList";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_spectrum[] = "spectrum";
static const char __pyx_k_Closeness[] = "Closeness";
static const char __pyx_k_Geometric[] = "Geometric";
static const char __pyx_k_Sfigality[] = "Sfigality";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_algorithm[] = "algorithm";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_first_heu[] = "first_heu";
static const char __pyx_k_groupOnly[] = "groupOnly";
static const char __pyx_k_groupSize[] = "groupSize";
static const char __pyx_k_iterNodes[] = "iterNodes";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_prev_node[] = "prev_node";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_scoreList[] = "scoreList";
static const char __pyx_k_tolerance[] = "tolerance";
static const char __pyx_k_Centrality[] = "Centrality";
static const char __pyx_k_Stochastic[] = "Stochastic";
static const char __pyx_k_centrality[] = "centrality";
static const char __pyx_k_eigenvalue[] = "eigenvalue";
static const char __pyx_k_isDirected[] = "isDirected";
static const char __pyx_k_normFactor[] = "normFactor";
static const char __pyx_k_normalized[] = "normalized";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_ranking_id[] = "ranking_id";
static const char __pyx_k_useNBbound[] = "useNBbound";
static const char __pyx_k_Betweenness[] = "Betweenness";
static const char __pyx_k_Generalized[] = "Generalized";
static const char __pyx_k_GroupDegree[] = "GroupDegree";
static const char __pyx_k_eigenvector[] = "eigenvector";
static const char __pyx_k_rankPerNode[] = "rankPerNode";
static const char __pyx_k_startFactor[] = "startFactor";
static const char __pyx_k_unionSample[] = "unionSample";
static const char __pyx_k_useBFSbound[] = "useBFSbound";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_TopCloseness[] = "TopCloseness";
static const char __pyx_k_includeTrail[] = "includeTrail";
static const char __pyx_k_BoundStrategy[] = "BoundStrategy";
static const char __pyx_k_EdgeDirection[] = "EdgeDirection";
static const char __pyx_k_SciPyPageRank[] = "SciPyPageRank";
static const char __pyx_k_numberOfNodes[] = "numberOfNodes";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_spectralDelta[] = "spectralDelta";
static const char __pyx_k_DynBetweenness[] = "DynBetweenness";
static const char __pyx_k_GreedyStrategy[] = "GreedyStrategy";
static const char __pyx_k_GroupCloseness[] = "GroupCloseness";
static const char __pyx_k_KatzCentrality[] = "KatzCentrality";
static const char __pyx_k_NotImplemented[] = "NotImplemented";
static const char __pyx_k_PageRankMatrix[] = "PageRankMatrix";
static const char __pyx_k_storeNodeOrder[] = "storeNodeOrder";
static const char __pyx_k_ApproxCloseness[] = "ApproxCloseness";
static const char __pyx_k_KPathCentrality[] = "KPathCentrality";
static const char __pyx_k_SciPyEVZ___init[] = "SciPyEVZ.__init__";
static const char __pyx_k_countGroupNodes[] = "countGroupNodes";
static const char __pyx_k_ignoreSelfLoops[] = "ignoreSelfLoops";
static const char __pyx_k_prepareSpectrum[] = "prepareSpectrum";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_ClosenessVariant[] = "ClosenessVariant";
static const char __pyx_k_DegreeCentrality[] = "DegreeCentrality";
static const char __pyx_k_SciPyEVZ__length[] = "SciPyEVZ._length";
static const char __pyx_k_AdaptiveGeometric[] = "AdaptiveGeometric";
static const char __pyx_k_ApproxBetweenness[] = "ApproxBetweenness";
static const char __pyx_k_CoreDecomposition[] = "CoreDecomposition";
static const char __pyx_k_DynKatzCentrality[] = "DynKatzCentrality";
static const char __pyx_k_HarmonicCloseness[] = "HarmonicCloseness";
static const char __pyx_k_storePredecessors[] = "storePredecessors";
static const char __pyx_k_universalConstant[] = "universalConstant";
static const char __pyx_k_ApproxSpanningEdge[] = "ApproxSpanningEdge";
static const char __pyx_k_KadabraBetweenness[] = "KadabraBetweenness";
static const char __pyx_k_SpectralCentrality[] = "SpectralCentrality";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_relativeRankErrors[] = "relativeRankErrors";
static const char __pyx_k_EstimateBetweenness[] = "EstimateBetweenness";
static const char __pyx_k_LaplacianCentrality[] = "LaplacianCentrality";
static const char __pyx_k_NotImplementedError[] = "NotImplementedError";
static const char __pyx_k_SciPyEVZ_normFactor[] = "SciPyEVZ.normFactor";
static const char __pyx_k_networkit_algebraic[] = "networkit.algebraic";
static const char __pyx_k_DynApproxBetweenness[] = "DynApproxBetweenness";
static const char __pyx_k_PermanenceCentrality[] = "PermanenceCentrality";
static const char __pyx_k_SciPyPageRank___init[] = "SciPyPageRank.__init__";
static const char __pyx_k_TopHarmonicCloseness[] = "TopHarmonicCloseness";
static const char __pyx_k_adjacencyEigenvector[] = "adjacencyEigenvector";
static const char __pyx_k_networkit_centrality[] = "networkit.centrality";
static const char __pyx_k_DynBetweennessOneNode[] = "DynBetweennessOneNode";
static const char __pyx_k_EigenvectorCentrality[] = "EigenvectorCentrality";
static const char __pyx_k_SciPyPageRank__length[] = "SciPyPageRank._length";
static const char __pyx_k_computeEdgeCentrality[] = "computeEdgeCentrality";
static const char __pyx_k_symmetricEigenvectors[] = "symmetricEigenvectors";
static const char __pyx_k_ApproxGroupBetweenness[] = "ApproxGroupBetweenness";
static const char __pyx_k_LocalPartitionCoverage[] = "LocalPartitionCoverage";
static const char __pyx_k_SpanningEdgeCentrality[] = "SpanningEdgeCentrality";
static const char __pyx_k_SpectralCentrality_run[] = "SpectralCentrality.run";
static const char __pyx_k_DynTopHarmonicCloseness[] = "DynTopHarmonicCloseness";
static const char __pyx_k_SciPyEVZ_prepareSpectrum[] = "SciPyEVZ.prepareSpectrum";
static const char __pyx_k_SciPyPageRank_normFactor[] = "SciPyPageRank.normFactor";
static const char __pyx_k_networkit_centrality_pyx[] = "networkit/centrality.pyx";
static const char __pyx_k_ApproxElectricalCloseness[] = "ApproxElectricalCloseness";
static const char __pyx_k_SpectralCentrality___init[] = "SpectralCentrality.__init__";
static const char __pyx_k_SpectralCentrality_scores[] = "SpectralCentrality.scores";
static const char __pyx_k_LocalClusteringCoefficient[] = "LocalClusteringCoefficient";
static const char __pyx_k_SpectralCentrality_ranking[] = "SpectralCentrality.ranking";
static const char __pyx_k_enforceBucketQueueAlgorithm[] = "enforceBucketQueueAlgorithm";
static const char __pyx_k_SciPyPageRank_prepareSpectrum[] = "SciPyPageRank.prepareSpectrum";
static const char __pyx_k_SpectralCentrality_normFactor[] = "SpectralCentrality.normFactor";
static const char __pyx_k_Compute_Eigenvector_centrality[] = "\n\tCompute Eigenvector centrality using algebraic meh\n\n\tParameters:\n\t-----------\n\tG : graph\n\t\tThe graph of which to compute the centrality\n\tnormalized : boolean\n\t\t\t\t Whether to normalize the results or not\n\n\t";
static const char __pyx_k_Abstract_class_to_compute_the_s[] = "\n\tAbstract class to compute the spectral centrality of a graph. This class needs to be supplied with methods\n\tto generate the correct matrices and do the correct normalization.\n\t";
static const char __pyx_k_Error_group_must_be_a_list_of_no[] = "Error, group must be a list of nodes.";
static const char __pyx_k_Error_object_not_properly_initia[] = "Error, object not properly initialized";
static const char __pyx_k_Error_the_third_parameter_must_b[] = "Error: the third parameter must be either a bool or a ClosenessVariant";
static const char __pyx_k_Error_you_may_not_use_Centrality[] = "Error, you may not use Centrality directly, use a sub-class instead";
static const char __pyx_k_Max_iterations_cannot_be_a_negat[] = "Max iterations cannot be a negative number.";
static const char __pyx_k_Not_implemented_for_directed_gra[] = "Not implemented for directed graphs; use centrality.EigenvectorCentrality instead";
static const char __pyx_k_Source_nodes_not_specified_set_t[] = "Source nodes not specified, set to all nodes by default";
static const char __pyx_k_SpectralCentrality_prepareSpectr[] = "SpectralCentrality.prepareSpectrum";
static const char __pyx_k_SpectralCentrality_ranking_local[] = "SpectralCentrality.ranking.<locals>.<lambda>";
static const char __pyx_k_Target_nodes_not_specified_set_t[] = "Target nodes not specified, set to all nodes by default";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_self__this_cannot_be_converted_t[] = "self._this cannot be converted to a Python object for pickling";
static PyObject *__pyx_kp_s_Abstract_class_to_compute_the_s;
static PyObject *__pyx_n_s_AdaptiveGeometric;
static PyObject *__pyx_n_s_ApproxBetweenness;
static PyObject *__pyx_n_s_ApproxCloseness;
static PyObject *__pyx_n_s_ApproxElectricalCloseness;
static PyObject *__pyx_n_s_ApproxGroupBetweenness;
static PyObject *__pyx_n_s_ApproxSpanningEdge;
static PyObject *__pyx_n_s_Betweenness;
static PyObject *__pyx_n_s_BoundStrategy;
static PyObject *__pyx_n_s_Centrality;
static PyObject *__pyx_n_s_Closeness;
static PyObject *__pyx_n_s_ClosenessVariant;
static PyObject *__pyx_kp_s_Compute_Eigenvector_centrality;
static PyObject *__pyx_n_s_CoreDecomposition;
static PyObject *__pyx_n_s_DegreeCentrality;
static PyObject *__pyx_n_s_DynApproxBetweenness;
static PyObject *__pyx_n_s_DynBetweenness;
static PyObject *__pyx_n_s_DynBetweennessOneNode;
static PyObject *__pyx_n_s_DynKatzCentrality;
static PyObject *__pyx_n_s_DynTopHarmonicCloseness;
static PyObject *__pyx_n_s_EdgeDirection;
static PyObject *__pyx_n_s_EigenvectorCentrality;
static PyObject *__pyx_kp_u_Error_group_must_be_a_list_of_no;
static PyObject *__pyx_kp_u_Error_object_not_properly_initia;
static PyObject *__pyx_kp_u_Error_the_third_parameter_must_b;
static PyObject *__pyx_kp_u_Error_you_may_not_use_Centrality;
static PyObject *__pyx_n_s_EstimateBetweenness;
static PyObject *__pyx_n_s_G;
static PyObject *__pyx_n_s_GedWalk;
static PyObject *__pyx_n_s_Generalized;
static PyObject *__pyx_n_s_Geometric;
static PyObject *__pyx_n_s_GreedyStrategy;
static PyObject *__pyx_n_s_GroupCloseness;
static PyObject *__pyx_n_s_GroupDegree;
static PyObject *__pyx_n_s_H;
static PyObject *__pyx_n_s_HarmonicCloseness;
static PyObject *__pyx_n_s_INBOUND;
static PyObject *__pyx_n_s_KPathCentrality;
static PyObject *__pyx_n_s_KadabraBetweenness;
static PyObject *__pyx_n_s_KatzCentrality;
static PyObject *__pyx_n_s_LaplacianCentrality;
static PyObject *__pyx_n_s_Lazy;
static PyObject *__pyx_n_s_LocalClusteringCoefficient;
static PyObject *__pyx_n_s_LocalPartitionCoverage;
static PyObject *__pyx_kp_u_Max_iterations_cannot_be_a_negat;
static PyObject *__pyx_n_s_No;
static PyObject *__pyx_n_s_Norm;
static PyObject *__pyx_n_s_NotImplemented;
static PyObject *__pyx_n_s_NotImplementedError;
static PyObject *__pyx_kp_u_Not_implemented_for_directed_gra;
static PyObject *__pyx_n_s_OUTBOUND;
static PyObject *__pyx_n_s_P;
static PyObject *__pyx_n_s_PageRank;
static PyObject *__pyx_n_s_PageRankMatrix;
static PyObject *__pyx_n_s_PermanenceCentrality;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_S;
static PyObject *__pyx_n_s_SUM;
static PyObject *__pyx_n_s_SciPyEVZ;
static PyObject *__pyx_n_s_SciPyEVZ___init;
static PyObject *__pyx_n_s_SciPyEVZ__length;
static PyObject *__pyx_n_s_SciPyEVZ_normFactor;
static PyObject *__pyx_n_s_SciPyEVZ_prepareSpectrum;
static PyObject *__pyx_n_s_SciPyPageRank;
static PyObject *__pyx_n_s_SciPyPageRank___init;
static PyObject *__pyx_n_s_SciPyPageRank__length;
static PyObject *__pyx_n_s_SciPyPageRank_normFactor;
static PyObject *__pyx_n_s_SciPyPageRank_prepareSpectrum;
static PyObject *__pyx_n_s_Sfigality;
static PyObject *__pyx_kp_u_Source_nodes_not_specified_set_t;
static PyObject *__pyx_n_s_SpanningEdgeCentrality;
static PyObject *__pyx_n_s_Spectral;
static PyObject *__pyx_n_s_SpectralCentrality;
static PyObject *__pyx_n_s_SpectralCentrality___init;
static PyObject *__pyx_n_s_SpectralCentrality_normFactor;
static PyObject *__pyx_n_s_SpectralCentrality_prepareSpectr;
static PyObject *__pyx_n_s_SpectralCentrality_ranking;
static PyObject *__pyx_n_s_SpectralCentrality_ranking_local;
static PyObject *__pyx_n_s_SpectralCentrality_run;
static PyObject *__pyx_n_s_SpectralCentrality_scores;
static PyObject *__pyx_n_s_Standard;
static PyObject *__pyx_n_s_Stochastic;
static PyObject *__pyx_kp_u_Target_nodes_not_specified_set_t;
static PyObject *__pyx_n_s_TopCloseness;
static PyObject *__pyx_n_s_TopHarmonicCloseness;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_adjacencyEigenvector;
static PyObject *__pyx_n_s_algorithm;
static PyObject *__pyx_n_s_alpha;
static PyObject *__pyx_n_s_beta;
static PyObject *__pyx_n_s_bs;
static PyObject *__pyx_n_s_centrality;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_computeEdgeCentrality;
static PyObject *__pyx_n_s_countGroupNodes;
static PyObject *__pyx_n_s_cutoff;
static PyObject *__pyx_n_s_damp;
static PyObject *__pyx_n_s_delta;
static PyObject *__pyx_n_s_diff;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_eigenvalue;
static PyObject *__pyx_n_s_eigenvector;
static PyObject *__pyx_n_s_enforceBucketQueueAlgorithm;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_eps;
static PyObject *__pyx_n_s_epsilon;
static PyObject *__pyx_n_s_err;
static PyObject *__pyx_n_s_evz;
static PyObject *__pyx_n_s_first_heu;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_graph;
static PyObject *__pyx_n_s_group;
static PyObject *__pyx_n_s_groupOnly;
static PyObject *__pyx_n_s_groupSize;
static PyObject *__pyx_n_s_gs;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_ignoreSelfLoops;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_inEdges;
static PyObject *__pyx_n_s_includeTrail;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_isDirected;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_s_iterNodes;
static PyObject *__pyx_n_s_k;
static PyObject *__pyx_n_s_kappa;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_l1norm;
static PyObject *__pyx_n_s_l2norm;
static PyObject *__pyx_n_s_length;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_math;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_n;
static PyObject *__pyx_n_s_nSamples;
static PyObject *__pyx_n_s_n_nodes;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_networkit_algebraic;
static PyObject *__pyx_n_s_networkit_centrality;
static PyObject *__pyx_kp_s_networkit_centrality_pyx;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_node;
static PyObject *__pyx_n_s_normFactor;
static PyObject *__pyx_n_s_normalized;
static PyObject *__pyx_n_s_numberOfNodes;
static PyObject *__pyx_n_s_object;
static PyObject *__pyx_n_s_order;
static PyObject *__pyx_n_s_outDeg;
static PyObject *__pyx_n_s_outEdges;
static PyObject *__pyx_n_s_pair;
static PyObject *__pyx_n_s_parallel;
static PyObject *__pyx_n_s_prMatrix;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_prepareSpectrum;
static PyObject *__pyx_n_s_prev_node;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_rankList;
static PyObject *__pyx_n_s_rankPerNode;
static PyObject *__pyx_n_s_ranking;
static PyObject *__pyx_n_s_ranking_id;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_relativeRankErrors;
static PyObject *__pyx_n_s_reverse;
static PyObject *__pyx_n_s_rnode_x;
static PyObject *__pyx_n_s_rnode_y;
static PyObject *__pyx_n_s_run;
static PyObject *__pyx_n_s_rx;
static PyObject *__pyx_n_s_ry;
static PyObject *__pyx_n_s_scoreList;
static PyObject *__pyx_n_s_scores;
static PyObject *__pyx_n_s_sec_heu;
static PyObject *__pyx_n_s_seed;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_kp_s_self__this_cannot_be_converted_t;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_sorted;
static PyObject *__pyx_n_s_sources;
static PyObject *__pyx_n_s_spectralDelta;
static PyObject *__pyx_n_s_spectrum;
static PyObject *__pyx_n_s_sqrt;
static PyObject *__pyx_n_s_square;
static PyObject *__pyx_n_s_startFactor;
static PyObject *__pyx_n_s_storeNodeOrder;
static PyObject *__pyx_n_s_storePredecessors;
static PyObject *__pyx_n_s_sum;
static PyObject *__pyx_n_s_super;
static PyObject *__pyx_n_s_symmetricEigenvectors;
static PyObject *__pyx_n_s_targets;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_third;
static PyObject *__pyx_n_s_tol;
static PyObject *__pyx_n_s_tolerance;
static PyObject *__pyx_n_s_turbo;
static PyObject *__pyx_n_s_type;
static PyObject *__pyx_n_s_u;
static PyObject *__pyx_n_s_unionSample;
static PyObject *__pyx_n_s_universalConstant;
static PyObject *__pyx_n_s_useBFSbound;
static PyObject *__pyx_n_s_useNBbound;
static PyObject *__pyx_n_s_v;
static PyObject *__pyx_n_s_val;
static PyObject *__pyx_n_s_vector;
static PyObject *__pyx_n_s_w;
static int __pyx_pf_9networkit_10centrality_10Centrality___init__(struct __pyx_obj_9networkit_10centrality_Centrality *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static void __pyx_pf_9networkit_10centrality_10Centrality_2__dealloc__(struct __pyx_obj_9networkit_10centrality_Centrality *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_10Centrality_4scores(struct __pyx_obj_9networkit_10centrality_Centrality *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_10Centrality_6score(struct __pyx_obj_9networkit_10centrality_Centrality *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_10Centrality_8ranking(struct __pyx_obj_9networkit_10centrality_Centrality *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_10Centrality_10maximum(struct __pyx_obj_9networkit_10centrality_Centrality *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_10Centrality_12centralization(struct __pyx_obj_9networkit_10centrality_Centrality *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_10Centrality_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_Centrality *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_10Centrality_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_Centrality *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_10centrality_11Betweenness___cinit__(struct __pyx_obj_9networkit_10centrality_Betweenness *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_normalized, PyObject *__pyx_v_computeEdgeCentrality); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_11Betweenness_2edgeScores(struct __pyx_obj_9networkit_10centrality_Betweenness *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_11Betweenness_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_Betweenness *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_11Betweenness_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_Betweenness *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_10centrality_17ApproxBetweenness___cinit__(struct __pyx_obj_9networkit_10centrality_ApproxBetweenness *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_epsilon, PyObject *__pyx_v_delta, PyObject *__pyx_v_universalConstant); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_17ApproxBetweenness_2numberOfSamples(struct __pyx_obj_9networkit_10centrality_ApproxBetweenness *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_17ApproxBetweenness_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_ApproxBetweenness *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_17ApproxBetweenness_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_ApproxBetweenness *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_10centrality_19EstimateBetweenness___cinit__(struct __pyx_obj_9networkit_10centrality_EstimateBetweenness *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_nSamples, PyObject *__pyx_v_normalized, PyObject *__pyx_v_parallel, PyObject *__pyx_v_seed, PyObject *__pyx_v_sources, PyObject *__pyx_v_targets); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_19EstimateBetweenness_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_EstimateBetweenness *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_19EstimateBetweenness_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_EstimateBetweenness *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_10centrality_18KadabraBetweenness___cinit__(struct __pyx_obj_9networkit_10centrality_KadabraBetweenness *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_err, PyObject *__pyx_v_delta, PyObject *__pyx_v_k, PyObject *__pyx_v_unionSample, PyObject *__pyx_v_startFactor); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_18KadabraBetweenness_2ranking(struct __pyx_obj_9networkit_10centrality_KadabraBetweenness *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_18KadabraBetweenness_4topkNodesList(struct __pyx_obj_9networkit_10centrality_KadabraBetweenness *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_18KadabraBetweenness_6topkScoresList(struct __pyx_obj_9networkit_10centrality_KadabraBetweenness *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_18KadabraBetweenness_8scores(struct __pyx_obj_9networkit_10centrality_KadabraBetweenness *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_18KadabraBetweenness_10getNumberOfIterations(struct __pyx_obj_9networkit_10centrality_KadabraBetweenness *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_18KadabraBetweenness_12getOmega(struct __pyx_obj_9networkit_10centrality_KadabraBetweenness *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_18KadabraBetweenness_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_KadabraBetweenness *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_18KadabraBetweenness_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_KadabraBetweenness *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_10centrality_14DynBetweenness___cinit__(struct __pyx_obj_9networkit_10centrality_DynBetweenness *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_14DynBetweenness_2update(struct __pyx_obj_9networkit_10centrality_DynBetweenness *__pyx_v_self, PyObject *__pyx_v_ev); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_14DynBetweenness_4updateBatch(struct __pyx_obj_9networkit_10centrality_DynBetweenness *__pyx_v_self, PyObject *__pyx_v_batch); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_14DynBetweenness_6scores(struct __pyx_obj_9networkit_10centrality_DynBetweenness *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_14DynBetweenness_8score(struct __pyx_obj_9networkit_10centrality_DynBetweenness *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_14DynBetweenness_10ranking(struct __pyx_obj_9networkit_10centrality_DynBetweenness *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_14DynBetweenness_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_DynBetweenness *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_14DynBetweenness_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_DynBetweenness *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_10centrality_20DynApproxBetweenness___cinit__(struct __pyx_obj_9networkit_10centrality_DynApproxBetweenness *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_epsilon, PyObject *__pyx_v_delta, PyObject *__pyx_v_storePredecessors, PyObject *__pyx_v_universalConstant); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_20DynApproxBetweenness_2update(struct __pyx_obj_9networkit_10centrality_DynApproxBetweenness *__pyx_v_self, PyObject *__pyx_v_ev); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_20DynApproxBetweenness_4updateBatch(struct __pyx_obj_9networkit_10centrality_DynApproxBetweenness *__pyx_v_self, PyObject *__pyx_v_batch); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_20DynApproxBetweenness_6scores(struct __pyx_obj_9networkit_10centrality_DynApproxBetweenness *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_20DynApproxBetweenness_8score(struct __pyx_obj_9networkit_10centrality_DynApproxBetweenness *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_20DynApproxBetweenness_10ranking(struct __pyx_obj_9networkit_10centrality_DynApproxBetweenness *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_20DynApproxBetweenness_12getNumberOfSamples(struct __pyx_obj_9networkit_10centrality_DynApproxBetweenness *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_20DynApproxBetweenness_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_DynApproxBetweenness *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_20DynApproxBetweenness_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_DynApproxBetweenness *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_10centrality_21DynBetweennessOneNode___cinit__(struct __pyx_obj_9networkit_10centrality_DynBetweennessOneNode *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_node); /* proto */
static void __pyx_pf_9networkit_10centrality_21DynBetweennessOneNode_2__dealloc__(struct __pyx_obj_9networkit_10centrality_DynBetweennessOneNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_21DynBetweennessOneNode_4run(struct __pyx_obj_9networkit_10centrality_DynBetweennessOneNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_21DynBetweennessOneNode_6update(struct __pyx_obj_9networkit_10centrality_DynBetweennessOneNode *__pyx_v_self, PyObject *__pyx_v_ev); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_21DynBetweennessOneNode_8updateBatch(struct __pyx_obj_9networkit_10centrality_DynBetweennessOneNode *__pyx_v_self, PyObject *__pyx_v_batch); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_21DynBetweennessOneNode_10getDistance(struct __pyx_obj_9networkit_10centrality_DynBetweennessOneNode *__pyx_v_self, PyObject *__pyx_v_u, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_21DynBetweennessOneNode_12getSigma(struct __pyx_obj_9networkit_10centrality_DynBetweennessOneNode *__pyx_v_self, PyObject *__pyx_v_u, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_21DynBetweennessOneNode_14getSigmax(struct __pyx_obj_9networkit_10centrality_DynBetweennessOneNode *__pyx_v_self, PyObject *__pyx_v_u, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_21DynBetweennessOneNode_16getbcx(struct __pyx_obj_9networkit_10centrality_DynBetweennessOneNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_21DynBetweennessOneNode_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_DynBetweennessOneNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_21DynBetweennessOneNode_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_DynBetweennessOneNode *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_10centrality_9Closeness___cinit__(struct __pyx_obj_9networkit_10centrality_Closeness *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_normalized, PyObject *__pyx_v_third); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_9Closeness_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_Closeness *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_9Closeness_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_Closeness *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_10centrality_15ApproxCloseness___cinit__(struct __pyx_obj_9networkit_10centrality_ApproxCloseness *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_nSamples, PyObject *__pyx_v_epsilon, PyObject *__pyx_v_normalized, enum NetworKit::ApproxCloseness::CLOSENESS_TYPE __pyx_v_type); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_15ApproxCloseness_2getSquareErrorEstimates(struct __pyx_obj_9networkit_10centrality_ApproxCloseness *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_15ApproxCloseness_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_ApproxCloseness *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_15ApproxCloseness_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_ApproxCloseness *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_10centrality_16DegreeCentrality___cinit__(struct __pyx_obj_9networkit_10centrality_DegreeCentrality *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, bool __pyx_v_normalized, bool __pyx_v_outDeg, bool __pyx_v_ignoreSelfLoops); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_16DegreeCentrality_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_DegreeCentrality *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_16DegreeCentrality_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_DegreeCentrality *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_10centrality_17HarmonicCloseness___cinit__(struct __pyx_obj_9networkit_10centrality_HarmonicCloseness *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_normalized); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_17HarmonicCloseness_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_HarmonicCloseness *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_17HarmonicCloseness_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_HarmonicCloseness *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_10centrality_12TopCloseness___cinit__(struct __pyx_obj_9networkit_10centrality_TopCloseness *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_k, PyObject *__pyx_v_first_heu, PyObject *__pyx_v_sec_heu); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_12TopCloseness_2topkNodesList(struct __pyx_obj_9networkit_10centrality_TopCloseness *__pyx_v_self, PyObject *__pyx_v_includeTrail); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_12TopCloseness_4topkScoresList(struct __pyx_obj_9networkit_10centrality_TopCloseness *__pyx_v_self, PyObject *__pyx_v_includeTrail); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_12TopCloseness_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_TopCloseness *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_12TopCloseness_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_TopCloseness *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_10centrality_20TopHarmonicCloseness___cinit__(struct __pyx_obj_9networkit_10centrality_TopHarmonicCloseness *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_k, PyObject *__pyx_v_useNBbound); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_20TopHarmonicCloseness_2topkNodesList(struct __pyx_obj_9networkit_10centrality_TopHarmonicCloseness *__pyx_v_self, PyObject *__pyx_v_includeTrail); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_20TopHarmonicCloseness_4topkScoresList(struct __pyx_obj_9networkit_10centrality_TopHarmonicCloseness *__pyx_v_self, PyObject *__pyx_v_includeTrail); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_20TopHarmonicCloseness_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_TopHarmonicCloseness *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_20TopHarmonicCloseness_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_TopHarmonicCloseness *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_10centrality_23DynTopHarmonicCloseness___cinit__(struct __pyx_obj_9networkit_10centrality_DynTopHarmonicCloseness *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_k, PyObject *__pyx_v_useBFSbound); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_23DynTopHarmonicCloseness_2ranking(struct __pyx_obj_9networkit_10centrality_DynTopHarmonicCloseness *__pyx_v_self, PyObject *__pyx_v_includeTrail); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_23DynTopHarmonicCloseness_4topkNodesList(struct __pyx_obj_9networkit_10centrality_DynTopHarmonicCloseness *__pyx_v_self, PyObject *__pyx_v_includeTrail); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_23DynTopHarmonicCloseness_6topkScoresList(struct __pyx_obj_9networkit_10centrality_DynTopHarmonicCloseness *__pyx_v_self, PyObject *__pyx_v_includeTrail); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_23DynTopHarmonicCloseness_8update(struct __pyx_obj_9networkit_10centrality_DynTopHarmonicCloseness *__pyx_v_self, PyObject *__pyx_v_ev); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_23DynTopHarmonicCloseness_10updateBatch(struct __pyx_obj_9networkit_10centrality_DynTopHarmonicCloseness *__pyx_v_self, PyObject *__pyx_v_batch); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_23DynTopHarmonicCloseness_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_DynTopHarmonicCloseness *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_23DynTopHarmonicCloseness_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_DynTopHarmonicCloseness *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_10centrality_22LocalPartitionCoverage___cinit__(struct __pyx_obj_9networkit_10centrality_LocalPartitionCoverage *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_P); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_22LocalPartitionCoverage_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_LocalPartitionCoverage *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_22LocalPartitionCoverage_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_LocalPartitionCoverage *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_10centrality_11GroupDegree___cinit__(struct __pyx_obj_9networkit_10centrality_GroupDegree *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_k, PyObject *__pyx_v_countGroupNodes); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_11GroupDegree_2groupMaxDegree(struct __pyx_obj_9networkit_10centrality_GroupDegree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_11GroupDegree_4getScore(struct __pyx_obj_9networkit_10centrality_GroupDegree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_11GroupDegree_6scoreOfGroup(struct __pyx_obj_9networkit_10centrality_GroupDegree *__pyx_v_self, std::vector<__pyx_t_9networkit_10centrality_node>  __pyx_v_group); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_11GroupDegree_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_GroupDegree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_11GroupDegree_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_GroupDegree *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_10centrality_7GedWalk___cinit__(struct __pyx_obj_9networkit_10centrality_GedWalk *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_k, PyObject *__pyx_v_epsilon, PyObject *__pyx_v_alpha, PyObject *__pyx_v_bs, PyObject *__pyx_v_gs, PyObject *__pyx_v_spectralDelta); /* proto */
static void __pyx_pf_9networkit_10centrality_7GedWalk_2__dealloc__(struct __pyx_obj_9networkit_10centrality_GedWalk *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_7GedWalk_4groupMaxGedWalk(struct __pyx_obj_9networkit_10centrality_GedWalk *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_7GedWalk_6getApproximateScore(struct __pyx_obj_9networkit_10centrality_GedWalk *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_7GedWalk_8scoreOfGroup(struct __pyx_obj_9networkit_10centrality_GedWalk *__pyx_v_self, PyObject *__pyx_v_group, PyObject *__pyx_v_epsilon); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_7GedWalk_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_GedWalk *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_7GedWalk_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_GedWalk *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_10centrality_22ApproxGroupBetweenness___cinit__(struct __pyx_obj_9networkit_10centrality_ApproxGroupBetweenness *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_groupSize, PyObject *__pyx_v_epsilon); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_22ApproxGroupBetweenness_2groupMaxBetweenness(struct __pyx_obj_9networkit_10centrality_ApproxGroupBetweenness *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_22ApproxGroupBetweenness_4scoreOfGroup(struct __pyx_obj_9networkit_10centrality_ApproxGroupBetweenness *__pyx_v_self, std::vector<__pyx_t_9networkit_10centrality_node>  __pyx_v_group); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_22ApproxGroupBetweenness_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_ApproxGroupBetweenness *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_22ApproxGroupBetweenness_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_ApproxGroupBetweenness *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_10centrality_14GroupCloseness___cinit__(struct __pyx_obj_9networkit_10centrality_GroupCloseness *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_k, PyObject *__pyx_v_H); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_14GroupCloseness_2groupMaxCloseness(struct __pyx_obj_9networkit_10centrality_GroupCloseness *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_14GroupCloseness_4computeFarness(struct __pyx_obj_9networkit_10centrality_GroupCloseness *__pyx_v_self, PyObject *__pyx_v_S, PyObject *__pyx_v_H); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_14GroupCloseness_6scoreOfGroup(struct __pyx_obj_9networkit_10centrality_GroupCloseness *__pyx_v_self, PyObject *__pyx_v_group); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_14GroupCloseness_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_GroupCloseness *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_14GroupCloseness_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_GroupCloseness *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_10centrality_15KPathCentrality___cinit__(struct __pyx_obj_9networkit_10centrality_KPathCentrality *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_alpha, PyObject *__pyx_v_k); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_15KPathCentrality_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_KPathCentrality *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_15KPathCentrality_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_KPathCentrality *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_10centrality_14KatzCentrality___cinit__(struct __pyx_obj_9networkit_10centrality_KatzCentrality *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_alpha, PyObject *__pyx_v_beta, PyObject *__pyx_v_tol); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_14KatzCentrality_13edgeDirection___get__(struct __pyx_obj_9networkit_10centrality_KatzCentrality *__pyx_v_self); /* proto */
static int __pyx_pf_9networkit_10centrality_14KatzCentrality_13edgeDirection_2__set__(struct __pyx_obj_9networkit_10centrality_KatzCentrality *__pyx_v_self, enum NetworKit::EdgeDirection __pyx_v_edgeDirection); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_14KatzCentrality_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_KatzCentrality *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_14KatzCentrality_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_KatzCentrality *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_10centrality_17DynKatzCentrality___cinit__(struct __pyx_obj_9networkit_10centrality_DynKatzCentrality *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_k, PyObject *__pyx_v_groupOnly, PyObject *__pyx_v_tolerance); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_17DynKatzCentrality_2update(struct __pyx_obj_9networkit_10centrality_DynKatzCentrality *__pyx_v_self, PyObject *__pyx_v_ev); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_17DynKatzCentrality_4updateBatch(struct __pyx_obj_9networkit_10centrality_DynKatzCentrality *__pyx_v_self, PyObject *__pyx_v_batch); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_17DynKatzCentrality_6top(struct __pyx_obj_9networkit_10centrality_DynKatzCentrality *__pyx_v_self, PyObject *__pyx_v_n); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_17DynKatzCentrality_8bound(struct __pyx_obj_9networkit_10centrality_DynKatzCentrality *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_17DynKatzCentrality_10areDistinguished(struct __pyx_obj_9networkit_10centrality_DynKatzCentrality *__pyx_v_self, PyObject *__pyx_v_u, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_17DynKatzCentrality_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_DynKatzCentrality *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_17DynKatzCentrality_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_DynKatzCentrality *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_10centrality_26LocalClusteringCoefficient___cinit__(struct __pyx_obj_9networkit_10centrality_LocalClusteringCoefficient *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, bool __pyx_v_turbo); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_26LocalClusteringCoefficient_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_LocalClusteringCoefficient *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_26LocalClusteringCoefficient_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_LocalClusteringCoefficient *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_10centrality_9Sfigality___cinit__(struct __pyx_obj_9networkit_10centrality_Sfigality *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_9Sfigality_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_Sfigality *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_9Sfigality_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_Sfigality *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_10centrality_20PermanenceCentrality___cinit__(struct __pyx_obj_9networkit_10centrality_PermanenceCentrality *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_P); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_20PermanenceCentrality_2getIntraClustering(struct __pyx_obj_9networkit_10centrality_PermanenceCentrality *__pyx_v_self, __pyx_t_9networkit_10centrality_node __pyx_v_u); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_20PermanenceCentrality_4getPermanence(struct __pyx_obj_9networkit_10centrality_PermanenceCentrality *__pyx_v_self, __pyx_t_9networkit_10centrality_node __pyx_v_u); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_20PermanenceCentrality_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_PermanenceCentrality *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_20PermanenceCentrality_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_PermanenceCentrality *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_10centrality_19LaplacianCentrality___cinit__(struct __pyx_obj_9networkit_10centrality_LaplacianCentrality *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_normalized); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_19LaplacianCentrality_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_LaplacianCentrality *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_19LaplacianCentrality_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_LaplacianCentrality *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_10centrality_17CoreDecomposition___cinit__(struct __pyx_obj_9networkit_10centrality_CoreDecomposition *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, bool __pyx_v_normalized, bool __pyx_v_enforceBucketQueueAlgorithm, bool __pyx_v_storeNodeOrder); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_17CoreDecomposition_2maxCoreNumber(struct __pyx_obj_9networkit_10centrality_CoreDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_17CoreDecomposition_4getCover(struct __pyx_obj_9networkit_10centrality_CoreDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_17CoreDecomposition_6getPartition(struct __pyx_obj_9networkit_10centrality_CoreDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_17CoreDecomposition_8getNodeOrder(struct __pyx_obj_9networkit_10centrality_CoreDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_17CoreDecomposition_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_CoreDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_17CoreDecomposition_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_CoreDecomposition *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_10centrality_21EigenvectorCentrality___cinit__(struct __pyx_obj_9networkit_10centrality_EigenvectorCentrality *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, double __pyx_v_tol); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_21EigenvectorCentrality_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_EigenvectorCentrality *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_21EigenvectorCentrality_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_EigenvectorCentrality *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_10centrality_8PageRank___cinit__(struct __pyx_obj_9networkit_10centrality_PageRank *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, double __pyx_v_damp, double __pyx_v_tol); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_8PageRank_2numberOfIterations(struct __pyx_obj_9networkit_10centrality_PageRank *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_8PageRank_4norm___get__(struct __pyx_obj_9networkit_10centrality_PageRank *__pyx_v_self); /* proto */
static int __pyx_pf_9networkit_10centrality_8PageRank_4norm_2__set__(struct __pyx_obj_9networkit_10centrality_PageRank *__pyx_v_self, enum NetworKit::PageRank::Norm __pyx_v_norm); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_8PageRank_13maxIterations___get__(struct __pyx_obj_9networkit_10centrality_PageRank *__pyx_v_self); /* proto */
static int __pyx_pf_9networkit_10centrality_8PageRank_13maxIterations_2__set__(struct __pyx_obj_9networkit_10centrality_PageRank *__pyx_v_self, PyObject *__pyx_v_maxIterations); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_8PageRank_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_PageRank *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_8PageRank_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_PageRank *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_10centrality_22SpanningEdgeCentrality___cinit__(struct __pyx_obj_9networkit_10centrality_SpanningEdgeCentrality *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, double __pyx_v_tol); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_22SpanningEdgeCentrality_2runApproximation(struct __pyx_obj_9networkit_10centrality_SpanningEdgeCentrality *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_22SpanningEdgeCentrality_4runParallelApproximation(struct __pyx_obj_9networkit_10centrality_SpanningEdgeCentrality *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_22SpanningEdgeCentrality_6scores(struct __pyx_obj_9networkit_10centrality_SpanningEdgeCentrality *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_22SpanningEdgeCentrality_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_SpanningEdgeCentrality *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_22SpanningEdgeCentrality_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_SpanningEdgeCentrality *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_10centrality_25ApproxElectricalCloseness___cinit__(struct __pyx_obj_9networkit_10centrality_ApproxElectricalCloseness *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, double __pyx_v_eps, double __pyx_v_kappa); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_25ApproxElectricalCloseness_2getDiagonal(struct __pyx_obj_9networkit_10centrality_ApproxElectricalCloseness *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_25ApproxElectricalCloseness_4computeExactDiagonal(struct __pyx_obj_9networkit_10centrality_ApproxElectricalCloseness *__pyx_v_self, double __pyx_v_tol); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_25ApproxElectricalCloseness_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_ApproxElectricalCloseness *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_25ApproxElectricalCloseness_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_ApproxElectricalCloseness *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9networkit_10centrality_18ApproxSpanningEdge___cinit__(struct __pyx_obj_9networkit_10centrality_ApproxSpanningEdge *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, double __pyx_v_eps); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_18ApproxSpanningEdge_2scores(struct __pyx_obj_9networkit_10centrality_ApproxSpanningEdge *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_18ApproxSpanningEdge_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_ApproxSpanningEdge *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_18ApproxSpanningEdge_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_ApproxSpanningEdge *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_ranking(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_G, PyObject *__pyx_v_algorithm, PyObject *__pyx_v_normalized); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_2scores(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_G, PyObject *__pyx_v_algorithm, PyObject *__pyx_v_normalized); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_4rankPerNode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_ranking); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_6relativeRankErrors(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_rx, PyObject *__pyx_v_ry); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_18SpectralCentrality___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_G, PyObject *__pyx_v_normalized); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_18SpectralCentrality_2prepareSpectrum(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_18SpectralCentrality_4normFactor(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_18SpectralCentrality_6run(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_18SpectralCentrality_8scores(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_18SpectralCentrality_10ranking(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_8SciPyEVZ___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_G, PyObject *__pyx_v_normalized); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_8SciPyEVZ_2_length(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_vector); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_8SciPyEVZ_4normFactor(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_8SciPyEVZ_6prepareSpectrum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_13SciPyPageRank___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_G, PyObject *__pyx_v_damp, PyObject *__pyx_v_normalized); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_13SciPyPageRank_2_length(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_vector); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_13SciPyPageRank_4normFactor(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9networkit_10centrality_13SciPyPageRank_6prepareSpectrum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_tp_new_9networkit_10centrality_Centrality(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_10centrality_Betweenness(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_10centrality_ApproxBetweenness(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_10centrality_EstimateBetweenness(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_10centrality_KadabraBetweenness(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_10centrality_DynBetweenness(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_10centrality_DynApproxBetweenness(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_10centrality_DynBetweennessOneNode(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_10centrality_Closeness(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_10centrality_ApproxCloseness(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_10centrality_DegreeCentrality(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_10centrality_HarmonicCloseness(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_10centrality_TopCloseness(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_10centrality_TopHarmonicCloseness(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_10centrality_DynTopHarmonicCloseness(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_10centrality_LocalPartitionCoverage(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_10centrality_GroupDegree(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_10centrality_GedWalk(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_10centrality_ApproxGroupBetweenness(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_10centrality_GroupCloseness(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_10centrality_KPathCentrality(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_10centrality_KatzCentrality(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_10centrality_DynKatzCentrality(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_10centrality_LocalClusteringCoefficient(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_10centrality_Sfigality(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_10centrality_PermanenceCentrality(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_10centrality_LaplacianCentrality(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_10centrality_CoreDecomposition(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_10centrality_EigenvectorCentrality(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_10centrality_PageRank(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_10centrality_SpanningEdgeCentrality(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_10centrality_ApproxElectricalCloseness(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9networkit_10centrality_ApproxSpanningEdge(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float_0_1;
static PyObject *__pyx_float_0_2;
static PyObject *__pyx_float_0_5;
static PyObject *__pyx_float_1_0;
static PyObject *__pyx_float_0_01;
static PyObject *__pyx_float_0_95;
static PyObject *__pyx_float_1eneg_8;
static PyObject *__pyx_float_1eneg_9;
static PyObject *__pyx_float_neg_1_0;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_100;
static enum NetworKit::ApproxCloseness::CLOSENESS_TYPE __pyx_k__24;
static PyObject *__pyx_k__41;
static PyObject *__pyx_k__42;
static PyObject *__pyx_k__77;
static PyObject *__pyx_k__78;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__71;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_tuple__73;
static PyObject *__pyx_tuple__74;
static PyObject *__pyx_tuple__75;
static PyObject *__pyx_tuple__76;
static PyObject *__pyx_tuple__79;
static PyObject *__pyx_tuple__80;
static PyObject *__pyx_tuple__81;
static PyObject *__pyx_tuple__82;
static PyObject *__pyx_tuple__83;
static PyObject *__pyx_tuple__84;
static PyObject *__pyx_tuple__85;
static PyObject *__pyx_tuple__87;
static PyObject *__pyx_tuple__89;
static PyObject *__pyx_tuple__91;
static PyObject *__pyx_tuple__93;
static PyObject *__pyx_tuple__95;
static PyObject *__pyx_tuple__96;
static PyObject *__pyx_tuple__98;
static PyObject *__pyx_tuple__100;
static PyObject *__pyx_tuple__102;
static PyObject *__pyx_tuple__104;
static PyObject *__pyx_tuple__106;
static PyObject *__pyx_tuple__108;
static PyObject *__pyx_tuple__109;
static PyObject *__pyx_tuple__111;
static PyObject *__pyx_tuple__113;
static PyObject *__pyx_tuple__115;
static PyObject *__pyx_tuple__117;
static PyObject *__pyx_tuple__118;
static PyObject *__pyx_tuple__120;
static PyObject *__pyx_tuple__122;
static PyObject *__pyx_codeobj__86;
static PyObject *__pyx_codeobj__88;
static PyObject *__pyx_codeobj__90;
static PyObject *__pyx_codeobj__92;
static PyObject *__pyx_codeobj__94;
static PyObject *__pyx_codeobj__97;
static PyObject *__pyx_codeobj__99;
static PyObject *__pyx_codeobj__101;
static PyObject *__pyx_codeobj__103;
static PyObject *__pyx_codeobj__105;
static PyObject *__pyx_codeobj__107;
static PyObject *__pyx_codeobj__110;
static PyObject *__pyx_codeobj__112;
static PyObject *__pyx_codeobj__114;
static PyObject *__pyx_codeobj__116;
static PyObject *__pyx_codeobj__119;
static PyObject *__pyx_codeobj__121;
static PyObject *__pyx_codeobj__123;
/* Late includes */

/* "networkit/centrality.pyx":36
 * 	cdef Graph _G
 * 
 * 	def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 * 		if type(self) == Centrality:
 * 			raise RuntimeError("Error, you may not use Centrality directly, use a sub-class instead")
 */

/* Python wrapper */
static int __pyx_pw_9networkit_10centrality_10Centrality_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_10centrality_10Centrality_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_9networkit_10centrality_10Centrality___init__(((struct __pyx_obj_9networkit_10centrality_Centrality *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_10centrality_10Centrality___init__(struct __pyx_obj_9networkit_10centrality_Centrality *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "networkit/centrality.pyx":37
 * 
 * 	def __init__(self, *args, **kwargs):
 * 		if type(self) == Centrality:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, you may not use Centrality directly, use a sub-class instead")
 * 
 */
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))), ((PyObject *)__pyx_ptype_9networkit_10centrality_Centrality), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 37, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_2)) {

    /* "networkit/centrality.pyx":38
 * 	def __init__(self, *args, **kwargs):
 * 		if type(self) == Centrality:
 * 			raise RuntimeError("Error, you may not use Centrality directly, use a sub-class instead")             # <<<<<<<<<<<<<<
 * 
 * 	def __dealloc__(self):
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 38, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 38, __pyx_L1_error)

    /* "networkit/centrality.pyx":37
 * 
 * 	def __init__(self, *args, **kwargs):
 * 		if type(self) == Centrality:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, you may not use Centrality directly, use a sub-class instead")
 * 
 */
  }

  /* "networkit/centrality.pyx":36
 * 	cdef Graph _G
 * 
 * 	def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 * 		if type(self) == Centrality:
 * 			raise RuntimeError("Error, you may not use Centrality directly, use a sub-class instead")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.Centrality.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":40
 * 			raise RuntimeError("Error, you may not use Centrality directly, use a sub-class instead")
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		self._G = None # just to be sure the graph is deleted
 * 
 */

/* Python wrapper */
static void __pyx_pw_9networkit_10centrality_10Centrality_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_9networkit_10centrality_10Centrality_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_9networkit_10centrality_10Centrality_2__dealloc__(((struct __pyx_obj_9networkit_10centrality_Centrality *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_9networkit_10centrality_10Centrality_2__dealloc__(struct __pyx_obj_9networkit_10centrality_Centrality *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "networkit/centrality.pyx":41
 * 
 * 	def __dealloc__(self):
 * 		self._G = None # just to be sure the graph is deleted             # <<<<<<<<<<<<<<
 * 
 * 	def scores(self):
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_G));
  __pyx_v_self->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None);

  /* "networkit/centrality.pyx":40
 * 			raise RuntimeError("Error, you may not use Centrality directly, use a sub-class instead")
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		self._G = None # just to be sure the graph is deleted
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "networkit/centrality.pyx":43
 * 		self._G = None # just to be sure the graph is deleted
 * 
 * 	def scores(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns:
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_10Centrality_5scores(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9networkit_10centrality_10Centrality_4scores[] = "\n\t\tReturns:\n\t\t--------\n\t\tlist\n\t\t\tthe list of all scores\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_10Centrality_5scores(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scores (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_10Centrality_4scores(((struct __pyx_obj_9networkit_10centrality_Centrality *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_10Centrality_4scores(struct __pyx_obj_9networkit_10centrality_Centrality *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  std::vector<double>  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("scores", 0);

  /* "networkit/centrality.pyx":50
 * 			the list of all scores
 * 		"""
 * 		if self._this == NULL:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return (<_Centrality*>(self._this)).scores()
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base._this == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "networkit/centrality.pyx":51
 * 		"""
 * 		if self._this == NULL:
 * 			raise RuntimeError("Error, object not properly initialized")             # <<<<<<<<<<<<<<
 * 		return (<_Centrality*>(self._this)).scores()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 51, __pyx_L1_error)

    /* "networkit/centrality.pyx":50
 * 			the list of all scores
 * 		"""
 * 		if self._this == NULL:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return (<_Centrality*>(self._this)).scores()
 */
  }

  /* "networkit/centrality.pyx":52
 * 		if self._this == NULL:
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return (<_Centrality*>(self._this)).scores()             # <<<<<<<<<<<<<<
 * 
 * 	def score(self, v):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_3 = ((NetworKit::Centrality *)__pyx_v_self->__pyx_base._this)->scores();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 52, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py_double(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":43
 * 		self._G = None # just to be sure the graph is deleted
 * 
 * 	def scores(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.centrality.Centrality.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":54
 * 		return (<_Centrality*>(self._this)).scores()
 * 
 * 	def score(self, v):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns:
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_10Centrality_7score(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static char __pyx_doc_9networkit_10centrality_10Centrality_6score[] = "\n\t\tReturns:\n\t\t--------\n\t\tthe score of node v\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_10Centrality_7score(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("score (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_10Centrality_6score(((struct __pyx_obj_9networkit_10centrality_Centrality *)__pyx_v_self), ((PyObject *)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_10Centrality_6score(struct __pyx_obj_9networkit_10centrality_Centrality *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __pyx_t_9networkit_10centrality_node __pyx_t_3;
  double __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("score", 0);

  /* "networkit/centrality.pyx":60
 * 		the score of node v
 * 		"""
 * 		if self._this == NULL:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return (<_Centrality*>(self._this)).score(v)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base._this == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "networkit/centrality.pyx":61
 * 		"""
 * 		if self._this == NULL:
 * 			raise RuntimeError("Error, object not properly initialized")             # <<<<<<<<<<<<<<
 * 		return (<_Centrality*>(self._this)).score(v)
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 61, __pyx_L1_error)

    /* "networkit/centrality.pyx":60
 * 		the score of node v
 * 		"""
 * 		if self._this == NULL:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return (<_Centrality*>(self._this)).score(v)
 */
  }

  /* "networkit/centrality.pyx":62
 * 		if self._this == NULL:
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return (<_Centrality*>(self._this)).score(v)             # <<<<<<<<<<<<<<
 * 
 * 	def ranking(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_v_v); if (unlikely((__pyx_t_3 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 62, __pyx_L1_error)
  try {
    __pyx_t_4 = ((NetworKit::Centrality *)__pyx_v_self->__pyx_base._this)->score(__pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 62, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":54
 * 		return (<_Centrality*>(self._this)).scores()
 * 
 * 	def score(self, v):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.centrality.Centrality.score", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":64
 * 		return (<_Centrality*>(self._this)).score(v)
 * 
 * 	def ranking(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns:
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_10Centrality_9ranking(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9networkit_10centrality_10Centrality_8ranking[] = "\n\t\tReturns:\n\t\t--------\n\t\tdictionary\n\t\t\ta vector of pairs sorted into descending order. Each pair contains a node and the corresponding score\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_10Centrality_9ranking(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ranking (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_10Centrality_8ranking(((struct __pyx_obj_9networkit_10centrality_Centrality *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_10Centrality_8ranking(struct __pyx_obj_9networkit_10centrality_Centrality *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  std::vector<std::pair<__pyx_t_9networkit_10centrality_node,double> >  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ranking", 0);

  /* "networkit/centrality.pyx":71
 * 			a vector of pairs sorted into descending order. Each pair contains a node and the corresponding score
 * 		"""
 * 		if self._this == NULL:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return (<_Centrality*>(self._this)).ranking()
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base._this == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "networkit/centrality.pyx":72
 * 		"""
 * 		if self._this == NULL:
 * 			raise RuntimeError("Error, object not properly initialized")             # <<<<<<<<<<<<<<
 * 		return (<_Centrality*>(self._this)).ranking()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 72, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 72, __pyx_L1_error)

    /* "networkit/centrality.pyx":71
 * 			a vector of pairs sorted into descending order. Each pair contains a node and the corresponding score
 * 		"""
 * 		if self._this == NULL:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return (<_Centrality*>(self._this)).ranking()
 */
  }

  /* "networkit/centrality.pyx":73
 * 		if self._this == NULL:
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return (<_Centrality*>(self._this)).ranking()             # <<<<<<<<<<<<<<
 * 
 * 	def maximum(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_3 = ((NetworKit::Centrality *)__pyx_v_self->__pyx_base._this)->ranking();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 73, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c___pyx_t_9networkit_10centrality_node_2c_double_3e___(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":64
 * 		return (<_Centrality*>(self._this)).score(v)
 * 
 * 	def ranking(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.centrality.Centrality.ranking", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":75
 * 		return (<_Centrality*>(self._this)).ranking()
 * 
 * 	def maximum(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns:
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_10Centrality_11maximum(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9networkit_10centrality_10Centrality_10maximum[] = "\n\t\tReturns:\n\t\t--------\n\t\tthe maximum theoretical centrality score for the given graph\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_10Centrality_11maximum(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("maximum (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_10Centrality_10maximum(((struct __pyx_obj_9networkit_10centrality_Centrality *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_10Centrality_10maximum(struct __pyx_obj_9networkit_10centrality_Centrality *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("maximum", 0);

  /* "networkit/centrality.pyx":81
 * 		the maximum theoretical centrality score for the given graph
 * 		"""
 * 		if self._this == NULL:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return (<_Centrality*>(self._this)).maximum()
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base._this == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "networkit/centrality.pyx":82
 * 		"""
 * 		if self._this == NULL:
 * 			raise RuntimeError("Error, object not properly initialized")             # <<<<<<<<<<<<<<
 * 		return (<_Centrality*>(self._this)).maximum()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 82, __pyx_L1_error)

    /* "networkit/centrality.pyx":81
 * 		the maximum theoretical centrality score for the given graph
 * 		"""
 * 		if self._this == NULL:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return (<_Centrality*>(self._this)).maximum()
 */
  }

  /* "networkit/centrality.pyx":83
 * 		if self._this == NULL:
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return (<_Centrality*>(self._this)).maximum()             # <<<<<<<<<<<<<<
 * 
 * 	def centralization(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_3 = ((NetworKit::Centrality *)__pyx_v_self->__pyx_base._this)->maximum();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 83, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":75
 * 		return (<_Centrality*>(self._this)).ranking()
 * 
 * 	def maximum(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.centrality.Centrality.maximum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":85
 * 		return (<_Centrality*>(self._this)).maximum()
 * 
 * 	def centralization(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Compute the centralization of a network with respect to some centrality measure.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_10Centrality_13centralization(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9networkit_10centrality_10Centrality_12centralization[] = "\n\t\tCompute the centralization of a network with respect to some centrality measure.\n\t\tThe centralization of any network is a measure of how central its most central\n\t\tnode is in relation to how central all the other nodes are.\n\t\tCentralization measures then (a) calculate the sum in differences\n\t\tin centrality between the most central node in a network and all other nodes;\n\t\tand (b) divide this quantity by the theoretically largest such sum of\n\t\tdifferences in any network of the same size.\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_10Centrality_13centralization(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("centralization (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_10Centrality_12centralization(((struct __pyx_obj_9networkit_10centrality_Centrality *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_10Centrality_12centralization(struct __pyx_obj_9networkit_10centrality_Centrality *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("centralization", 0);

  /* "networkit/centrality.pyx":95
 * 		differences in any network of the same size.
 * 		"""
 * 		if self._this == NULL:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return (<_Centrality*>(self._this)).centralization()
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base._this == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "networkit/centrality.pyx":96
 * 		"""
 * 		if self._this == NULL:
 * 			raise RuntimeError("Error, object not properly initialized")             # <<<<<<<<<<<<<<
 * 		return (<_Centrality*>(self._this)).centralization()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 96, __pyx_L1_error)

    /* "networkit/centrality.pyx":95
 * 		differences in any network of the same size.
 * 		"""
 * 		if self._this == NULL:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return (<_Centrality*>(self._this)).centralization()
 */
  }

  /* "networkit/centrality.pyx":97
 * 		if self._this == NULL:
 * 			raise RuntimeError("Error, object not properly initialized")
 * 		return (<_Centrality*>(self._this)).centralization()             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/centrality/Betweenness.hpp>":
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_3 = ((NetworKit::Centrality *)__pyx_v_self->__pyx_base._this)->centralization();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 97, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":85
 * 		return (<_Centrality*>(self._this)).maximum()
 * 
 * 	def centralization(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Compute the centralization of a network with respect to some centrality measure.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.centrality.Centrality.centralization", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_10Centrality_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_10Centrality_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_10Centrality_14__reduce_cython__(((struct __pyx_obj_9networkit_10centrality_Centrality *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_10Centrality_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_Centrality *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.Centrality.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_10Centrality_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_10Centrality_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_10Centrality_16__setstate_cython__(((struct __pyx_obj_9networkit_10centrality_Centrality *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_10Centrality_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_Centrality *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.Centrality.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":123
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, normalized=False, computeEdgeCentrality=False):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _Betweenness(G._this, normalized, computeEdgeCentrality)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_10centrality_11Betweenness_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_10centrality_11Betweenness_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  PyObject *__pyx_v_normalized = 0;
  PyObject *__pyx_v_computeEdgeCentrality = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_normalized,&__pyx_n_s_computeEdgeCentrality,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_False);
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_normalized);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_computeEdgeCentrality);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 123, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_normalized = values[1];
    __pyx_v_computeEdgeCentrality = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 123, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.Betweenness.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 123, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_10centrality_11Betweenness___cinit__(((struct __pyx_obj_9networkit_10centrality_Betweenness *)__pyx_v_self), __pyx_v_G, __pyx_v_normalized, __pyx_v_computeEdgeCentrality);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_10centrality_11Betweenness___cinit__(struct __pyx_obj_9networkit_10centrality_Betweenness *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_normalized, PyObject *__pyx_v_computeEdgeCentrality) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  bool __pyx_t_2;
  NetworKit::Betweenness *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/centrality.pyx":124
 * 
 * 	def __cinit__(self, Graph G, normalized=False, computeEdgeCentrality=False):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _Betweenness(G._this, normalized, computeEdgeCentrality)
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base._G));
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/centrality.pyx":125
 * 	def __cinit__(self, Graph G, normalized=False, computeEdgeCentrality=False):
 * 		self._G = G
 * 		self._this = new _Betweenness(G._this, normalized, computeEdgeCentrality)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_normalized); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 125, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_computeEdgeCentrality); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 125, __pyx_L1_error)
  try {
    __pyx_t_3 = new NetworKit::Betweenness(__pyx_v_G->_this, __pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 125, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_3;

  /* "networkit/centrality.pyx":123
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, normalized=False, computeEdgeCentrality=False):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _Betweenness(G._this, normalized, computeEdgeCentrality)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.centrality.Betweenness.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":128
 * 
 * 
 * 	def edgeScores(self):             # <<<<<<<<<<<<<<
 * 		""" Get a vector containing the betweenness score for each edge in the graph.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_11Betweenness_3edgeScores(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9networkit_10centrality_11Betweenness_2edgeScores[] = " Get a vector containing the betweenness score for each edge in the graph.\n\n\t\tReturns:\n\t\t--------\n\t\tvector\n\t\t\tThe betweenness scores calculated by run().\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_11Betweenness_3edgeScores(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("edgeScores (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_11Betweenness_2edgeScores(((struct __pyx_obj_9networkit_10centrality_Betweenness *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_11Betweenness_2edgeScores(struct __pyx_obj_9networkit_10centrality_Betweenness *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("edgeScores", 0);

  /* "networkit/centrality.pyx":136
 * 			The betweenness scores calculated by run().
 * 		"""
 * 		return (<_Betweenness*>(self._this)).edgeScores()             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/centrality/ApproxBetweenness.hpp>":
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::Betweenness *)__pyx_v_self->__pyx_base.__pyx_base._this)->edgeScores();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 136, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py_double(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":128
 * 
 * 
 * 	def edgeScores(self):             # <<<<<<<<<<<<<<
 * 		""" Get a vector containing the betweenness score for each edge in the graph.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.centrality.Betweenness.edgeScores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_11Betweenness_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_11Betweenness_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_11Betweenness_4__reduce_cython__(((struct __pyx_obj_9networkit_10centrality_Betweenness *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_11Betweenness_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_Betweenness *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.Betweenness.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_11Betweenness_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_11Betweenness_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_11Betweenness_6__setstate_cython__(((struct __pyx_obj_9networkit_10centrality_Betweenness *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_11Betweenness_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_Betweenness *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.Betweenness.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":171
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, epsilon=0.01, delta=0.1, universalConstant=1.0):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _ApproxBetweenness(G._this, epsilon, delta, universalConstant)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_10centrality_17ApproxBetweenness_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_10centrality_17ApproxBetweenness_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  PyObject *__pyx_v_epsilon = 0;
  PyObject *__pyx_v_delta = 0;
  PyObject *__pyx_v_universalConstant = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_epsilon,&__pyx_n_s_delta,&__pyx_n_s_universalConstant,0};
    PyObject* values[4] = {0,0,0,0};
    values[1] = ((PyObject *)__pyx_float_0_01);
    values[2] = ((PyObject *)__pyx_float_0_1);
    values[3] = ((PyObject *)__pyx_float_1_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_epsilon);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_delta);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_universalConstant);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 171, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_epsilon = values[1];
    __pyx_v_delta = values[2];
    __pyx_v_universalConstant = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 171, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.ApproxBetweenness.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 171, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_10centrality_17ApproxBetweenness___cinit__(((struct __pyx_obj_9networkit_10centrality_ApproxBetweenness *)__pyx_v_self), __pyx_v_G, __pyx_v_epsilon, __pyx_v_delta, __pyx_v_universalConstant);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_10centrality_17ApproxBetweenness___cinit__(struct __pyx_obj_9networkit_10centrality_ApproxBetweenness *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_epsilon, PyObject *__pyx_v_delta, PyObject *__pyx_v_universalConstant) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  double __pyx_t_3;
  NetworKit::ApproxBetweenness *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/centrality.pyx":172
 * 
 * 	def __cinit__(self, Graph G, epsilon=0.01, delta=0.1, universalConstant=1.0):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _ApproxBetweenness(G._this, epsilon, delta, universalConstant)
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base._G));
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/centrality.pyx":173
 * 	def __cinit__(self, Graph G, epsilon=0.01, delta=0.1, universalConstant=1.0):
 * 		self._G = G
 * 		self._this = new _ApproxBetweenness(G._this, epsilon, delta, universalConstant)             # <<<<<<<<<<<<<<
 * 
 * 	def numberOfSamples(self):
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_epsilon); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 173, __pyx_L1_error)
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_delta); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 173, __pyx_L1_error)
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_universalConstant); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 173, __pyx_L1_error)
  try {
    __pyx_t_4 = new NetworKit::ApproxBetweenness(__pyx_v_G->_this, __pyx_t_1, __pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 173, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_4;

  /* "networkit/centrality.pyx":171
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, epsilon=0.01, delta=0.1, universalConstant=1.0):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _ApproxBetweenness(G._this, epsilon, delta, universalConstant)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.centrality.ApproxBetweenness.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":175
 * 		self._this = new _ApproxBetweenness(G._this, epsilon, delta, universalConstant)
 * 
 * 	def numberOfSamples(self):             # <<<<<<<<<<<<<<
 * 		return (<_ApproxBetweenness*>(self._this)).numberOfSamples()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_17ApproxBetweenness_3numberOfSamples(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_17ApproxBetweenness_3numberOfSamples(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("numberOfSamples (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_17ApproxBetweenness_2numberOfSamples(((struct __pyx_obj_9networkit_10centrality_ApproxBetweenness *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_17ApproxBetweenness_2numberOfSamples(struct __pyx_obj_9networkit_10centrality_ApproxBetweenness *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10centrality_count __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("numberOfSamples", 0);

  /* "networkit/centrality.pyx":176
 * 
 * 	def numberOfSamples(self):
 * 		return (<_ApproxBetweenness*>(self._this)).numberOfSamples()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::ApproxBetweenness *)__pyx_v_self->__pyx_base.__pyx_base._this)->numberOfSamples();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 176, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_uint64_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":175
 * 		self._this = new _ApproxBetweenness(G._this, epsilon, delta, universalConstant)
 * 
 * 	def numberOfSamples(self):             # <<<<<<<<<<<<<<
 * 		return (<_ApproxBetweenness*>(self._this)).numberOfSamples()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.centrality.ApproxBetweenness.numberOfSamples", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_17ApproxBetweenness_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_17ApproxBetweenness_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_17ApproxBetweenness_4__reduce_cython__(((struct __pyx_obj_9networkit_10centrality_ApproxBetweenness *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_17ApproxBetweenness_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_ApproxBetweenness *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.ApproxBetweenness.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_17ApproxBetweenness_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_17ApproxBetweenness_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_17ApproxBetweenness_6__setstate_cython__(((struct __pyx_obj_9networkit_10centrality_ApproxBetweenness *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_17ApproxBetweenness_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_ApproxBetweenness *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.ApproxBetweenness.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":215
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, nSamples, normalized=False, parallel=False, seed=0, sources=None, targets=None):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 
 */

/* Python wrapper */
static int __pyx_pw_9networkit_10centrality_19EstimateBetweenness_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_10centrality_19EstimateBetweenness_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  PyObject *__pyx_v_nSamples = 0;
  PyObject *__pyx_v_normalized = 0;
  PyObject *__pyx_v_parallel = 0;
  PyObject *__pyx_v_seed = 0;
  PyObject *__pyx_v_sources = 0;
  PyObject *__pyx_v_targets = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_nSamples,&__pyx_n_s_normalized,&__pyx_n_s_parallel,&__pyx_n_s_seed,&__pyx_n_s_sources,&__pyx_n_s_targets,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    values[2] = ((PyObject *)Py_False);
    values[3] = ((PyObject *)Py_False);
    values[4] = ((PyObject *)__pyx_int_0);
    values[5] = ((PyObject *)Py_None);
    values[6] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nSamples)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 7, 1); __PYX_ERR(0, 215, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_normalized);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parallel);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_seed);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sources);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_targets);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 215, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_nSamples = values[1];
    __pyx_v_normalized = values[2];
    __pyx_v_parallel = values[3];
    __pyx_v_seed = values[4];
    __pyx_v_sources = values[5];
    __pyx_v_targets = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 215, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.EstimateBetweenness.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 215, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_10centrality_19EstimateBetweenness___cinit__(((struct __pyx_obj_9networkit_10centrality_EstimateBetweenness *)__pyx_v_self), __pyx_v_G, __pyx_v_nSamples, __pyx_v_normalized, __pyx_v_parallel, __pyx_v_seed, __pyx_v_sources, __pyx_v_targets);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_10centrality_19EstimateBetweenness___cinit__(struct __pyx_obj_9networkit_10centrality_EstimateBetweenness *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_nSamples, PyObject *__pyx_v_normalized, PyObject *__pyx_v_parallel, PyObject *__pyx_v_seed, PyObject *__pyx_v_sources, PyObject *__pyx_v_targets) {
  std::vector<size_t>  __pyx_v_sources_vec;
  std::vector<size_t>  __pyx_v_targets_vec;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  std::vector<size_t>  __pyx_t_6;
  __pyx_t_9networkit_10centrality_count __pyx_t_7;
  bool __pyx_t_8;
  bool __pyx_t_9;
  unsigned int __pyx_t_10;
  NetworKit::EstimateBetweenness *__pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_INCREF(__pyx_v_sources);
  __Pyx_INCREF(__pyx_v_targets);

  /* "networkit/centrality.pyx":216
 * 
 * 	def __cinit__(self, Graph G, nSamples, normalized=False, parallel=False, seed=0, sources=None, targets=None):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 
 * 		cdef vector[size_t] sources_vec
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base._G));
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/centrality.pyx":222
 * 
 * 		# Initialize source nodes
 * 		if sources is None:             # <<<<<<<<<<<<<<
 * 			print('Source nodes not specified, set to all nodes by default')
 * 			sources = list(range(G.numberOfNodes()))
 */
  __pyx_t_1 = (__pyx_v_sources == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "networkit/centrality.pyx":223
 * 		# Initialize source nodes
 * 		if sources is None:
 * 			print('Source nodes not specified, set to all nodes by default')             # <<<<<<<<<<<<<<
 * 			sources = list(range(G.numberOfNodes()))
 * 			sources_vec = sources
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "networkit/centrality.pyx":224
 * 		if sources is None:
 * 			print('Source nodes not specified, set to all nodes by default')
 * 			sources = list(range(G.numberOfNodes()))             # <<<<<<<<<<<<<<
 * 			sources_vec = sources
 * 		else:
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_G), __pyx_n_s_numberOfNodes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 224, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 224, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 224, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PySequence_List(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 224, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_sources, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "networkit/centrality.pyx":225
 * 			print('Source nodes not specified, set to all nodes by default')
 * 			sources = list(range(G.numberOfNodes()))
 * 			sources_vec = sources             # <<<<<<<<<<<<<<
 * 		else:
 * 			sources_vec = sources
 */
    __pyx_t_6 = __pyx_convert_vector_from_py_size_t(__pyx_v_sources); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 225, __pyx_L1_error)
    __pyx_v_sources_vec = __pyx_t_6;

    /* "networkit/centrality.pyx":222
 * 
 * 		# Initialize source nodes
 * 		if sources is None:             # <<<<<<<<<<<<<<
 * 			print('Source nodes not specified, set to all nodes by default')
 * 			sources = list(range(G.numberOfNodes()))
 */
    goto __pyx_L3;
  }

  /* "networkit/centrality.pyx":227
 * 			sources_vec = sources
 * 		else:
 * 			sources_vec = sources             # <<<<<<<<<<<<<<
 * 
 * 		# Initialize target nodes
 */
  /*else*/ {
    __pyx_t_6 = __pyx_convert_vector_from_py_size_t(__pyx_v_sources); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 227, __pyx_L1_error)
    __pyx_v_sources_vec = __pyx_t_6;
  }
  __pyx_L3:;

  /* "networkit/centrality.pyx":230
 * 
 * 		# Initialize target nodes
 * 		if targets is None:             # <<<<<<<<<<<<<<
 * 			print('Target nodes not specified, set to all nodes by default')
 * 			targets = list(range(G.numberOfNodes()))
 */
  __pyx_t_2 = (__pyx_v_targets == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "networkit/centrality.pyx":231
 * 		# Initialize target nodes
 * 		if targets is None:
 * 			print('Target nodes not specified, set to all nodes by default')             # <<<<<<<<<<<<<<
 * 			targets = list(range(G.numberOfNodes()))
 * 			targets_vec = targets
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 231, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "networkit/centrality.pyx":232
 * 		if targets is None:
 * 			print('Target nodes not specified, set to all nodes by default')
 * 			targets = list(range(G.numberOfNodes()))             # <<<<<<<<<<<<<<
 * 			targets_vec = targets
 * 		else:
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_G), __pyx_n_s_numberOfNodes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 232, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 232, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 232, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PySequence_List(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 232, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_targets, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "networkit/centrality.pyx":233
 * 			print('Target nodes not specified, set to all nodes by default')
 * 			targets = list(range(G.numberOfNodes()))
 * 			targets_vec = targets             # <<<<<<<<<<<<<<
 * 		else:
 * 			targets_vec = targets
 */
    __pyx_t_6 = __pyx_convert_vector_from_py_size_t(__pyx_v_targets); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 233, __pyx_L1_error)
    __pyx_v_targets_vec = __pyx_t_6;

    /* "networkit/centrality.pyx":230
 * 
 * 		# Initialize target nodes
 * 		if targets is None:             # <<<<<<<<<<<<<<
 * 			print('Target nodes not specified, set to all nodes by default')
 * 			targets = list(range(G.numberOfNodes()))
 */
    goto __pyx_L4;
  }

  /* "networkit/centrality.pyx":235
 * 			targets_vec = targets
 * 		else:
 * 			targets_vec = targets             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_t_6 = __pyx_convert_vector_from_py_size_t(__pyx_v_targets); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 235, __pyx_L1_error)
    __pyx_v_targets_vec = __pyx_t_6;
  }
  __pyx_L4:;

  /* "networkit/centrality.pyx":238
 * 
 * 
 * 		self._this = new _EstimateBetweenness(G._this, nSamples, normalized, parallel, seed, sources_vec, targets_vec)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/centrality/KadabraBetweenness.hpp>":
 */
  __pyx_t_7 = __Pyx_PyInt_As_uint64_t(__pyx_v_nSamples); if (unlikely((__pyx_t_7 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 238, __pyx_L1_error)
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_v_normalized); if (unlikely((__pyx_t_8 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 238, __pyx_L1_error)
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_v_parallel); if (unlikely((__pyx_t_9 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 238, __pyx_L1_error)
  __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_v_seed); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 238, __pyx_L1_error)
  try {
    __pyx_t_11 = new NetworKit::EstimateBetweenness(__pyx_v_G->_this, __pyx_t_7, __pyx_t_8, __pyx_t_9, __pyx_t_10, __pyx_v_sources_vec, __pyx_v_targets_vec);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 238, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_11;

  /* "networkit/centrality.pyx":215
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, nSamples, normalized=False, parallel=False, seed=0, sources=None, targets=None):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("networkit.centrality.EstimateBetweenness.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_sources);
  __Pyx_XDECREF(__pyx_v_targets);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_19EstimateBetweenness_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_19EstimateBetweenness_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_19EstimateBetweenness_2__reduce_cython__(((struct __pyx_obj_9networkit_10centrality_EstimateBetweenness *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_19EstimateBetweenness_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_EstimateBetweenness *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.EstimateBetweenness.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_19EstimateBetweenness_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_19EstimateBetweenness_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_19EstimateBetweenness_4__setstate_cython__(((struct __pyx_obj_9networkit_10centrality_EstimateBetweenness *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_19EstimateBetweenness_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_EstimateBetweenness *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.EstimateBetweenness.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":292
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, err = 0.01, delta = 0.1, k = 0,             # <<<<<<<<<<<<<<
 * 				  unionSample = 0, startFactor = 100):
 * 		self._this = new _KadabraBetweenness(G._this, err, delta, k, unionSample,
 */

/* Python wrapper */
static int __pyx_pw_9networkit_10centrality_18KadabraBetweenness_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_10centrality_18KadabraBetweenness_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  PyObject *__pyx_v_err = 0;
  PyObject *__pyx_v_delta = 0;
  PyObject *__pyx_v_k = 0;
  PyObject *__pyx_v_unionSample = 0;
  PyObject *__pyx_v_startFactor = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_err,&__pyx_n_s_delta,&__pyx_n_s_k,&__pyx_n_s_unionSample,&__pyx_n_s_startFactor,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[1] = ((PyObject *)__pyx_float_0_01);
    values[2] = ((PyObject *)__pyx_float_0_1);
    values[3] = ((PyObject *)__pyx_int_0);
    values[4] = ((PyObject *)__pyx_int_0);
    values[5] = ((PyObject *)__pyx_int_100);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_err);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_delta);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_unionSample);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_startFactor);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 292, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_err = values[1];
    __pyx_v_delta = values[2];
    __pyx_v_k = values[3];
    __pyx_v_unionSample = values[4];
    __pyx_v_startFactor = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 292, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.KadabraBetweenness.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 292, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_10centrality_18KadabraBetweenness___cinit__(((struct __pyx_obj_9networkit_10centrality_KadabraBetweenness *)__pyx_v_self), __pyx_v_G, __pyx_v_err, __pyx_v_delta, __pyx_v_k, __pyx_v_unionSample, __pyx_v_startFactor);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_10centrality_18KadabraBetweenness___cinit__(struct __pyx_obj_9networkit_10centrality_KadabraBetweenness *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_err, PyObject *__pyx_v_delta, PyObject *__pyx_v_k, PyObject *__pyx_v_unionSample, PyObject *__pyx_v_startFactor) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  __pyx_t_9networkit_10centrality_count __pyx_t_3;
  __pyx_t_9networkit_10centrality_count __pyx_t_4;
  __pyx_t_9networkit_10centrality_count __pyx_t_5;
  NetworKit::KadabraBetweenness *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/centrality.pyx":294
 * 	def __cinit__(self, Graph G, err = 0.01, delta = 0.1, k = 0,
 * 				  unionSample = 0, startFactor = 100):
 * 		self._this = new _KadabraBetweenness(G._this, err, delta, k, unionSample,             # <<<<<<<<<<<<<<
 * 										   startFactor)
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_err); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 294, __pyx_L1_error)
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_delta); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 294, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_v_k); if (unlikely((__pyx_t_3 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 294, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyInt_As_uint64_t(__pyx_v_unionSample); if (unlikely((__pyx_t_4 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 294, __pyx_L1_error)

  /* "networkit/centrality.pyx":295
 * 				  unionSample = 0, startFactor = 100):
 * 		self._this = new _KadabraBetweenness(G._this, err, delta, k, unionSample,
 * 										   startFactor)             # <<<<<<<<<<<<<<
 * 
 * 	def ranking(self):
 */
  __pyx_t_5 = __Pyx_PyInt_As_uint64_t(__pyx_v_startFactor); if (unlikely((__pyx_t_5 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 295, __pyx_L1_error)

  /* "networkit/centrality.pyx":294
 * 	def __cinit__(self, Graph G, err = 0.01, delta = 0.1, k = 0,
 * 				  unionSample = 0, startFactor = 100):
 * 		self._this = new _KadabraBetweenness(G._this, err, delta, k, unionSample,             # <<<<<<<<<<<<<<
 * 										   startFactor)
 * 
 */
  try {
    __pyx_t_6 = new NetworKit::KadabraBetweenness(__pyx_v_G->_this, __pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_t_4, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 294, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base._this = __pyx_t_6;

  /* "networkit/centrality.pyx":292
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, err = 0.01, delta = 0.1, k = 0,             # <<<<<<<<<<<<<<
 * 				  unionSample = 0, startFactor = 100):
 * 		self._this = new _KadabraBetweenness(G._this, err, delta, k, unionSample,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.centrality.KadabraBetweenness.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":297
 * 										   startFactor)
 * 
 * 	def ranking(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns the ranking of the nodes according to their approximated
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_18KadabraBetweenness_3ranking(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9networkit_10centrality_18KadabraBetweenness_2ranking[] = "\n\t\tReturns the ranking of the nodes according to their approximated\n\t\tbetweenness centrality.\n\n\t\tReturns:\n\t\t--------\n\t\tlist(int, double)\n\t\t\tA list of pairs (node, betweenness) representing the top-k ranking.\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_18KadabraBetweenness_3ranking(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ranking (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_18KadabraBetweenness_2ranking(((struct __pyx_obj_9networkit_10centrality_KadabraBetweenness *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_18KadabraBetweenness_2ranking(struct __pyx_obj_9networkit_10centrality_KadabraBetweenness *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::pair<__pyx_t_9networkit_10centrality_node,double> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ranking", 0);

  /* "networkit/centrality.pyx":307
 * 			A list of pairs (node, betweenness) representing the top-k ranking.
 * 		"""
 * 		return (<_KadabraBetweenness*>(self._this)).ranking()             # <<<<<<<<<<<<<<
 * 
 * 	def topkNodesList(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::KadabraBetweenness *)__pyx_v_self->__pyx_base._this)->ranking();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 307, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c___pyx_t_9networkit_10centrality_node_2c_double_3e___(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":297
 * 										   startFactor)
 * 
 * 	def ranking(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns the ranking of the nodes according to their approximated
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.centrality.KadabraBetweenness.ranking", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":309
 * 		return (<_KadabraBetweenness*>(self._this)).ranking()
 * 
 * 	def topkNodesList(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns Nodes of the graph sorted by their approximated betweenness
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_18KadabraBetweenness_5topkNodesList(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9networkit_10centrality_18KadabraBetweenness_4topkNodesList[] = "\n\t\tReturns Nodes of the graph sorted by their approximated betweenness\n\t\tcentrality.\n\n\t\tReturns:\n\t\t--------\n\t\tlist(int)\n\t\t\tA list with the top-k nodes with highest approximated betweenness\n\t\t\tcentrality.\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_18KadabraBetweenness_5topkNodesList(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("topkNodesList (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_18KadabraBetweenness_4topkNodesList(((struct __pyx_obj_9networkit_10centrality_KadabraBetweenness *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_18KadabraBetweenness_4topkNodesList(struct __pyx_obj_9networkit_10centrality_KadabraBetweenness *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<__pyx_t_9networkit_10centrality_node>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("topkNodesList", 0);

  /* "networkit/centrality.pyx":320
 * 			centrality.
 * 		"""
 * 		return (<_KadabraBetweenness*>(self._this)).topkNodesList()             # <<<<<<<<<<<<<<
 * 
 * 	def topkScoresList(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::KadabraBetweenness *)__pyx_v_self->__pyx_base._this)->topkNodesList();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 320, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py___pyx_t_9networkit_10centrality_node(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":309
 * 		return (<_KadabraBetweenness*>(self._this)).ranking()
 * 
 * 	def topkNodesList(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns Nodes of the graph sorted by their approximated betweenness
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.centrality.KadabraBetweenness.topkNodesList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":322
 * 		return (<_KadabraBetweenness*>(self._this)).topkNodesList()
 * 
 * 	def topkScoresList(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns the sorted list of approximated betweenness centrality scores.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_18KadabraBetweenness_7topkScoresList(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9networkit_10centrality_18KadabraBetweenness_6topkScoresList[] = "\n\t\tReturns the sorted list of approximated betweenness centrality scores.\n\n\t\tReturns:\n\t\t--------\n\t\tlist(double)\n\t\t\tA list with the top-k scores of the nodes with highest approximated\n\t\t\tbetweenness centrality.\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_18KadabraBetweenness_7topkScoresList(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("topkScoresList (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_18KadabraBetweenness_6topkScoresList(((struct __pyx_obj_9networkit_10centrality_KadabraBetweenness *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_18KadabraBetweenness_6topkScoresList(struct __pyx_obj_9networkit_10centrality_KadabraBetweenness *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("topkScoresList", 0);

  /* "networkit/centrality.pyx":332
 * 			betweenness centrality.
 * 		"""
 * 		return (<_KadabraBetweenness*>(self._this)).topkScoresList()             # <<<<<<<<<<<<<<
 * 
 * 	def scores(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::KadabraBetweenness *)__pyx_v_self->__pyx_base._this)->topkScoresList();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 332, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py_double(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":322
 * 		return (<_KadabraBetweenness*>(self._this)).topkNodesList()
 * 
 * 	def topkScoresList(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns the sorted list of approximated betweenness centrality scores.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.centrality.KadabraBetweenness.topkScoresList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":334
 * 		return (<_KadabraBetweenness*>(self._this)).topkScoresList()
 * 
 * 	def scores(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns the approximated betweenness centrality score of all the nodes of
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_18KadabraBetweenness_9scores(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9networkit_10centrality_18KadabraBetweenness_8scores[] = "\n\t\tReturns the approximated betweenness centrality score of all the nodes of\n\t\tthe graph.\n\n\t\tReturns:\n\t\t--------\n\t\tlist(double)\n\t\t\tA list with the approximated betweenness centrality score of each node of\n\t\t\tthe graph.\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_18KadabraBetweenness_9scores(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scores (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_18KadabraBetweenness_8scores(((struct __pyx_obj_9networkit_10centrality_KadabraBetweenness *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_18KadabraBetweenness_8scores(struct __pyx_obj_9networkit_10centrality_KadabraBetweenness *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("scores", 0);

  /* "networkit/centrality.pyx":345
 * 			the graph.
 * 		"""
 * 		return (<_KadabraBetweenness*>(self._this)).scores()             # <<<<<<<<<<<<<<
 * 
 * 	def getNumberOfIterations(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::KadabraBetweenness *)__pyx_v_self->__pyx_base._this)->scores();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 345, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py_double(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":334
 * 		return (<_KadabraBetweenness*>(self._this)).topkScoresList()
 * 
 * 	def scores(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns the approximated betweenness centrality score of all the nodes of
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.centrality.KadabraBetweenness.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":347
 * 		return (<_KadabraBetweenness*>(self._this)).scores()
 * 
 * 	def getNumberOfIterations(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns the total number of samples.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_18KadabraBetweenness_11getNumberOfIterations(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9networkit_10centrality_18KadabraBetweenness_10getNumberOfIterations[] = "\n\t\tReturns the total number of samples.\n\n\t\tReturns:\n\t\t--------\n\t\tcount\n\t\t\tThe total number of shortest paths sampled by the algorithm.\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_18KadabraBetweenness_11getNumberOfIterations(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNumberOfIterations (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_18KadabraBetweenness_10getNumberOfIterations(((struct __pyx_obj_9networkit_10centrality_KadabraBetweenness *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_18KadabraBetweenness_10getNumberOfIterations(struct __pyx_obj_9networkit_10centrality_KadabraBetweenness *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10centrality_count __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNumberOfIterations", 0);

  /* "networkit/centrality.pyx":356
 * 			The total number of shortest paths sampled by the algorithm.
 * 		"""
 * 		return (<_KadabraBetweenness*>(self._this)).getNumberOfIterations()             # <<<<<<<<<<<<<<
 * 
 * 	def getOmega(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::KadabraBetweenness *)__pyx_v_self->__pyx_base._this)->getNumberOfIterations();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 356, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_uint64_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":347
 * 		return (<_KadabraBetweenness*>(self._this)).scores()
 * 
 * 	def getNumberOfIterations(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns the total number of samples.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.centrality.KadabraBetweenness.getNumberOfIterations", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":358
 * 		return (<_KadabraBetweenness*>(self._this)).getNumberOfIterations()
 * 
 * 	def getOmega(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns the upper bound of the required number of samples.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_18KadabraBetweenness_13getOmega(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9networkit_10centrality_18KadabraBetweenness_12getOmega[] = "\n\t\tReturns the upper bound of the required number of samples.\n\n\t\tReturns:\n\t\t--------\n\t\tcount\n\t\t\tUpper bound of the number of shortest paths to be sampled.\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_18KadabraBetweenness_13getOmega(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getOmega (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_18KadabraBetweenness_12getOmega(((struct __pyx_obj_9networkit_10centrality_KadabraBetweenness *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_18KadabraBetweenness_12getOmega(struct __pyx_obj_9networkit_10centrality_KadabraBetweenness *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getOmega", 0);

  /* "networkit/centrality.pyx":367
 * 			Upper bound of the number of shortest paths to be sampled.
 * 		"""
 * 		return(<_KadabraBetweenness*>(self._this)).getOmega()             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/centrality/DynBetweenness.hpp>":
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::KadabraBetweenness *)__pyx_v_self->__pyx_base._this)->getOmega();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 367, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":358
 * 		return (<_KadabraBetweenness*>(self._this)).getNumberOfIterations()
 * 
 * 	def getOmega(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns the upper bound of the required number of samples.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.centrality.KadabraBetweenness.getOmega", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_18KadabraBetweenness_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_18KadabraBetweenness_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_18KadabraBetweenness_14__reduce_cython__(((struct __pyx_obj_9networkit_10centrality_KadabraBetweenness *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_18KadabraBetweenness_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_KadabraBetweenness *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.KadabraBetweenness.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_18KadabraBetweenness_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_18KadabraBetweenness_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_18KadabraBetweenness_16__setstate_cython__(((struct __pyx_obj_9networkit_10centrality_KadabraBetweenness *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_18KadabraBetweenness_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_KadabraBetweenness *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.KadabraBetweenness.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":392
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self, Graph G):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _DynBetweenness(G._this)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_10centrality_14DynBetweenness_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_10centrality_14DynBetweenness_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 392, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 392, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.DynBetweenness.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 392, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_10centrality_14DynBetweenness___cinit__(((struct __pyx_obj_9networkit_10centrality_DynBetweenness *)__pyx_v_self), __pyx_v_G);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_10centrality_14DynBetweenness___cinit__(struct __pyx_obj_9networkit_10centrality_DynBetweenness *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::DynBetweenness *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/centrality.pyx":393
 * 
 * 	def __cinit__(self, Graph G):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _DynBetweenness(G._this)
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->_G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_G));
  __pyx_v_self->_G = __pyx_v_G;

  /* "networkit/centrality.pyx":394
 * 	def __cinit__(self, Graph G):
 * 		self._G = G
 * 		self._this = new _DynBetweenness(G._this)             # <<<<<<<<<<<<<<
 * 
 * 	def update(self, ev):
 */
  try {
    __pyx_t_1 = new NetworKit::DynBetweenness(__pyx_v_G->_this);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 394, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base._this = __pyx_t_1;

  /* "networkit/centrality.pyx":392
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self, Graph G):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _DynBetweenness(G._this)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.centrality.DynBetweenness.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":396
 * 		self._this = new _DynBetweenness(G._this)
 * 
 * 	def update(self, ev):             # <<<<<<<<<<<<<<
 * 		""" Updates the betweenness centralities after the edge insertions.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_14DynBetweenness_3update(PyObject *__pyx_v_self, PyObject *__pyx_v_ev); /*proto*/
static char __pyx_doc_9networkit_10centrality_14DynBetweenness_2update[] = " Updates the betweenness centralities after the edge insertions.\n\n\t\tParameters:\n\t\t-----------\n\t\tev : GraphEvent.\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_14DynBetweenness_3update(PyObject *__pyx_v_self, PyObject *__pyx_v_ev) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_14DynBetweenness_2update(((struct __pyx_obj_9networkit_10centrality_DynBetweenness *)__pyx_v_self), ((PyObject *)__pyx_v_ev));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_14DynBetweenness_2update(struct __pyx_obj_9networkit_10centrality_DynBetweenness *__pyx_v_self, PyObject *__pyx_v_ev) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  enum NetworKit::GraphEvent::Type __pyx_t_2;
  __pyx_t_9networkit_8dynamics_node __pyx_t_3;
  __pyx_t_9networkit_8dynamics_node __pyx_t_4;
  __pyx_t_9networkit_8dynamics_edgeweight __pyx_t_5;
  NetworKit::GraphEvent __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update", 0);

  /* "networkit/centrality.pyx":403
 * 		ev : GraphEvent.
 * 		"""
 * 		(<_DynBetweenness*>(self._this)).update(_GraphEvent(ev.type, ev.u, ev.v, ev.w))             # <<<<<<<<<<<<<<
 * 
 * 	def updateBatch(self, batch):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ev, __pyx_n_s_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((enum NetworKit::GraphEvent::Type)__Pyx_PyInt_As_enum__NetworKit_3a__3a_GraphEvent_3a__3a_Type(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ev, __pyx_n_s_u); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_3 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ev, __pyx_n_s_v); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_4 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ev, __pyx_n_s_w); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_t_6 = NetworKit::GraphEvent(__pyx_t_2, __pyx_t_3, __pyx_t_4, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 403, __pyx_L1_error)
  }
  try {
    ((NetworKit::DynBetweenness *)__pyx_v_self->__pyx_base._this)->update(__pyx_t_6);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 403, __pyx_L1_error)
  }

  /* "networkit/centrality.pyx":396
 * 		self._this = new _DynBetweenness(G._this)
 * 
 * 	def update(self, ev):             # <<<<<<<<<<<<<<
 * 		""" Updates the betweenness centralities after the edge insertions.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.DynBetweenness.update", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":405
 * 		(<_DynBetweenness*>(self._this)).update(_GraphEvent(ev.type, ev.u, ev.v, ev.w))
 * 
 * 	def updateBatch(self, batch):             # <<<<<<<<<<<<<<
 * 		""" Updates the betweenness centralities after the batch `batch` of edge insertions.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_14DynBetweenness_5updateBatch(PyObject *__pyx_v_self, PyObject *__pyx_v_batch); /*proto*/
static char __pyx_doc_9networkit_10centrality_14DynBetweenness_4updateBatch[] = " Updates the betweenness centralities after the batch `batch` of edge insertions.\n\n\t\tParameters:\n\t\t-----------\n\t\tbatch : list of GraphEvent.\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_14DynBetweenness_5updateBatch(PyObject *__pyx_v_self, PyObject *__pyx_v_batch) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("updateBatch (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_14DynBetweenness_4updateBatch(((struct __pyx_obj_9networkit_10centrality_DynBetweenness *)__pyx_v_self), ((PyObject *)__pyx_v_batch));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_14DynBetweenness_4updateBatch(struct __pyx_obj_9networkit_10centrality_DynBetweenness *__pyx_v_self, PyObject *__pyx_v_batch) {
  std::vector<NetworKit::GraphEvent>  __pyx_v__batch;
  PyObject *__pyx_v_ev = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  enum NetworKit::GraphEvent::Type __pyx_t_5;
  __pyx_t_9networkit_8dynamics_node __pyx_t_6;
  __pyx_t_9networkit_8dynamics_node __pyx_t_7;
  __pyx_t_9networkit_8dynamics_edgeweight __pyx_t_8;
  NetworKit::GraphEvent __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("updateBatch", 0);

  /* "networkit/centrality.pyx":413
 * 		"""
 * 		cdef vector[_GraphEvent] _batch
 * 		for ev in batch:             # <<<<<<<<<<<<<<
 * 			_batch.push_back(_GraphEvent(ev.type, ev.u, ev.v, ev.w))
 * 		(<_DynBetweenness*>(self._this)).updateBatch(_batch)
 */
  if (likely(PyList_CheckExact(__pyx_v_batch)) || PyTuple_CheckExact(__pyx_v_batch)) {
    __pyx_t_1 = __pyx_v_batch; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_batch); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 413, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 413, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 413, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 413, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 413, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 413, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 413, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_ev, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "networkit/centrality.pyx":414
 * 		cdef vector[_GraphEvent] _batch
 * 		for ev in batch:
 * 			_batch.push_back(_GraphEvent(ev.type, ev.u, ev.v, ev.w))             # <<<<<<<<<<<<<<
 * 		(<_DynBetweenness*>(self._this)).updateBatch(_batch)
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ev, __pyx_n_s_type); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = ((enum NetworKit::GraphEvent::Type)__Pyx_PyInt_As_enum__NetworKit_3a__3a_GraphEvent_3a__3a_Type(__pyx_t_4)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 414, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ev, __pyx_n_s_u); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyInt_As_uint64_t(__pyx_t_4); if (unlikely((__pyx_t_6 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 414, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ev, __pyx_n_s_v); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyInt_As_uint64_t(__pyx_t_4); if (unlikely((__pyx_t_7 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 414, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ev, __pyx_n_s_w); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 414, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    try {
      __pyx_t_9 = NetworKit::GraphEvent(__pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_t_8);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 414, __pyx_L1_error)
    }
    try {
      __pyx_v__batch.push_back(__pyx_t_9);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 414, __pyx_L1_error)
    }

    /* "networkit/centrality.pyx":413
 * 		"""
 * 		cdef vector[_GraphEvent] _batch
 * 		for ev in batch:             # <<<<<<<<<<<<<<
 * 			_batch.push_back(_GraphEvent(ev.type, ev.u, ev.v, ev.w))
 * 		(<_DynBetweenness*>(self._this)).updateBatch(_batch)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/centrality.pyx":415
 * 		for ev in batch:
 * 			_batch.push_back(_GraphEvent(ev.type, ev.u, ev.v, ev.w))
 * 		(<_DynBetweenness*>(self._this)).updateBatch(_batch)             # <<<<<<<<<<<<<<
 * 
 * 	def scores(self):
 */
  try {
    ((NetworKit::DynBetweenness *)__pyx_v_self->__pyx_base._this)->updateBatch(__pyx_v__batch);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 415, __pyx_L1_error)
  }

  /* "networkit/centrality.pyx":405
 * 		(<_DynBetweenness*>(self._this)).update(_GraphEvent(ev.type, ev.u, ev.v, ev.w))
 * 
 * 	def updateBatch(self, batch):             # <<<<<<<<<<<<<<
 * 		""" Updates the betweenness centralities after the batch `batch` of edge insertions.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("networkit.centrality.DynBetweenness.updateBatch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ev);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":417
 * 		(<_DynBetweenness*>(self._this)).updateBatch(_batch)
 * 
 * 	def scores(self):             # <<<<<<<<<<<<<<
 * 		""" Get a vector containing the betweenness score for each node in the graph.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_14DynBetweenness_7scores(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9networkit_10centrality_14DynBetweenness_6scores[] = " Get a vector containing the betweenness score for each node in the graph.\n\n\t\tReturns:\n\t\t--------\n\t\tvector\n\t\t\tThe betweenness scores calculated by run().\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_14DynBetweenness_7scores(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scores (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_14DynBetweenness_6scores(((struct __pyx_obj_9networkit_10centrality_DynBetweenness *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_14DynBetweenness_6scores(struct __pyx_obj_9networkit_10centrality_DynBetweenness *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("scores", 0);

  /* "networkit/centrality.pyx":425
 * 			The betweenness scores calculated by run().
 * 		"""
 * 		return (<_DynBetweenness*>(self._this)).scores()             # <<<<<<<<<<<<<<
 * 
 * 	def score(self, v):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::DynBetweenness *)__pyx_v_self->__pyx_base._this)->scores();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 425, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py_double(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":417
 * 		(<_DynBetweenness*>(self._this)).updateBatch(_batch)
 * 
 * 	def scores(self):             # <<<<<<<<<<<<<<
 * 		""" Get a vector containing the betweenness score for each node in the graph.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.centrality.DynBetweenness.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":427
 * 		return (<_DynBetweenness*>(self._this)).scores()
 * 
 * 	def score(self, v):             # <<<<<<<<<<<<<<
 * 		""" Get the betweenness score of node `v` calculated by run().
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_14DynBetweenness_9score(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static char __pyx_doc_9networkit_10centrality_14DynBetweenness_8score[] = " Get the betweenness score of node `v` calculated by run().\n\n\t\tParameters:\n\t\t-----------\n\t\tv : node\n\t\t\tA node.\n\n\t\tReturns:\n\t\t--------\n\t\tdouble\n\t\t\tThe betweenness score of node `v.\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_14DynBetweenness_9score(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("score (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_14DynBetweenness_8score(((struct __pyx_obj_9networkit_10centrality_DynBetweenness *)__pyx_v_self), ((PyObject *)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_14DynBetweenness_8score(struct __pyx_obj_9networkit_10centrality_DynBetweenness *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10centrality_node __pyx_t_1;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("score", 0);

  /* "networkit/centrality.pyx":440
 * 			The betweenness score of node `v.
 * 		"""
 * 		return (<_DynBetweenness*>(self._this)).score(v)             # <<<<<<<<<<<<<<
 * 
 * 	def ranking(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_v); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 440, __pyx_L1_error)
  try {
    __pyx_t_2 = ((NetworKit::DynBetweenness *)__pyx_v_self->__pyx_base._this)->score(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 440, __pyx_L1_error)
  }
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":427
 * 		return (<_DynBetweenness*>(self._this)).scores()
 * 
 * 	def score(self, v):             # <<<<<<<<<<<<<<
 * 		""" Get the betweenness score of node `v` calculated by run().
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.centrality.DynBetweenness.score", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":442
 * 		return (<_DynBetweenness*>(self._this)).score(v)
 * 
 * 	def ranking(self):             # <<<<<<<<<<<<<<
 * 		""" Get a vector of pairs sorted into descending order. Each pair contains a node and the corresponding score
 * 		calculated by run().
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_14DynBetweenness_11ranking(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9networkit_10centrality_14DynBetweenness_10ranking[] = " Get a vector of pairs sorted into descending order. Each pair contains a node and the corresponding score\n\t\tcalculated by run().\n\n\t\tReturns:\n\t\t--------\n\t\tvector\n\t\t\tA vector of pairs.\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_14DynBetweenness_11ranking(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ranking (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_14DynBetweenness_10ranking(((struct __pyx_obj_9networkit_10centrality_DynBetweenness *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_14DynBetweenness_10ranking(struct __pyx_obj_9networkit_10centrality_DynBetweenness *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::pair<__pyx_t_9networkit_10centrality_node,double> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ranking", 0);

  /* "networkit/centrality.pyx":451
 * 			A vector of pairs.
 * 		"""
 * 		return (<_DynBetweenness*>(self._this)).ranking()             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/centrality/DynApproxBetweenness.hpp>":
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::DynBetweenness *)__pyx_v_self->__pyx_base._this)->ranking();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 451, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c___pyx_t_9networkit_10centrality_node_2c_double_3e___(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":442
 * 		return (<_DynBetweenness*>(self._this)).score(v)
 * 
 * 	def ranking(self):             # <<<<<<<<<<<<<<
 * 		""" Get a vector of pairs sorted into descending order. Each pair contains a node and the corresponding score
 * 		calculated by run().
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.centrality.DynBetweenness.ranking", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_14DynBetweenness_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_14DynBetweenness_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_14DynBetweenness_12__reduce_cython__(((struct __pyx_obj_9networkit_10centrality_DynBetweenness *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_14DynBetweenness_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_DynBetweenness *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.DynBetweenness.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_14DynBetweenness_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_14DynBetweenness_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_14DynBetweenness_14__setstate_cython__(((struct __pyx_obj_9networkit_10centrality_DynBetweenness *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_14DynBetweenness_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_DynBetweenness *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.DynBetweenness.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":492
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self, Graph G, epsilon=0.01, delta=0.1, storePredecessors = True, universalConstant=1.0):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _DynApproxBetweenness(G._this, epsilon, delta, storePredecessors, universalConstant)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_10centrality_20DynApproxBetweenness_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_10centrality_20DynApproxBetweenness_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  PyObject *__pyx_v_epsilon = 0;
  PyObject *__pyx_v_delta = 0;
  PyObject *__pyx_v_storePredecessors = 0;
  PyObject *__pyx_v_universalConstant = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_epsilon,&__pyx_n_s_delta,&__pyx_n_s_storePredecessors,&__pyx_n_s_universalConstant,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[1] = ((PyObject *)__pyx_float_0_01);
    values[2] = ((PyObject *)__pyx_float_0_1);
    values[3] = ((PyObject *)Py_True);
    values[4] = ((PyObject *)__pyx_float_1_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_epsilon);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_delta);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_storePredecessors);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_universalConstant);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 492, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_epsilon = values[1];
    __pyx_v_delta = values[2];
    __pyx_v_storePredecessors = values[3];
    __pyx_v_universalConstant = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 492, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.DynApproxBetweenness.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 492, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_10centrality_20DynApproxBetweenness___cinit__(((struct __pyx_obj_9networkit_10centrality_DynApproxBetweenness *)__pyx_v_self), __pyx_v_G, __pyx_v_epsilon, __pyx_v_delta, __pyx_v_storePredecessors, __pyx_v_universalConstant);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_10centrality_20DynApproxBetweenness___cinit__(struct __pyx_obj_9networkit_10centrality_DynApproxBetweenness *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_epsilon, PyObject *__pyx_v_delta, PyObject *__pyx_v_storePredecessors, PyObject *__pyx_v_universalConstant) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  bool __pyx_t_3;
  double __pyx_t_4;
  NetworKit::DynApproxBetweenness *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/centrality.pyx":493
 * 
 * 	def __cinit__(self, Graph G, epsilon=0.01, delta=0.1, storePredecessors = True, universalConstant=1.0):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _DynApproxBetweenness(G._this, epsilon, delta, storePredecessors, universalConstant)
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->_G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_G));
  __pyx_v_self->_G = __pyx_v_G;

  /* "networkit/centrality.pyx":494
 * 	def __cinit__(self, Graph G, epsilon=0.01, delta=0.1, storePredecessors = True, universalConstant=1.0):
 * 		self._G = G
 * 		self._this = new _DynApproxBetweenness(G._this, epsilon, delta, storePredecessors, universalConstant)             # <<<<<<<<<<<<<<
 * 
 * 	def update(self, ev):
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_epsilon); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 494, __pyx_L1_error)
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_delta); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 494, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_storePredecessors); if (unlikely((__pyx_t_3 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 494, __pyx_L1_error)
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_universalConstant); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 494, __pyx_L1_error)
  try {
    __pyx_t_5 = new NetworKit::DynApproxBetweenness(__pyx_v_G->_this, __pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 494, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base._this = __pyx_t_5;

  /* "networkit/centrality.pyx":492
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self, Graph G, epsilon=0.01, delta=0.1, storePredecessors = True, universalConstant=1.0):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _DynApproxBetweenness(G._this, epsilon, delta, storePredecessors, universalConstant)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.centrality.DynApproxBetweenness.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":496
 * 		self._this = new _DynApproxBetweenness(G._this, epsilon, delta, storePredecessors, universalConstant)
 * 
 * 	def update(self, ev):             # <<<<<<<<<<<<<<
 * 		""" Updates the betweenness centralities after the edge insertions.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_20DynApproxBetweenness_3update(PyObject *__pyx_v_self, PyObject *__pyx_v_ev); /*proto*/
static char __pyx_doc_9networkit_10centrality_20DynApproxBetweenness_2update[] = " Updates the betweenness centralities after the edge insertions.\n\n\t\tParameters:\n\t\t-----------\n\t\tev : GraphEvent.\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_20DynApproxBetweenness_3update(PyObject *__pyx_v_self, PyObject *__pyx_v_ev) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_20DynApproxBetweenness_2update(((struct __pyx_obj_9networkit_10centrality_DynApproxBetweenness *)__pyx_v_self), ((PyObject *)__pyx_v_ev));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_20DynApproxBetweenness_2update(struct __pyx_obj_9networkit_10centrality_DynApproxBetweenness *__pyx_v_self, PyObject *__pyx_v_ev) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  enum NetworKit::GraphEvent::Type __pyx_t_2;
  __pyx_t_9networkit_8dynamics_node __pyx_t_3;
  __pyx_t_9networkit_8dynamics_node __pyx_t_4;
  __pyx_t_9networkit_8dynamics_edgeweight __pyx_t_5;
  NetworKit::GraphEvent __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update", 0);

  /* "networkit/centrality.pyx":503
 * 		ev : GraphEvent.
 * 		"""
 * 		(<_DynApproxBetweenness*>(self._this)).update(_GraphEvent(ev.type, ev.u, ev.v, ev.w))             # <<<<<<<<<<<<<<
 * 
 * 	def updateBatch(self, batch):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ev, __pyx_n_s_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((enum NetworKit::GraphEvent::Type)__Pyx_PyInt_As_enum__NetworKit_3a__3a_GraphEvent_3a__3a_Type(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ev, __pyx_n_s_u); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_3 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ev, __pyx_n_s_v); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_4 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ev, __pyx_n_s_w); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_t_6 = NetworKit::GraphEvent(__pyx_t_2, __pyx_t_3, __pyx_t_4, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 503, __pyx_L1_error)
  }
  try {
    ((NetworKit::DynApproxBetweenness *)__pyx_v_self->__pyx_base._this)->update(__pyx_t_6);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 503, __pyx_L1_error)
  }

  /* "networkit/centrality.pyx":496
 * 		self._this = new _DynApproxBetweenness(G._this, epsilon, delta, storePredecessors, universalConstant)
 * 
 * 	def update(self, ev):             # <<<<<<<<<<<<<<
 * 		""" Updates the betweenness centralities after the edge insertions.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.DynApproxBetweenness.update", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":505
 * 		(<_DynApproxBetweenness*>(self._this)).update(_GraphEvent(ev.type, ev.u, ev.v, ev.w))
 * 
 * 	def updateBatch(self, batch):             # <<<<<<<<<<<<<<
 * 		""" Updates the betweenness centralities after the batch `batch` of edge insertions.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_20DynApproxBetweenness_5updateBatch(PyObject *__pyx_v_self, PyObject *__pyx_v_batch); /*proto*/
static char __pyx_doc_9networkit_10centrality_20DynApproxBetweenness_4updateBatch[] = " Updates the betweenness centralities after the batch `batch` of edge insertions.\n\n\t\tParameters:\n\t\t-----------\n\t\tbatch : list of GraphEvent.\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_20DynApproxBetweenness_5updateBatch(PyObject *__pyx_v_self, PyObject *__pyx_v_batch) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("updateBatch (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_20DynApproxBetweenness_4updateBatch(((struct __pyx_obj_9networkit_10centrality_DynApproxBetweenness *)__pyx_v_self), ((PyObject *)__pyx_v_batch));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_20DynApproxBetweenness_4updateBatch(struct __pyx_obj_9networkit_10centrality_DynApproxBetweenness *__pyx_v_self, PyObject *__pyx_v_batch) {
  std::vector<NetworKit::GraphEvent>  __pyx_v__batch;
  PyObject *__pyx_v_ev = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  enum NetworKit::GraphEvent::Type __pyx_t_5;
  __pyx_t_9networkit_8dynamics_node __pyx_t_6;
  __pyx_t_9networkit_8dynamics_node __pyx_t_7;
  __pyx_t_9networkit_8dynamics_edgeweight __pyx_t_8;
  NetworKit::GraphEvent __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("updateBatch", 0);

  /* "networkit/centrality.pyx":513
 * 		"""
 * 		cdef vector[_GraphEvent] _batch
 * 		for ev in batch:             # <<<<<<<<<<<<<<
 * 			_batch.push_back(_GraphEvent(ev.type, ev.u, ev.v, ev.w))
 * 		(<_DynApproxBetweenness*>(self._this)).updateBatch(_batch)
 */
  if (likely(PyList_CheckExact(__pyx_v_batch)) || PyTuple_CheckExact(__pyx_v_batch)) {
    __pyx_t_1 = __pyx_v_batch; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_batch); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 513, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 513, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 513, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 513, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 513, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 513, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 513, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_ev, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "networkit/centrality.pyx":514
 * 		cdef vector[_GraphEvent] _batch
 * 		for ev in batch:
 * 			_batch.push_back(_GraphEvent(ev.type, ev.u, ev.v, ev.w))             # <<<<<<<<<<<<<<
 * 		(<_DynApproxBetweenness*>(self._this)).updateBatch(_batch)
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ev, __pyx_n_s_type); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = ((enum NetworKit::GraphEvent::Type)__Pyx_PyInt_As_enum__NetworKit_3a__3a_GraphEvent_3a__3a_Type(__pyx_t_4)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 514, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ev, __pyx_n_s_u); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyInt_As_uint64_t(__pyx_t_4); if (unlikely((__pyx_t_6 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 514, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ev, __pyx_n_s_v); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyInt_As_uint64_t(__pyx_t_4); if (unlikely((__pyx_t_7 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 514, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ev, __pyx_n_s_w); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 514, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    try {
      __pyx_t_9 = NetworKit::GraphEvent(__pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_t_8);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 514, __pyx_L1_error)
    }
    try {
      __pyx_v__batch.push_back(__pyx_t_9);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 514, __pyx_L1_error)
    }

    /* "networkit/centrality.pyx":513
 * 		"""
 * 		cdef vector[_GraphEvent] _batch
 * 		for ev in batch:             # <<<<<<<<<<<<<<
 * 			_batch.push_back(_GraphEvent(ev.type, ev.u, ev.v, ev.w))
 * 		(<_DynApproxBetweenness*>(self._this)).updateBatch(_batch)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/centrality.pyx":515
 * 		for ev in batch:
 * 			_batch.push_back(_GraphEvent(ev.type, ev.u, ev.v, ev.w))
 * 		(<_DynApproxBetweenness*>(self._this)).updateBatch(_batch)             # <<<<<<<<<<<<<<
 * 
 * 	def scores(self):
 */
  try {
    ((NetworKit::DynApproxBetweenness *)__pyx_v_self->__pyx_base._this)->updateBatch(__pyx_v__batch);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 515, __pyx_L1_error)
  }

  /* "networkit/centrality.pyx":505
 * 		(<_DynApproxBetweenness*>(self._this)).update(_GraphEvent(ev.type, ev.u, ev.v, ev.w))
 * 
 * 	def updateBatch(self, batch):             # <<<<<<<<<<<<<<
 * 		""" Updates the betweenness centralities after the batch `batch` of edge insertions.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("networkit.centrality.DynApproxBetweenness.updateBatch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ev);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":517
 * 		(<_DynApproxBetweenness*>(self._this)).updateBatch(_batch)
 * 
 * 	def scores(self):             # <<<<<<<<<<<<<<
 * 		""" Get a vector containing the betweenness score for each node in the graph.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_20DynApproxBetweenness_7scores(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9networkit_10centrality_20DynApproxBetweenness_6scores[] = " Get a vector containing the betweenness score for each node in the graph.\n\n\t\tReturns:\n\t\t--------\n\t\tvector\n\t\t\tThe betweenness scores calculated by run().\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_20DynApproxBetweenness_7scores(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scores (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_20DynApproxBetweenness_6scores(((struct __pyx_obj_9networkit_10centrality_DynApproxBetweenness *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_20DynApproxBetweenness_6scores(struct __pyx_obj_9networkit_10centrality_DynApproxBetweenness *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("scores", 0);

  /* "networkit/centrality.pyx":525
 * 			The betweenness scores calculated by run().
 * 		"""
 * 		return (<_DynApproxBetweenness*>(self._this)).scores()             # <<<<<<<<<<<<<<
 * 
 * 	def score(self, v):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::DynApproxBetweenness *)__pyx_v_self->__pyx_base._this)->scores();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 525, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py_double(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":517
 * 		(<_DynApproxBetweenness*>(self._this)).updateBatch(_batch)
 * 
 * 	def scores(self):             # <<<<<<<<<<<<<<
 * 		""" Get a vector containing the betweenness score for each node in the graph.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.centrality.DynApproxBetweenness.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":527
 * 		return (<_DynApproxBetweenness*>(self._this)).scores()
 * 
 * 	def score(self, v):             # <<<<<<<<<<<<<<
 * 		""" Get the betweenness score of node `v` calculated by run().
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_20DynApproxBetweenness_9score(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static char __pyx_doc_9networkit_10centrality_20DynApproxBetweenness_8score[] = " Get the betweenness score of node `v` calculated by run().\n\n\t\tParameters:\n\t\t-----------\n\t\tv : node\n\t\t\tA node.\n\n\t\tReturns:\n\t\t--------\n\t\tdouble\n\t\t\tThe betweenness score of node `v.\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_20DynApproxBetweenness_9score(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("score (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_20DynApproxBetweenness_8score(((struct __pyx_obj_9networkit_10centrality_DynApproxBetweenness *)__pyx_v_self), ((PyObject *)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_20DynApproxBetweenness_8score(struct __pyx_obj_9networkit_10centrality_DynApproxBetweenness *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10centrality_node __pyx_t_1;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("score", 0);

  /* "networkit/centrality.pyx":540
 * 			The betweenness score of node `v.
 * 		"""
 * 		return (<_DynApproxBetweenness*>(self._this)).score(v)             # <<<<<<<<<<<<<<
 * 
 * 	def ranking(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_v); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 540, __pyx_L1_error)
  try {
    __pyx_t_2 = ((NetworKit::DynApproxBetweenness *)__pyx_v_self->__pyx_base._this)->score(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 540, __pyx_L1_error)
  }
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":527
 * 		return (<_DynApproxBetweenness*>(self._this)).scores()
 * 
 * 	def score(self, v):             # <<<<<<<<<<<<<<
 * 		""" Get the betweenness score of node `v` calculated by run().
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.centrality.DynApproxBetweenness.score", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":542
 * 		return (<_DynApproxBetweenness*>(self._this)).score(v)
 * 
 * 	def ranking(self):             # <<<<<<<<<<<<<<
 * 		""" Get a vector of pairs sorted into descending order. Each pair contains a node and the corresponding score
 * 		calculated by run().
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_20DynApproxBetweenness_11ranking(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9networkit_10centrality_20DynApproxBetweenness_10ranking[] = " Get a vector of pairs sorted into descending order. Each pair contains a node and the corresponding score\n\t\tcalculated by run().\n\n\t\tReturns:\n\t\t--------\n\t\tvector\n\t\t\tA vector of pairs.\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_20DynApproxBetweenness_11ranking(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ranking (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_20DynApproxBetweenness_10ranking(((struct __pyx_obj_9networkit_10centrality_DynApproxBetweenness *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_20DynApproxBetweenness_10ranking(struct __pyx_obj_9networkit_10centrality_DynApproxBetweenness *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::pair<__pyx_t_9networkit_10centrality_node,double> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ranking", 0);

  /* "networkit/centrality.pyx":551
 * 			A vector of pairs.
 * 		"""
 * 		return (<_DynApproxBetweenness*>(self._this)).ranking()             # <<<<<<<<<<<<<<
 * 
 * 	def getNumberOfSamples(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::DynApproxBetweenness *)__pyx_v_self->__pyx_base._this)->ranking();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 551, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c___pyx_t_9networkit_10centrality_node_2c_double_3e___(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":542
 * 		return (<_DynApproxBetweenness*>(self._this)).score(v)
 * 
 * 	def ranking(self):             # <<<<<<<<<<<<<<
 * 		""" Get a vector of pairs sorted into descending order. Each pair contains a node and the corresponding score
 * 		calculated by run().
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.centrality.DynApproxBetweenness.ranking", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":553
 * 		return (<_DynApproxBetweenness*>(self._this)).ranking()
 * 
 * 	def getNumberOfSamples(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Get number of path samples used in last calculation.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_20DynApproxBetweenness_13getNumberOfSamples(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9networkit_10centrality_20DynApproxBetweenness_12getNumberOfSamples[] = "\n\t\tGet number of path samples used in last calculation.\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_20DynApproxBetweenness_13getNumberOfSamples(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNumberOfSamples (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_20DynApproxBetweenness_12getNumberOfSamples(((struct __pyx_obj_9networkit_10centrality_DynApproxBetweenness *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_20DynApproxBetweenness_12getNumberOfSamples(struct __pyx_obj_9networkit_10centrality_DynApproxBetweenness *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10centrality_count __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNumberOfSamples", 0);

  /* "networkit/centrality.pyx":557
 * 		Get number of path samples used in last calculation.
 * 		"""
 * 		return (<_DynApproxBetweenness*>(self._this)).getNumberOfSamples()             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/centrality/DynBetweennessOneNode.hpp>":
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::DynApproxBetweenness *)__pyx_v_self->__pyx_base._this)->getNumberOfSamples();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 557, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_uint64_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 557, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":553
 * 		return (<_DynApproxBetweenness*>(self._this)).ranking()
 * 
 * 	def getNumberOfSamples(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Get number of path samples used in last calculation.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.centrality.DynApproxBetweenness.getNumberOfSamples", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_20DynApproxBetweenness_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_20DynApproxBetweenness_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_20DynApproxBetweenness_14__reduce_cython__(((struct __pyx_obj_9networkit_10centrality_DynApproxBetweenness *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_20DynApproxBetweenness_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_DynApproxBetweenness *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.DynApproxBetweenness.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_20DynApproxBetweenness_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_20DynApproxBetweenness_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_20DynApproxBetweenness_16__setstate_cython__(((struct __pyx_obj_9networkit_10centrality_DynApproxBetweenness *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_20DynApproxBetweenness_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_DynApproxBetweenness *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.DynApproxBetweenness.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":590
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self, Graph G, node):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _DynBetweennessOneNode(G._this, node)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_10centrality_21DynBetweennessOneNode_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_10centrality_21DynBetweennessOneNode_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  PyObject *__pyx_v_node = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_node,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_node)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(0, 590, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 590, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_node = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 590, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.DynBetweennessOneNode.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 590, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_10centrality_21DynBetweennessOneNode___cinit__(((struct __pyx_obj_9networkit_10centrality_DynBetweennessOneNode *)__pyx_v_self), __pyx_v_G, __pyx_v_node);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_10centrality_21DynBetweennessOneNode___cinit__(struct __pyx_obj_9networkit_10centrality_DynBetweennessOneNode *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_node) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10centrality_node __pyx_t_1;
  NetworKit::DynBetweennessOneNode *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/centrality.pyx":591
 * 
 * 	def __cinit__(self, Graph G, node):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _DynBetweennessOneNode(G._this, node)
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->_G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_G));
  __pyx_v_self->_G = __pyx_v_G;

  /* "networkit/centrality.pyx":592
 * 	def __cinit__(self, Graph G, node):
 * 		self._G = G
 * 		self._this = new _DynBetweennessOneNode(G._this, node)             # <<<<<<<<<<<<<<
 * 
 * 	# this is necessary so that the C++ object gets properly garbage collected
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_node); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 592, __pyx_L1_error)
  try {
    __pyx_t_2 = new NetworKit::DynBetweennessOneNode(__pyx_v_G->_this, __pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 592, __pyx_L1_error)
  }
  __pyx_v_self->_this = __pyx_t_2;

  /* "networkit/centrality.pyx":590
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self, Graph G, node):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _DynBetweennessOneNode(G._this, node)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.centrality.DynBetweennessOneNode.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":595
 * 
 * 	# this is necessary so that the C++ object gets properly garbage collected
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		del self._this
 * 
 */

/* Python wrapper */
static void __pyx_pw_9networkit_10centrality_21DynBetweennessOneNode_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_9networkit_10centrality_21DynBetweennessOneNode_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_9networkit_10centrality_21DynBetweennessOneNode_2__dealloc__(((struct __pyx_obj_9networkit_10centrality_DynBetweennessOneNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_9networkit_10centrality_21DynBetweennessOneNode_2__dealloc__(struct __pyx_obj_9networkit_10centrality_DynBetweennessOneNode *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "networkit/centrality.pyx":596
 * 	# this is necessary so that the C++ object gets properly garbage collected
 * 	def __dealloc__(self):
 * 		del self._this             # <<<<<<<<<<<<<<
 * 
 * 	def run(self):
 */
  delete __pyx_v_self->_this;

  /* "networkit/centrality.pyx":595
 * 
 * 	# this is necessary so that the C++ object gets properly garbage collected
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		del self._this
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "networkit/centrality.pyx":598
 * 		del self._this
 * 
 * 	def run(self):             # <<<<<<<<<<<<<<
 * 		with nogil:
 * 			self._this.run()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_21DynBetweennessOneNode_5run(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_21DynBetweennessOneNode_5run(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("run (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_21DynBetweennessOneNode_4run(((struct __pyx_obj_9networkit_10centrality_DynBetweennessOneNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_21DynBetweennessOneNode_4run(struct __pyx_obj_9networkit_10centrality_DynBetweennessOneNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("run", 0);

  /* "networkit/centrality.pyx":599
 * 
 * 	def run(self):
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			self._this.run()
 * 		return self
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "networkit/centrality.pyx":600
 * 	def run(self):
 * 		with nogil:
 * 			self._this.run()             # <<<<<<<<<<<<<<
 * 		return self
 * 
 */
        try {
          __pyx_v_self->_this->run();
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 600, __pyx_L4_error)
        }
      }

      /* "networkit/centrality.pyx":599
 * 
 * 	def run(self):
 * 		with nogil:             # <<<<<<<<<<<<<<
 * 			self._this.run()
 * 		return self
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "networkit/centrality.pyx":601
 * 		with nogil:
 * 			self._this.run()
 * 		return self             # <<<<<<<<<<<<<<
 * 
 * 	def update(self, ev):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "networkit/centrality.pyx":598
 * 		del self._this
 * 
 * 	def run(self):             # <<<<<<<<<<<<<<
 * 		with nogil:
 * 			self._this.run()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.centrality.DynBetweennessOneNode.run", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":603
 * 		return self
 * 
 * 	def update(self, ev):             # <<<<<<<<<<<<<<
 * 		""" Updates the betweenness centralities after the batch `batch` of edge insertions.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_21DynBetweennessOneNode_7update(PyObject *__pyx_v_self, PyObject *__pyx_v_ev); /*proto*/
static char __pyx_doc_9networkit_10centrality_21DynBetweennessOneNode_6update[] = " Updates the betweenness centralities after the batch `batch` of edge insertions.\n\n\t\tParameters:\n\t\t-----------\n\t\tev : edge insertion.\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_21DynBetweennessOneNode_7update(PyObject *__pyx_v_self, PyObject *__pyx_v_ev) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_21DynBetweennessOneNode_6update(((struct __pyx_obj_9networkit_10centrality_DynBetweennessOneNode *)__pyx_v_self), ((PyObject *)__pyx_v_ev));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_21DynBetweennessOneNode_6update(struct __pyx_obj_9networkit_10centrality_DynBetweennessOneNode *__pyx_v_self, PyObject *__pyx_v_ev) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  enum NetworKit::GraphEvent::Type __pyx_t_2;
  __pyx_t_9networkit_8dynamics_node __pyx_t_3;
  __pyx_t_9networkit_8dynamics_node __pyx_t_4;
  __pyx_t_9networkit_8dynamics_edgeweight __pyx_t_5;
  NetworKit::GraphEvent __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update", 0);

  /* "networkit/centrality.pyx":610
 * 		ev : edge insertion.
 * 		"""
 * 		self._this.update(_GraphEvent(ev.type, ev.u, ev.v, ev.w))             # <<<<<<<<<<<<<<
 * 
 * 	def updateBatch(self, batch):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ev, __pyx_n_s_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((enum NetworKit::GraphEvent::Type)__Pyx_PyInt_As_enum__NetworKit_3a__3a_GraphEvent_3a__3a_Type(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ev, __pyx_n_s_u); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_3 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ev, __pyx_n_s_v); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_4 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ev, __pyx_n_s_w); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_t_6 = NetworKit::GraphEvent(__pyx_t_2, __pyx_t_3, __pyx_t_4, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 610, __pyx_L1_error)
  }
  try {
    __pyx_v_self->_this->update(__pyx_t_6);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 610, __pyx_L1_error)
  }

  /* "networkit/centrality.pyx":603
 * 		return self
 * 
 * 	def update(self, ev):             # <<<<<<<<<<<<<<
 * 		""" Updates the betweenness centralities after the batch `batch` of edge insertions.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.DynBetweennessOneNode.update", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":612
 * 		self._this.update(_GraphEvent(ev.type, ev.u, ev.v, ev.w))
 * 
 * 	def updateBatch(self, batch):             # <<<<<<<<<<<<<<
 * 		""" Updates the betweenness centrality of node x after the batch `batch` of edge insertions.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_21DynBetweennessOneNode_9updateBatch(PyObject *__pyx_v_self, PyObject *__pyx_v_batch); /*proto*/
static char __pyx_doc_9networkit_10centrality_21DynBetweennessOneNode_8updateBatch[] = " Updates the betweenness centrality of node x after the batch `batch` of edge insertions.\n\n\t\tParameters:\n\t\t-----------\n\t\tbatch : list of GraphEvent.\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_21DynBetweennessOneNode_9updateBatch(PyObject *__pyx_v_self, PyObject *__pyx_v_batch) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("updateBatch (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_21DynBetweennessOneNode_8updateBatch(((struct __pyx_obj_9networkit_10centrality_DynBetweennessOneNode *)__pyx_v_self), ((PyObject *)__pyx_v_batch));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_21DynBetweennessOneNode_8updateBatch(struct __pyx_obj_9networkit_10centrality_DynBetweennessOneNode *__pyx_v_self, PyObject *__pyx_v_batch) {
  std::vector<NetworKit::GraphEvent>  __pyx_v__batch;
  PyObject *__pyx_v_ev = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  enum NetworKit::GraphEvent::Type __pyx_t_5;
  __pyx_t_9networkit_8dynamics_node __pyx_t_6;
  __pyx_t_9networkit_8dynamics_node __pyx_t_7;
  __pyx_t_9networkit_8dynamics_edgeweight __pyx_t_8;
  NetworKit::GraphEvent __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("updateBatch", 0);

  /* "networkit/centrality.pyx":620
 * 		"""
 * 		cdef vector[_GraphEvent] _batch
 * 		for ev in batch:             # <<<<<<<<<<<<<<
 * 			_batch.push_back(_GraphEvent(ev.type, ev.u, ev.v, ev.w))
 * 		self._this.updateBatch(_batch)
 */
  if (likely(PyList_CheckExact(__pyx_v_batch)) || PyTuple_CheckExact(__pyx_v_batch)) {
    __pyx_t_1 = __pyx_v_batch; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_batch); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 620, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 620, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 620, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 620, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 620, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 620, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 620, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_ev, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "networkit/centrality.pyx":621
 * 		cdef vector[_GraphEvent] _batch
 * 		for ev in batch:
 * 			_batch.push_back(_GraphEvent(ev.type, ev.u, ev.v, ev.w))             # <<<<<<<<<<<<<<
 * 		self._this.updateBatch(_batch)
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ev, __pyx_n_s_type); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 621, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = ((enum NetworKit::GraphEvent::Type)__Pyx_PyInt_As_enum__NetworKit_3a__3a_GraphEvent_3a__3a_Type(__pyx_t_4)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 621, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ev, __pyx_n_s_u); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 621, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyInt_As_uint64_t(__pyx_t_4); if (unlikely((__pyx_t_6 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 621, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ev, __pyx_n_s_v); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 621, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyInt_As_uint64_t(__pyx_t_4); if (unlikely((__pyx_t_7 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 621, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ev, __pyx_n_s_w); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 621, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 621, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    try {
      __pyx_t_9 = NetworKit::GraphEvent(__pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_t_8);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 621, __pyx_L1_error)
    }
    try {
      __pyx_v__batch.push_back(__pyx_t_9);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 621, __pyx_L1_error)
    }

    /* "networkit/centrality.pyx":620
 * 		"""
 * 		cdef vector[_GraphEvent] _batch
 * 		for ev in batch:             # <<<<<<<<<<<<<<
 * 			_batch.push_back(_GraphEvent(ev.type, ev.u, ev.v, ev.w))
 * 		self._this.updateBatch(_batch)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/centrality.pyx":622
 * 		for ev in batch:
 * 			_batch.push_back(_GraphEvent(ev.type, ev.u, ev.v, ev.w))
 * 		self._this.updateBatch(_batch)             # <<<<<<<<<<<<<<
 * 
 * 	def getDistance(self, u, v):
 */
  try {
    __pyx_v_self->_this->updateBatch(__pyx_v__batch);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 622, __pyx_L1_error)
  }

  /* "networkit/centrality.pyx":612
 * 		self._this.update(_GraphEvent(ev.type, ev.u, ev.v, ev.w))
 * 
 * 	def updateBatch(self, batch):             # <<<<<<<<<<<<<<
 * 		""" Updates the betweenness centrality of node x after the batch `batch` of edge insertions.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("networkit.centrality.DynBetweennessOneNode.updateBatch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ev);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":624
 * 		self._this.updateBatch(_batch)
 * 
 * 	def getDistance(self, u, v):             # <<<<<<<<<<<<<<
 * 		""" Returns the distance between node u and node v.
 * 		"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_21DynBetweennessOneNode_11getDistance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_10centrality_21DynBetweennessOneNode_10getDistance[] = " Returns the distance between node u and node v.\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_21DynBetweennessOneNode_11getDistance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_u = 0;
  PyObject *__pyx_v_v = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDistance (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_u,&__pyx_n_s_v,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_u)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getDistance", 1, 2, 2, 1); __PYX_ERR(0, 624, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getDistance") < 0)) __PYX_ERR(0, 624, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_u = values[0];
    __pyx_v_v = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getDistance", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 624, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.DynBetweennessOneNode.getDistance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_10centrality_21DynBetweennessOneNode_10getDistance(((struct __pyx_obj_9networkit_10centrality_DynBetweennessOneNode *)__pyx_v_self), __pyx_v_u, __pyx_v_v);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_21DynBetweennessOneNode_10getDistance(struct __pyx_obj_9networkit_10centrality_DynBetweennessOneNode *__pyx_v_self, PyObject *__pyx_v_u, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10centrality_node __pyx_t_1;
  __pyx_t_9networkit_10centrality_node __pyx_t_2;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDistance", 0);

  /* "networkit/centrality.pyx":627
 * 		""" Returns the distance between node u and node v.
 * 		"""
 * 		return self._this.getDistance(u, v)             # <<<<<<<<<<<<<<
 * 
 * 	def getSigma(self, u, v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_u); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 627, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_uint64_t(__pyx_v_v); if (unlikely((__pyx_t_2 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 627, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->_this->getDistance(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 627, __pyx_L1_error)
  }
  __pyx_t_4 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":624
 * 		self._this.updateBatch(_batch)
 * 
 * 	def getDistance(self, u, v):             # <<<<<<<<<<<<<<
 * 		""" Returns the distance between node u and node v.
 * 		"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("networkit.centrality.DynBetweennessOneNode.getDistance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":629
 * 		return self._this.getDistance(u, v)
 * 
 * 	def getSigma(self, u, v):             # <<<<<<<<<<<<<<
 * 		""" Returns the number of shortest paths between node u and node v.
 * 		"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_21DynBetweennessOneNode_13getSigma(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_10centrality_21DynBetweennessOneNode_12getSigma[] = " Returns the number of shortest paths between node u and node v.\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_21DynBetweennessOneNode_13getSigma(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_u = 0;
  PyObject *__pyx_v_v = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getSigma (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_u,&__pyx_n_s_v,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_u)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getSigma", 1, 2, 2, 1); __PYX_ERR(0, 629, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getSigma") < 0)) __PYX_ERR(0, 629, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_u = values[0];
    __pyx_v_v = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getSigma", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 629, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.DynBetweennessOneNode.getSigma", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_10centrality_21DynBetweennessOneNode_12getSigma(((struct __pyx_obj_9networkit_10centrality_DynBetweennessOneNode *)__pyx_v_self), __pyx_v_u, __pyx_v_v);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_21DynBetweennessOneNode_12getSigma(struct __pyx_obj_9networkit_10centrality_DynBetweennessOneNode *__pyx_v_self, PyObject *__pyx_v_u, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10centrality_node __pyx_t_1;
  __pyx_t_9networkit_10centrality_node __pyx_t_2;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSigma", 0);

  /* "networkit/centrality.pyx":632
 * 		""" Returns the number of shortest paths between node u and node v.
 * 		"""
 * 		return self._this.getSigma(u, v)             # <<<<<<<<<<<<<<
 * 
 * 	def getSigmax(self, u, v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_u); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 632, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_uint64_t(__pyx_v_v); if (unlikely((__pyx_t_2 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 632, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->_this->getSigma(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 632, __pyx_L1_error)
  }
  __pyx_t_4 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 632, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":629
 * 		return self._this.getDistance(u, v)
 * 
 * 	def getSigma(self, u, v):             # <<<<<<<<<<<<<<
 * 		""" Returns the number of shortest paths between node u and node v.
 * 		"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("networkit.centrality.DynBetweennessOneNode.getSigma", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":634
 * 		return self._this.getSigma(u, v)
 * 
 * 	def getSigmax(self, u, v):             # <<<<<<<<<<<<<<
 * 		""" Returns the number of shortest paths between node u and node v that go through x.
 * 		"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_21DynBetweennessOneNode_15getSigmax(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_10centrality_21DynBetweennessOneNode_14getSigmax[] = " Returns the number of shortest paths between node u and node v that go through x.\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_21DynBetweennessOneNode_15getSigmax(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_u = 0;
  PyObject *__pyx_v_v = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getSigmax (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_u,&__pyx_n_s_v,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_u)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getSigmax", 1, 2, 2, 1); __PYX_ERR(0, 634, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getSigmax") < 0)) __PYX_ERR(0, 634, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_u = values[0];
    __pyx_v_v = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getSigmax", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 634, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.DynBetweennessOneNode.getSigmax", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_10centrality_21DynBetweennessOneNode_14getSigmax(((struct __pyx_obj_9networkit_10centrality_DynBetweennessOneNode *)__pyx_v_self), __pyx_v_u, __pyx_v_v);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_21DynBetweennessOneNode_14getSigmax(struct __pyx_obj_9networkit_10centrality_DynBetweennessOneNode *__pyx_v_self, PyObject *__pyx_v_u, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10centrality_node __pyx_t_1;
  __pyx_t_9networkit_10centrality_node __pyx_t_2;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSigmax", 0);

  /* "networkit/centrality.pyx":637
 * 		""" Returns the number of shortest paths between node u and node v that go through x.
 * 		"""
 * 		return self._this.getSigmax(u, v)             # <<<<<<<<<<<<<<
 * 
 * 	def getbcx(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_u); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 637, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_uint64_t(__pyx_v_v); if (unlikely((__pyx_t_2 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 637, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->_this->getSigmax(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 637, __pyx_L1_error)
  }
  __pyx_t_4 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 637, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":634
 * 		return self._this.getSigma(u, v)
 * 
 * 	def getSigmax(self, u, v):             # <<<<<<<<<<<<<<
 * 		""" Returns the number of shortest paths between node u and node v that go through x.
 * 		"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("networkit.centrality.DynBetweennessOneNode.getSigmax", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":639
 * 		return self._this.getSigmax(u, v)
 * 
 * 	def getbcx(self):             # <<<<<<<<<<<<<<
 * 		""" Returns the betweenness centrality score of node x
 * 		"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_21DynBetweennessOneNode_17getbcx(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9networkit_10centrality_21DynBetweennessOneNode_16getbcx[] = " Returns the betweenness centrality score of node x\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_21DynBetweennessOneNode_17getbcx(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getbcx (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_21DynBetweennessOneNode_16getbcx(((struct __pyx_obj_9networkit_10centrality_DynBetweennessOneNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_21DynBetweennessOneNode_16getbcx(struct __pyx_obj_9networkit_10centrality_DynBetweennessOneNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getbcx", 0);

  /* "networkit/centrality.pyx":642
 * 		""" Returns the betweenness centrality score of node x
 * 		"""
 * 		return self._this.getbcx()             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/centrality/Closeness.hpp>" namespace "NetworKit":
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->_this->getbcx();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 642, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":639
 * 		return self._this.getSigmax(u, v)
 * 
 * 	def getbcx(self):             # <<<<<<<<<<<<<<
 * 		""" Returns the betweenness centrality score of node x
 * 		"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.centrality.DynBetweennessOneNode.getbcx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_21DynBetweennessOneNode_19__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_21DynBetweennessOneNode_19__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_21DynBetweennessOneNode_18__reduce_cython__(((struct __pyx_obj_9networkit_10centrality_DynBetweennessOneNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_21DynBetweennessOneNode_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_DynBetweennessOneNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.DynBetweennessOneNode.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_21DynBetweennessOneNode_21__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_21DynBetweennessOneNode_21__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_21DynBetweennessOneNode_20__setstate_cython__(((struct __pyx_obj_9networkit_10centrality_DynBetweennessOneNode *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_21DynBetweennessOneNode_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_DynBetweennessOneNode *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.DynBetweennessOneNode.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":689
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, normalized, third):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		if isinstance(third, int):
 */

/* Python wrapper */
static int __pyx_pw_9networkit_10centrality_9Closeness_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_10centrality_9Closeness_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  PyObject *__pyx_v_normalized = 0;
  PyObject *__pyx_v_third = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_normalized,&__pyx_n_s_third,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_normalized)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 1); __PYX_ERR(0, 689, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_third)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 2); __PYX_ERR(0, 689, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 689, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_normalized = values[1];
    __pyx_v_third = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 689, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.Closeness.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 689, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_10centrality_9Closeness___cinit__(((struct __pyx_obj_9networkit_10centrality_Closeness *)__pyx_v_self), __pyx_v_G, __pyx_v_normalized, __pyx_v_third);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_10centrality_9Closeness___cinit__(struct __pyx_obj_9networkit_10centrality_Closeness *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_normalized, PyObject *__pyx_v_third) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  enum NetworKit::ClosenessVariant __pyx_t_3;
  NetworKit::Closeness *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  bool __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/centrality.pyx":690
 * 
 * 	def __cinit__(self, Graph G, normalized, third):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		if isinstance(third, int):
 * 			self._this = new _Closeness(G._this, normalized, <_ClosenessVariant> third)
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base._G));
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/centrality.pyx":691
 * 	def __cinit__(self, Graph G, normalized, third):
 * 		self._G = G
 * 		if isinstance(third, int):             # <<<<<<<<<<<<<<
 * 			self._this = new _Closeness(G._this, normalized, <_ClosenessVariant> third)
 * 		elif isinstance(third, bool):
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_third); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "networkit/centrality.pyx":692
 * 		self._G = G
 * 		if isinstance(third, int):
 * 			self._this = new _Closeness(G._this, normalized, <_ClosenessVariant> third)             # <<<<<<<<<<<<<<
 * 		elif isinstance(third, bool):
 * 			self._this = new _Closeness(G._this, normalized, <bool_t> third)
 */
    __pyx_t_3 = ((enum NetworKit::ClosenessVariant)__Pyx_PyInt_As_enum__NetworKit_3a__3a_ClosenessVariant(__pyx_v_third)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 692, __pyx_L1_error)
    try {
      __pyx_t_4 = new NetworKit::Closeness(__pyx_v_G->_this, __pyx_v_normalized, ((enum NetworKit::ClosenessVariant)__pyx_t_3));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 692, __pyx_L1_error)
    }
    __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_4;

    /* "networkit/centrality.pyx":691
 * 	def __cinit__(self, Graph G, normalized, third):
 * 		self._G = G
 * 		if isinstance(third, int):             # <<<<<<<<<<<<<<
 * 			self._this = new _Closeness(G._this, normalized, <_ClosenessVariant> third)
 * 		elif isinstance(third, bool):
 */
    goto __pyx_L3;
  }

  /* "networkit/centrality.pyx":693
 * 		if isinstance(third, int):
 * 			self._this = new _Closeness(G._this, normalized, <_ClosenessVariant> third)
 * 		elif isinstance(third, bool):             # <<<<<<<<<<<<<<
 * 			self._this = new _Closeness(G._this, normalized, <bool_t> third)
 * 		else:
 */
  __pyx_t_5 = ((PyObject*)&PyBool_Type);
  __Pyx_INCREF(__pyx_t_5);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_third, __pyx_t_5); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 693, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_1)) {

    /* "networkit/centrality.pyx":694
 * 			self._this = new _Closeness(G._this, normalized, <_ClosenessVariant> third)
 * 		elif isinstance(third, bool):
 * 			self._this = new _Closeness(G._this, normalized, <bool_t> third)             # <<<<<<<<<<<<<<
 * 		else:
 * 			raise Exception("Error: the third parameter must be either a bool or a ClosenessVariant")
 */
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_third); if (unlikely((__pyx_t_6 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 694, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyBool_FromLong(((bool)__pyx_t_6)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 694, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    try {
      __pyx_t_4 = new NetworKit::Closeness(__pyx_v_G->_this, __pyx_v_normalized, __pyx_t_5);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 694, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_4;

    /* "networkit/centrality.pyx":693
 * 		if isinstance(third, int):
 * 			self._this = new _Closeness(G._this, normalized, <_ClosenessVariant> third)
 * 		elif isinstance(third, bool):             # <<<<<<<<<<<<<<
 * 			self._this = new _Closeness(G._this, normalized, <bool_t> third)
 * 		else:
 */
    goto __pyx_L3;
  }

  /* "networkit/centrality.pyx":696
 * 			self._this = new _Closeness(G._this, normalized, <bool_t> third)
 * 		else:
 * 			raise Exception("Error: the third parameter must be either a bool or a ClosenessVariant")             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/centrality/ApproxCloseness.hpp>":
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 696, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 696, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "networkit/centrality.pyx":689
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, normalized, third):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		if isinstance(third, int):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("networkit.centrality.Closeness.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_9Closeness_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_9Closeness_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_9Closeness_2__reduce_cython__(((struct __pyx_obj_9networkit_10centrality_Closeness *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_9Closeness_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_Closeness *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.Closeness.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_9Closeness_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_9Closeness_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_9Closeness_4__setstate_cython__(((struct __pyx_obj_9networkit_10centrality_Closeness *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_9Closeness_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_Closeness *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.Closeness.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":742
 * 	SUM = 2
 * 
 * 	def __cinit__(self, Graph G, nSamples, epsilon=0.1, normalized=False, _ClosenessType type=OUTBOUND):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _ApproxCloseness(G._this, nSamples, epsilon, normalized, type)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_10centrality_15ApproxCloseness_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_10centrality_15ApproxCloseness_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  PyObject *__pyx_v_nSamples = 0;
  PyObject *__pyx_v_epsilon = 0;
  PyObject *__pyx_v_normalized = 0;
  enum NetworKit::ApproxCloseness::CLOSENESS_TYPE __pyx_v_type;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_nSamples,&__pyx_n_s_epsilon,&__pyx_n_s_normalized,&__pyx_n_s_type,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[2] = ((PyObject *)__pyx_float_0_1);
    values[3] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nSamples)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 5, 1); __PYX_ERR(0, 742, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_epsilon);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_normalized);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_type);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 742, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_nSamples = values[1];
    __pyx_v_epsilon = values[2];
    __pyx_v_normalized = values[3];
    if (values[4]) {
      __pyx_v_type = ((enum NetworKit::ApproxCloseness::CLOSENESS_TYPE)__Pyx_PyInt_As_enum__NetworKit_3a__3a_ApproxCloseness_3a__3a_CLOSENESS_TYPE(values[4])); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 742, __pyx_L3_error)
    } else {
      __pyx_v_type = __pyx_k__24;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 742, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.ApproxCloseness.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 742, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_10centrality_15ApproxCloseness___cinit__(((struct __pyx_obj_9networkit_10centrality_ApproxCloseness *)__pyx_v_self), __pyx_v_G, __pyx_v_nSamples, __pyx_v_epsilon, __pyx_v_normalized, __pyx_v_type);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_10centrality_15ApproxCloseness___cinit__(struct __pyx_obj_9networkit_10centrality_ApproxCloseness *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_nSamples, PyObject *__pyx_v_epsilon, PyObject *__pyx_v_normalized, enum NetworKit::ApproxCloseness::CLOSENESS_TYPE __pyx_v_type) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10centrality_count __pyx_t_1;
  float __pyx_t_2;
  bool __pyx_t_3;
  NetworKit::ApproxCloseness *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/centrality.pyx":743
 * 
 * 	def __cinit__(self, Graph G, nSamples, epsilon=0.1, normalized=False, _ClosenessType type=OUTBOUND):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _ApproxCloseness(G._this, nSamples, epsilon, normalized, type)
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base._G));
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/centrality.pyx":744
 * 	def __cinit__(self, Graph G, nSamples, epsilon=0.1, normalized=False, _ClosenessType type=OUTBOUND):
 * 		self._G = G
 * 		self._this = new _ApproxCloseness(G._this, nSamples, epsilon, normalized, type)             # <<<<<<<<<<<<<<
 * 
 * 	def getSquareErrorEstimates(self):
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_nSamples); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 744, __pyx_L1_error)
  __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_v_epsilon); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 744, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_normalized); if (unlikely((__pyx_t_3 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 744, __pyx_L1_error)
  try {
    __pyx_t_4 = new NetworKit::ApproxCloseness(__pyx_v_G->_this, __pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_v_type);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 744, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_4;

  /* "networkit/centrality.pyx":742
 * 	SUM = 2
 * 
 * 	def __cinit__(self, Graph G, nSamples, epsilon=0.1, normalized=False, _ClosenessType type=OUTBOUND):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _ApproxCloseness(G._this, nSamples, epsilon, normalized, type)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.centrality.ApproxCloseness.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":746
 * 		self._this = new _ApproxCloseness(G._this, nSamples, epsilon, normalized, type)
 * 
 * 	def getSquareErrorEstimates(self):             # <<<<<<<<<<<<<<
 * 		""" Return a vector containing the square error estimates for all nodes.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_15ApproxCloseness_3getSquareErrorEstimates(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9networkit_10centrality_15ApproxCloseness_2getSquareErrorEstimates[] = " Return a vector containing the square error estimates for all nodes.\n\n\t\tReturns:\n\t\t--------\n\t\tvector\n\t\t\tA vector of doubles.\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_15ApproxCloseness_3getSquareErrorEstimates(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getSquareErrorEstimates (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_15ApproxCloseness_2getSquareErrorEstimates(((struct __pyx_obj_9networkit_10centrality_ApproxCloseness *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_15ApproxCloseness_2getSquareErrorEstimates(struct __pyx_obj_9networkit_10centrality_ApproxCloseness *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSquareErrorEstimates", 0);

  /* "networkit/centrality.pyx":754
 * 			A vector of doubles.
 * 		"""
 * 		return (<_ApproxCloseness*>(self._this)).getSquareErrorEstimates()             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/centrality/DegreeCentrality.hpp>":
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::ApproxCloseness *)__pyx_v_self->__pyx_base.__pyx_base._this)->getSquareErrorEstimates();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 754, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py_double(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 754, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":746
 * 		self._this = new _ApproxCloseness(G._this, nSamples, epsilon, normalized, type)
 * 
 * 	def getSquareErrorEstimates(self):             # <<<<<<<<<<<<<<
 * 		""" Return a vector containing the square error estimates for all nodes.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.centrality.ApproxCloseness.getSquareErrorEstimates", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_15ApproxCloseness_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_15ApproxCloseness_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_15ApproxCloseness_4__reduce_cython__(((struct __pyx_obj_9networkit_10centrality_ApproxCloseness *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_15ApproxCloseness_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_ApproxCloseness *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.ApproxCloseness.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_15ApproxCloseness_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_15ApproxCloseness_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_15ApproxCloseness_6__setstate_cython__(((struct __pyx_obj_9networkit_10centrality_ApproxCloseness *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_15ApproxCloseness_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_ApproxCloseness *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.ApproxCloseness.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":783
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, bool_t normalized=False, bool_t outDeg = True, bool_t ignoreSelfLoops=True):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _DegreeCentrality(G._this, normalized, outDeg, ignoreSelfLoops)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_10centrality_16DegreeCentrality_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_10centrality_16DegreeCentrality_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  bool __pyx_v_normalized;
  bool __pyx_v_outDeg;
  bool __pyx_v_ignoreSelfLoops;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_normalized,&__pyx_n_s_outDeg,&__pyx_n_s_ignoreSelfLoops,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_normalized);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_outDeg);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ignoreSelfLoops);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 783, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    if (values[1]) {
      __pyx_v_normalized = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_normalized == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 783, __pyx_L3_error)
    } else {
      __pyx_v_normalized = ((bool)0);
    }
    if (values[2]) {
      __pyx_v_outDeg = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_outDeg == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 783, __pyx_L3_error)
    } else {
      __pyx_v_outDeg = ((bool)1);
    }
    if (values[3]) {
      __pyx_v_ignoreSelfLoops = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_ignoreSelfLoops == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 783, __pyx_L3_error)
    } else {
      __pyx_v_ignoreSelfLoops = ((bool)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 783, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.DegreeCentrality.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 783, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_10centrality_16DegreeCentrality___cinit__(((struct __pyx_obj_9networkit_10centrality_DegreeCentrality *)__pyx_v_self), __pyx_v_G, __pyx_v_normalized, __pyx_v_outDeg, __pyx_v_ignoreSelfLoops);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_10centrality_16DegreeCentrality___cinit__(struct __pyx_obj_9networkit_10centrality_DegreeCentrality *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, bool __pyx_v_normalized, bool __pyx_v_outDeg, bool __pyx_v_ignoreSelfLoops) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::DegreeCentrality *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/centrality.pyx":784
 * 
 * 	def __cinit__(self, Graph G, bool_t normalized=False, bool_t outDeg = True, bool_t ignoreSelfLoops=True):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _DegreeCentrality(G._this, normalized, outDeg, ignoreSelfLoops)
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base._G));
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/centrality.pyx":785
 * 	def __cinit__(self, Graph G, bool_t normalized=False, bool_t outDeg = True, bool_t ignoreSelfLoops=True):
 * 		self._G = G
 * 		self._this = new _DegreeCentrality(G._this, normalized, outDeg, ignoreSelfLoops)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/centrality/HarmonicCloseness.hpp>":
 */
  try {
    __pyx_t_1 = new NetworKit::DegreeCentrality(__pyx_v_G->_this, __pyx_v_normalized, __pyx_v_outDeg, __pyx_v_ignoreSelfLoops);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 785, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/centrality.pyx":783
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, bool_t normalized=False, bool_t outDeg = True, bool_t ignoreSelfLoops=True):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _DegreeCentrality(G._this, normalized, outDeg, ignoreSelfLoops)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.centrality.DegreeCentrality.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_16DegreeCentrality_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_16DegreeCentrality_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_16DegreeCentrality_2__reduce_cython__(((struct __pyx_obj_9networkit_10centrality_DegreeCentrality *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_16DegreeCentrality_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_DegreeCentrality *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.DegreeCentrality.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_16DegreeCentrality_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_16DegreeCentrality_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_16DegreeCentrality_4__setstate_cython__(((struct __pyx_obj_9networkit_10centrality_DegreeCentrality *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_16DegreeCentrality_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_DegreeCentrality *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.DegreeCentrality.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":812
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, normalized=True):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _HarmonicCloseness(G._this, normalized)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_10centrality_17HarmonicCloseness_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_10centrality_17HarmonicCloseness_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  PyObject *__pyx_v_normalized = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_normalized,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_normalized);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 812, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_normalized = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 812, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.HarmonicCloseness.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 812, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_10centrality_17HarmonicCloseness___cinit__(((struct __pyx_obj_9networkit_10centrality_HarmonicCloseness *)__pyx_v_self), __pyx_v_G, __pyx_v_normalized);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_10centrality_17HarmonicCloseness___cinit__(struct __pyx_obj_9networkit_10centrality_HarmonicCloseness *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_normalized) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  NetworKit::HarmonicCloseness *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/centrality.pyx":813
 * 
 * 	def __cinit__(self, Graph G, normalized=True):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _HarmonicCloseness(G._this, normalized)
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base._G));
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/centrality.pyx":814
 * 	def __cinit__(self, Graph G, normalized=True):
 * 		self._G = G
 * 		self._this = new _HarmonicCloseness(G._this, normalized)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/centrality/TopCloseness.hpp>":
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_normalized); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 814, __pyx_L1_error)
  try {
    __pyx_t_2 = new NetworKit::HarmonicCloseness(__pyx_v_G->_this, __pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 814, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_2;

  /* "networkit/centrality.pyx":812
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, normalized=True):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _HarmonicCloseness(G._this, normalized)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.centrality.HarmonicCloseness.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_17HarmonicCloseness_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_17HarmonicCloseness_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_17HarmonicCloseness_2__reduce_cython__(((struct __pyx_obj_9networkit_10centrality_HarmonicCloseness *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_17HarmonicCloseness_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_HarmonicCloseness *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.HarmonicCloseness.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_17HarmonicCloseness_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_17HarmonicCloseness_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_17HarmonicCloseness_4__setstate_cython__(((struct __pyx_obj_9networkit_10centrality_HarmonicCloseness *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_17HarmonicCloseness_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_HarmonicCloseness *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.HarmonicCloseness.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":846
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self,  Graph G, k=1, first_heu=True, sec_heu=True):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _TopCloseness(G._this, k, first_heu, sec_heu)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_10centrality_12TopCloseness_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_10centrality_12TopCloseness_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  PyObject *__pyx_v_k = 0;
  PyObject *__pyx_v_first_heu = 0;
  PyObject *__pyx_v_sec_heu = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_k,&__pyx_n_s_first_heu,&__pyx_n_s_sec_heu,0};
    PyObject* values[4] = {0,0,0,0};
    values[1] = ((PyObject *)__pyx_int_1);
    values[2] = ((PyObject *)Py_True);
    values[3] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_first_heu);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sec_heu);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 846, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_k = values[1];
    __pyx_v_first_heu = values[2];
    __pyx_v_sec_heu = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 846, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.TopCloseness.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 846, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_10centrality_12TopCloseness___cinit__(((struct __pyx_obj_9networkit_10centrality_TopCloseness *)__pyx_v_self), __pyx_v_G, __pyx_v_k, __pyx_v_first_heu, __pyx_v_sec_heu);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_10centrality_12TopCloseness___cinit__(struct __pyx_obj_9networkit_10centrality_TopCloseness *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_k, PyObject *__pyx_v_first_heu, PyObject *__pyx_v_sec_heu) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10centrality_count __pyx_t_1;
  bool __pyx_t_2;
  bool __pyx_t_3;
  NetworKit::TopCloseness *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/centrality.pyx":847
 * 
 * 	def __cinit__(self,  Graph G, k=1, first_heu=True, sec_heu=True):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _TopCloseness(G._this, k, first_heu, sec_heu)
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->_G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_G));
  __pyx_v_self->_G = __pyx_v_G;

  /* "networkit/centrality.pyx":848
 * 	def __cinit__(self,  Graph G, k=1, first_heu=True, sec_heu=True):
 * 		self._G = G
 * 		self._this = new _TopCloseness(G._this, k, first_heu, sec_heu)             # <<<<<<<<<<<<<<
 * 
 * 	def topkNodesList(self, includeTrail=False):
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_k); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 848, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_first_heu); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 848, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_sec_heu); if (unlikely((__pyx_t_3 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 848, __pyx_L1_error)
  try {
    __pyx_t_4 = new NetworKit::TopCloseness(__pyx_v_G->_this, __pyx_t_1, __pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 848, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base._this = __pyx_t_4;

  /* "networkit/centrality.pyx":846
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self,  Graph G, k=1, first_heu=True, sec_heu=True):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _TopCloseness(G._this, k, first_heu, sec_heu)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.centrality.TopCloseness.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":850
 * 		self._this = new _TopCloseness(G._this, k, first_heu, sec_heu)
 * 
 * 	def topkNodesList(self, includeTrail=False):             # <<<<<<<<<<<<<<
 * 		""" Returns: a list with the k nodes with highest closeness.
 * 		WARNING: closeness centrality of some nodes below the top-k could be equal
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_12TopCloseness_3topkNodesList(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_10centrality_12TopCloseness_2topkNodesList[] = " Returns: a list with the k nodes with highest closeness.\n\t\tWARNING: closeness centrality of some nodes below the top-k could be equal\n\t  \tto the k-th closeness, we call them trail. Set the parameter includeTrail\n\t  \tto true to also include those nodes but consider that the resulting vector\n\t  \tcould be longer than k.\n\n\t\tParameters:\n\t\t-----------\n\t\tincludeTrail: Whether or not to include trail nodes.\n\n\t\tReturns:\n\t\t--------\n\t\tvector\n\t\t\tThe k nodes with highest closeness.\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_12TopCloseness_3topkNodesList(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_includeTrail = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("topkNodesList (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_includeTrail,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_includeTrail);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "topkNodesList") < 0)) __PYX_ERR(0, 850, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_includeTrail = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("topkNodesList", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 850, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.TopCloseness.topkNodesList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_10centrality_12TopCloseness_2topkNodesList(((struct __pyx_obj_9networkit_10centrality_TopCloseness *)__pyx_v_self), __pyx_v_includeTrail);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_12TopCloseness_2topkNodesList(struct __pyx_obj_9networkit_10centrality_TopCloseness *__pyx_v_self, PyObject *__pyx_v_includeTrail) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  std::vector<__pyx_t_9networkit_10centrality_node>  __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("topkNodesList", 0);

  /* "networkit/centrality.pyx":866
 * 			The k nodes with highest closeness.
 * 		"""
 * 		return (<_TopCloseness*>(self._this)).topkNodesList(includeTrail)             # <<<<<<<<<<<<<<
 * 
 * 	def topkScoresList(self, includeTrail=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_includeTrail); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 866, __pyx_L1_error)
  try {
    __pyx_t_2 = ((NetworKit::TopCloseness *)__pyx_v_self->__pyx_base._this)->topkNodesList(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 866, __pyx_L1_error)
  }
  __pyx_t_3 = __pyx_convert_vector_to_py___pyx_t_9networkit_10centrality_node(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 866, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":850
 * 		self._this = new _TopCloseness(G._this, k, first_heu, sec_heu)
 * 
 * 	def topkNodesList(self, includeTrail=False):             # <<<<<<<<<<<<<<
 * 		""" Returns: a list with the k nodes with highest closeness.
 * 		WARNING: closeness centrality of some nodes below the top-k could be equal
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.centrality.TopCloseness.topkNodesList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":868
 * 		return (<_TopCloseness*>(self._this)).topkNodesList(includeTrail)
 * 
 * 	def topkScoresList(self, includeTrail=False):             # <<<<<<<<<<<<<<
 * 		""" Returns: a list with the scores of the k nodes with highest closeness.
 * 		WARNING: closeness centrality of some nodes below the top-k could be equal
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_12TopCloseness_5topkScoresList(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_10centrality_12TopCloseness_4topkScoresList[] = " Returns: a list with the scores of the k nodes with highest closeness.\n\t\tWARNING: closeness centrality of some nodes below the top-k could be equal\n  \t\tto the k-th closeness, we call them trail. Set the parameter includeTrail\n\t  \tto true to also include those centrality values but consider that the\n\t  \tresulting vector could be longer than k.\n\n\t\tParameters:\n\t\t-----------\n\t\tincludeTrail: Whether or not to include trail centrality value.\n\n\t\tReturns:\n\t\t--------\n\t\tvector\n\t\t\tThe k highest closeness scores.\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_12TopCloseness_5topkScoresList(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_includeTrail = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("topkScoresList (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_includeTrail,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_includeTrail);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "topkScoresList") < 0)) __PYX_ERR(0, 868, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_includeTrail = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("topkScoresList", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 868, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.TopCloseness.topkScoresList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_10centrality_12TopCloseness_4topkScoresList(((struct __pyx_obj_9networkit_10centrality_TopCloseness *)__pyx_v_self), __pyx_v_includeTrail);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_12TopCloseness_4topkScoresList(struct __pyx_obj_9networkit_10centrality_TopCloseness *__pyx_v_self, PyObject *__pyx_v_includeTrail) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  std::vector<__pyx_t_9networkit_10centrality_edgeweight>  __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("topkScoresList", 0);

  /* "networkit/centrality.pyx":884
 * 			The k highest closeness scores.
 * 		"""
 * 		return (<_TopCloseness*>(self._this)).topkScoresList(includeTrail)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/centrality/TopHarmonicCloseness.hpp>":
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_includeTrail); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 884, __pyx_L1_error)
  try {
    __pyx_t_2 = ((NetworKit::TopCloseness *)__pyx_v_self->__pyx_base._this)->topkScoresList(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 884, __pyx_L1_error)
  }
  __pyx_t_3 = __pyx_convert_vector_to_py___pyx_t_9networkit_10centrality_edgeweight(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 884, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":868
 * 		return (<_TopCloseness*>(self._this)).topkNodesList(includeTrail)
 * 
 * 	def topkScoresList(self, includeTrail=False):             # <<<<<<<<<<<<<<
 * 		""" Returns: a list with the scores of the k nodes with highest closeness.
 * 		WARNING: closeness centrality of some nodes below the top-k could be equal
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.centrality.TopCloseness.topkScoresList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_12TopCloseness_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_12TopCloseness_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_12TopCloseness_6__reduce_cython__(((struct __pyx_obj_9networkit_10centrality_TopCloseness *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_12TopCloseness_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_TopCloseness *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.TopCloseness.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_12TopCloseness_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_12TopCloseness_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_12TopCloseness_8__setstate_cython__(((struct __pyx_obj_9networkit_10centrality_TopCloseness *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_12TopCloseness_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_TopCloseness *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.TopCloseness.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":925
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self,  Graph G, k=1, useNBbound=False):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _TopHarmonicCloseness(G._this, k, useNBbound)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_10centrality_20TopHarmonicCloseness_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_10centrality_20TopHarmonicCloseness_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  PyObject *__pyx_v_k = 0;
  PyObject *__pyx_v_useNBbound = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_k,&__pyx_n_s_useNBbound,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)__pyx_int_1);
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_useNBbound);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 925, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_k = values[1];
    __pyx_v_useNBbound = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 925, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.TopHarmonicCloseness.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 925, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_10centrality_20TopHarmonicCloseness___cinit__(((struct __pyx_obj_9networkit_10centrality_TopHarmonicCloseness *)__pyx_v_self), __pyx_v_G, __pyx_v_k, __pyx_v_useNBbound);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_10centrality_20TopHarmonicCloseness___cinit__(struct __pyx_obj_9networkit_10centrality_TopHarmonicCloseness *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_k, PyObject *__pyx_v_useNBbound) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10centrality_count __pyx_t_1;
  bool __pyx_t_2;
  NetworKit::TopHarmonicCloseness *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/centrality.pyx":926
 * 
 * 	def __cinit__(self,  Graph G, k=1, useNBbound=False):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _TopHarmonicCloseness(G._this, k, useNBbound)
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->_G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_G));
  __pyx_v_self->_G = __pyx_v_G;

  /* "networkit/centrality.pyx":927
 * 	def __cinit__(self,  Graph G, k=1, useNBbound=False):
 * 		self._G = G
 * 		self._this = new _TopHarmonicCloseness(G._this, k, useNBbound)             # <<<<<<<<<<<<<<
 * 
 * 	def topkNodesList(self, includeTrail=False):
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_k); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 927, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_useNBbound); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 927, __pyx_L1_error)
  try {
    __pyx_t_3 = new NetworKit::TopHarmonicCloseness(__pyx_v_G->_this, __pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 927, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base._this = __pyx_t_3;

  /* "networkit/centrality.pyx":925
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self,  Graph G, k=1, useNBbound=False):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _TopHarmonicCloseness(G._this, k, useNBbound)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.centrality.TopHarmonicCloseness.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":929
 * 		self._this = new _TopHarmonicCloseness(G._this, k, useNBbound)
 * 
 * 	def topkNodesList(self, includeTrail=False):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns a list with the k nodes with highest harmonic closeness.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_20TopHarmonicCloseness_3topkNodesList(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_10centrality_20TopHarmonicCloseness_2topkNodesList[] = "\n\t\tReturns a list with the k nodes with highest harmonic closeness.\n\t\tWARNING: closeness centrality of some nodes below the top-k could be equal\n\t\tto the k-th closeness, we call them trail. Set the parameter includeTrail\n\t\tto true to also include those nodes but consider that the resulting vector\n\t\tcould be longer than k.\n\n\t\tParameters\n\t\t----------\n\t\tincludeTrail : bool\n\t\t\tWhether or not to include trail nodes.\n\n\t\tReturns:\n\t\t--------\n\t\tvector\n\t\t\tThe k nodes with highest harmonic closeness.\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_20TopHarmonicCloseness_3topkNodesList(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_includeTrail = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("topkNodesList (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_includeTrail,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_includeTrail);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "topkNodesList") < 0)) __PYX_ERR(0, 929, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_includeTrail = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("topkNodesList", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 929, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.TopHarmonicCloseness.topkNodesList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_10centrality_20TopHarmonicCloseness_2topkNodesList(((struct __pyx_obj_9networkit_10centrality_TopHarmonicCloseness *)__pyx_v_self), __pyx_v_includeTrail);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_20TopHarmonicCloseness_2topkNodesList(struct __pyx_obj_9networkit_10centrality_TopHarmonicCloseness *__pyx_v_self, PyObject *__pyx_v_includeTrail) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  std::vector<__pyx_t_9networkit_10centrality_node>  __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("topkNodesList", 0);

  /* "networkit/centrality.pyx":947
 * 			The k nodes with highest harmonic closeness.
 * 		"""
 * 		return (<_TopHarmonicCloseness*>(self._this)).topkNodesList(includeTrail)             # <<<<<<<<<<<<<<
 * 
 * 	def topkScoresList(self, includeTrail=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_includeTrail); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 947, __pyx_L1_error)
  try {
    __pyx_t_2 = ((NetworKit::TopHarmonicCloseness *)__pyx_v_self->__pyx_base._this)->topkNodesList(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 947, __pyx_L1_error)
  }
  __pyx_t_3 = __pyx_convert_vector_to_py___pyx_t_9networkit_10centrality_node(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 947, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":929
 * 		self._this = new _TopHarmonicCloseness(G._this, k, useNBbound)
 * 
 * 	def topkNodesList(self, includeTrail=False):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns a list with the k nodes with highest harmonic closeness.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.centrality.TopHarmonicCloseness.topkNodesList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":949
 * 		return (<_TopHarmonicCloseness*>(self._this)).topkNodesList(includeTrail)
 * 
 * 	def topkScoresList(self, includeTrail=False):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns a list with the scores of the k nodes with highest harmonic
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_20TopHarmonicCloseness_5topkScoresList(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_10centrality_20TopHarmonicCloseness_4topkScoresList[] = "\n\t\tReturns a list with the scores of the k nodes with highest harmonic\n\t\tcloseness. WARNING: closeness centrality of some nodes below the top-k\n\t\tcould be equal to the k-th closeness, we call them trail. Set the\n\t\tparameter includeTrail to true to also include those centrality values\n\t\tbut consider that the resulting vector could be longer than k.\n\n\t\tParameters\n\t\t----------\n\t\tincludeTrail : bool\n\t\t\tWhether or not to include trail centrality value.\n\n\t\tReturns:\n\t\t--------\n\t\tvector\n\t\t\tThe k highest closeness harmonic scores.\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_20TopHarmonicCloseness_5topkScoresList(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_includeTrail = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("topkScoresList (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_includeTrail,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_includeTrail);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "topkScoresList") < 0)) __PYX_ERR(0, 949, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_includeTrail = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("topkScoresList", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 949, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.TopHarmonicCloseness.topkScoresList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_10centrality_20TopHarmonicCloseness_4topkScoresList(((struct __pyx_obj_9networkit_10centrality_TopHarmonicCloseness *)__pyx_v_self), __pyx_v_includeTrail);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_20TopHarmonicCloseness_4topkScoresList(struct __pyx_obj_9networkit_10centrality_TopHarmonicCloseness *__pyx_v_self, PyObject *__pyx_v_includeTrail) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  std::vector<__pyx_t_9networkit_10centrality_edgeweight>  __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("topkScoresList", 0);

  /* "networkit/centrality.pyx":967
 * 			The k highest closeness harmonic scores.
 * 		"""
 * 		return (<_TopHarmonicCloseness*>(self._this)).topkScoresList(includeTrail)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/centrality/DynTopHarmonicCloseness.hpp>":
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_includeTrail); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 967, __pyx_L1_error)
  try {
    __pyx_t_2 = ((NetworKit::TopHarmonicCloseness *)__pyx_v_self->__pyx_base._this)->topkScoresList(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 967, __pyx_L1_error)
  }
  __pyx_t_3 = __pyx_convert_vector_to_py___pyx_t_9networkit_10centrality_edgeweight(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 967, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":949
 * 		return (<_TopHarmonicCloseness*>(self._this)).topkNodesList(includeTrail)
 * 
 * 	def topkScoresList(self, includeTrail=False):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns a list with the scores of the k nodes with highest harmonic
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.centrality.TopHarmonicCloseness.topkScoresList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_20TopHarmonicCloseness_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_20TopHarmonicCloseness_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_20TopHarmonicCloseness_6__reduce_cython__(((struct __pyx_obj_9networkit_10centrality_TopHarmonicCloseness *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_20TopHarmonicCloseness_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_TopHarmonicCloseness *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.TopHarmonicCloseness.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_20TopHarmonicCloseness_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_20TopHarmonicCloseness_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_20TopHarmonicCloseness_8__setstate_cython__(((struct __pyx_obj_9networkit_10centrality_TopHarmonicCloseness *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_20TopHarmonicCloseness_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_TopHarmonicCloseness *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.TopHarmonicCloseness.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":999
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self,  Graph G, k=1, useBFSbound=False):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _DynTopHarmonicCloseness(G._this, k, useBFSbound)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_10centrality_23DynTopHarmonicCloseness_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_10centrality_23DynTopHarmonicCloseness_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  PyObject *__pyx_v_k = 0;
  PyObject *__pyx_v_useBFSbound = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_k,&__pyx_n_s_useBFSbound,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)__pyx_int_1);
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_useBFSbound);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 999, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_k = values[1];
    __pyx_v_useBFSbound = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 999, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.DynTopHarmonicCloseness.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 999, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_10centrality_23DynTopHarmonicCloseness___cinit__(((struct __pyx_obj_9networkit_10centrality_DynTopHarmonicCloseness *)__pyx_v_self), __pyx_v_G, __pyx_v_k, __pyx_v_useBFSbound);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_10centrality_23DynTopHarmonicCloseness___cinit__(struct __pyx_obj_9networkit_10centrality_DynTopHarmonicCloseness *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_k, PyObject *__pyx_v_useBFSbound) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10centrality_count __pyx_t_1;
  bool __pyx_t_2;
  NetworKit::DynTopHarmonicCloseness *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/centrality.pyx":1000
 * 
 * 	def __cinit__(self,  Graph G, k=1, useBFSbound=False):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _DynTopHarmonicCloseness(G._this, k, useBFSbound)
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->_G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_G));
  __pyx_v_self->_G = __pyx_v_G;

  /* "networkit/centrality.pyx":1001
 * 	def __cinit__(self,  Graph G, k=1, useBFSbound=False):
 * 		self._G = G
 * 		self._this = new _DynTopHarmonicCloseness(G._this, k, useBFSbound)             # <<<<<<<<<<<<<<
 * 
 * 	def ranking(self, includeTrail = False):
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_k); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1001, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_useBFSbound); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1001, __pyx_L1_error)
  try {
    __pyx_t_3 = new NetworKit::DynTopHarmonicCloseness(__pyx_v_G->_this, __pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1001, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base._this = __pyx_t_3;

  /* "networkit/centrality.pyx":999
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self,  Graph G, k=1, useBFSbound=False):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _DynTopHarmonicCloseness(G._this, k, useBFSbound)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.centrality.DynTopHarmonicCloseness.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1003
 * 		self._this = new _DynTopHarmonicCloseness(G._this, k, useBFSbound)
 * 
 * 	def ranking(self, includeTrail = False):             # <<<<<<<<<<<<<<
 * 		""" Returns: the ranking of the k most central nodes in the graph.
 * 		WARNING: closeness centrality of some nodes below the top-k could be equal
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_23DynTopHarmonicCloseness_3ranking(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_10centrality_23DynTopHarmonicCloseness_2ranking[] = " Returns: the ranking of the k most central nodes in the graph.\n\t\tWARNING: closeness centrality of some nodes below the top-k could be equal\n\t\tto the k-th closeness, we call them trail. Set the parameter includeTrail\n\t\tto true to also include those nodes but consider that the resulting vector\n\t\tcould be longer than k.\n\n\t\tParameters:\n\t\t-----------\n\t\tincludeTrail: Whether or not to include trail nodes.\n\n\t\tReturns:\n\t\t--------\n\t\tvector\n\t\t\t\tThe ranking.\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_23DynTopHarmonicCloseness_3ranking(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_includeTrail = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ranking (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_includeTrail,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_includeTrail);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "ranking") < 0)) __PYX_ERR(0, 1003, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_includeTrail = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("ranking", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1003, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.DynTopHarmonicCloseness.ranking", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_10centrality_23DynTopHarmonicCloseness_2ranking(((struct __pyx_obj_9networkit_10centrality_DynTopHarmonicCloseness *)__pyx_v_self), __pyx_v_includeTrail);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_23DynTopHarmonicCloseness_2ranking(struct __pyx_obj_9networkit_10centrality_DynTopHarmonicCloseness *__pyx_v_self, PyObject *__pyx_v_includeTrail) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  std::vector<std::pair<__pyx_t_9networkit_10centrality_node,__pyx_t_9networkit_10centrality_edgeweight> >  __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ranking", 0);

  /* "networkit/centrality.pyx":1019
 * 				The ranking.
 * 		"""
 * 		return (<_DynTopHarmonicCloseness*>(self._this)).ranking(includeTrail)             # <<<<<<<<<<<<<<
 * 
 * 	def topkNodesList(self, includeTrail = False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_includeTrail); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1019, __pyx_L1_error)
  try {
    __pyx_t_2 = ((NetworKit::DynTopHarmonicCloseness *)__pyx_v_self->__pyx_base._this)->ranking(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1019, __pyx_L1_error)
  }
  __pyx_t_3 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c___pyx_t_9networkit_10centrality_node_2c___pyx_t_9networkit_10centrality_edgeweight_3e___(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1019, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":1003
 * 		self._this = new _DynTopHarmonicCloseness(G._this, k, useBFSbound)
 * 
 * 	def ranking(self, includeTrail = False):             # <<<<<<<<<<<<<<
 * 		""" Returns: the ranking of the k most central nodes in the graph.
 * 		WARNING: closeness centrality of some nodes below the top-k could be equal
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.centrality.DynTopHarmonicCloseness.ranking", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1021
 * 		return (<_DynTopHarmonicCloseness*>(self._this)).ranking(includeTrail)
 * 
 * 	def topkNodesList(self, includeTrail = False):             # <<<<<<<<<<<<<<
 * 		""" Returns: a list with the k nodes with highest harmonic closeness.
 * 		WARNING: closeness centrality of some nodes below the top-k could be equal
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_23DynTopHarmonicCloseness_5topkNodesList(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_10centrality_23DynTopHarmonicCloseness_4topkNodesList[] = " Returns: a list with the k nodes with highest harmonic closeness.\n\t\tWARNING: closeness centrality of some nodes below the top-k could be equal\n\t\tto the k-th closeness, we call them trail. Set the parameter includeTrail\n\t\tto true to also include those nodes but consider that the resulting vector\n\t\tcould be longer than k.\n\n\t\tParameters:\n\t\t-----------\n\t\tincludeTrail: Whether or not to include trail nodes.\n\n\t\tReturns:\n\t\t--------\n\t\tvector\n\t\t\tThe k nodes with highest harmonic closeness.\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_23DynTopHarmonicCloseness_5topkNodesList(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_includeTrail = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("topkNodesList (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_includeTrail,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_includeTrail);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "topkNodesList") < 0)) __PYX_ERR(0, 1021, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_includeTrail = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("topkNodesList", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1021, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.DynTopHarmonicCloseness.topkNodesList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_10centrality_23DynTopHarmonicCloseness_4topkNodesList(((struct __pyx_obj_9networkit_10centrality_DynTopHarmonicCloseness *)__pyx_v_self), __pyx_v_includeTrail);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_23DynTopHarmonicCloseness_4topkNodesList(struct __pyx_obj_9networkit_10centrality_DynTopHarmonicCloseness *__pyx_v_self, PyObject *__pyx_v_includeTrail) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  std::vector<__pyx_t_9networkit_10centrality_node>  __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("topkNodesList", 0);

  /* "networkit/centrality.pyx":1037
 * 			The k nodes with highest harmonic closeness.
 * 		"""
 * 		return (<_DynTopHarmonicCloseness*>(self._this)).topkNodesList(includeTrail)             # <<<<<<<<<<<<<<
 * 
 * 	def topkScoresList(self, includeTrail = False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_includeTrail); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1037, __pyx_L1_error)
  try {
    __pyx_t_2 = ((NetworKit::DynTopHarmonicCloseness *)__pyx_v_self->__pyx_base._this)->topkNodesList(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1037, __pyx_L1_error)
  }
  __pyx_t_3 = __pyx_convert_vector_to_py___pyx_t_9networkit_10centrality_node(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1037, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":1021
 * 		return (<_DynTopHarmonicCloseness*>(self._this)).ranking(includeTrail)
 * 
 * 	def topkNodesList(self, includeTrail = False):             # <<<<<<<<<<<<<<
 * 		""" Returns: a list with the k nodes with highest harmonic closeness.
 * 		WARNING: closeness centrality of some nodes below the top-k could be equal
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.centrality.DynTopHarmonicCloseness.topkNodesList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1039
 * 		return (<_DynTopHarmonicCloseness*>(self._this)).topkNodesList(includeTrail)
 * 
 * 	def topkScoresList(self, includeTrail = False):             # <<<<<<<<<<<<<<
 * 		""" Returns: a list with the scores of the k nodes with highest harmonic closeness.
 * 		WARNING: closeness centrality of some nodes below the top-k could
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_23DynTopHarmonicCloseness_7topkScoresList(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_10centrality_23DynTopHarmonicCloseness_6topkScoresList[] = " Returns: a list with the scores of the k nodes with highest harmonic closeness.\n\t\tWARNING: closeness centrality of some nodes below the top-k could\n\t\tbe equal to the k-th closeness, we call them trail. Set the parameter\n\t\tincludeTrail to true to also include those centrality values but consider\n\t\tthat the resulting vector could be longer than k.\n\n\t\tParameters:\n\t\t-----------\n\t\tincludeTrail: Whether or not to include trail centrality value.\n\n\t\tReturns:\n\t\t--------\n\t\tvector\n\t\t\tThe k highest closeness harmonic scores.\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_23DynTopHarmonicCloseness_7topkScoresList(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_includeTrail = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("topkScoresList (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_includeTrail,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_includeTrail);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "topkScoresList") < 0)) __PYX_ERR(0, 1039, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_includeTrail = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("topkScoresList", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1039, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.DynTopHarmonicCloseness.topkScoresList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_10centrality_23DynTopHarmonicCloseness_6topkScoresList(((struct __pyx_obj_9networkit_10centrality_DynTopHarmonicCloseness *)__pyx_v_self), __pyx_v_includeTrail);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_23DynTopHarmonicCloseness_6topkScoresList(struct __pyx_obj_9networkit_10centrality_DynTopHarmonicCloseness *__pyx_v_self, PyObject *__pyx_v_includeTrail) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  std::vector<__pyx_t_9networkit_10centrality_edgeweight>  __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("topkScoresList", 0);

  /* "networkit/centrality.pyx":1055
 * 			The k highest closeness harmonic scores.
 * 		"""
 * 		return (<_DynTopHarmonicCloseness*>(self._this)).topkScoresList(includeTrail)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_includeTrail); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1055, __pyx_L1_error)
  try {
    __pyx_t_2 = ((NetworKit::DynTopHarmonicCloseness *)__pyx_v_self->__pyx_base._this)->topkScoresList(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1055, __pyx_L1_error)
  }
  __pyx_t_3 = __pyx_convert_vector_to_py___pyx_t_9networkit_10centrality_edgeweight(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1055, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":1039
 * 		return (<_DynTopHarmonicCloseness*>(self._this)).topkNodesList(includeTrail)
 * 
 * 	def topkScoresList(self, includeTrail = False):             # <<<<<<<<<<<<<<
 * 		""" Returns: a list with the scores of the k nodes with highest harmonic closeness.
 * 		WARNING: closeness centrality of some nodes below the top-k could
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.centrality.DynTopHarmonicCloseness.topkScoresList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1064
 * 	event: A GrapEvent
 * 	"""
 * 	def update(self, ev):             # <<<<<<<<<<<<<<
 * 		(<_DynTopHarmonicCloseness*>(self._this)).update(_GraphEvent(ev.type, ev.u, ev.v, ev.w))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_23DynTopHarmonicCloseness_9update(PyObject *__pyx_v_self, PyObject *__pyx_v_ev); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_23DynTopHarmonicCloseness_9update(PyObject *__pyx_v_self, PyObject *__pyx_v_ev) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_23DynTopHarmonicCloseness_8update(((struct __pyx_obj_9networkit_10centrality_DynTopHarmonicCloseness *)__pyx_v_self), ((PyObject *)__pyx_v_ev));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_23DynTopHarmonicCloseness_8update(struct __pyx_obj_9networkit_10centrality_DynTopHarmonicCloseness *__pyx_v_self, PyObject *__pyx_v_ev) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  enum NetworKit::GraphEvent::Type __pyx_t_2;
  __pyx_t_9networkit_8dynamics_node __pyx_t_3;
  __pyx_t_9networkit_8dynamics_node __pyx_t_4;
  __pyx_t_9networkit_8dynamics_edgeweight __pyx_t_5;
  NetworKit::GraphEvent __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update", 0);

  /* "networkit/centrality.pyx":1065
 * 	"""
 * 	def update(self, ev):
 * 		(<_DynTopHarmonicCloseness*>(self._this)).update(_GraphEvent(ev.type, ev.u, ev.v, ev.w))             # <<<<<<<<<<<<<<
 * 
 * 	""" Updates the list of the k nodes with the highest harmonic closeness in G
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ev, __pyx_n_s_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1065, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((enum NetworKit::GraphEvent::Type)__Pyx_PyInt_As_enum__NetworKit_3a__3a_GraphEvent_3a__3a_Type(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1065, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ev, __pyx_n_s_u); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1065, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_3 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1065, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ev, __pyx_n_s_v); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1065, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_4 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1065, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ev, __pyx_n_s_w); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1065, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1065, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_t_6 = NetworKit::GraphEvent(__pyx_t_2, __pyx_t_3, __pyx_t_4, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1065, __pyx_L1_error)
  }
  try {
    ((NetworKit::DynTopHarmonicCloseness *)__pyx_v_self->__pyx_base._this)->update(__pyx_t_6);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1065, __pyx_L1_error)
  }

  /* "networkit/centrality.pyx":1064
 * 	event: A GrapEvent
 * 	"""
 * 	def update(self, ev):             # <<<<<<<<<<<<<<
 * 		(<_DynTopHarmonicCloseness*>(self._this)).update(_GraphEvent(ev.type, ev.u, ev.v, ev.w))
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.DynTopHarmonicCloseness.update", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1074
 * 	batch: A GraphEvent vector
 * 	"""
 * 	def updateBatch(self, batch):             # <<<<<<<<<<<<<<
 * 		cdef vector[_GraphEvent] _batch
 * 		for ev in batch:
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_23DynTopHarmonicCloseness_11updateBatch(PyObject *__pyx_v_self, PyObject *__pyx_v_batch); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_23DynTopHarmonicCloseness_11updateBatch(PyObject *__pyx_v_self, PyObject *__pyx_v_batch) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("updateBatch (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_23DynTopHarmonicCloseness_10updateBatch(((struct __pyx_obj_9networkit_10centrality_DynTopHarmonicCloseness *)__pyx_v_self), ((PyObject *)__pyx_v_batch));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_23DynTopHarmonicCloseness_10updateBatch(struct __pyx_obj_9networkit_10centrality_DynTopHarmonicCloseness *__pyx_v_self, PyObject *__pyx_v_batch) {
  std::vector<NetworKit::GraphEvent>  __pyx_v__batch;
  PyObject *__pyx_v_ev = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  enum NetworKit::GraphEvent::Type __pyx_t_5;
  __pyx_t_9networkit_8dynamics_node __pyx_t_6;
  __pyx_t_9networkit_8dynamics_node __pyx_t_7;
  __pyx_t_9networkit_8dynamics_edgeweight __pyx_t_8;
  NetworKit::GraphEvent __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("updateBatch", 0);

  /* "networkit/centrality.pyx":1076
 * 	def updateBatch(self, batch):
 * 		cdef vector[_GraphEvent] _batch
 * 		for ev in batch:             # <<<<<<<<<<<<<<
 * 			_batch.push_back(_GraphEvent(ev.type, ev.u, ev.v, ev.w))
 * 		(<_DynTopHarmonicCloseness*>(self._this)).updateBatch(_batch)
 */
  if (likely(PyList_CheckExact(__pyx_v_batch)) || PyTuple_CheckExact(__pyx_v_batch)) {
    __pyx_t_1 = __pyx_v_batch; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_batch); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1076, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1076, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 1076, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1076, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 1076, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1076, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1076, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_ev, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "networkit/centrality.pyx":1077
 * 		cdef vector[_GraphEvent] _batch
 * 		for ev in batch:
 * 			_batch.push_back(_GraphEvent(ev.type, ev.u, ev.v, ev.w))             # <<<<<<<<<<<<<<
 * 		(<_DynTopHarmonicCloseness*>(self._this)).updateBatch(_batch)
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ev, __pyx_n_s_type); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1077, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = ((enum NetworKit::GraphEvent::Type)__Pyx_PyInt_As_enum__NetworKit_3a__3a_GraphEvent_3a__3a_Type(__pyx_t_4)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1077, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ev, __pyx_n_s_u); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1077, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyInt_As_uint64_t(__pyx_t_4); if (unlikely((__pyx_t_6 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1077, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ev, __pyx_n_s_v); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1077, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyInt_As_uint64_t(__pyx_t_4); if (unlikely((__pyx_t_7 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1077, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ev, __pyx_n_s_w); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1077, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1077, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    try {
      __pyx_t_9 = NetworKit::GraphEvent(__pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_t_8);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1077, __pyx_L1_error)
    }
    try {
      __pyx_v__batch.push_back(__pyx_t_9);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1077, __pyx_L1_error)
    }

    /* "networkit/centrality.pyx":1076
 * 	def updateBatch(self, batch):
 * 		cdef vector[_GraphEvent] _batch
 * 		for ev in batch:             # <<<<<<<<<<<<<<
 * 			_batch.push_back(_GraphEvent(ev.type, ev.u, ev.v, ev.w))
 * 		(<_DynTopHarmonicCloseness*>(self._this)).updateBatch(_batch)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/centrality.pyx":1078
 * 		for ev in batch:
 * 			_batch.push_back(_GraphEvent(ev.type, ev.u, ev.v, ev.w))
 * 		(<_DynTopHarmonicCloseness*>(self._this)).updateBatch(_batch)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/centrality/LocalPartitionCoverage.hpp>":
 */
  try {
    ((NetworKit::DynTopHarmonicCloseness *)__pyx_v_self->__pyx_base._this)->updateBatch(__pyx_v__batch);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1078, __pyx_L1_error)
  }

  /* "networkit/centrality.pyx":1074
 * 	batch: A GraphEvent vector
 * 	"""
 * 	def updateBatch(self, batch):             # <<<<<<<<<<<<<<
 * 		cdef vector[_GraphEvent] _batch
 * 		for ev in batch:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("networkit.centrality.DynTopHarmonicCloseness.updateBatch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ev);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_23DynTopHarmonicCloseness_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_23DynTopHarmonicCloseness_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_23DynTopHarmonicCloseness_12__reduce_cython__(((struct __pyx_obj_9networkit_10centrality_DynTopHarmonicCloseness *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_23DynTopHarmonicCloseness_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_DynTopHarmonicCloseness *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.DynTopHarmonicCloseness.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_23DynTopHarmonicCloseness_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_23DynTopHarmonicCloseness_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_23DynTopHarmonicCloseness_14__setstate_cython__(((struct __pyx_obj_9networkit_10centrality_DynTopHarmonicCloseness *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_23DynTopHarmonicCloseness_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_DynTopHarmonicCloseness *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.DynTopHarmonicCloseness.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1101
 * 	cdef Partition _P
 * 
 * 	def __cinit__(self, Graph G not None, Partition P not None):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._P = P
 */

/* Python wrapper */
static int __pyx_pw_9networkit_10centrality_22LocalPartitionCoverage_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_10centrality_22LocalPartitionCoverage_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_P = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_P,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_P)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(0, 1101, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1101, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_P = ((struct __pyx_obj_9networkit_10structures_Partition *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1101, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.LocalPartitionCoverage.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 0, "G", 0))) __PYX_ERR(0, 1101, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_P), __pyx_ptype_9networkit_10structures_Partition, 0, "P", 0))) __PYX_ERR(0, 1101, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_10centrality_22LocalPartitionCoverage___cinit__(((struct __pyx_obj_9networkit_10centrality_LocalPartitionCoverage *)__pyx_v_self), __pyx_v_G, __pyx_v_P);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_10centrality_22LocalPartitionCoverage___cinit__(struct __pyx_obj_9networkit_10centrality_LocalPartitionCoverage *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_P) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::LocalPartitionCoverage *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/centrality.pyx":1102
 * 
 * 	def __cinit__(self, Graph G not None, Partition P not None):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._P = P
 * 		self._this = new _LocalPartitionCoverage(G._this, P._this)
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base._G));
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/centrality.pyx":1103
 * 	def __cinit__(self, Graph G not None, Partition P not None):
 * 		self._G = G
 * 		self._P = P             # <<<<<<<<<<<<<<
 * 		self._this = new _LocalPartitionCoverage(G._this, P._this)
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_P));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_P));
  __Pyx_GOTREF(__pyx_v_self->_P);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_P));
  __pyx_v_self->_P = __pyx_v_P;

  /* "networkit/centrality.pyx":1104
 * 		self._G = G
 * 		self._P = P
 * 		self._this = new _LocalPartitionCoverage(G._this, P._this)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/centrality/GroupDegree.hpp>":
 */
  try {
    __pyx_t_1 = new NetworKit::LocalPartitionCoverage(__pyx_v_G->_this, __pyx_v_P->_this);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1104, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/centrality.pyx":1101
 * 	cdef Partition _P
 * 
 * 	def __cinit__(self, Graph G not None, Partition P not None):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._P = P
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.centrality.LocalPartitionCoverage.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_22LocalPartitionCoverage_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_22LocalPartitionCoverage_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_22LocalPartitionCoverage_2__reduce_cython__(((struct __pyx_obj_9networkit_10centrality_LocalPartitionCoverage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_22LocalPartitionCoverage_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_LocalPartitionCoverage *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.LocalPartitionCoverage.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_22LocalPartitionCoverage_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_22LocalPartitionCoverage_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_22LocalPartitionCoverage_4__setstate_cython__(((struct __pyx_obj_9networkit_10centrality_LocalPartitionCoverage *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_22LocalPartitionCoverage_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_LocalPartitionCoverage *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__38, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.LocalPartitionCoverage.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1137
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self, Graph G, k = 1, countGroupNodes = True):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _GroupDegree(G._this, k, countGroupNodes)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_10centrality_11GroupDegree_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_10centrality_11GroupDegree_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  PyObject *__pyx_v_k = 0;
  PyObject *__pyx_v_countGroupNodes = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_k,&__pyx_n_s_countGroupNodes,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)__pyx_int_1);
    values[2] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_countGroupNodes);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1137, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_k = values[1];
    __pyx_v_countGroupNodes = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1137, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.GroupDegree.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 1137, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_10centrality_11GroupDegree___cinit__(((struct __pyx_obj_9networkit_10centrality_GroupDegree *)__pyx_v_self), __pyx_v_G, __pyx_v_k, __pyx_v_countGroupNodes);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_10centrality_11GroupDegree___cinit__(struct __pyx_obj_9networkit_10centrality_GroupDegree *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_k, PyObject *__pyx_v_countGroupNodes) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10centrality_count __pyx_t_1;
  bool __pyx_t_2;
  NetworKit::GroupDegree *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/centrality.pyx":1138
 * 
 * 	def __cinit__(self, Graph G, k = 1, countGroupNodes = True):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _GroupDegree(G._this, k, countGroupNodes)
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->_G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_G));
  __pyx_v_self->_G = __pyx_v_G;

  /* "networkit/centrality.pyx":1139
 * 	def __cinit__(self, Graph G, k = 1, countGroupNodes = True):
 * 		self._G = G
 * 		self._this = new _GroupDegree(G._this, k, countGroupNodes)             # <<<<<<<<<<<<<<
 * 
 * 	def groupMaxDegree(self):
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_k); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1139, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_countGroupNodes); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1139, __pyx_L1_error)
  try {
    __pyx_t_3 = new NetworKit::GroupDegree(__pyx_v_G->_this, __pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1139, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base._this = __pyx_t_3;

  /* "networkit/centrality.pyx":1137
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self, Graph G, k = 1, countGroupNodes = True):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _GroupDegree(G._this, k, countGroupNodes)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.centrality.GroupDegree.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1141
 * 		self._this = new _GroupDegree(G._this, k, countGroupNodes)
 * 
 * 	def groupMaxDegree(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns the group with maximum degree centrality.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_11GroupDegree_3groupMaxDegree(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9networkit_10centrality_11GroupDegree_2groupMaxDegree[] = "\n\t\tReturns the group with maximum degree centrality.\n\t\tReturns:\n\t\t--------\n\t\tvector\n\t\t\tThe group of k nodes with highest degree centrality.\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_11GroupDegree_3groupMaxDegree(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("groupMaxDegree (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_11GroupDegree_2groupMaxDegree(((struct __pyx_obj_9networkit_10centrality_GroupDegree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_11GroupDegree_2groupMaxDegree(struct __pyx_obj_9networkit_10centrality_GroupDegree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<__pyx_t_9networkit_10centrality_node>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("groupMaxDegree", 0);

  /* "networkit/centrality.pyx":1149
 * 			The group of k nodes with highest degree centrality.
 * 		"""
 * 		return (<_GroupDegree*>(self._this)).groupMaxDegree()             # <<<<<<<<<<<<<<
 * 
 * 	def getScore(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::GroupDegree *)__pyx_v_self->__pyx_base._this)->groupMaxDegree();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1149, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py___pyx_t_9networkit_10centrality_node(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":1141
 * 		self._this = new _GroupDegree(G._this, k, countGroupNodes)
 * 
 * 	def groupMaxDegree(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns the group with maximum degree centrality.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.centrality.GroupDegree.groupMaxDegree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1151
 * 		return (<_GroupDegree*>(self._this)).groupMaxDegree()
 * 
 * 	def getScore(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns the score of the group with maximum degree centrality (i.e. the
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_11GroupDegree_5getScore(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9networkit_10centrality_11GroupDegree_4getScore[] = "\n\t\tReturns the score of the group with maximum degree centrality (i.e. the\n\t\tnumber of nodes outside the group that can be reached in one hop from at\n\t\tleast one node in the group).\n\n\t\tReturns:\n\t\t--------\n\t\tcount\n\t\t\tThe number of nodes outside the group that can be reached in one hop\n\t\t\tfrom at least one node in the group.\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_11GroupDegree_5getScore(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getScore (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_11GroupDegree_4getScore(((struct __pyx_obj_9networkit_10centrality_GroupDegree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_11GroupDegree_4getScore(struct __pyx_obj_9networkit_10centrality_GroupDegree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10centrality_count __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getScore", 0);

  /* "networkit/centrality.pyx":1163
 * 			from at least one node in the group.
 * 		"""
 * 		return (<_GroupDegree*>(self._this)).getScore()             # <<<<<<<<<<<<<<
 * 
 * 	def scoreOfGroup(self, vector[node] group):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::GroupDegree *)__pyx_v_self->__pyx_base._this)->getScore();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1163, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_uint64_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":1151
 * 		return (<_GroupDegree*>(self._this)).groupMaxDegree()
 * 
 * 	def getScore(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns the score of the group with maximum degree centrality (i.e. the
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.centrality.GroupDegree.getScore", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1165
 * 		return (<_GroupDegree*>(self._this)).getScore()
 * 
 * 	def scoreOfGroup(self, vector[node] group):             # <<<<<<<<<<<<<<
 * 			"""
 * 			Returns the score of the given group.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_11GroupDegree_7scoreOfGroup(PyObject *__pyx_v_self, PyObject *__pyx_arg_group); /*proto*/
static char __pyx_doc_9networkit_10centrality_11GroupDegree_6scoreOfGroup[] = "\n\t\t\tReturns the score of the given group.\n\n\t\t\tParameters:\n\t\t\t-----------\n\t\t\tgroup : set of nodes\n\n\t\t\tReturns:\n\t\t\t--------\n\t\t\tcount\n\t\t\t\t\tThe score of the given group.\n\t\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_11GroupDegree_7scoreOfGroup(PyObject *__pyx_v_self, PyObject *__pyx_arg_group) {
  std::vector<__pyx_t_9networkit_10centrality_node>  __pyx_v_group;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scoreOfGroup (wrapper)", 0);
  assert(__pyx_arg_group); {
    __pyx_v_group = __pyx_convert_vector_from_py___pyx_t_9networkit_10centrality_node(__pyx_arg_group); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1165, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.GroupDegree.scoreOfGroup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_10centrality_11GroupDegree_6scoreOfGroup(((struct __pyx_obj_9networkit_10centrality_GroupDegree *)__pyx_v_self), ((std::vector<__pyx_t_9networkit_10centrality_node> )__pyx_v_group));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_11GroupDegree_6scoreOfGroup(struct __pyx_obj_9networkit_10centrality_GroupDegree *__pyx_v_self, std::vector<__pyx_t_9networkit_10centrality_node>  __pyx_v_group) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10centrality_count __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("scoreOfGroup", 0);

  /* "networkit/centrality.pyx":1178
 * 					The score of the given group.
 * 			"""
 * 			return (<_GroupDegree*>(self._this)).scoreOfGroup(group)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/centrality/GedWalk.hpp>" namespace "NetworKit::GedWalk":
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::GroupDegree *)__pyx_v_self->__pyx_base._this)->scoreOfGroup(__pyx_v_group);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1178, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_uint64_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":1165
 * 		return (<_GroupDegree*>(self._this)).getScore()
 * 
 * 	def scoreOfGroup(self, vector[node] group):             # <<<<<<<<<<<<<<
 * 			"""
 * 			Returns the score of the given group.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.centrality.GroupDegree.scoreOfGroup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_11GroupDegree_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_11GroupDegree_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_11GroupDegree_8__reduce_cython__(((struct __pyx_obj_9networkit_10centrality_GroupDegree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_11GroupDegree_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_GroupDegree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__39, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.GroupDegree.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_11GroupDegree_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_11GroupDegree_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_11GroupDegree_10__setstate_cython__(((struct __pyx_obj_9networkit_10centrality_GroupDegree *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_11GroupDegree_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_GroupDegree *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__40, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.GroupDegree.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1215
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self, Graph G, k = 1, epsilon = 0.1, alpha = -1.0, bs = BoundStrategy.Geometric,             # <<<<<<<<<<<<<<
 * 			gs = GreedyStrategy.Lazy, spectralDelta = 0.5):
 * 		"""
 */

/* Python wrapper */
static int __pyx_pw_9networkit_10centrality_7GedWalk_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_10centrality_7GedWalk_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  PyObject *__pyx_v_k = 0;
  PyObject *__pyx_v_epsilon = 0;
  PyObject *__pyx_v_alpha = 0;
  PyObject *__pyx_v_bs = 0;
  PyObject *__pyx_v_gs = 0;
  PyObject *__pyx_v_spectralDelta = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_k,&__pyx_n_s_epsilon,&__pyx_n_s_alpha,&__pyx_n_s_bs,&__pyx_n_s_gs,&__pyx_n_s_spectralDelta,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    values[1] = ((PyObject *)__pyx_int_1);
    values[2] = ((PyObject *)__pyx_float_0_1);
    values[3] = ((PyObject *)__pyx_float_neg_1_0);
    values[4] = __pyx_k__41;
    values[5] = __pyx_k__42;
    values[6] = ((PyObject *)__pyx_float_0_5);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_epsilon);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bs);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gs);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_spectralDelta);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1215, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_k = values[1];
    __pyx_v_epsilon = values[2];
    __pyx_v_alpha = values[3];
    __pyx_v_bs = values[4];
    __pyx_v_gs = values[5];
    __pyx_v_spectralDelta = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1215, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.GedWalk.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 1215, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_10centrality_7GedWalk___cinit__(((struct __pyx_obj_9networkit_10centrality_GedWalk *)__pyx_v_self), __pyx_v_G, __pyx_v_k, __pyx_v_epsilon, __pyx_v_alpha, __pyx_v_bs, __pyx_v_gs, __pyx_v_spectralDelta);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_10centrality_7GedWalk___cinit__(struct __pyx_obj_9networkit_10centrality_GedWalk *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_k, PyObject *__pyx_v_epsilon, PyObject *__pyx_v_alpha, PyObject *__pyx_v_bs, PyObject *__pyx_v_gs, PyObject *__pyx_v_spectralDelta) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10centrality_count __pyx_t_1;
  double __pyx_t_2;
  double __pyx_t_3;
  enum NetworKit::GedWalk::BoundStrategy __pyx_t_4;
  enum NetworKit::GedWalk::GreedyStrategy __pyx_t_5;
  double __pyx_t_6;
  NetworKit::GedWalk *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/centrality.pyx":1241
 * 			Delta to be used for the spectral bound.
 * 		"""
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _GedWalk(G._this, k, epsilon, alpha, bs, gs, spectralDelta)
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->_G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_G));
  __pyx_v_self->_G = __pyx_v_G;

  /* "networkit/centrality.pyx":1242
 * 		"""
 * 		self._G = G
 * 		self._this = new _GedWalk(G._this, k, epsilon, alpha, bs, gs, spectralDelta)             # <<<<<<<<<<<<<<
 * 
 * 	def __dealloc__(self):
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_k); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1242, __pyx_L1_error)
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_epsilon); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1242, __pyx_L1_error)
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_alpha); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1242, __pyx_L1_error)
  __pyx_t_4 = ((enum NetworKit::GedWalk::BoundStrategy)__Pyx_PyInt_As_enum__NetworKit_3a__3a_GedWalk_3a__3a_BoundStrategy(__pyx_v_bs)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1242, __pyx_L1_error)
  __pyx_t_5 = ((enum NetworKit::GedWalk::GreedyStrategy)__Pyx_PyInt_As_enum__NetworKit_3a__3a_GedWalk_3a__3a_GreedyStrategy(__pyx_v_gs)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1242, __pyx_L1_error)
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_spectralDelta); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1242, __pyx_L1_error)
  try {
    __pyx_t_7 = new NetworKit::GedWalk(__pyx_v_G->_this, __pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_t_4, __pyx_t_5, __pyx_t_6);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1242, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base._this = __pyx_t_7;

  /* "networkit/centrality.pyx":1215
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self, Graph G, k = 1, epsilon = 0.1, alpha = -1.0, bs = BoundStrategy.Geometric,             # <<<<<<<<<<<<<<
 * 			gs = GreedyStrategy.Lazy, spectralDelta = 0.5):
 * 		"""
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.centrality.GedWalk.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1244
 * 		self._this = new _GedWalk(G._this, k, epsilon, alpha, bs, gs, spectralDelta)
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		if self._this is not NULL:
 * 			del self._this
 */

/* Python wrapper */
static void __pyx_pw_9networkit_10centrality_7GedWalk_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_9networkit_10centrality_7GedWalk_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_9networkit_10centrality_7GedWalk_2__dealloc__(((struct __pyx_obj_9networkit_10centrality_GedWalk *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_9networkit_10centrality_7GedWalk_2__dealloc__(struct __pyx_obj_9networkit_10centrality_GedWalk *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "networkit/centrality.pyx":1245
 * 
 * 	def __dealloc__(self):
 * 		if self._this is not NULL:             # <<<<<<<<<<<<<<
 * 			del self._this
 * 			self._this = NULL
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base._this != NULL) != 0);
  if (__pyx_t_1) {

    /* "networkit/centrality.pyx":1246
 * 	def __dealloc__(self):
 * 		if self._this is not NULL:
 * 			del self._this             # <<<<<<<<<<<<<<
 * 			self._this = NULL
 * 
 */
    delete __pyx_v_self->__pyx_base._this;

    /* "networkit/centrality.pyx":1247
 * 		if self._this is not NULL:
 * 			del self._this
 * 			self._this = NULL             # <<<<<<<<<<<<<<
 * 
 * 	def groupMaxGedWalk(self):
 */
    __pyx_v_self->__pyx_base._this = NULL;

    /* "networkit/centrality.pyx":1245
 * 
 * 	def __dealloc__(self):
 * 		if self._this is not NULL:             # <<<<<<<<<<<<<<
 * 			del self._this
 * 			self._this = NULL
 */
  }

  /* "networkit/centrality.pyx":1244
 * 		self._this = new _GedWalk(G._this, k, epsilon, alpha, bs, gs, spectralDelta)
 * 
 * 	def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 		if self._this is not NULL:
 * 			del self._this
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "networkit/centrality.pyx":1249
 * 			self._this = NULL
 * 
 * 	def groupMaxGedWalk(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns the computed group.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_7GedWalk_5groupMaxGedWalk(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9networkit_10centrality_7GedWalk_4groupMaxGedWalk[] = "\n\t\tReturns the computed group.\n\n\t\tReturns:\n\t\t--------\n\t\tlist\n\t\t\tThe computed group.\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_7GedWalk_5groupMaxGedWalk(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("groupMaxGedWalk (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_7GedWalk_4groupMaxGedWalk(((struct __pyx_obj_9networkit_10centrality_GedWalk *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_7GedWalk_4groupMaxGedWalk(struct __pyx_obj_9networkit_10centrality_GedWalk *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<__pyx_t_9networkit_10centrality_node>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("groupMaxGedWalk", 0);

  /* "networkit/centrality.pyx":1258
 * 			The computed group.
 * 		"""
 * 		return (<_GedWalk*>(self._this)).groupMaxGedWalk()             # <<<<<<<<<<<<<<
 * 
 * 	def getApproximateScore(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::GedWalk *)__pyx_v_self->__pyx_base._this)->groupMaxGedWalk();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1258, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py___pyx_t_9networkit_10centrality_node(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":1249
 * 			self._this = NULL
 * 
 * 	def groupMaxGedWalk(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns the computed group.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.centrality.GedWalk.groupMaxGedWalk", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1260
 * 		return (<_GedWalk*>(self._this)).groupMaxGedWalk()
 * 
 * 	def getApproximateScore(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns the GedWalk score of the computed group.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_7GedWalk_7getApproximateScore(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9networkit_10centrality_7GedWalk_6getApproximateScore[] = "\n\t\tReturns the GedWalk score of the computed group.\n\n\t\tReturns:\n\t\t--------\n\t\tdouble\n\t\t\tThe GedWalk score of the computed group.\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_7GedWalk_7getApproximateScore(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getApproximateScore (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_7GedWalk_6getApproximateScore(((struct __pyx_obj_9networkit_10centrality_GedWalk *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_7GedWalk_6getApproximateScore(struct __pyx_obj_9networkit_10centrality_GedWalk *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getApproximateScore", 0);

  /* "networkit/centrality.pyx":1269
 * 			The GedWalk score of the computed group.
 * 		"""
 * 		return (<_GedWalk*>(self._this)).getApproximateScore()             # <<<<<<<<<<<<<<
 * 
 * 	def scoreOfGroup(self, group, epsilon = 0.1):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::GedWalk *)__pyx_v_self->__pyx_base._this)->getApproximateScore();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1269, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":1260
 * 		return (<_GedWalk*>(self._this)).groupMaxGedWalk()
 * 
 * 	def getApproximateScore(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns the GedWalk score of the computed group.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.centrality.GedWalk.getApproximateScore", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1271
 * 		return (<_GedWalk*>(self._this)).getApproximateScore()
 * 
 * 	def scoreOfGroup(self, group, epsilon = 0.1):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns the GedWalk score of the input group.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_7GedWalk_9scoreOfGroup(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_10centrality_7GedWalk_8scoreOfGroup[] = "\n\t\tReturns the GedWalk score of the input group.\n\n\t\tParameters:\n\t\t-----------\n\t\tgroup : list\n\t\t\tThe input group.\n\t\tepsilon : double\n\t\t\tThe precision of the score to be computed.\n\n\t\tReturns:\n\t\t--------\n\t\tdouble\n\t\t\tAn epsilon-approximation of the GedWalk score of the input group.\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_7GedWalk_9scoreOfGroup(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_group = 0;
  PyObject *__pyx_v_epsilon = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scoreOfGroup (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_group,&__pyx_n_s_epsilon,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)__pyx_float_0_1);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_group)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_epsilon);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "scoreOfGroup") < 0)) __PYX_ERR(0, 1271, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_group = values[0];
    __pyx_v_epsilon = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("scoreOfGroup", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1271, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.GedWalk.scoreOfGroup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_10centrality_7GedWalk_8scoreOfGroup(((struct __pyx_obj_9networkit_10centrality_GedWalk *)__pyx_v_self), __pyx_v_group, __pyx_v_epsilon);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_7GedWalk_8scoreOfGroup(struct __pyx_obj_9networkit_10centrality_GedWalk *__pyx_v_self, PyObject *__pyx_v_group, PyObject *__pyx_v_epsilon) {
  std::vector<__pyx_t_9networkit_10centrality_node>  __pyx_v_groupVec;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::vector<__pyx_t_9networkit_10centrality_node>  __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  double __pyx_t_10;
  double __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("scoreOfGroup", 0);

  /* "networkit/centrality.pyx":1289
 * 		cdef vector[node] groupVec
 * 
 * 		try:             # <<<<<<<<<<<<<<
 * 			groupVec = <vector[node]?>group
 * 		except TypeError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "networkit/centrality.pyx":1290
 * 
 * 		try:
 * 			groupVec = <vector[node]?>group             # <<<<<<<<<<<<<<
 * 		except TypeError:
 * 			raise RuntimeError("Error, group must be a list of nodes.")
 */
      __pyx_t_4 = __pyx_convert_vector_from_py___pyx_t_9networkit_10centrality_node(__pyx_v_group); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1290, __pyx_L3_error)
      __pyx_v_groupVec = ((std::vector<__pyx_t_9networkit_10centrality_node> )__pyx_t_4);

      /* "networkit/centrality.pyx":1289
 * 		cdef vector[node] groupVec
 * 
 * 		try:             # <<<<<<<<<<<<<<
 * 			groupVec = <vector[node]?>group
 * 		except TypeError:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "networkit/centrality.pyx":1291
 * 		try:
 * 			groupVec = <vector[node]?>group
 * 		except TypeError:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Error, group must be a list of nodes.")
 * 		return (<_GedWalk*>(self._this)).scoreOfGroup[vector[node].iterator](groupVec.begin(), groupVec.end(), epsilon)
 */
    __pyx_t_5 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
    if (__pyx_t_5) {
      __Pyx_AddTraceback("networkit.centrality.GedWalk.scoreOfGroup", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(0, 1291, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_8);

      /* "networkit/centrality.pyx":1292
 * 			groupVec = <vector[node]?>group
 * 		except TypeError:
 * 			raise RuntimeError("Error, group must be a list of nodes.")             # <<<<<<<<<<<<<<
 * 		return (<_GedWalk*>(self._this)).scoreOfGroup[vector[node].iterator](groupVec.begin(), groupVec.end(), epsilon)
 * 
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__43, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1292, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(0, 1292, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "networkit/centrality.pyx":1289
 * 		cdef vector[node] groupVec
 * 
 * 		try:             # <<<<<<<<<<<<<<
 * 			groupVec = <vector[node]?>group
 * 		except TypeError:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "networkit/centrality.pyx":1293
 * 		except TypeError:
 * 			raise RuntimeError("Error, group must be a list of nodes.")
 * 		return (<_GedWalk*>(self._this)).scoreOfGroup[vector[node].iterator](groupVec.begin(), groupVec.end(), epsilon)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_v_epsilon); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1293, __pyx_L1_error)
  try {
    __pyx_t_11 = ((NetworKit::GedWalk *)__pyx_v_self->__pyx_base._this)->scoreOfGroup<std::vector<__pyx_t_9networkit_10centrality_node> ::iterator>(__pyx_v_groupVec.begin(), __pyx_v_groupVec.end(), __pyx_t_10);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1293, __pyx_L1_error)
  }
  __pyx_t_8 = PyFloat_FromDouble(__pyx_t_11); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_r = __pyx_t_8;
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":1271
 * 		return (<_GedWalk*>(self._this)).getApproximateScore()
 * 
 * 	def scoreOfGroup(self, group, epsilon = 0.1):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns the GedWalk score of the input group.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("networkit.centrality.GedWalk.scoreOfGroup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_7GedWalk_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_7GedWalk_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_7GedWalk_10__reduce_cython__(((struct __pyx_obj_9networkit_10centrality_GedWalk *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_7GedWalk_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_GedWalk *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__44, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.GedWalk.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_7GedWalk_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_7GedWalk_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_7GedWalk_12__setstate_cython__(((struct __pyx_obj_9networkit_10centrality_GedWalk *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_7GedWalk_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_GedWalk *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.GedWalk.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1321
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self, Graph G, groupSize, epsilon):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _ApproxGroupBetweenness(G._this, groupSize, epsilon)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_10centrality_22ApproxGroupBetweenness_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_10centrality_22ApproxGroupBetweenness_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  PyObject *__pyx_v_groupSize = 0;
  PyObject *__pyx_v_epsilon = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_groupSize,&__pyx_n_s_epsilon,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_groupSize)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 1); __PYX_ERR(0, 1321, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_epsilon)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 2); __PYX_ERR(0, 1321, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1321, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_groupSize = values[1];
    __pyx_v_epsilon = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1321, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.ApproxGroupBetweenness.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 1321, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_10centrality_22ApproxGroupBetweenness___cinit__(((struct __pyx_obj_9networkit_10centrality_ApproxGroupBetweenness *)__pyx_v_self), __pyx_v_G, __pyx_v_groupSize, __pyx_v_epsilon);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_10centrality_22ApproxGroupBetweenness___cinit__(struct __pyx_obj_9networkit_10centrality_ApproxGroupBetweenness *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_groupSize, PyObject *__pyx_v_epsilon) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10centrality_count __pyx_t_1;
  double __pyx_t_2;
  NetworKit::ApproxGroupBetweenness *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/centrality.pyx":1322
 * 
 * 	def __cinit__(self, Graph G, groupSize, epsilon):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _ApproxGroupBetweenness(G._this, groupSize, epsilon)
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->_G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_G));
  __pyx_v_self->_G = __pyx_v_G;

  /* "networkit/centrality.pyx":1323
 * 	def __cinit__(self, Graph G, groupSize, epsilon):
 * 		self._G = G
 * 		self._this = new _ApproxGroupBetweenness(G._this, groupSize, epsilon)             # <<<<<<<<<<<<<<
 * 
 * 	def groupMaxBetweenness(self):
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_groupSize); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1323, __pyx_L1_error)
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_epsilon); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1323, __pyx_L1_error)
  try {
    __pyx_t_3 = new NetworKit::ApproxGroupBetweenness(__pyx_v_G->_this, __pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1323, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base._this = __pyx_t_3;

  /* "networkit/centrality.pyx":1321
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self, Graph G, groupSize, epsilon):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _ApproxGroupBetweenness(G._this, groupSize, epsilon)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.centrality.ApproxGroupBetweenness.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1325
 * 		self._this = new _ApproxGroupBetweenness(G._this, groupSize, epsilon)
 * 
 * 	def groupMaxBetweenness(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Get a vector of nodes containing the set of nodes with apporoximated
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_22ApproxGroupBetweenness_3groupMaxBetweenness(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9networkit_10centrality_22ApproxGroupBetweenness_2groupMaxBetweenness[] = "\n\t\tGet a vector of nodes containing the set of nodes with apporoximated\n\t\tmaximum group betweenness.\n\n\t\tReturns:\n\t\t--------\n\t\tvector\n\t\t\tThe group of nodes with highest approximated group betweenness.\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_22ApproxGroupBetweenness_3groupMaxBetweenness(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("groupMaxBetweenness (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_22ApproxGroupBetweenness_2groupMaxBetweenness(((struct __pyx_obj_9networkit_10centrality_ApproxGroupBetweenness *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_22ApproxGroupBetweenness_2groupMaxBetweenness(struct __pyx_obj_9networkit_10centrality_ApproxGroupBetweenness *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<__pyx_t_9networkit_10centrality_node>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("groupMaxBetweenness", 0);

  /* "networkit/centrality.pyx":1335
 * 			The group of nodes with highest approximated group betweenness.
 * 		"""
 * 		return (<_ApproxGroupBetweenness*>(self._this)).groupMaxBetweenness()             # <<<<<<<<<<<<<<
 * 
 * 	def scoreOfGroup(self, vector[node] group):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::ApproxGroupBetweenness *)__pyx_v_self->__pyx_base._this)->groupMaxBetweenness();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1335, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py___pyx_t_9networkit_10centrality_node(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":1325
 * 		self._this = new _ApproxGroupBetweenness(G._this, groupSize, epsilon)
 * 
 * 	def groupMaxBetweenness(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Get a vector of nodes containing the set of nodes with apporoximated
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.centrality.ApproxGroupBetweenness.groupMaxBetweenness", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1337
 * 		return (<_ApproxGroupBetweenness*>(self._this)).groupMaxBetweenness()
 * 
 * 	def scoreOfGroup(self, vector[node] group):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns the score of the given group.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_22ApproxGroupBetweenness_5scoreOfGroup(PyObject *__pyx_v_self, PyObject *__pyx_arg_group); /*proto*/
static char __pyx_doc_9networkit_10centrality_22ApproxGroupBetweenness_4scoreOfGroup[] = "\n\t\tReturns the score of the given group.\n\n\t\tParameters:\n\t\t-----------\n\t\tgroup : list\n\t\t\tSet of nodes.\n\n\t\tReturns:\n\t\t--------\n\t\tcount\n\t\t\tThe score of the given group.\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_22ApproxGroupBetweenness_5scoreOfGroup(PyObject *__pyx_v_self, PyObject *__pyx_arg_group) {
  std::vector<__pyx_t_9networkit_10centrality_node>  __pyx_v_group;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scoreOfGroup (wrapper)", 0);
  assert(__pyx_arg_group); {
    __pyx_v_group = __pyx_convert_vector_from_py___pyx_t_9networkit_10centrality_node(__pyx_arg_group); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1337, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.ApproxGroupBetweenness.scoreOfGroup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_10centrality_22ApproxGroupBetweenness_4scoreOfGroup(((struct __pyx_obj_9networkit_10centrality_ApproxGroupBetweenness *)__pyx_v_self), ((std::vector<__pyx_t_9networkit_10centrality_node> )__pyx_v_group));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_22ApproxGroupBetweenness_4scoreOfGroup(struct __pyx_obj_9networkit_10centrality_ApproxGroupBetweenness *__pyx_v_self, std::vector<__pyx_t_9networkit_10centrality_node>  __pyx_v_group) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10centrality_count __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("scoreOfGroup", 0);

  /* "networkit/centrality.pyx":1351
 * 			The score of the given group.
 * 		"""
 * 		return (<_ApproxGroupBetweenness*>(self._this)).scoreOfGroup(group)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/centrality/GroupCloseness.hpp>":
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::ApproxGroupBetweenness *)__pyx_v_self->__pyx_base._this)->scoreOfGroup(__pyx_v_group);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1351, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_uint64_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":1337
 * 		return (<_ApproxGroupBetweenness*>(self._this)).groupMaxBetweenness()
 * 
 * 	def scoreOfGroup(self, vector[node] group):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns the score of the given group.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.centrality.ApproxGroupBetweenness.scoreOfGroup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_22ApproxGroupBetweenness_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_22ApproxGroupBetweenness_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_22ApproxGroupBetweenness_6__reduce_cython__(((struct __pyx_obj_9networkit_10centrality_ApproxGroupBetweenness *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_22ApproxGroupBetweenness_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_ApproxGroupBetweenness *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__46, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.ApproxGroupBetweenness.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_22ApproxGroupBetweenness_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_22ApproxGroupBetweenness_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_22ApproxGroupBetweenness_8__setstate_cython__(((struct __pyx_obj_9networkit_10centrality_ApproxGroupBetweenness *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_22ApproxGroupBetweenness_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_ApproxGroupBetweenness *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.ApproxGroupBetweenness.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1376
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self,  Graph G, k=1, H=0):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _GroupCloseness(G._this, k, H)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_10centrality_14GroupCloseness_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_10centrality_14GroupCloseness_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  PyObject *__pyx_v_k = 0;
  PyObject *__pyx_v_H = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_k,&__pyx_n_s_H,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)__pyx_int_1);
    values[2] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_H);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1376, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_k = values[1];
    __pyx_v_H = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1376, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.GroupCloseness.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 1376, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_10centrality_14GroupCloseness___cinit__(((struct __pyx_obj_9networkit_10centrality_GroupCloseness *)__pyx_v_self), __pyx_v_G, __pyx_v_k, __pyx_v_H);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_10centrality_14GroupCloseness___cinit__(struct __pyx_obj_9networkit_10centrality_GroupCloseness *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_k, PyObject *__pyx_v_H) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10centrality_count __pyx_t_1;
  __pyx_t_9networkit_10centrality_count __pyx_t_2;
  NetworKit::GroupCloseness *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/centrality.pyx":1377
 * 
 * 	def __cinit__(self,  Graph G, k=1, H=0):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _GroupCloseness(G._this, k, H)
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->_G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_G));
  __pyx_v_self->_G = __pyx_v_G;

  /* "networkit/centrality.pyx":1378
 * 	def __cinit__(self,  Graph G, k=1, H=0):
 * 		self._G = G
 * 		self._this = new _GroupCloseness(G._this, k, H)             # <<<<<<<<<<<<<<
 * 
 * 	""" Returns group with highest closeness.
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_k); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1378, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_uint64_t(__pyx_v_H); if (unlikely((__pyx_t_2 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1378, __pyx_L1_error)
  try {
    __pyx_t_3 = new NetworKit::GroupCloseness(__pyx_v_G->_this, __pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1378, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base._this = __pyx_t_3;

  /* "networkit/centrality.pyx":1376
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self,  Graph G, k=1, H=0):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _GroupCloseness(G._this, k, H)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.centrality.GroupCloseness.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1386
 * 		The group of k nodes with highest closeness.
 * 	"""
 * 	def groupMaxCloseness(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns the group with maximum closeness centrality.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_14GroupCloseness_3groupMaxCloseness(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9networkit_10centrality_14GroupCloseness_2groupMaxCloseness[] = "\n\t\tReturns the group with maximum closeness centrality.\n\t\tReturns:\n\t\t--------\n\t\tvector\n\t\t\tThe group of k nodes with maximum closeness centrality.\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_14GroupCloseness_3groupMaxCloseness(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("groupMaxCloseness (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_14GroupCloseness_2groupMaxCloseness(((struct __pyx_obj_9networkit_10centrality_GroupCloseness *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_14GroupCloseness_2groupMaxCloseness(struct __pyx_obj_9networkit_10centrality_GroupCloseness *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<__pyx_t_9networkit_10centrality_node>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("groupMaxCloseness", 0);

  /* "networkit/centrality.pyx":1394
 * 			The group of k nodes with maximum closeness centrality.
 * 		"""
 * 		return (<_GroupCloseness*>(self._this)).groupMaxCloseness()             # <<<<<<<<<<<<<<
 * 
 * 	def computeFarness(self, S, H=0):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::GroupCloseness *)__pyx_v_self->__pyx_base._this)->groupMaxCloseness();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1394, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py___pyx_t_9networkit_10centrality_node(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":1386
 * 		The group of k nodes with highest closeness.
 * 	"""
 * 	def groupMaxCloseness(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns the group with maximum closeness centrality.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.centrality.GroupCloseness.groupMaxCloseness", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1396
 * 		return (<_GroupCloseness*>(self._this)).groupMaxCloseness()
 * 
 * 	def computeFarness(self, S, H=0):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Computes farness (i.e., inverse of the closeness) for a given group (stopping after H iterations if H > 0).
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_14GroupCloseness_5computeFarness(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_10centrality_14GroupCloseness_4computeFarness[] = " \n\t\tComputes farness (i.e., inverse of the closeness) for a given group (stopping after H iterations if H > 0).\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_14GroupCloseness_5computeFarness(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_S = 0;
  PyObject *__pyx_v_H = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("computeFarness (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_S,&__pyx_n_s_H,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_S)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_H);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "computeFarness") < 0)) __PYX_ERR(0, 1396, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_S = values[0];
    __pyx_v_H = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("computeFarness", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1396, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.GroupCloseness.computeFarness", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_10centrality_14GroupCloseness_4computeFarness(((struct __pyx_obj_9networkit_10centrality_GroupCloseness *)__pyx_v_self), __pyx_v_S, __pyx_v_H);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_14GroupCloseness_4computeFarness(struct __pyx_obj_9networkit_10centrality_GroupCloseness *__pyx_v_self, PyObject *__pyx_v_S, PyObject *__pyx_v_H) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<__pyx_t_9networkit_10centrality_node>  __pyx_t_1;
  __pyx_t_9networkit_10centrality_count __pyx_t_2;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("computeFarness", 0);

  /* "networkit/centrality.pyx":1400
 * 		Computes farness (i.e., inverse of the closeness) for a given group (stopping after H iterations if H > 0).
 * 		"""
 * 		return (<_GroupCloseness*>(self._this)).computeFarness(S, H)             # <<<<<<<<<<<<<<
 * 
 * 	def scoreOfGroup(self, group):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_from_py___pyx_t_9networkit_10centrality_node(__pyx_v_S); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1400, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_uint64_t(__pyx_v_H); if (unlikely((__pyx_t_2 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1400, __pyx_L1_error)
  try {
    __pyx_t_3 = ((NetworKit::GroupCloseness *)__pyx_v_self->__pyx_base._this)->computeFarness(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1400, __pyx_L1_error)
  }
  __pyx_t_4 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":1396
 * 		return (<_GroupCloseness*>(self._this)).groupMaxCloseness()
 * 
 * 	def computeFarness(self, S, H=0):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Computes farness (i.e., inverse of the closeness) for a given group (stopping after H iterations if H > 0).
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("networkit.centrality.GroupCloseness.computeFarness", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1402
 * 		return (<_GroupCloseness*>(self._this)).computeFarness(S, H)
 * 
 * 	def scoreOfGroup(self, group):             # <<<<<<<<<<<<<<
 * 		"""
 * 			Computes the group closeness score of the given group.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_14GroupCloseness_7scoreOfGroup(PyObject *__pyx_v_self, PyObject *__pyx_v_group); /*proto*/
static char __pyx_doc_9networkit_10centrality_14GroupCloseness_6scoreOfGroup[] = "\n\t\t\tComputes the group closeness score of the given group.\n\n\t\tParameters:\n\t\t-----------\n\t\tgroup: vector of nodes.\n\n\t\tReturns:\n\t\t--------\n\t\tdouble\n\t\t\tThe group closeness score of the given group.\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_14GroupCloseness_7scoreOfGroup(PyObject *__pyx_v_self, PyObject *__pyx_v_group) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scoreOfGroup (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_14GroupCloseness_6scoreOfGroup(((struct __pyx_obj_9networkit_10centrality_GroupCloseness *)__pyx_v_self), ((PyObject *)__pyx_v_group));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_14GroupCloseness_6scoreOfGroup(struct __pyx_obj_9networkit_10centrality_GroupCloseness *__pyx_v_self, PyObject *__pyx_v_group) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<__pyx_t_9networkit_10centrality_node>  __pyx_t_1;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("scoreOfGroup", 0);

  /* "networkit/centrality.pyx":1415
 * 			The group closeness score of the given group.
 * 		"""
 * 		return (<_GroupCloseness*>(self._this)).scoreOfGroup(group)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/centrality/KPathCentrality.hpp>":
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_from_py___pyx_t_9networkit_10centrality_node(__pyx_v_group); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1415, __pyx_L1_error)
  try {
    __pyx_t_2 = ((NetworKit::GroupCloseness *)__pyx_v_self->__pyx_base._this)->scoreOfGroup(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1415, __pyx_L1_error)
  }
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":1402
 * 		return (<_GroupCloseness*>(self._this)).computeFarness(S, H)
 * 
 * 	def scoreOfGroup(self, group):             # <<<<<<<<<<<<<<
 * 		"""
 * 			Computes the group closeness score of the given group.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.centrality.GroupCloseness.scoreOfGroup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_14GroupCloseness_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_14GroupCloseness_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_14GroupCloseness_8__reduce_cython__(((struct __pyx_obj_9networkit_10centrality_GroupCloseness *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_14GroupCloseness_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_GroupCloseness *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__48, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.GroupCloseness.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_14GroupCloseness_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_14GroupCloseness_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_14GroupCloseness_10__setstate_cython__(((struct __pyx_obj_9networkit_10centrality_GroupCloseness *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_14GroupCloseness_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_GroupCloseness *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__49, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.GroupCloseness.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1439
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, alpha=0.2, k=0):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _KPathCentrality(G._this, alpha, k)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_10centrality_15KPathCentrality_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_10centrality_15KPathCentrality_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  PyObject *__pyx_v_alpha = 0;
  PyObject *__pyx_v_k = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_alpha,&__pyx_n_s_k,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)__pyx_float_0_2);
    values[2] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1439, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_alpha = values[1];
    __pyx_v_k = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1439, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.KPathCentrality.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 1439, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_10centrality_15KPathCentrality___cinit__(((struct __pyx_obj_9networkit_10centrality_KPathCentrality *)__pyx_v_self), __pyx_v_G, __pyx_v_alpha, __pyx_v_k);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_10centrality_15KPathCentrality___cinit__(struct __pyx_obj_9networkit_10centrality_KPathCentrality *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_alpha, PyObject *__pyx_v_k) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __pyx_t_9networkit_10centrality_count __pyx_t_2;
  NetworKit::KPathCentrality *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/centrality.pyx":1440
 * 
 * 	def __cinit__(self, Graph G, alpha=0.2, k=0):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _KPathCentrality(G._this, alpha, k)
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base._G));
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/centrality.pyx":1441
 * 	def __cinit__(self, Graph G, alpha=0.2, k=0):
 * 		self._G = G
 * 		self._this = new _KPathCentrality(G._this, alpha, k)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/centrality/KatzCentrality.hpp>" namespace "NetworKit":
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_alpha); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1441, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_uint64_t(__pyx_v_k); if (unlikely((__pyx_t_2 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1441, __pyx_L1_error)
  try {
    __pyx_t_3 = new NetworKit::KPathCentrality(__pyx_v_G->_this, __pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1441, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_3;

  /* "networkit/centrality.pyx":1439
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, alpha=0.2, k=0):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _KPathCentrality(G._this, alpha, k)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.centrality.KPathCentrality.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_15KPathCentrality_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_15KPathCentrality_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_15KPathCentrality_2__reduce_cython__(((struct __pyx_obj_9networkit_10centrality_KPathCentrality *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_15KPathCentrality_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_KPathCentrality *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__50, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.KPathCentrality.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_15KPathCentrality_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_15KPathCentrality_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_15KPathCentrality_4__setstate_cython__(((struct __pyx_obj_9networkit_10centrality_KPathCentrality *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_15KPathCentrality_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_KPathCentrality *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__51, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.KPathCentrality.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1481
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, alpha=0, beta=0.1, tol=1e-8):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _KatzCentrality(G._this, alpha, beta, tol)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_10centrality_14KatzCentrality_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_10centrality_14KatzCentrality_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  PyObject *__pyx_v_alpha = 0;
  PyObject *__pyx_v_beta = 0;
  PyObject *__pyx_v_tol = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_alpha,&__pyx_n_s_beta,&__pyx_n_s_tol,0};
    PyObject* values[4] = {0,0,0,0};
    values[1] = ((PyObject *)__pyx_int_0);
    values[2] = ((PyObject *)__pyx_float_0_1);
    values[3] = ((PyObject *)__pyx_float_1eneg_8);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_beta);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tol);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1481, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_alpha = values[1];
    __pyx_v_beta = values[2];
    __pyx_v_tol = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1481, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.KatzCentrality.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 1481, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_10centrality_14KatzCentrality___cinit__(((struct __pyx_obj_9networkit_10centrality_KatzCentrality *)__pyx_v_self), __pyx_v_G, __pyx_v_alpha, __pyx_v_beta, __pyx_v_tol);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_10centrality_14KatzCentrality___cinit__(struct __pyx_obj_9networkit_10centrality_KatzCentrality *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_alpha, PyObject *__pyx_v_beta, PyObject *__pyx_v_tol) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  double __pyx_t_3;
  NetworKit::KatzCentrality *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/centrality.pyx":1482
 * 
 * 	def __cinit__(self, Graph G, alpha=0, beta=0.1, tol=1e-8):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _KatzCentrality(G._this, alpha, beta, tol)
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base._G));
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/centrality.pyx":1483
 * 	def __cinit__(self, Graph G, alpha=0, beta=0.1, tol=1e-8):
 * 		self._G = G
 * 		self._this = new _KatzCentrality(G._this, alpha, beta, tol)             # <<<<<<<<<<<<<<
 * 
 * 	property edgeDirection:
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_alpha); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1483, __pyx_L1_error)
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_beta); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1483, __pyx_L1_error)
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_tol); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1483, __pyx_L1_error)
  try {
    __pyx_t_4 = new NetworKit::KatzCentrality(__pyx_v_G->_this, __pyx_t_1, __pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1483, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_4;

  /* "networkit/centrality.pyx":1481
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, alpha=0, beta=0.1, tol=1e-8):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _KatzCentrality(G._this, alpha, beta, tol)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.centrality.KatzCentrality.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1486
 * 
 * 	property edgeDirection:
 * 		def __get__(self):             # <<<<<<<<<<<<<<
 * 			""" Get the used edge direction. """
 * 			return (<_KatzCentrality*>(self._this)).edgeDirection
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_14KatzCentrality_13edgeDirection_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_14KatzCentrality_13edgeDirection_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_14KatzCentrality_13edgeDirection___get__(((struct __pyx_obj_9networkit_10centrality_KatzCentrality *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_14KatzCentrality_13edgeDirection___get__(struct __pyx_obj_9networkit_10centrality_KatzCentrality *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "networkit/centrality.pyx":1488
 * 		def __get__(self):
 * 			""" Get the used edge direction. """
 * 			return (<_KatzCentrality*>(self._this)).edgeDirection             # <<<<<<<<<<<<<<
 * 		def __set__(self, _EdgeDirection edgeDirection):
 * 			""" Use a different edge direction. """
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_enum__NetworKit_3a__3a_EdgeDirection(((NetworKit::KatzCentrality *)__pyx_v_self->__pyx_base.__pyx_base._this)->edgeDirection); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":1486
 * 
 * 	property edgeDirection:
 * 		def __get__(self):             # <<<<<<<<<<<<<<
 * 			""" Get the used edge direction. """
 * 			return (<_KatzCentrality*>(self._this)).edgeDirection
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.KatzCentrality.edgeDirection.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1489
 * 			""" Get the used edge direction. """
 * 			return (<_KatzCentrality*>(self._this)).edgeDirection
 * 		def __set__(self, _EdgeDirection edgeDirection):             # <<<<<<<<<<<<<<
 * 			""" Use a different edge direction. """
 * 			(<_KatzCentrality*>(self._this)).edgeDirection = edgeDirection
 */

/* Python wrapper */
static int __pyx_pw_9networkit_10centrality_14KatzCentrality_13edgeDirection_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_edgeDirection); /*proto*/
static int __pyx_pw_9networkit_10centrality_14KatzCentrality_13edgeDirection_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_edgeDirection) {
  enum NetworKit::EdgeDirection __pyx_v_edgeDirection;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_edgeDirection); {
    __pyx_v_edgeDirection = ((enum NetworKit::EdgeDirection)__Pyx_PyInt_As_enum__NetworKit_3a__3a_EdgeDirection(__pyx_arg_edgeDirection)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1489, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.KatzCentrality.edgeDirection.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_10centrality_14KatzCentrality_13edgeDirection_2__set__(((struct __pyx_obj_9networkit_10centrality_KatzCentrality *)__pyx_v_self), ((enum NetworKit::EdgeDirection)__pyx_v_edgeDirection));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_10centrality_14KatzCentrality_13edgeDirection_2__set__(struct __pyx_obj_9networkit_10centrality_KatzCentrality *__pyx_v_self, enum NetworKit::EdgeDirection __pyx_v_edgeDirection) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "networkit/centrality.pyx":1491
 * 		def __set__(self, _EdgeDirection edgeDirection):
 * 			""" Use a different edge direction. """
 * 			(<_KatzCentrality*>(self._this)).edgeDirection = edgeDirection             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/centrality/DynKatzCentrality.hpp>":
 */
  ((NetworKit::KatzCentrality *)__pyx_v_self->__pyx_base.__pyx_base._this)->edgeDirection = __pyx_v_edgeDirection;

  /* "networkit/centrality.pyx":1489
 * 			""" Get the used edge direction. """
 * 			return (<_KatzCentrality*>(self._this)).edgeDirection
 * 		def __set__(self, _EdgeDirection edgeDirection):             # <<<<<<<<<<<<<<
 * 			""" Use a different edge direction. """
 * 			(<_KatzCentrality*>(self._this)).edgeDirection = edgeDirection
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_14KatzCentrality_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_14KatzCentrality_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_14KatzCentrality_2__reduce_cython__(((struct __pyx_obj_9networkit_10centrality_KatzCentrality *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_14KatzCentrality_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_KatzCentrality *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__52, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.KatzCentrality.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_14KatzCentrality_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_14KatzCentrality_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_14KatzCentrality_4__setstate_cython__(((struct __pyx_obj_9networkit_10centrality_KatzCentrality *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_14KatzCentrality_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_KatzCentrality *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__53, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.KatzCentrality.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1509
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, k, groupOnly=False, tolerance=1e-9):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _DynKatzCentrality(G._this, k, groupOnly, tolerance)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_10centrality_17DynKatzCentrality_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_10centrality_17DynKatzCentrality_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  PyObject *__pyx_v_k = 0;
  PyObject *__pyx_v_groupOnly = 0;
  PyObject *__pyx_v_tolerance = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_k,&__pyx_n_s_groupOnly,&__pyx_n_s_tolerance,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = ((PyObject *)Py_False);
    values[3] = ((PyObject *)__pyx_float_1eneg_9);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 4, 1); __PYX_ERR(0, 1509, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_groupOnly);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tolerance);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1509, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_k = values[1];
    __pyx_v_groupOnly = values[2];
    __pyx_v_tolerance = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1509, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.DynKatzCentrality.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 1509, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_10centrality_17DynKatzCentrality___cinit__(((struct __pyx_obj_9networkit_10centrality_DynKatzCentrality *)__pyx_v_self), __pyx_v_G, __pyx_v_k, __pyx_v_groupOnly, __pyx_v_tolerance);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_10centrality_17DynKatzCentrality___cinit__(struct __pyx_obj_9networkit_10centrality_DynKatzCentrality *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_k, PyObject *__pyx_v_groupOnly, PyObject *__pyx_v_tolerance) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10centrality_count __pyx_t_1;
  bool __pyx_t_2;
  double __pyx_t_3;
  NetworKit::DynKatzCentrality *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/centrality.pyx":1510
 * 
 * 	def __cinit__(self, Graph G, k, groupOnly=False, tolerance=1e-9):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _DynKatzCentrality(G._this, k, groupOnly, tolerance)
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base._G));
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/centrality.pyx":1511
 * 	def __cinit__(self, Graph G, k, groupOnly=False, tolerance=1e-9):
 * 		self._G = G
 * 		self._this = new _DynKatzCentrality(G._this, k, groupOnly, tolerance)             # <<<<<<<<<<<<<<
 * 
 * 	def update(self, ev):
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_k); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1511, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_groupOnly); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1511, __pyx_L1_error)
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_tolerance); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1511, __pyx_L1_error)
  try {
    __pyx_t_4 = new NetworKit::DynKatzCentrality(__pyx_v_G->_this, __pyx_t_1, __pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1511, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_4;

  /* "networkit/centrality.pyx":1509
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, k, groupOnly=False, tolerance=1e-9):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _DynKatzCentrality(G._this, k, groupOnly, tolerance)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.centrality.DynKatzCentrality.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1513
 * 		self._this = new _DynKatzCentrality(G._this, k, groupOnly, tolerance)
 * 
 * 	def update(self, ev):             # <<<<<<<<<<<<<<
 * 		(<_DynKatzCentrality*>(self._this)).update(_GraphEvent(ev.type, ev.u, ev.v, ev.w))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_17DynKatzCentrality_3update(PyObject *__pyx_v_self, PyObject *__pyx_v_ev); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_17DynKatzCentrality_3update(PyObject *__pyx_v_self, PyObject *__pyx_v_ev) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_17DynKatzCentrality_2update(((struct __pyx_obj_9networkit_10centrality_DynKatzCentrality *)__pyx_v_self), ((PyObject *)__pyx_v_ev));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_17DynKatzCentrality_2update(struct __pyx_obj_9networkit_10centrality_DynKatzCentrality *__pyx_v_self, PyObject *__pyx_v_ev) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  enum NetworKit::GraphEvent::Type __pyx_t_2;
  __pyx_t_9networkit_8dynamics_node __pyx_t_3;
  __pyx_t_9networkit_8dynamics_node __pyx_t_4;
  __pyx_t_9networkit_8dynamics_edgeweight __pyx_t_5;
  NetworKit::GraphEvent __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update", 0);

  /* "networkit/centrality.pyx":1514
 * 
 * 	def update(self, ev):
 * 		(<_DynKatzCentrality*>(self._this)).update(_GraphEvent(ev.type, ev.u, ev.v, ev.w))             # <<<<<<<<<<<<<<
 * 
 * 	def updateBatch(self, batch):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ev, __pyx_n_s_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((enum NetworKit::GraphEvent::Type)__Pyx_PyInt_As_enum__NetworKit_3a__3a_GraphEvent_3a__3a_Type(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1514, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ev, __pyx_n_s_u); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_3 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1514, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ev, __pyx_n_s_v); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_4 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1514, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ev, __pyx_n_s_w); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1514, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_t_6 = NetworKit::GraphEvent(__pyx_t_2, __pyx_t_3, __pyx_t_4, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1514, __pyx_L1_error)
  }
  try {
    ((NetworKit::DynKatzCentrality *)__pyx_v_self->__pyx_base.__pyx_base._this)->update(__pyx_t_6);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1514, __pyx_L1_error)
  }

  /* "networkit/centrality.pyx":1513
 * 		self._this = new _DynKatzCentrality(G._this, k, groupOnly, tolerance)
 * 
 * 	def update(self, ev):             # <<<<<<<<<<<<<<
 * 		(<_DynKatzCentrality*>(self._this)).update(_GraphEvent(ev.type, ev.u, ev.v, ev.w))
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.DynKatzCentrality.update", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1516
 * 		(<_DynKatzCentrality*>(self._this)).update(_GraphEvent(ev.type, ev.u, ev.v, ev.w))
 * 
 * 	def updateBatch(self, batch):             # <<<<<<<<<<<<<<
 * 		cdef vector[_GraphEvent] _batch
 * 		for ev in batch:
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_17DynKatzCentrality_5updateBatch(PyObject *__pyx_v_self, PyObject *__pyx_v_batch); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_17DynKatzCentrality_5updateBatch(PyObject *__pyx_v_self, PyObject *__pyx_v_batch) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("updateBatch (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_17DynKatzCentrality_4updateBatch(((struct __pyx_obj_9networkit_10centrality_DynKatzCentrality *)__pyx_v_self), ((PyObject *)__pyx_v_batch));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_17DynKatzCentrality_4updateBatch(struct __pyx_obj_9networkit_10centrality_DynKatzCentrality *__pyx_v_self, PyObject *__pyx_v_batch) {
  std::vector<NetworKit::GraphEvent>  __pyx_v__batch;
  PyObject *__pyx_v_ev = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  enum NetworKit::GraphEvent::Type __pyx_t_5;
  __pyx_t_9networkit_8dynamics_node __pyx_t_6;
  __pyx_t_9networkit_8dynamics_node __pyx_t_7;
  __pyx_t_9networkit_8dynamics_edgeweight __pyx_t_8;
  NetworKit::GraphEvent __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("updateBatch", 0);

  /* "networkit/centrality.pyx":1518
 * 	def updateBatch(self, batch):
 * 		cdef vector[_GraphEvent] _batch
 * 		for ev in batch:             # <<<<<<<<<<<<<<
 * 			_batch.push_back(_GraphEvent(ev.type, ev.u, ev.v, ev.w))
 * 		(<_DynKatzCentrality*>(self._this)).updateBatch(_batch)
 */
  if (likely(PyList_CheckExact(__pyx_v_batch)) || PyTuple_CheckExact(__pyx_v_batch)) {
    __pyx_t_1 = __pyx_v_batch; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_batch); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1518, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1518, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 1518, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1518, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 1518, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1518, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1518, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_ev, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "networkit/centrality.pyx":1519
 * 		cdef vector[_GraphEvent] _batch
 * 		for ev in batch:
 * 			_batch.push_back(_GraphEvent(ev.type, ev.u, ev.v, ev.w))             # <<<<<<<<<<<<<<
 * 		(<_DynKatzCentrality*>(self._this)).updateBatch(_batch)
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ev, __pyx_n_s_type); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1519, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = ((enum NetworKit::GraphEvent::Type)__Pyx_PyInt_As_enum__NetworKit_3a__3a_GraphEvent_3a__3a_Type(__pyx_t_4)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1519, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ev, __pyx_n_s_u); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1519, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyInt_As_uint64_t(__pyx_t_4); if (unlikely((__pyx_t_6 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1519, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ev, __pyx_n_s_v); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1519, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyInt_As_uint64_t(__pyx_t_4); if (unlikely((__pyx_t_7 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1519, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ev, __pyx_n_s_w); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1519, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1519, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    try {
      __pyx_t_9 = NetworKit::GraphEvent(__pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_t_8);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1519, __pyx_L1_error)
    }
    try {
      __pyx_v__batch.push_back(__pyx_t_9);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1519, __pyx_L1_error)
    }

    /* "networkit/centrality.pyx":1518
 * 	def updateBatch(self, batch):
 * 		cdef vector[_GraphEvent] _batch
 * 		for ev in batch:             # <<<<<<<<<<<<<<
 * 			_batch.push_back(_GraphEvent(ev.type, ev.u, ev.v, ev.w))
 * 		(<_DynKatzCentrality*>(self._this)).updateBatch(_batch)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/centrality.pyx":1520
 * 		for ev in batch:
 * 			_batch.push_back(_GraphEvent(ev.type, ev.u, ev.v, ev.w))
 * 		(<_DynKatzCentrality*>(self._this)).updateBatch(_batch)             # <<<<<<<<<<<<<<
 * 
 * 	def top(self, n=0):
 */
  try {
    ((NetworKit::DynKatzCentrality *)__pyx_v_self->__pyx_base.__pyx_base._this)->updateBatch(__pyx_v__batch);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1520, __pyx_L1_error)
  }

  /* "networkit/centrality.pyx":1516
 * 		(<_DynKatzCentrality*>(self._this)).update(_GraphEvent(ev.type, ev.u, ev.v, ev.w))
 * 
 * 	def updateBatch(self, batch):             # <<<<<<<<<<<<<<
 * 		cdef vector[_GraphEvent] _batch
 * 		for ev in batch:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("networkit.centrality.DynKatzCentrality.updateBatch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ev);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1522
 * 		(<_DynKatzCentrality*>(self._this)).updateBatch(_batch)
 * 
 * 	def top(self, n=0):             # <<<<<<<<<<<<<<
 * 		return (<_DynKatzCentrality*>(self._this)).top(n)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_17DynKatzCentrality_7top(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_17DynKatzCentrality_7top(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_n = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("top (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_n,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "top") < 0)) __PYX_ERR(0, 1522, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_n = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("top", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1522, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.DynKatzCentrality.top", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_10centrality_17DynKatzCentrality_6top(((struct __pyx_obj_9networkit_10centrality_DynKatzCentrality *)__pyx_v_self), __pyx_v_n);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_17DynKatzCentrality_6top(struct __pyx_obj_9networkit_10centrality_DynKatzCentrality *__pyx_v_self, PyObject *__pyx_v_n) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10centrality_count __pyx_t_1;
  __pyx_t_9networkit_10centrality_node __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("top", 0);

  /* "networkit/centrality.pyx":1523
 * 
 * 	def top(self, n=0):
 * 		return (<_DynKatzCentrality*>(self._this)).top(n)             # <<<<<<<<<<<<<<
 * 
 * 	def bound(self, v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_n); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1523, __pyx_L1_error)
  try {
    __pyx_t_2 = ((NetworKit::DynKatzCentrality *)__pyx_v_self->__pyx_base.__pyx_base._this)->top(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1523, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_From_uint64_t(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":1522
 * 		(<_DynKatzCentrality*>(self._this)).updateBatch(_batch)
 * 
 * 	def top(self, n=0):             # <<<<<<<<<<<<<<
 * 		return (<_DynKatzCentrality*>(self._this)).top(n)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.centrality.DynKatzCentrality.top", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1525
 * 		return (<_DynKatzCentrality*>(self._this)).top(n)
 * 
 * 	def bound(self, v):             # <<<<<<<<<<<<<<
 * 		return (<_DynKatzCentrality*>(self._this)).bound(v)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_17DynKatzCentrality_9bound(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_17DynKatzCentrality_9bound(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("bound (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_17DynKatzCentrality_8bound(((struct __pyx_obj_9networkit_10centrality_DynKatzCentrality *)__pyx_v_self), ((PyObject *)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_17DynKatzCentrality_8bound(struct __pyx_obj_9networkit_10centrality_DynKatzCentrality *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10centrality_node __pyx_t_1;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("bound", 0);

  /* "networkit/centrality.pyx":1526
 * 
 * 	def bound(self, v):
 * 		return (<_DynKatzCentrality*>(self._this)).bound(v)             # <<<<<<<<<<<<<<
 * 
 * 	def areDistinguished(self, u, v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_v); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1526, __pyx_L1_error)
  try {
    __pyx_t_2 = ((NetworKit::DynKatzCentrality *)__pyx_v_self->__pyx_base.__pyx_base._this)->bound(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1526, __pyx_L1_error)
  }
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":1525
 * 		return (<_DynKatzCentrality*>(self._this)).top(n)
 * 
 * 	def bound(self, v):             # <<<<<<<<<<<<<<
 * 		return (<_DynKatzCentrality*>(self._this)).bound(v)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.centrality.DynKatzCentrality.bound", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1528
 * 		return (<_DynKatzCentrality*>(self._this)).bound(v)
 * 
 * 	def areDistinguished(self, u, v):             # <<<<<<<<<<<<<<
 * 		return (<_DynKatzCentrality*>(self._this)).areDistinguished(u, v)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_17DynKatzCentrality_11areDistinguished(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_17DynKatzCentrality_11areDistinguished(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_u = 0;
  PyObject *__pyx_v_v = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("areDistinguished (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_u,&__pyx_n_s_v,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_u)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("areDistinguished", 1, 2, 2, 1); __PYX_ERR(0, 1528, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "areDistinguished") < 0)) __PYX_ERR(0, 1528, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_u = values[0];
    __pyx_v_v = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("areDistinguished", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1528, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.DynKatzCentrality.areDistinguished", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_10centrality_17DynKatzCentrality_10areDistinguished(((struct __pyx_obj_9networkit_10centrality_DynKatzCentrality *)__pyx_v_self), __pyx_v_u, __pyx_v_v);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_17DynKatzCentrality_10areDistinguished(struct __pyx_obj_9networkit_10centrality_DynKatzCentrality *__pyx_v_self, PyObject *__pyx_v_u, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10centrality_node __pyx_t_1;
  __pyx_t_9networkit_10centrality_node __pyx_t_2;
  bool __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("areDistinguished", 0);

  /* "networkit/centrality.pyx":1529
 * 
 * 	def areDistinguished(self, u, v):
 * 		return (<_DynKatzCentrality*>(self._this)).areDistinguished(u, v)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/centrality/LocalClusteringCoefficient.hpp>":
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_u); if (unlikely((__pyx_t_1 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1529, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_uint64_t(__pyx_v_v); if (unlikely((__pyx_t_2 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1529, __pyx_L1_error)
  try {
    __pyx_t_3 = ((NetworKit::DynKatzCentrality *)__pyx_v_self->__pyx_base.__pyx_base._this)->areDistinguished(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1529, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1529, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":1528
 * 		return (<_DynKatzCentrality*>(self._this)).bound(v)
 * 
 * 	def areDistinguished(self, u, v):             # <<<<<<<<<<<<<<
 * 		return (<_DynKatzCentrality*>(self._this)).areDistinguished(u, v)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("networkit.centrality.DynKatzCentrality.areDistinguished", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_17DynKatzCentrality_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_17DynKatzCentrality_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_17DynKatzCentrality_12__reduce_cython__(((struct __pyx_obj_9networkit_10centrality_DynKatzCentrality *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_17DynKatzCentrality_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_DynKatzCentrality *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__54, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.DynKatzCentrality.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_17DynKatzCentrality_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_17DynKatzCentrality_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_17DynKatzCentrality_14__setstate_cython__(((struct __pyx_obj_9networkit_10centrality_DynKatzCentrality *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_17DynKatzCentrality_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_DynKatzCentrality *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__55, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.DynKatzCentrality.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1561
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, bool_t turbo = False):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _LocalClusteringCoefficient(G._this, turbo)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_10centrality_26LocalClusteringCoefficient_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_10centrality_26LocalClusteringCoefficient_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  bool __pyx_v_turbo;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_turbo,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_turbo);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1561, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    if (values[1]) {
      __pyx_v_turbo = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_turbo == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1561, __pyx_L3_error)
    } else {
      __pyx_v_turbo = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1561, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.LocalClusteringCoefficient.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 1561, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_10centrality_26LocalClusteringCoefficient___cinit__(((struct __pyx_obj_9networkit_10centrality_LocalClusteringCoefficient *)__pyx_v_self), __pyx_v_G, __pyx_v_turbo);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_10centrality_26LocalClusteringCoefficient___cinit__(struct __pyx_obj_9networkit_10centrality_LocalClusteringCoefficient *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, bool __pyx_v_turbo) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::LocalClusteringCoefficient *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/centrality.pyx":1562
 * 
 * 	def __cinit__(self, Graph G, bool_t turbo = False):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _LocalClusteringCoefficient(G._this, turbo)
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base._G));
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/centrality.pyx":1563
 * 	def __cinit__(self, Graph G, bool_t turbo = False):
 * 		self._G = G
 * 		self._this = new _LocalClusteringCoefficient(G._this, turbo)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_t_1 = new NetworKit::LocalClusteringCoefficient(__pyx_v_G->_this, __pyx_v_turbo);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1563, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/centrality.pyx":1561
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, bool_t turbo = False):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _LocalClusteringCoefficient(G._this, turbo)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.centrality.LocalClusteringCoefficient.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_26LocalClusteringCoefficient_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_26LocalClusteringCoefficient_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_26LocalClusteringCoefficient_2__reduce_cython__(((struct __pyx_obj_9networkit_10centrality_LocalClusteringCoefficient *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_26LocalClusteringCoefficient_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_LocalClusteringCoefficient *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__56, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.LocalClusteringCoefficient.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_26LocalClusteringCoefficient_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_26LocalClusteringCoefficient_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_26LocalClusteringCoefficient_4__setstate_cython__(((struct __pyx_obj_9networkit_10centrality_LocalClusteringCoefficient *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_26LocalClusteringCoefficient_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_LocalClusteringCoefficient *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__57, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.LocalClusteringCoefficient.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1583
 * 	"""
 * 
 * 	def __cinit__(self, Graph G):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _Sfigality(G._this)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_10centrality_9Sfigality_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_10centrality_9Sfigality_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1583, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1583, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.Sfigality.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 1583, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_10centrality_9Sfigality___cinit__(((struct __pyx_obj_9networkit_10centrality_Sfigality *)__pyx_v_self), __pyx_v_G);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_10centrality_9Sfigality___cinit__(struct __pyx_obj_9networkit_10centrality_Sfigality *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::Sfigality *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/centrality.pyx":1584
 * 
 * 	def __cinit__(self, Graph G):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _Sfigality(G._this)
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base._G));
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/centrality.pyx":1585
 * 	def __cinit__(self, Graph G):
 * 		self._G = G
 * 		self._this = new _Sfigality(G._this)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/centrality/PermanenceCentrality.hpp>":
 */
  try {
    __pyx_t_1 = new NetworKit::Sfigality(__pyx_v_G->_this);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1585, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/centrality.pyx":1583
 * 	"""
 * 
 * 	def __cinit__(self, Graph G):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _Sfigality(G._this)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.centrality.Sfigality.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_9Sfigality_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_9Sfigality_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_9Sfigality_2__reduce_cython__(((struct __pyx_obj_9networkit_10centrality_Sfigality *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_9Sfigality_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_Sfigality *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__58, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.Sfigality.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_9Sfigality_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_9Sfigality_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_9Sfigality_4__setstate_cython__(((struct __pyx_obj_9networkit_10centrality_Sfigality *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_9Sfigality_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_Sfigality *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__59, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.Sfigality.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1611
 * 	cdef Partition _P
 * 
 * 	def __cinit__(self, Graph G, Partition P):             # <<<<<<<<<<<<<<
 * 		self._this = new _PermanenceCentrality(G._this, P._this)
 * 		self._G = G
 */

/* Python wrapper */
static int __pyx_pw_9networkit_10centrality_20PermanenceCentrality_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_10centrality_20PermanenceCentrality_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_P = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_P,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_P)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(0, 1611, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1611, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_P = ((struct __pyx_obj_9networkit_10structures_Partition *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1611, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.PermanenceCentrality.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 1611, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_P), __pyx_ptype_9networkit_10structures_Partition, 1, "P", 0))) __PYX_ERR(0, 1611, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_10centrality_20PermanenceCentrality___cinit__(((struct __pyx_obj_9networkit_10centrality_PermanenceCentrality *)__pyx_v_self), __pyx_v_G, __pyx_v_P);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_10centrality_20PermanenceCentrality___cinit__(struct __pyx_obj_9networkit_10centrality_PermanenceCentrality *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, struct __pyx_obj_9networkit_10structures_Partition *__pyx_v_P) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::PermanenceCentrality *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/centrality.pyx":1612
 * 
 * 	def __cinit__(self, Graph G, Partition P):
 * 		self._this = new _PermanenceCentrality(G._this, P._this)             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._P = P
 */
  try {
    __pyx_t_1 = new NetworKit::PermanenceCentrality(__pyx_v_G->_this, __pyx_v_P->_this);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1612, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base._this = __pyx_t_1;

  /* "networkit/centrality.pyx":1613
 * 	def __cinit__(self, Graph G, Partition P):
 * 		self._this = new _PermanenceCentrality(G._this, P._this)
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._P = P
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->_G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_G));
  __pyx_v_self->_G = __pyx_v_G;

  /* "networkit/centrality.pyx":1614
 * 		self._this = new _PermanenceCentrality(G._this, P._this)
 * 		self._G = G
 * 		self._P = P             # <<<<<<<<<<<<<<
 * 
 * 	def getIntraClustering(self, node u):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_P));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_P));
  __Pyx_GOTREF(__pyx_v_self->_P);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_P));
  __pyx_v_self->_P = __pyx_v_P;

  /* "networkit/centrality.pyx":1611
 * 	cdef Partition _P
 * 
 * 	def __cinit__(self, Graph G, Partition P):             # <<<<<<<<<<<<<<
 * 		self._this = new _PermanenceCentrality(G._this, P._this)
 * 		self._G = G
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.centrality.PermanenceCentrality.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1616
 * 		self._P = P
 * 
 * 	def getIntraClustering(self, node u):             # <<<<<<<<<<<<<<
 * 		return (<_PermanenceCentrality*>(self._this)).getIntraClustering(u)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_20PermanenceCentrality_3getIntraClustering(PyObject *__pyx_v_self, PyObject *__pyx_arg_u); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_20PermanenceCentrality_3getIntraClustering(PyObject *__pyx_v_self, PyObject *__pyx_arg_u) {
  __pyx_t_9networkit_10centrality_node __pyx_v_u;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getIntraClustering (wrapper)", 0);
  assert(__pyx_arg_u); {
    __pyx_v_u = __Pyx_PyInt_As_uint64_t(__pyx_arg_u); if (unlikely((__pyx_v_u == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1616, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.PermanenceCentrality.getIntraClustering", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_10centrality_20PermanenceCentrality_2getIntraClustering(((struct __pyx_obj_9networkit_10centrality_PermanenceCentrality *)__pyx_v_self), ((__pyx_t_9networkit_10centrality_node)__pyx_v_u));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_20PermanenceCentrality_2getIntraClustering(struct __pyx_obj_9networkit_10centrality_PermanenceCentrality *__pyx_v_self, __pyx_t_9networkit_10centrality_node __pyx_v_u) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getIntraClustering", 0);

  /* "networkit/centrality.pyx":1617
 * 
 * 	def getIntraClustering(self, node u):
 * 		return (<_PermanenceCentrality*>(self._this)).getIntraClustering(u)             # <<<<<<<<<<<<<<
 * 
 * 	def getPermanence(self, node u):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::PermanenceCentrality *)__pyx_v_self->__pyx_base._this)->getIntraClustering(__pyx_v_u);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1617, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":1616
 * 		self._P = P
 * 
 * 	def getIntraClustering(self, node u):             # <<<<<<<<<<<<<<
 * 		return (<_PermanenceCentrality*>(self._this)).getIntraClustering(u)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.centrality.PermanenceCentrality.getIntraClustering", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1619
 * 		return (<_PermanenceCentrality*>(self._this)).getIntraClustering(u)
 * 
 * 	def getPermanence(self, node u):             # <<<<<<<<<<<<<<
 * 		return (<_PermanenceCentrality*>(self._this)).getPermanence(u)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_20PermanenceCentrality_5getPermanence(PyObject *__pyx_v_self, PyObject *__pyx_arg_u); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_20PermanenceCentrality_5getPermanence(PyObject *__pyx_v_self, PyObject *__pyx_arg_u) {
  __pyx_t_9networkit_10centrality_node __pyx_v_u;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPermanence (wrapper)", 0);
  assert(__pyx_arg_u); {
    __pyx_v_u = __Pyx_PyInt_As_uint64_t(__pyx_arg_u); if (unlikely((__pyx_v_u == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1619, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.PermanenceCentrality.getPermanence", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_10centrality_20PermanenceCentrality_4getPermanence(((struct __pyx_obj_9networkit_10centrality_PermanenceCentrality *)__pyx_v_self), ((__pyx_t_9networkit_10centrality_node)__pyx_v_u));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_20PermanenceCentrality_4getPermanence(struct __pyx_obj_9networkit_10centrality_PermanenceCentrality *__pyx_v_self, __pyx_t_9networkit_10centrality_node __pyx_v_u) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPermanence", 0);

  /* "networkit/centrality.pyx":1620
 * 
 * 	def getPermanence(self, node u):
 * 		return (<_PermanenceCentrality*>(self._this)).getPermanence(u)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::PermanenceCentrality *)__pyx_v_self->__pyx_base._this)->getPermanence(__pyx_v_u);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1620, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":1619
 * 		return (<_PermanenceCentrality*>(self._this)).getIntraClustering(u)
 * 
 * 	def getPermanence(self, node u):             # <<<<<<<<<<<<<<
 * 		return (<_PermanenceCentrality*>(self._this)).getPermanence(u)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.centrality.PermanenceCentrality.getPermanence", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_20PermanenceCentrality_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_20PermanenceCentrality_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_20PermanenceCentrality_6__reduce_cython__(((struct __pyx_obj_9networkit_10centrality_PermanenceCentrality *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_20PermanenceCentrality_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_PermanenceCentrality *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__60, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.PermanenceCentrality.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_20PermanenceCentrality_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_20PermanenceCentrality_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_20PermanenceCentrality_8__setstate_cython__(((struct __pyx_obj_9networkit_10centrality_PermanenceCentrality *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_20PermanenceCentrality_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_PermanenceCentrality *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__61, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.PermanenceCentrality.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1646
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, normalized = False):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _LaplacianCentrality(G._this, normalized)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_10centrality_19LaplacianCentrality_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_10centrality_19LaplacianCentrality_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  PyObject *__pyx_v_normalized = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_normalized,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_normalized);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1646, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    __pyx_v_normalized = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1646, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.LaplacianCentrality.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 1646, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_10centrality_19LaplacianCentrality___cinit__(((struct __pyx_obj_9networkit_10centrality_LaplacianCentrality *)__pyx_v_self), __pyx_v_G, __pyx_v_normalized);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_10centrality_19LaplacianCentrality___cinit__(struct __pyx_obj_9networkit_10centrality_LaplacianCentrality *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, PyObject *__pyx_v_normalized) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  NetworKit::LaplacianCentrality *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/centrality.pyx":1647
 * 
 * 	def __cinit__(self, Graph G, normalized = False):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _LaplacianCentrality(G._this, normalized)
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base._G));
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/centrality.pyx":1648
 * 	def __cinit__(self, Graph G, normalized = False):
 * 		self._G = G
 * 		self._this = new _LaplacianCentrality(G._this, normalized)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/centrality/CoreDecomposition.hpp>":
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_normalized); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1648, __pyx_L1_error)
  try {
    __pyx_t_2 = new NetworKit::LaplacianCentrality(__pyx_v_G->_this, __pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1648, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_2;

  /* "networkit/centrality.pyx":1646
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, normalized = False):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _LaplacianCentrality(G._this, normalized)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.centrality.LaplacianCentrality.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_19LaplacianCentrality_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_19LaplacianCentrality_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_19LaplacianCentrality_2__reduce_cython__(((struct __pyx_obj_9networkit_10centrality_LaplacianCentrality *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_19LaplacianCentrality_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_LaplacianCentrality *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__62, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.LaplacianCentrality.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_19LaplacianCentrality_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_19LaplacianCentrality_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_19LaplacianCentrality_4__setstate_cython__(((struct __pyx_obj_9networkit_10centrality_LaplacianCentrality *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_19LaplacianCentrality_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_LaplacianCentrality *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__63, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.LaplacianCentrality.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1679
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, bool_t normalized=False, bool_t enforceBucketQueueAlgorithm=False, bool_t storeNodeOrder = False):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _CoreDecomposition(G._this, normalized, enforceBucketQueueAlgorithm, storeNodeOrder)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_10centrality_17CoreDecomposition_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_10centrality_17CoreDecomposition_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  bool __pyx_v_normalized;
  bool __pyx_v_enforceBucketQueueAlgorithm;
  bool __pyx_v_storeNodeOrder;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_normalized,&__pyx_n_s_enforceBucketQueueAlgorithm,&__pyx_n_s_storeNodeOrder,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_normalized);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_enforceBucketQueueAlgorithm);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_storeNodeOrder);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1679, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    if (values[1]) {
      __pyx_v_normalized = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_normalized == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1679, __pyx_L3_error)
    } else {
      __pyx_v_normalized = ((bool)0);
    }
    if (values[2]) {
      __pyx_v_enforceBucketQueueAlgorithm = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_enforceBucketQueueAlgorithm == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1679, __pyx_L3_error)
    } else {
      __pyx_v_enforceBucketQueueAlgorithm = ((bool)0);
    }
    if (values[3]) {
      __pyx_v_storeNodeOrder = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_storeNodeOrder == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1679, __pyx_L3_error)
    } else {
      __pyx_v_storeNodeOrder = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1679, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.CoreDecomposition.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 1679, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_10centrality_17CoreDecomposition___cinit__(((struct __pyx_obj_9networkit_10centrality_CoreDecomposition *)__pyx_v_self), __pyx_v_G, __pyx_v_normalized, __pyx_v_enforceBucketQueueAlgorithm, __pyx_v_storeNodeOrder);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_10centrality_17CoreDecomposition___cinit__(struct __pyx_obj_9networkit_10centrality_CoreDecomposition *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, bool __pyx_v_normalized, bool __pyx_v_enforceBucketQueueAlgorithm, bool __pyx_v_storeNodeOrder) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::CoreDecomposition *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/centrality.pyx":1680
 * 
 * 	def __cinit__(self, Graph G, bool_t normalized=False, bool_t enforceBucketQueueAlgorithm=False, bool_t storeNodeOrder = False):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _CoreDecomposition(G._this, normalized, enforceBucketQueueAlgorithm, storeNodeOrder)
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base._G));
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/centrality.pyx":1681
 * 	def __cinit__(self, Graph G, bool_t normalized=False, bool_t enforceBucketQueueAlgorithm=False, bool_t storeNodeOrder = False):
 * 		self._G = G
 * 		self._this = new _CoreDecomposition(G._this, normalized, enforceBucketQueueAlgorithm, storeNodeOrder)             # <<<<<<<<<<<<<<
 * 
 * 	def maxCoreNumber(self):
 */
  try {
    __pyx_t_1 = new NetworKit::CoreDecomposition(__pyx_v_G->_this, __pyx_v_normalized, __pyx_v_enforceBucketQueueAlgorithm, __pyx_v_storeNodeOrder);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1681, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/centrality.pyx":1679
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, bool_t normalized=False, bool_t enforceBucketQueueAlgorithm=False, bool_t storeNodeOrder = False):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _CoreDecomposition(G._this, normalized, enforceBucketQueueAlgorithm, storeNodeOrder)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.centrality.CoreDecomposition.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1683
 * 		self._this = new _CoreDecomposition(G._this, normalized, enforceBucketQueueAlgorithm, storeNodeOrder)
 * 
 * 	def maxCoreNumber(self):             # <<<<<<<<<<<<<<
 * 		""" Get maximum core number.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_17CoreDecomposition_3maxCoreNumber(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9networkit_10centrality_17CoreDecomposition_2maxCoreNumber[] = " Get maximum core number.\n\n\t\tReturns:\n\t\t--------\n\t\tindex\n\t\t\tThe maximum core number.\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_17CoreDecomposition_3maxCoreNumber(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("maxCoreNumber (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_17CoreDecomposition_2maxCoreNumber(((struct __pyx_obj_9networkit_10centrality_CoreDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_17CoreDecomposition_2maxCoreNumber(struct __pyx_obj_9networkit_10centrality_CoreDecomposition *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10centrality_index __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("maxCoreNumber", 0);

  /* "networkit/centrality.pyx":1691
 * 			The maximum core number.
 * 		"""
 * 		return (<_CoreDecomposition*>(self._this)).maxCoreNumber()             # <<<<<<<<<<<<<<
 * 
 * 	def getCover(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::CoreDecomposition *)__pyx_v_self->__pyx_base.__pyx_base._this)->maxCoreNumber();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1691, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_uint64_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":1683
 * 		self._this = new _CoreDecomposition(G._this, normalized, enforceBucketQueueAlgorithm, storeNodeOrder)
 * 
 * 	def maxCoreNumber(self):             # <<<<<<<<<<<<<<
 * 		""" Get maximum core number.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.centrality.CoreDecomposition.maxCoreNumber", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1693
 * 		return (<_CoreDecomposition*>(self._this)).maxCoreNumber()
 * 
 * 	def getCover(self):             # <<<<<<<<<<<<<<
 * 		""" Get the k-cores as cover.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_17CoreDecomposition_5getCover(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9networkit_10centrality_17CoreDecomposition_4getCover[] = " Get the k-cores as cover.\n\n\t\tReturns:\n\t\t--------\n\t\tvector\n\t\t\tThe k-cores as sets of nodes, indexed by k.\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_17CoreDecomposition_5getCover(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getCover (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_17CoreDecomposition_4getCover(((struct __pyx_obj_9networkit_10centrality_CoreDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_17CoreDecomposition_4getCover(struct __pyx_obj_9networkit_10centrality_CoreDecomposition *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  NetworKit::Cover __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getCover", 0);

  /* "networkit/centrality.pyx":1701
 * 			The k-cores as sets of nodes, indexed by k.
 * 		"""
 * 		return Cover().setThis((<_CoreDecomposition*>(self._this)).getCover())             # <<<<<<<<<<<<<<
 * 
 * 	def getPartition(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9networkit_10structures_Cover)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1701, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  try {
    __pyx_t_2 = ((NetworKit::CoreDecomposition *)__pyx_v_self->__pyx_base.__pyx_base._this)->getCover();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1701, __pyx_L1_error)
  }
  __pyx_t_3 = ((struct __pyx_vtabstruct_9networkit_10structures_Cover *)((struct __pyx_obj_9networkit_10structures_Cover *)__pyx_t_1)->__pyx_vtab)->setThis(((struct __pyx_obj_9networkit_10structures_Cover *)__pyx_t_1), __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1701, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":1693
 * 		return (<_CoreDecomposition*>(self._this)).maxCoreNumber()
 * 
 * 	def getCover(self):             # <<<<<<<<<<<<<<
 * 		""" Get the k-cores as cover.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.centrality.CoreDecomposition.getCover", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1703
 * 		return Cover().setThis((<_CoreDecomposition*>(self._this)).getCover())
 * 
 * 	def getPartition(self):             # <<<<<<<<<<<<<<
 * 		""" Get the k-shells as a partition object.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_17CoreDecomposition_7getPartition(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9networkit_10centrality_17CoreDecomposition_6getPartition[] = " Get the k-shells as a partition object.\n\n\t\tReturns:\n\t\t--------\n\t\tnetworkit.Partition\n\t\t\tThe k-shells\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_17CoreDecomposition_7getPartition(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPartition (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_17CoreDecomposition_6getPartition(((struct __pyx_obj_9networkit_10centrality_CoreDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_17CoreDecomposition_6getPartition(struct __pyx_obj_9networkit_10centrality_CoreDecomposition *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  NetworKit::Partition __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPartition", 0);

  /* "networkit/centrality.pyx":1711
 * 			The k-shells
 * 		"""
 * 		return Partition().setThis((<_CoreDecomposition*>(self._this)).getPartition())             # <<<<<<<<<<<<<<
 * 
 * 	def getNodeOrder(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9networkit_10structures_Partition)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  try {
    __pyx_t_2 = ((NetworKit::CoreDecomposition *)__pyx_v_self->__pyx_base.__pyx_base._this)->getPartition();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1711, __pyx_L1_error)
  }
  __pyx_t_3 = ((struct __pyx_vtabstruct_9networkit_10structures_Partition *)((struct __pyx_obj_9networkit_10structures_Partition *)__pyx_t_1)->__pyx_vtab)->setThis(((struct __pyx_obj_9networkit_10structures_Partition *)__pyx_t_1), __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":1703
 * 		return Cover().setThis((<_CoreDecomposition*>(self._this)).getCover())
 * 
 * 	def getPartition(self):             # <<<<<<<<<<<<<<
 * 		""" Get the k-shells as a partition object.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.centrality.CoreDecomposition.getPartition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1713
 * 		return Partition().setThis((<_CoreDecomposition*>(self._this)).getPartition())
 * 
 * 	def getNodeOrder(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Get the node order.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_17CoreDecomposition_9getNodeOrder(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9networkit_10centrality_17CoreDecomposition_8getNodeOrder[] = "\n\t\tGet the node order.\n\n\t\tThis is only possible when storeNodeOrder was set.\n\n\t\tReturns:\n\t\t--------\n\t\tlist\n\t\t\tThe nodes sorted by increasing core number.\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_17CoreDecomposition_9getNodeOrder(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNodeOrder (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_17CoreDecomposition_8getNodeOrder(((struct __pyx_obj_9networkit_10centrality_CoreDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_17CoreDecomposition_8getNodeOrder(struct __pyx_obj_9networkit_10centrality_CoreDecomposition *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<__pyx_t_9networkit_10centrality_node>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNodeOrder", 0);

  /* "networkit/centrality.pyx":1724
 * 			The nodes sorted by increasing core number.
 * 		"""
 * 		return (<_CoreDecomposition*>(self._this)).getNodeOrder()             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/centrality/EigenvectorCentrality.hpp>":
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::CoreDecomposition *)__pyx_v_self->__pyx_base.__pyx_base._this)->getNodeOrder();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1724, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py___pyx_t_9networkit_10centrality_node(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1724, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":1713
 * 		return Partition().setThis((<_CoreDecomposition*>(self._this)).getPartition())
 * 
 * 	def getNodeOrder(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Get the node order.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.centrality.CoreDecomposition.getNodeOrder", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_17CoreDecomposition_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_17CoreDecomposition_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_17CoreDecomposition_10__reduce_cython__(((struct __pyx_obj_9networkit_10centrality_CoreDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_17CoreDecomposition_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_CoreDecomposition *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__64, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.CoreDecomposition.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_17CoreDecomposition_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_17CoreDecomposition_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_17CoreDecomposition_12__setstate_cython__(((struct __pyx_obj_9networkit_10centrality_CoreDecomposition *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_17CoreDecomposition_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_CoreDecomposition *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__65, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.CoreDecomposition.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1747
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, double tol=1e-9):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _EigenvectorCentrality(G._this, tol)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_10centrality_21EigenvectorCentrality_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_10centrality_21EigenvectorCentrality_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  double __pyx_v_tol;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_tol,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tol);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1747, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    if (values[1]) {
      __pyx_v_tol = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_tol == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1747, __pyx_L3_error)
    } else {
      __pyx_v_tol = ((double)1e-9);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1747, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.EigenvectorCentrality.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 1747, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_10centrality_21EigenvectorCentrality___cinit__(((struct __pyx_obj_9networkit_10centrality_EigenvectorCentrality *)__pyx_v_self), __pyx_v_G, __pyx_v_tol);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_10centrality_21EigenvectorCentrality___cinit__(struct __pyx_obj_9networkit_10centrality_EigenvectorCentrality *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, double __pyx_v_tol) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::EigenvectorCentrality *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/centrality.pyx":1748
 * 
 * 	def __cinit__(self, Graph G, double tol=1e-9):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _EigenvectorCentrality(G._this, tol)
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base._G));
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/centrality.pyx":1749
 * 	def __cinit__(self, Graph G, double tol=1e-9):
 * 		self._G = G
 * 		self._this = new _EigenvectorCentrality(G._this, tol)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/centrality/PageRank.hpp>" namespace "NetworKit::PageRank":
 */
  try {
    __pyx_t_1 = new NetworKit::EigenvectorCentrality(__pyx_v_G->_this, __pyx_v_tol);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1749, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/centrality.pyx":1747
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, double tol=1e-9):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _EigenvectorCentrality(G._this, tol)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.centrality.EigenvectorCentrality.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_21EigenvectorCentrality_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_21EigenvectorCentrality_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_21EigenvectorCentrality_2__reduce_cython__(((struct __pyx_obj_9networkit_10centrality_EigenvectorCentrality *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_21EigenvectorCentrality_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_EigenvectorCentrality *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__66, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.EigenvectorCentrality.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_21EigenvectorCentrality_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_21EigenvectorCentrality_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_21EigenvectorCentrality_4__setstate_cython__(((struct __pyx_obj_9networkit_10centrality_EigenvectorCentrality *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_21EigenvectorCentrality_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_EigenvectorCentrality *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__67, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.EigenvectorCentrality.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1785
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, double damp=0.85, double tol=1e-9):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _PageRank(G._this, damp, tol)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_10centrality_8PageRank_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_10centrality_8PageRank_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  double __pyx_v_damp;
  double __pyx_v_tol;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_damp,&__pyx_n_s_tol,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_damp);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tol);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1785, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    if (values[1]) {
      __pyx_v_damp = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_damp == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1785, __pyx_L3_error)
    } else {
      __pyx_v_damp = ((double)0.85);
    }
    if (values[2]) {
      __pyx_v_tol = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_tol == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1785, __pyx_L3_error)
    } else {
      __pyx_v_tol = ((double)1e-9);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1785, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.PageRank.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 1785, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_10centrality_8PageRank___cinit__(((struct __pyx_obj_9networkit_10centrality_PageRank *)__pyx_v_self), __pyx_v_G, __pyx_v_damp, __pyx_v_tol);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_10centrality_8PageRank___cinit__(struct __pyx_obj_9networkit_10centrality_PageRank *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, double __pyx_v_damp, double __pyx_v_tol) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::PageRank *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/centrality.pyx":1786
 * 
 * 	def __cinit__(self, Graph G, double damp=0.85, double tol=1e-9):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _PageRank(G._this, damp, tol)
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base._G));
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/centrality.pyx":1787
 * 	def __cinit__(self, Graph G, double damp=0.85, double tol=1e-9):
 * 		self._G = G
 * 		self._this = new _PageRank(G._this, damp, tol)             # <<<<<<<<<<<<<<
 * 
 * 	def numberOfIterations(self):
 */
  try {
    __pyx_t_1 = new NetworKit::PageRank(__pyx_v_G->_this, __pyx_v_damp, __pyx_v_tol);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1787, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/centrality.pyx":1785
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, double damp=0.85, double tol=1e-9):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _PageRank(G._this, damp, tol)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.centrality.PageRank.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1789
 * 		self._this = new _PageRank(G._this, damp, tol)
 * 
 * 	def numberOfIterations(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns the number of iterations performed by the algorithm.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_8PageRank_3numberOfIterations(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9networkit_10centrality_8PageRank_2numberOfIterations[] = "\n\t\tReturns the number of iterations performed by the algorithm.\n\n\t\tReturns:\n\t\t--------\n\t\tint\n\t\t\tNumber of iterations performed by the algorithm.\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_8PageRank_3numberOfIterations(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("numberOfIterations (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_8PageRank_2numberOfIterations(((struct __pyx_obj_9networkit_10centrality_PageRank *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_8PageRank_2numberOfIterations(struct __pyx_obj_9networkit_10centrality_PageRank *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_9networkit_10centrality_count __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("numberOfIterations", 0);

  /* "networkit/centrality.pyx":1798
 * 			Number of iterations performed by the algorithm.
 * 		"""
 * 		return (<_PageRank*>(self._this)).numberOfIterations()             # <<<<<<<<<<<<<<
 * 
 * 	property norm:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::PageRank *)__pyx_v_self->__pyx_base.__pyx_base._this)->numberOfIterations();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1798, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_uint64_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1798, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":1789
 * 		self._this = new _PageRank(G._this, damp, tol)
 * 
 * 	def numberOfIterations(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Returns the number of iterations performed by the algorithm.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.centrality.PageRank.numberOfIterations", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1801
 * 
 * 	property norm:
 * 		def __get__(self):             # <<<<<<<<<<<<<<
 * 			""" Get the norm used as stopping criterion. """
 * 			return (<_PageRank*>(self._this)).norm
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_8PageRank_4norm_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_8PageRank_4norm_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_8PageRank_4norm___get__(((struct __pyx_obj_9networkit_10centrality_PageRank *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_8PageRank_4norm___get__(struct __pyx_obj_9networkit_10centrality_PageRank *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "networkit/centrality.pyx":1803
 * 		def __get__(self):
 * 			""" Get the norm used as stopping criterion. """
 * 			return (<_PageRank*>(self._this)).norm             # <<<<<<<<<<<<<<
 * 		def __set__(self, _Norm norm):
 * 			""" Set the norm used as stopping criterion. """
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_enum__NetworKit_3a__3a_PageRank_3a__3a_Norm(((NetworKit::PageRank *)__pyx_v_self->__pyx_base.__pyx_base._this)->norm); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":1801
 * 
 * 	property norm:
 * 		def __get__(self):             # <<<<<<<<<<<<<<
 * 			""" Get the norm used as stopping criterion. """
 * 			return (<_PageRank*>(self._this)).norm
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.PageRank.norm.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1804
 * 			""" Get the norm used as stopping criterion. """
 * 			return (<_PageRank*>(self._this)).norm
 * 		def __set__(self, _Norm norm):             # <<<<<<<<<<<<<<
 * 			""" Set the norm used as stopping criterion. """
 * 			(<_PageRank*>(self._this)).norm = norm
 */

/* Python wrapper */
static int __pyx_pw_9networkit_10centrality_8PageRank_4norm_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_norm); /*proto*/
static int __pyx_pw_9networkit_10centrality_8PageRank_4norm_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_norm) {
  enum NetworKit::PageRank::Norm __pyx_v_norm;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_norm); {
    __pyx_v_norm = ((enum NetworKit::PageRank::Norm)__Pyx_PyInt_As_enum__NetworKit_3a__3a_PageRank_3a__3a_Norm(__pyx_arg_norm)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1804, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.PageRank.norm.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_10centrality_8PageRank_4norm_2__set__(((struct __pyx_obj_9networkit_10centrality_PageRank *)__pyx_v_self), ((enum NetworKit::PageRank::Norm)__pyx_v_norm));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_10centrality_8PageRank_4norm_2__set__(struct __pyx_obj_9networkit_10centrality_PageRank *__pyx_v_self, enum NetworKit::PageRank::Norm __pyx_v_norm) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "networkit/centrality.pyx":1806
 * 		def __set__(self, _Norm norm):
 * 			""" Set the norm used as stopping criterion. """
 * 			(<_PageRank*>(self._this)).norm = norm             # <<<<<<<<<<<<<<
 * 
 * 	property maxIterations:
 */
  ((NetworKit::PageRank *)__pyx_v_self->__pyx_base.__pyx_base._this)->norm = __pyx_v_norm;

  /* "networkit/centrality.pyx":1804
 * 			""" Get the norm used as stopping criterion. """
 * 			return (<_PageRank*>(self._this)).norm
 * 		def __set__(self, _Norm norm):             # <<<<<<<<<<<<<<
 * 			""" Set the norm used as stopping criterion. """
 * 			(<_PageRank*>(self._this)).norm = norm
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1809
 * 
 * 	property maxIterations:
 * 		def __get__(self):             # <<<<<<<<<<<<<<
 * 			""" Get the maximum number of iterations. """
 * 			return (<_PageRank*>(self._this)).maxIterations
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_8PageRank_13maxIterations_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_8PageRank_13maxIterations_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_8PageRank_13maxIterations___get__(((struct __pyx_obj_9networkit_10centrality_PageRank *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_8PageRank_13maxIterations___get__(struct __pyx_obj_9networkit_10centrality_PageRank *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "networkit/centrality.pyx":1811
 * 		def __get__(self):
 * 			""" Get the maximum number of iterations. """
 * 			return (<_PageRank*>(self._this)).maxIterations             # <<<<<<<<<<<<<<
 * 		def __set__(self, maxIterations):
 * 			""" Set the maximum number of iterations. """
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(((NetworKit::PageRank *)__pyx_v_self->__pyx_base.__pyx_base._this)->maxIterations); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1811, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":1809
 * 
 * 	property maxIterations:
 * 		def __get__(self):             # <<<<<<<<<<<<<<
 * 			""" Get the maximum number of iterations. """
 * 			return (<_PageRank*>(self._this)).maxIterations
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.PageRank.maxIterations.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1812
 * 			""" Get the maximum number of iterations. """
 * 			return (<_PageRank*>(self._this)).maxIterations
 * 		def __set__(self, maxIterations):             # <<<<<<<<<<<<<<
 * 			""" Set the maximum number of iterations. """
 * 			if maxIterations < 0:
 */

/* Python wrapper */
static int __pyx_pw_9networkit_10centrality_8PageRank_13maxIterations_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_maxIterations); /*proto*/
static int __pyx_pw_9networkit_10centrality_8PageRank_13maxIterations_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_maxIterations) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_8PageRank_13maxIterations_2__set__(((struct __pyx_obj_9networkit_10centrality_PageRank *)__pyx_v_self), ((PyObject *)__pyx_v_maxIterations));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_10centrality_8PageRank_13maxIterations_2__set__(struct __pyx_obj_9networkit_10centrality_PageRank *__pyx_v_self, PyObject *__pyx_v_maxIterations) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __pyx_t_9networkit_10centrality_count __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "networkit/centrality.pyx":1814
 * 		def __set__(self, maxIterations):
 * 			""" Set the maximum number of iterations. """
 * 			if maxIterations < 0:             # <<<<<<<<<<<<<<
 * 				raise Exception("Max iterations cannot be a negative number.")
 * 			(<_PageRank*>(self._this)).maxIterations = maxIterations
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_maxIterations, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1814, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1814, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_2)) {

    /* "networkit/centrality.pyx":1815
 * 			""" Set the maximum number of iterations. """
 * 			if maxIterations < 0:
 * 				raise Exception("Max iterations cannot be a negative number.")             # <<<<<<<<<<<<<<
 * 			(<_PageRank*>(self._this)).maxIterations = maxIterations
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__68, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1815, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1815, __pyx_L1_error)

    /* "networkit/centrality.pyx":1814
 * 		def __set__(self, maxIterations):
 * 			""" Set the maximum number of iterations. """
 * 			if maxIterations < 0:             # <<<<<<<<<<<<<<
 * 				raise Exception("Max iterations cannot be a negative number.")
 * 			(<_PageRank*>(self._this)).maxIterations = maxIterations
 */
  }

  /* "networkit/centrality.pyx":1816
 * 			if maxIterations < 0:
 * 				raise Exception("Max iterations cannot be a negative number.")
 * 			(<_PageRank*>(self._this)).maxIterations = maxIterations             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/centrality/SpanningEdgeCentrality.hpp>":
 */
  __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_v_maxIterations); if (unlikely((__pyx_t_3 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1816, __pyx_L1_error)
  ((NetworKit::PageRank *)__pyx_v_self->__pyx_base.__pyx_base._this)->maxIterations = __pyx_t_3;

  /* "networkit/centrality.pyx":1812
 * 			""" Get the maximum number of iterations. """
 * 			return (<_PageRank*>(self._this)).maxIterations
 * 		def __set__(self, maxIterations):             # <<<<<<<<<<<<<<
 * 			""" Set the maximum number of iterations. """
 * 			if maxIterations < 0:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.PageRank.maxIterations.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_8PageRank_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_8PageRank_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_8PageRank_4__reduce_cython__(((struct __pyx_obj_9networkit_10centrality_PageRank *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_8PageRank_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_PageRank *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__69, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.PageRank.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_8PageRank_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_8PageRank_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_8PageRank_6__setstate_cython__(((struct __pyx_obj_9networkit_10centrality_PageRank *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_8PageRank_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_PageRank *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__70, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.PageRank.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1840
 * 
 * 	cdef Graph _G
 * 	def __cinit__(self,  Graph G, double tol = 0.1):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _SpanningEdgeCentrality(G._this, tol)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_10centrality_22SpanningEdgeCentrality_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_10centrality_22SpanningEdgeCentrality_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  double __pyx_v_tol;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_tol,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tol);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1840, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    if (values[1]) {
      __pyx_v_tol = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_tol == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1840, __pyx_L3_error)
    } else {
      __pyx_v_tol = ((double)0.1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1840, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.SpanningEdgeCentrality.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 1840, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_10centrality_22SpanningEdgeCentrality___cinit__(((struct __pyx_obj_9networkit_10centrality_SpanningEdgeCentrality *)__pyx_v_self), __pyx_v_G, __pyx_v_tol);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_10centrality_22SpanningEdgeCentrality___cinit__(struct __pyx_obj_9networkit_10centrality_SpanningEdgeCentrality *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, double __pyx_v_tol) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::SpanningEdgeCentrality *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/centrality.pyx":1841
 * 	cdef Graph _G
 * 	def __cinit__(self,  Graph G, double tol = 0.1):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _SpanningEdgeCentrality(G._this, tol)
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->_G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_G));
  __pyx_v_self->_G = __pyx_v_G;

  /* "networkit/centrality.pyx":1842
 * 	def __cinit__(self,  Graph G, double tol = 0.1):
 * 		self._G = G
 * 		self._this = new _SpanningEdgeCentrality(G._this, tol)             # <<<<<<<<<<<<<<
 * 
 * 	def runApproximation(self):
 */
  try {
    __pyx_t_1 = new NetworKit::SpanningEdgeCentrality(__pyx_v_G->_this, __pyx_v_tol);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1842, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base._this = __pyx_t_1;

  /* "networkit/centrality.pyx":1840
 * 
 * 	cdef Graph _G
 * 	def __cinit__(self,  Graph G, double tol = 0.1):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _SpanningEdgeCentrality(G._this, tol)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.centrality.SpanningEdgeCentrality.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1844
 * 		self._this = new _SpanningEdgeCentrality(G._this, tol)
 * 
 * 	def runApproximation(self):             # <<<<<<<<<<<<<<
 * 		""" Computes approximation of the Spanning Edge Centrality. This solves k linear systems, where k is log(n)/(tol^2). The empirical running time is O(km), where n is the number of nodes
 *  	 			and m is the number of edges. """
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_22SpanningEdgeCentrality_3runApproximation(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9networkit_10centrality_22SpanningEdgeCentrality_2runApproximation[] = " Computes approximation of the Spanning Edge Centrality. This solves k linear systems, where k is log(n)/(tol^2). The empirical running time is O(km), where n is the number of nodes\n \t \t\t\tand m is the number of edges. ";
static PyObject *__pyx_pw_9networkit_10centrality_22SpanningEdgeCentrality_3runApproximation(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("runApproximation (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_22SpanningEdgeCentrality_2runApproximation(((struct __pyx_obj_9networkit_10centrality_SpanningEdgeCentrality *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_22SpanningEdgeCentrality_2runApproximation(struct __pyx_obj_9networkit_10centrality_SpanningEdgeCentrality *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("runApproximation", 0);

  /* "networkit/centrality.pyx":1847
 * 		""" Computes approximation of the Spanning Edge Centrality. This solves k linear systems, where k is log(n)/(tol^2). The empirical running time is O(km), where n is the number of nodes
 *  	 			and m is the number of edges. """
 * 		return (<_SpanningEdgeCentrality*>(self._this)).runApproximation()             # <<<<<<<<<<<<<<
 * 
 * 	def runParallelApproximation(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    ((NetworKit::SpanningEdgeCentrality *)__pyx_v_self->__pyx_base._this)->runApproximation();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1847, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_void_to_None(NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":1844
 * 		self._this = new _SpanningEdgeCentrality(G._this, tol)
 * 
 * 	def runApproximation(self):             # <<<<<<<<<<<<<<
 * 		""" Computes approximation of the Spanning Edge Centrality. This solves k linear systems, where k is log(n)/(tol^2). The empirical running time is O(km), where n is the number of nodes
 *  	 			and m is the number of edges. """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.SpanningEdgeCentrality.runApproximation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1849
 * 		return (<_SpanningEdgeCentrality*>(self._this)).runApproximation()
 * 
 * 	def runParallelApproximation(self):             # <<<<<<<<<<<<<<
 * 		""" Computes approximation (in parallel) of the Spanning Edge Centrality. This solves k linear systems, where k is log(n)/(tol^2). The empirical running time is O(km), where n is the number of nodes
 *  	 			and m is the number of edges."""
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_22SpanningEdgeCentrality_5runParallelApproximation(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9networkit_10centrality_22SpanningEdgeCentrality_4runParallelApproximation[] = " Computes approximation (in parallel) of the Spanning Edge Centrality. This solves k linear systems, where k is log(n)/(tol^2). The empirical running time is O(km), where n is the number of nodes\n \t \t\t\tand m is the number of edges.";
static PyObject *__pyx_pw_9networkit_10centrality_22SpanningEdgeCentrality_5runParallelApproximation(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("runParallelApproximation (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_22SpanningEdgeCentrality_4runParallelApproximation(((struct __pyx_obj_9networkit_10centrality_SpanningEdgeCentrality *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_22SpanningEdgeCentrality_4runParallelApproximation(struct __pyx_obj_9networkit_10centrality_SpanningEdgeCentrality *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("runParallelApproximation", 0);

  /* "networkit/centrality.pyx":1852
 * 		""" Computes approximation (in parallel) of the Spanning Edge Centrality. This solves k linear systems, where k is log(n)/(tol^2). The empirical running time is O(km), where n is the number of nodes
 *  	 			and m is the number of edges."""
 * 		return (<_SpanningEdgeCentrality*>(self._this)).runParallelApproximation()             # <<<<<<<<<<<<<<
 * 
 * 	def scores(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    ((NetworKit::SpanningEdgeCentrality *)__pyx_v_self->__pyx_base._this)->runParallelApproximation();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1852, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_void_to_None(NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1852, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":1849
 * 		return (<_SpanningEdgeCentrality*>(self._this)).runApproximation()
 * 
 * 	def runParallelApproximation(self):             # <<<<<<<<<<<<<<
 * 		""" Computes approximation (in parallel) of the Spanning Edge Centrality. This solves k linear systems, where k is log(n)/(tol^2). The empirical running time is O(km), where n is the number of nodes
 *  	 			and m is the number of edges."""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.SpanningEdgeCentrality.runParallelApproximation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1854
 * 		return (<_SpanningEdgeCentrality*>(self._this)).runParallelApproximation()
 * 
 * 	def scores(self):             # <<<<<<<<<<<<<<
 * 		""" Get a vector containing the SEC score for each edge in the graph.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_22SpanningEdgeCentrality_7scores(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9networkit_10centrality_22SpanningEdgeCentrality_6scores[] = " Get a vector containing the SEC score for each edge in the graph.\n\n\t\tReturns:\n\t\t--------\n\t\tvector\n\t\t\tThe SEC scores.\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_22SpanningEdgeCentrality_7scores(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scores (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_22SpanningEdgeCentrality_6scores(((struct __pyx_obj_9networkit_10centrality_SpanningEdgeCentrality *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_22SpanningEdgeCentrality_6scores(struct __pyx_obj_9networkit_10centrality_SpanningEdgeCentrality *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("scores", 0);

  /* "networkit/centrality.pyx":1862
 * 			The SEC scores.
 * 		"""
 * 		return (<_SpanningEdgeCentrality*>(self._this)).scores()             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/centrality/ApproxElectricalCloseness.hpp>":
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::SpanningEdgeCentrality *)__pyx_v_self->__pyx_base._this)->scores();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1862, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py_double(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1862, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":1854
 * 		return (<_SpanningEdgeCentrality*>(self._this)).runParallelApproximation()
 * 
 * 	def scores(self):             # <<<<<<<<<<<<<<
 * 		""" Get a vector containing the SEC score for each edge in the graph.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.centrality.SpanningEdgeCentrality.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_22SpanningEdgeCentrality_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_22SpanningEdgeCentrality_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_22SpanningEdgeCentrality_8__reduce_cython__(((struct __pyx_obj_9networkit_10centrality_SpanningEdgeCentrality *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_22SpanningEdgeCentrality_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_SpanningEdgeCentrality *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__71, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.SpanningEdgeCentrality.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_22SpanningEdgeCentrality_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_22SpanningEdgeCentrality_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_22SpanningEdgeCentrality_10__setstate_cython__(((struct __pyx_obj_9networkit_10centrality_SpanningEdgeCentrality *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_22SpanningEdgeCentrality_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_SpanningEdgeCentrality *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__72, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.SpanningEdgeCentrality.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1892
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, double eps = 0.1, double kappa = 0.3):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _ApproxElectricalCloseness(G._this, eps, kappa)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_10centrality_25ApproxElectricalCloseness_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_10centrality_25ApproxElectricalCloseness_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  double __pyx_v_eps;
  double __pyx_v_kappa;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_eps,&__pyx_n_s_kappa,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_eps);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_kappa);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1892, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    if (values[1]) {
      __pyx_v_eps = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_eps == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1892, __pyx_L3_error)
    } else {
      __pyx_v_eps = ((double)0.1);
    }
    if (values[2]) {
      __pyx_v_kappa = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_kappa == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1892, __pyx_L3_error)
    } else {
      __pyx_v_kappa = ((double)0.3);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1892, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.ApproxElectricalCloseness.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 1892, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_10centrality_25ApproxElectricalCloseness___cinit__(((struct __pyx_obj_9networkit_10centrality_ApproxElectricalCloseness *)__pyx_v_self), __pyx_v_G, __pyx_v_eps, __pyx_v_kappa);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_10centrality_25ApproxElectricalCloseness___cinit__(struct __pyx_obj_9networkit_10centrality_ApproxElectricalCloseness *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, double __pyx_v_eps, double __pyx_v_kappa) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::ApproxElectricalCloseness *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/centrality.pyx":1893
 * 
 * 	def __cinit__(self, Graph G, double eps = 0.1, double kappa = 0.3):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _ApproxElectricalCloseness(G._this, eps, kappa)
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base._G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base._G));
  __pyx_v_self->__pyx_base._G = __pyx_v_G;

  /* "networkit/centrality.pyx":1894
 * 	def __cinit__(self, Graph G, double eps = 0.1, double kappa = 0.3):
 * 		self._G = G
 * 		self._this = new _ApproxElectricalCloseness(G._this, eps, kappa)             # <<<<<<<<<<<<<<
 * 
 * 	def getDiagonal(self):
 */
  try {
    __pyx_t_1 = new NetworKit::ApproxElectricalCloseness(__pyx_v_G->_this, __pyx_v_eps, __pyx_v_kappa);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1894, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base.__pyx_base._this = __pyx_t_1;

  /* "networkit/centrality.pyx":1892
 * 	"""
 * 
 * 	def __cinit__(self, Graph G, double eps = 0.1, double kappa = 0.3):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _ApproxElectricalCloseness(G._this, eps, kappa)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.centrality.ApproxElectricalCloseness.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1896
 * 		self._this = new _ApproxElectricalCloseness(G._this, eps, kappa)
 * 
 * 	def getDiagonal(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Return an epsilon-approximation of the diagonal of the laplacian's pseudoinverse.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_25ApproxElectricalCloseness_3getDiagonal(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9networkit_10centrality_25ApproxElectricalCloseness_2getDiagonal[] = "\n\t\tReturn an epsilon-approximation of the diagonal of the laplacian's pseudoinverse.\n\n\t\tReturns:\n\t\t-------\n\t\tvector[double]\n\t\t\tApproximation of the diagonal of the laplacian's pseudoinverse.\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_25ApproxElectricalCloseness_3getDiagonal(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDiagonal (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_25ApproxElectricalCloseness_2getDiagonal(((struct __pyx_obj_9networkit_10centrality_ApproxElectricalCloseness *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_25ApproxElectricalCloseness_2getDiagonal(struct __pyx_obj_9networkit_10centrality_ApproxElectricalCloseness *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDiagonal", 0);

  /* "networkit/centrality.pyx":1905
 * 			Approximation of the diagonal of the laplacian's pseudoinverse.
 * 		"""
 * 		return (<_ApproxElectricalCloseness*>self._this).getDiagonal()             # <<<<<<<<<<<<<<
 * 
 * 	def computeExactDiagonal(self, double tol = 1e-9):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::ApproxElectricalCloseness *)__pyx_v_self->__pyx_base.__pyx_base._this)->getDiagonal();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1905, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py_double(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":1896
 * 		self._this = new _ApproxElectricalCloseness(G._this, eps, kappa)
 * 
 * 	def getDiagonal(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Return an epsilon-approximation of the diagonal of the laplacian's pseudoinverse.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.centrality.ApproxElectricalCloseness.getDiagonal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1907
 * 		return (<_ApproxElectricalCloseness*>self._this).getDiagonal()
 * 
 * 	def computeExactDiagonal(self, double tol = 1e-9):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Compute and return the nearly-exact values of the diagonal of the laplacian's pseudoinverse.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_25ApproxElectricalCloseness_5computeExactDiagonal(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_10centrality_25ApproxElectricalCloseness_4computeExactDiagonal[] = "\n\t\tCompute and return the nearly-exact values of the diagonal of the laplacian's pseudoinverse.\n\t\tThe values are computed by solving Lx = e_u - 1 / n for every vertex u of the graph with a\n\t\tLAMG solver.\n\n\t\tParameters:\n\t\t-----------\n\t\ttol : double\n\t\t\tTolerance for the LAMG solver.\n\n\t\tReturns:\n\t\t--------\n\t\t\tNearly-exact values of the diagonal of the laplacian's pseudoinverse.\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_25ApproxElectricalCloseness_5computeExactDiagonal(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_tol;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("computeExactDiagonal (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_tol,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tol);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "computeExactDiagonal") < 0)) __PYX_ERR(0, 1907, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_tol = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_tol == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1907, __pyx_L3_error)
    } else {
      __pyx_v_tol = ((double)1e-9);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("computeExactDiagonal", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1907, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.ApproxElectricalCloseness.computeExactDiagonal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_10centrality_25ApproxElectricalCloseness_4computeExactDiagonal(((struct __pyx_obj_9networkit_10centrality_ApproxElectricalCloseness *)__pyx_v_self), __pyx_v_tol);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_25ApproxElectricalCloseness_4computeExactDiagonal(struct __pyx_obj_9networkit_10centrality_ApproxElectricalCloseness *__pyx_v_self, double __pyx_v_tol) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("computeExactDiagonal", 0);

  /* "networkit/centrality.pyx":1922
 * 			Nearly-exact values of the diagonal of the laplacian's pseudoinverse.
 * 		"""
 * 		return (<_ApproxElectricalCloseness*>self._this).computeExactDiagonal(tol)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::ApproxElectricalCloseness *)__pyx_v_self->__pyx_base.__pyx_base._this)->computeExactDiagonal(__pyx_v_tol);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1922, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py_double(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1922, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":1907
 * 		return (<_ApproxElectricalCloseness*>self._this).getDiagonal()
 * 
 * 	def computeExactDiagonal(self, double tol = 1e-9):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Compute and return the nearly-exact values of the diagonal of the laplacian's pseudoinverse.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.centrality.ApproxElectricalCloseness.computeExactDiagonal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_25ApproxElectricalCloseness_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_25ApproxElectricalCloseness_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_25ApproxElectricalCloseness_6__reduce_cython__(((struct __pyx_obj_9networkit_10centrality_ApproxElectricalCloseness *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_25ApproxElectricalCloseness_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_ApproxElectricalCloseness *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__73, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.ApproxElectricalCloseness.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_25ApproxElectricalCloseness_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_25ApproxElectricalCloseness_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_25ApproxElectricalCloseness_8__setstate_cython__(((struct __pyx_obj_9networkit_10centrality_ApproxElectricalCloseness *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_25ApproxElectricalCloseness_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_ApproxElectricalCloseness *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__74, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.ApproxElectricalCloseness.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1946
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self, Graph G, double eps = 0.1):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _ApproxSpanningEdge(G._this, eps)
 */

/* Python wrapper */
static int __pyx_pw_9networkit_10centrality_18ApproxSpanningEdge_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9networkit_10centrality_18ApproxSpanningEdge_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G = 0;
  double __pyx_v_eps;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_eps,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_eps);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1946, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = ((struct __pyx_obj_9networkit_5graph_Graph *)values[0]);
    if (values[1]) {
      __pyx_v_eps = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_eps == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1946, __pyx_L3_error)
    } else {
      __pyx_v_eps = ((double)0.1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1946, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.ApproxSpanningEdge.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_G), __pyx_ptype_9networkit_5graph_Graph, 1, "G", 0))) __PYX_ERR(0, 1946, __pyx_L1_error)
  __pyx_r = __pyx_pf_9networkit_10centrality_18ApproxSpanningEdge___cinit__(((struct __pyx_obj_9networkit_10centrality_ApproxSpanningEdge *)__pyx_v_self), __pyx_v_G, __pyx_v_eps);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9networkit_10centrality_18ApproxSpanningEdge___cinit__(struct __pyx_obj_9networkit_10centrality_ApproxSpanningEdge *__pyx_v_self, struct __pyx_obj_9networkit_5graph_Graph *__pyx_v_G, double __pyx_v_eps) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  NetworKit::ApproxSpanningEdge *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "networkit/centrality.pyx":1947
 * 
 * 	def __cinit__(self, Graph G, double eps = 0.1):
 * 		self._G = G             # <<<<<<<<<<<<<<
 * 		self._this = new _ApproxSpanningEdge(G._this, eps)
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_G));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_G));
  __Pyx_GOTREF(__pyx_v_self->_G);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_G));
  __pyx_v_self->_G = __pyx_v_G;

  /* "networkit/centrality.pyx":1948
 * 	def __cinit__(self, Graph G, double eps = 0.1):
 * 		self._G = G
 * 		self._this = new _ApproxSpanningEdge(G._this, eps)             # <<<<<<<<<<<<<<
 * 
 * 	def scores(self):
 */
  try {
    __pyx_t_1 = new NetworKit::ApproxSpanningEdge(__pyx_v_G->_this, __pyx_v_eps);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1948, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base._this = __pyx_t_1;

  /* "networkit/centrality.pyx":1946
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self, Graph G, double eps = 0.1):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _ApproxSpanningEdge(G._this, eps)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.centrality.ApproxSpanningEdge.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1950
 * 		self._this = new _ApproxSpanningEdge(G._this, eps)
 * 
 * 	def scores(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Return the spanning edge approximation for each edge of the graph.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_18ApproxSpanningEdge_3scores(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_9networkit_10centrality_18ApproxSpanningEdge_2scores[] = "\n\t\tReturn the spanning edge approximation for each edge of the graph.\n\n\n\t\tReturns:\n\t\t--------\n\t\tlist\n\t\t\tSpanning edge approximation for each edge of the input graph.\n\t\t";
static PyObject *__pyx_pw_9networkit_10centrality_18ApproxSpanningEdge_3scores(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scores (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_18ApproxSpanningEdge_2scores(((struct __pyx_obj_9networkit_10centrality_ApproxSpanningEdge *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_18ApproxSpanningEdge_2scores(struct __pyx_obj_9networkit_10centrality_ApproxSpanningEdge *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<__pyx_t_9networkit_10centrality_edgeweight>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("scores", 0);

  /* "networkit/centrality.pyx":1960
 * 			Spanning edge approximation for each edge of the input graph.
 * 		"""
 * 		return (<_ApproxSpanningEdge*>(self._this)).scores();             # <<<<<<<<<<<<<<
 * 
 * def ranking(G, algorithm=Betweenness, normalized=False):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((NetworKit::ApproxSpanningEdge *)__pyx_v_self->__pyx_base._this)->scores();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1960, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py___pyx_t_9networkit_10centrality_edgeweight(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1960, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":1950
 * 		self._this = new _ApproxSpanningEdge(G._this, eps)
 * 
 * 	def scores(self):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Return the spanning edge approximation for each edge of the graph.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.centrality.ApproxSpanningEdge.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_18ApproxSpanningEdge_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_18ApproxSpanningEdge_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_18ApproxSpanningEdge_4__reduce_cython__(((struct __pyx_obj_9networkit_10centrality_ApproxSpanningEdge *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_18ApproxSpanningEdge_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_ApproxSpanningEdge *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__75, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.ApproxSpanningEdge.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_18ApproxSpanningEdge_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9networkit_10centrality_18ApproxSpanningEdge_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_18ApproxSpanningEdge_6__setstate_cython__(((struct __pyx_obj_9networkit_10centrality_ApproxSpanningEdge *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_18ApproxSpanningEdge_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9networkit_10centrality_ApproxSpanningEdge *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__76, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.ApproxSpanningEdge.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1962
 * 		return (<_ApproxSpanningEdge*>(self._this)).scores();
 * 
 * def ranking(G, algorithm=Betweenness, normalized=False):             # <<<<<<<<<<<<<<
 * 	""" Return a ranking of nodes by the specified centrality type"""
 * 	# FIXME: some centrality algorithms take more Parameters:
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_1ranking(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_10centrality_ranking[] = " Return a ranking of nodes by the specified centrality type";
static PyMethodDef __pyx_mdef_9networkit_10centrality_1ranking = {"ranking", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_10centrality_1ranking, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_10centrality_ranking};
static PyObject *__pyx_pw_9networkit_10centrality_1ranking(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_G = 0;
  PyObject *__pyx_v_algorithm = 0;
  PyObject *__pyx_v_normalized = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ranking (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_algorithm,&__pyx_n_s_normalized,0};
    PyObject* values[3] = {0,0,0};
    values[1] = __pyx_k__77;
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_algorithm);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_normalized);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "ranking") < 0)) __PYX_ERR(0, 1962, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = values[0];
    __pyx_v_algorithm = values[1];
    __pyx_v_normalized = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("ranking", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1962, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.ranking", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_10centrality_ranking(__pyx_self, __pyx_v_G, __pyx_v_algorithm, __pyx_v_normalized);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_ranking(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_G, PyObject *__pyx_v_algorithm, PyObject *__pyx_v_normalized) {
  PyObject *__pyx_v_centrality = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ranking", 0);

  /* "networkit/centrality.pyx":1965
 * 	""" Return a ranking of nodes by the specified centrality type"""
 * 	# FIXME: some centrality algorithms take more Parameters:
 * 	centrality = algorithm(G, normalized)             # <<<<<<<<<<<<<<
 * 	centrality.run()
 * 	return centrality.ranking()
 */
  __Pyx_INCREF(__pyx_v_algorithm);
  __pyx_t_2 = __pyx_v_algorithm; __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_G, __pyx_v_normalized};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1965, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_G, __pyx_v_normalized};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1965, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1965, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_G);
    __Pyx_GIVEREF(__pyx_v_G);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_G);
    __Pyx_INCREF(__pyx_v_normalized);
    __Pyx_GIVEREF(__pyx_v_normalized);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_normalized);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1965, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_centrality = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/centrality.pyx":1966
 * 	# FIXME: some centrality algorithms take more Parameters:
 * 	centrality = algorithm(G, normalized)
 * 	centrality.run()             # <<<<<<<<<<<<<<
 * 	return centrality.ranking()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_centrality, __pyx_n_s_run); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1966, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1966, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/centrality.pyx":1967
 * 	centrality = algorithm(G, normalized)
 * 	centrality.run()
 * 	return centrality.ranking()             # <<<<<<<<<<<<<<
 * 
 * def scores(G, algorithm=Betweenness, normalized=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_centrality, __pyx_n_s_ranking); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1967, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1967, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":1962
 * 		return (<_ApproxSpanningEdge*>(self._this)).scores();
 * 
 * def ranking(G, algorithm=Betweenness, normalized=False):             # <<<<<<<<<<<<<<
 * 	""" Return a ranking of nodes by the specified centrality type"""
 * 	# FIXME: some centrality algorithms take more Parameters:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("networkit.centrality.ranking", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_centrality);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1969
 * 	return centrality.ranking()
 * 
 * def scores(G, algorithm=Betweenness, normalized=False):             # <<<<<<<<<<<<<<
 * 	""" Return the centrality scores of nodes using the specified centrality type"""
 * 	centrality = algorithm(G, normalized)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_3scores(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_10centrality_2scores[] = " Return the centrality scores of nodes using the specified centrality type";
static PyMethodDef __pyx_mdef_9networkit_10centrality_3scores = {"scores", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_10centrality_3scores, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_10centrality_2scores};
static PyObject *__pyx_pw_9networkit_10centrality_3scores(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_G = 0;
  PyObject *__pyx_v_algorithm = 0;
  PyObject *__pyx_v_normalized = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scores (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_G,&__pyx_n_s_algorithm,&__pyx_n_s_normalized,0};
    PyObject* values[3] = {0,0,0};
    values[1] = __pyx_k__78;
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_algorithm);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_normalized);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "scores") < 0)) __PYX_ERR(0, 1969, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_G = values[0];
    __pyx_v_algorithm = values[1];
    __pyx_v_normalized = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("scores", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1969, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_10centrality_2scores(__pyx_self, __pyx_v_G, __pyx_v_algorithm, __pyx_v_normalized);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_2scores(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_G, PyObject *__pyx_v_algorithm, PyObject *__pyx_v_normalized) {
  PyObject *__pyx_v_centrality = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("scores", 0);

  /* "networkit/centrality.pyx":1971
 * def scores(G, algorithm=Betweenness, normalized=False):
 * 	""" Return the centrality scores of nodes using the specified centrality type"""
 * 	centrality = algorithm(G, normalized)             # <<<<<<<<<<<<<<
 * 	centrality.run()
 * 	return centrality.scores()
 */
  __Pyx_INCREF(__pyx_v_algorithm);
  __pyx_t_2 = __pyx_v_algorithm; __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_G, __pyx_v_normalized};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1971, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_G, __pyx_v_normalized};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1971, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1971, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_G);
    __Pyx_GIVEREF(__pyx_v_G);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_G);
    __Pyx_INCREF(__pyx_v_normalized);
    __Pyx_GIVEREF(__pyx_v_normalized);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_normalized);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1971, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_centrality = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/centrality.pyx":1972
 * 	""" Return the centrality scores of nodes using the specified centrality type"""
 * 	centrality = algorithm(G, normalized)
 * 	centrality.run()             # <<<<<<<<<<<<<<
 * 	return centrality.scores()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_centrality, __pyx_n_s_run); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1972, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1972, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/centrality.pyx":1973
 * 	centrality = algorithm(G, normalized)
 * 	centrality.run()
 * 	return centrality.scores()             # <<<<<<<<<<<<<<
 * 
 * def rankPerNode(ranking):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_centrality, __pyx_n_s_scores); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1973, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1973, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":1969
 * 	return centrality.ranking()
 * 
 * def scores(G, algorithm=Betweenness, normalized=False):             # <<<<<<<<<<<<<<
 * 	""" Return the centrality scores of nodes using the specified centrality type"""
 * 	centrality = algorithm(G, normalized)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("networkit.centrality.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_centrality);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1975
 * 	return centrality.scores()
 * 
 * def rankPerNode(ranking):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Parameters:
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_5rankPerNode(PyObject *__pyx_self, PyObject *__pyx_v_ranking); /*proto*/
static char __pyx_doc_9networkit_10centrality_4rankPerNode[] = "\n\tParameters:\n\t-----------\n \tranking: ordered list of tuples (node, score)\n\n\tReturns:\n\t--------\n\tfor each node (sorted by node ID), the ranking of the node\n\n\t";
static PyMethodDef __pyx_mdef_9networkit_10centrality_5rankPerNode = {"rankPerNode", (PyCFunction)__pyx_pw_9networkit_10centrality_5rankPerNode, METH_O, __pyx_doc_9networkit_10centrality_4rankPerNode};
static PyObject *__pyx_pw_9networkit_10centrality_5rankPerNode(PyObject *__pyx_self, PyObject *__pyx_v_ranking) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rankPerNode (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_4rankPerNode(__pyx_self, ((PyObject *)__pyx_v_ranking));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_4rankPerNode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_ranking) {
  Py_ssize_t __pyx_v_n_nodes;
  PyObject *__pyx_v_ranking_id = NULL;
  PyObject *__pyx_v_index = NULL;
  PyObject *__pyx_v_pair = NULL;
  PyObject *__pyx_v_prev_node = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("rankPerNode", 0);

  /* "networkit/centrality.pyx":1986
 * 
 * 	"""
 * 	n_nodes = len(ranking)             # <<<<<<<<<<<<<<
 * 	ranking_id = [0]*n_nodes
 * 	for index, pair in enumerate(ranking):
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_ranking); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1986, __pyx_L1_error)
  __pyx_v_n_nodes = __pyx_t_1;

  /* "networkit/centrality.pyx":1987
 * 	"""
 * 	n_nodes = len(ranking)
 * 	ranking_id = [0]*n_nodes             # <<<<<<<<<<<<<<
 * 	for index, pair in enumerate(ranking):
 * 		ranking_id[pair[0]] = index
 */
  __pyx_t_2 = PyList_New(1 * ((__pyx_v_n_nodes<0) ? 0:__pyx_v_n_nodes)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1987, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  { Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < __pyx_v_n_nodes; __pyx_temp++) {
      __Pyx_INCREF(__pyx_int_0);
      __Pyx_GIVEREF(__pyx_int_0);
      PyList_SET_ITEM(__pyx_t_2, __pyx_temp, __pyx_int_0);
    }
  }
  __pyx_v_ranking_id = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "networkit/centrality.pyx":1988
 * 	n_nodes = len(ranking)
 * 	ranking_id = [0]*n_nodes
 * 	for index, pair in enumerate(ranking):             # <<<<<<<<<<<<<<
 * 		ranking_id[pair[0]] = index
 * 	#we assign to all nodes the ranking of the first node with the same score
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_2 = __pyx_int_0;
  if (likely(PyList_CheckExact(__pyx_v_ranking)) || PyTuple_CheckExact(__pyx_v_ranking)) {
    __pyx_t_3 = __pyx_v_ranking; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_ranking); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1988, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1988, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 1988, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1988, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 1988, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1988, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_3);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1988, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_pair, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_index, __pyx_t_2);
    __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1988, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "networkit/centrality.pyx":1989
 * 	ranking_id = [0]*n_nodes
 * 	for index, pair in enumerate(ranking):
 * 		ranking_id[pair[0]] = index             # <<<<<<<<<<<<<<
 * 	#we assign to all nodes the ranking of the first node with the same score
 * 	for index, pair in enumerate(ranking):
 */
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_pair, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1989, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(PyObject_SetItem(__pyx_v_ranking_id, __pyx_t_5, __pyx_v_index) < 0)) __PYX_ERR(0, 1989, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "networkit/centrality.pyx":1988
 * 	n_nodes = len(ranking)
 * 	ranking_id = [0]*n_nodes
 * 	for index, pair in enumerate(ranking):             # <<<<<<<<<<<<<<
 * 		ranking_id[pair[0]] = index
 * 	#we assign to all nodes the ranking of the first node with the same score
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/centrality.pyx":1991
 * 		ranking_id[pair[0]] = index
 * 	#we assign to all nodes the ranking of the first node with the same score
 * 	for index, pair in enumerate(ranking):             # <<<<<<<<<<<<<<
 * 			if index == 0:
 * 				continue
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_2 = __pyx_int_0;
  if (likely(PyList_CheckExact(__pyx_v_ranking)) || PyTuple_CheckExact(__pyx_v_ranking)) {
    __pyx_t_3 = __pyx_v_ranking; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_ranking); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1991, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1991, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 1991, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1991, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 1991, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1991, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_3);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1991, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_pair, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_index, __pyx_t_2);
    __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1991, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "networkit/centrality.pyx":1992
 * 	#we assign to all nodes the ranking of the first node with the same score
 * 	for index, pair in enumerate(ranking):
 * 			if index == 0:             # <<<<<<<<<<<<<<
 * 				continue
 * 			if pair[1] == ranking[index-1][1]:
 */
    __pyx_t_5 = __Pyx_PyInt_EqObjC(__pyx_v_index, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1992, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1992, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_6) {

      /* "networkit/centrality.pyx":1993
 * 	for index, pair in enumerate(ranking):
 * 			if index == 0:
 * 				continue             # <<<<<<<<<<<<<<
 * 			if pair[1] == ranking[index-1][1]:
 * 				prev_node = ranking[index-1][0]
 */
      goto __pyx_L5_continue;

      /* "networkit/centrality.pyx":1992
 * 	#we assign to all nodes the ranking of the first node with the same score
 * 	for index, pair in enumerate(ranking):
 * 			if index == 0:             # <<<<<<<<<<<<<<
 * 				continue
 * 			if pair[1] == ranking[index-1][1]:
 */
    }

    /* "networkit/centrality.pyx":1994
 * 			if index == 0:
 * 				continue
 * 			if pair[1] == ranking[index-1][1]:             # <<<<<<<<<<<<<<
 * 				prev_node = ranking[index-1][0]
 * 				ranking_id[pair[0]] = ranking_id[prev_node]
 */
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_pair, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1994, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __Pyx_PyInt_SubtractObjC(__pyx_v_index, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1994, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_v_ranking, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1994, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_8, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1994, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyObject_RichCompare(__pyx_t_5, __pyx_t_7, Py_EQ); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1994, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1994, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (__pyx_t_6) {

      /* "networkit/centrality.pyx":1995
 * 				continue
 * 			if pair[1] == ranking[index-1][1]:
 * 				prev_node = ranking[index-1][0]             # <<<<<<<<<<<<<<
 * 				ranking_id[pair[0]] = ranking_id[prev_node]
 * 	return ranking_id
 */
      __pyx_t_8 = __Pyx_PyInt_SubtractObjC(__pyx_v_index, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1995, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_v_ranking, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1995, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_7, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1995, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF_SET(__pyx_v_prev_node, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "networkit/centrality.pyx":1996
 * 			if pair[1] == ranking[index-1][1]:
 * 				prev_node = ranking[index-1][0]
 * 				ranking_id[pair[0]] = ranking_id[prev_node]             # <<<<<<<<<<<<<<
 * 	return ranking_id
 * 
 */
      __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_v_ranking_id, __pyx_v_prev_node); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1996, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_pair, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1996, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (unlikely(PyObject_SetItem(__pyx_v_ranking_id, __pyx_t_7, __pyx_t_8) < 0)) __PYX_ERR(0, 1996, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "networkit/centrality.pyx":1994
 * 			if index == 0:
 * 				continue
 * 			if pair[1] == ranking[index-1][1]:             # <<<<<<<<<<<<<<
 * 				prev_node = ranking[index-1][0]
 * 				ranking_id[pair[0]] = ranking_id[prev_node]
 */
    }

    /* "networkit/centrality.pyx":1991
 * 		ranking_id[pair[0]] = index
 * 	#we assign to all nodes the ranking of the first node with the same score
 * 	for index, pair in enumerate(ranking):             # <<<<<<<<<<<<<<
 * 			if index == 0:
 * 				continue
 */
    __pyx_L5_continue:;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/centrality.pyx":1997
 * 				prev_node = ranking[index-1][0]
 * 				ranking_id[pair[0]] = ranking_id[prev_node]
 * 	return ranking_id             # <<<<<<<<<<<<<<
 * 
 * def relativeRankErrors(rx, ry):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ranking_id);
  __pyx_r = __pyx_v_ranking_id;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":1975
 * 	return centrality.scores()
 * 
 * def rankPerNode(ranking):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Parameters:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("networkit.centrality.rankPerNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ranking_id);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_XDECREF(__pyx_v_pair);
  __Pyx_XDECREF(__pyx_v_prev_node);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":1999
 * 	return ranking_id
 * 
 * def relativeRankErrors(rx, ry):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Let $r_x(u)$ be the rank of node $u$ in ranking $x$.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_7relativeRankErrors(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_10centrality_6relativeRankErrors[] = "\n\tLet $r_x(u)$ be the rank of node $u$ in ranking $x$.\n\tThe relative rank error of node $u$ is defined as\n\t\t$$r_x(u) / r_y(u)$$\n\n\n\tParameters:\n\t-----------\n\trx : list\n\t\tranking - ordered list of tuples (node, score)\n\n\try:  list\n\t\tranking - ordered list of tuples (node, score)\n\n\tReturns:\n\t--------\n\tlist of rank errors ordered by node ID\n\n\t";
static PyMethodDef __pyx_mdef_9networkit_10centrality_7relativeRankErrors = {"relativeRankErrors", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_10centrality_7relativeRankErrors, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_10centrality_6relativeRankErrors};
static PyObject *__pyx_pw_9networkit_10centrality_7relativeRankErrors(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_rx = 0;
  PyObject *__pyx_v_ry = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("relativeRankErrors (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_rx,&__pyx_n_s_ry,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rx)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ry)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("relativeRankErrors", 1, 2, 2, 1); __PYX_ERR(0, 1999, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "relativeRankErrors") < 0)) __PYX_ERR(0, 1999, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_rx = values[0];
    __pyx_v_ry = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("relativeRankErrors", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1999, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.relativeRankErrors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_10centrality_6relativeRankErrors(__pyx_self, __pyx_v_rx, __pyx_v_ry);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_6relativeRankErrors(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_rx, PyObject *__pyx_v_ry) {
  PyObject *__pyx_v_diff = NULL;
  Py_ssize_t __pyx_v_n;
  PyObject *__pyx_v_rnode_x = NULL;
  PyObject *__pyx_v_rnode_y = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("relativeRankErrors", 0);

  /* "networkit/centrality.pyx":2019
 * 
 * 	"""
 * 	diff = []             # <<<<<<<<<<<<<<
 * 	n = len(rx)
 * 	if not(n == len(ry)):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2019, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_diff = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "networkit/centrality.pyx":2020
 * 	"""
 * 	diff = []
 * 	n = len(rx)             # <<<<<<<<<<<<<<
 * 	if not(n == len(ry)):
 * 		return diff
 */
  __pyx_t_2 = PyObject_Length(__pyx_v_rx); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2020, __pyx_L1_error)
  __pyx_v_n = __pyx_t_2;

  /* "networkit/centrality.pyx":2021
 * 	diff = []
 * 	n = len(rx)
 * 	if not(n == len(ry)):             # <<<<<<<<<<<<<<
 * 		return diff
 * 	rnode_x = rankPerNode(rx)
 */
  __pyx_t_2 = PyObject_Length(__pyx_v_ry); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2021, __pyx_L1_error)
  __pyx_t_3 = ((!((__pyx_v_n == __pyx_t_2) != 0)) != 0);
  if (__pyx_t_3) {

    /* "networkit/centrality.pyx":2022
 * 	n = len(rx)
 * 	if not(n == len(ry)):
 * 		return diff             # <<<<<<<<<<<<<<
 * 	rnode_x = rankPerNode(rx)
 * 	rnode_y = rankPerNode(ry)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_diff);
    __pyx_r = __pyx_v_diff;
    goto __pyx_L0;

    /* "networkit/centrality.pyx":2021
 * 	diff = []
 * 	n = len(rx)
 * 	if not(n == len(ry)):             # <<<<<<<<<<<<<<
 * 		return diff
 * 	rnode_x = rankPerNode(rx)
 */
  }

  /* "networkit/centrality.pyx":2023
 * 	if not(n == len(ry)):
 * 		return diff
 * 	rnode_x = rankPerNode(rx)             # <<<<<<<<<<<<<<
 * 	rnode_y = rankPerNode(ry)
 * 	for i in range(n):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_rankPerNode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2023, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_rx) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_rx);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2023, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_rnode_x = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/centrality.pyx":2024
 * 		return diff
 * 	rnode_x = rankPerNode(rx)
 * 	rnode_y = rankPerNode(ry)             # <<<<<<<<<<<<<<
 * 	for i in range(n):
 * 		diff.append((rnode_x[i]+1)/(rnode_y[i]+1))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_rankPerNode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2024, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_ry) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_ry);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2024, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_rnode_y = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/centrality.pyx":2025
 * 	rnode_x = rankPerNode(rx)
 * 	rnode_y = rankPerNode(ry)
 * 	for i in range(n):             # <<<<<<<<<<<<<<
 * 		diff.append((rnode_x[i]+1)/(rnode_y[i]+1))
 * 	return diff
 */
  __pyx_t_2 = __pyx_v_n;
  __pyx_t_6 = __pyx_t_2;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "networkit/centrality.pyx":2026
 * 	rnode_y = rankPerNode(ry)
 * 	for i in range(n):
 * 		diff.append((rnode_x[i]+1)/(rnode_y[i]+1))             # <<<<<<<<<<<<<<
 * 	return diff
 * 
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_rnode_x, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2026, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2026, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_rnode_y, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2026, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2026, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2026, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_diff, __pyx_t_1); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 2026, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "networkit/centrality.pyx":2027
 * 	for i in range(n):
 * 		diff.append((rnode_x[i]+1)/(rnode_y[i]+1))
 * 	return diff             # <<<<<<<<<<<<<<
 * 
 * class SpectralCentrality:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_diff);
  __pyx_r = __pyx_v_diff;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":1999
 * 	return ranking_id
 * 
 * def relativeRankErrors(rx, ry):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Let $r_x(u)$ be the rank of node $u$ in ranking $x$.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("networkit.centrality.relativeRankErrors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_diff);
  __Pyx_XDECREF(__pyx_v_rnode_x);
  __Pyx_XDECREF(__pyx_v_rnode_y);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":2034
 * 	to generate the correct matrices and do the correct normalization.
 * 	"""
 * 	def __init__(self, G, normalized=False):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Constructor.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_18SpectralCentrality_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_9networkit_10centrality_18SpectralCentrality___init__[] = "\n\t\tConstructor.\n\n\t\tParameters:\n\t\t-----------\n\t\tG : graph\n\t\t\tThe graph of which to compute the centrality\n\t\tnormalized : boolean\n\t\t\t\t\t Whether to normalize the results or not\n\n\t\t";
static PyMethodDef __pyx_mdef_9networkit_10centrality_18SpectralCentrality_1__init__ = {"__init__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_10centrality_18SpectralCentrality_1__init__, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_10centrality_18SpectralCentrality___init__};
static PyObject *__pyx_pw_9networkit_10centrality_18SpectralCentrality_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_G = 0;
  PyObject *__pyx_v_normalized = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_G,&__pyx_n_s_normalized,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)((PyObject *)Py_False));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 3, 1); __PYX_ERR(0, 2034, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_normalized);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 2034, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_G = values[1];
    __pyx_v_normalized = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2034, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.SpectralCentrality.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_10centrality_18SpectralCentrality___init__(__pyx_self, __pyx_v_self, __pyx_v_G, __pyx_v_normalized);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_18SpectralCentrality___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_G, PyObject *__pyx_v_normalized) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "networkit/centrality.pyx":2046
 * 
 * 		"""
 * 		super(SpectralCentrality, self).__init__()             # <<<<<<<<<<<<<<
 * 
 * 		self.graph = G
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_SpectralCentrality); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2046, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2046, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_self);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2046, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_init); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2046, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2046, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/centrality.pyx":2048
 * 		super(SpectralCentrality, self).__init__()
 * 
 * 		self.graph = G             # <<<<<<<<<<<<<<
 * 		self.normalized = normalized
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_graph, __pyx_v_G) < 0) __PYX_ERR(0, 2048, __pyx_L1_error)

  /* "networkit/centrality.pyx":2049
 * 
 * 		self.graph = G
 * 		self.normalized = normalized             # <<<<<<<<<<<<<<
 * 
 * 		self.scoreList = None
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_normalized, __pyx_v_normalized) < 0) __PYX_ERR(0, 2049, __pyx_L1_error)

  /* "networkit/centrality.pyx":2051
 * 		self.normalized = normalized
 * 
 * 		self.scoreList = None             # <<<<<<<<<<<<<<
 * 		self.rankList = None
 * 		self.evz = {}
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_scoreList, Py_None) < 0) __PYX_ERR(0, 2051, __pyx_L1_error)

  /* "networkit/centrality.pyx":2052
 * 
 * 		self.scoreList = None
 * 		self.rankList = None             # <<<<<<<<<<<<<<
 * 		self.evz = {}
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_rankList, Py_None) < 0) __PYX_ERR(0, 2052, __pyx_L1_error)

  /* "networkit/centrality.pyx":2053
 * 		self.scoreList = None
 * 		self.rankList = None
 * 		self.evz = {}             # <<<<<<<<<<<<<<
 * 
 * 	def prepareSpectrum(self):
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_evz, __pyx_t_1) < 0) __PYX_ERR(0, 2053, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/centrality.pyx":2034
 * 	to generate the correct matrices and do the correct normalization.
 * 	"""
 * 	def __init__(self, G, normalized=False):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Constructor.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.centrality.SpectralCentrality.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":2055
 * 		self.evz = {}
 * 
 * 	def prepareSpectrum(self):             # <<<<<<<<<<<<<<
 * 		""" Method that must be implemented to set the following values:
 * 		self.eigenvectors = list of eigenvectors desired for centrality measure
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_18SpectralCentrality_3prepareSpectrum(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_9networkit_10centrality_18SpectralCentrality_2prepareSpectrum[] = " Method that must be implemented to set the following values:\n\t\tself.eigenvectors = list of eigenvectors desired for centrality measure\n\t\tself.eigenvalues = list of corresponding eigenvalues\n\t\t";
static PyMethodDef __pyx_mdef_9networkit_10centrality_18SpectralCentrality_3prepareSpectrum = {"prepareSpectrum", (PyCFunction)__pyx_pw_9networkit_10centrality_18SpectralCentrality_3prepareSpectrum, METH_O, __pyx_doc_9networkit_10centrality_18SpectralCentrality_2prepareSpectrum};
static PyObject *__pyx_pw_9networkit_10centrality_18SpectralCentrality_3prepareSpectrum(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prepareSpectrum (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_18SpectralCentrality_2prepareSpectrum(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_18SpectralCentrality_2prepareSpectrum(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("prepareSpectrum", 0);

  /* "networkit/centrality.pyx":2060
 * 		self.eigenvalues = list of corresponding eigenvalues
 * 		"""
 * 		raise NotImplemented             # <<<<<<<<<<<<<<
 * 
 * 	def normFactor(self):
 */
  __Pyx_Raise(__pyx_builtin_NotImplemented, 0, 0, 0);
  __PYX_ERR(0, 2060, __pyx_L1_error)

  /* "networkit/centrality.pyx":2055
 * 		self.evz = {}
 * 
 * 	def prepareSpectrum(self):             # <<<<<<<<<<<<<<
 * 		""" Method that must be implemented to set the following values:
 * 		self.eigenvectors = list of eigenvectors desired for centrality measure
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.centrality.SpectralCentrality.prepareSpectrum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":2062
 * 		raise NotImplemented
 * 
 * 	def normFactor(self):             # <<<<<<<<<<<<<<
 * 		""" Method that must be implemented to return a correct normalization factor"""
 * 		raise NotImplemented
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_18SpectralCentrality_5normFactor(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_9networkit_10centrality_18SpectralCentrality_4normFactor[] = " Method that must be implemented to return a correct normalization factor";
static PyMethodDef __pyx_mdef_9networkit_10centrality_18SpectralCentrality_5normFactor = {"normFactor", (PyCFunction)__pyx_pw_9networkit_10centrality_18SpectralCentrality_5normFactor, METH_O, __pyx_doc_9networkit_10centrality_18SpectralCentrality_4normFactor};
static PyObject *__pyx_pw_9networkit_10centrality_18SpectralCentrality_5normFactor(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normFactor (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_18SpectralCentrality_4normFactor(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_18SpectralCentrality_4normFactor(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("normFactor", 0);

  /* "networkit/centrality.pyx":2064
 * 	def normFactor(self):
 * 		""" Method that must be implemented to return a correct normalization factor"""
 * 		raise NotImplemented             # <<<<<<<<<<<<<<
 * 
 * 	def run(self):
 */
  __Pyx_Raise(__pyx_builtin_NotImplemented, 0, 0, 0);
  __PYX_ERR(0, 2064, __pyx_L1_error)

  /* "networkit/centrality.pyx":2062
 * 		raise NotImplemented
 * 
 * 	def normFactor(self):             # <<<<<<<<<<<<<<
 * 		""" Method that must be implemented to return a correct normalization factor"""
 * 		raise NotImplemented
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("networkit.centrality.SpectralCentrality.normFactor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":2066
 * 		raise NotImplemented
 * 
 * 	def run(self):             # <<<<<<<<<<<<<<
 * 		self.prepareSpectrum()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_18SpectralCentrality_7run(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_10centrality_18SpectralCentrality_7run = {"run", (PyCFunction)__pyx_pw_9networkit_10centrality_18SpectralCentrality_7run, METH_O, 0};
static PyObject *__pyx_pw_9networkit_10centrality_18SpectralCentrality_7run(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("run (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_18SpectralCentrality_6run(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_18SpectralCentrality_6run(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_normFactor = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("run", 0);

  /* "networkit/centrality.pyx":2067
 * 
 * 	def run(self):
 * 		self.prepareSpectrum()             # <<<<<<<<<<<<<<
 * 
 * 		self.scoreList = None
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_prepareSpectrum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/centrality.pyx":2069
 * 		self.prepareSpectrum()
 * 
 * 		self.scoreList = None             # <<<<<<<<<<<<<<
 * 		self.rankList = None
 * 		self.evz = {}
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_scoreList, Py_None) < 0) __PYX_ERR(0, 2069, __pyx_L1_error)

  /* "networkit/centrality.pyx":2070
 * 
 * 		self.scoreList = None
 * 		self.rankList = None             # <<<<<<<<<<<<<<
 * 		self.evz = {}
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_rankList, Py_None) < 0) __PYX_ERR(0, 2070, __pyx_L1_error)

  /* "networkit/centrality.pyx":2071
 * 		self.scoreList = None
 * 		self.rankList = None
 * 		self.evz = {}             # <<<<<<<<<<<<<<
 * 
 * 		if self.normalized:
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2071, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_evz, __pyx_t_1) < 0) __PYX_ERR(0, 2071, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/centrality.pyx":2073
 * 		self.evz = {}
 * 
 * 		if self.normalized:             # <<<<<<<<<<<<<<
 * 			normFactor = self.normFactor()
 * 		else:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_normalized); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2073, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 2073, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "networkit/centrality.pyx":2074
 * 
 * 		if self.normalized:
 * 			normFactor = self.normFactor()             # <<<<<<<<<<<<<<
 * 		else:
 * 			normFactor = 1
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_normFactor); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2074, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2074, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_normFactor = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "networkit/centrality.pyx":2073
 * 		self.evz = {}
 * 
 * 		if self.normalized:             # <<<<<<<<<<<<<<
 * 			normFactor = self.normFactor()
 * 		else:
 */
    goto __pyx_L3;
  }

  /* "networkit/centrality.pyx":2076
 * 			normFactor = self.normFactor()
 * 		else:
 * 			normFactor = 1             # <<<<<<<<<<<<<<
 * 
 * 		for v in self.graph.iterNodes():
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_int_1);
    __pyx_v_normFactor = __pyx_int_1;
  }
  __pyx_L3:;

  /* "networkit/centrality.pyx":2078
 * 			normFactor = 1
 * 
 * 		for v in self.graph.iterNodes():             # <<<<<<<<<<<<<<
 * 			self.evz[v] = self.eigenvector[v] * normFactor
 * 		return self
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_graph); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_iterNodes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2078, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2078, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 2078, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2078, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 2078, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2078, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_6(__pyx_t_3);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 2078, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "networkit/centrality.pyx":2079
 * 
 * 		for v in self.graph.iterNodes():
 * 			self.evz[v] = self.eigenvector[v] * normFactor             # <<<<<<<<<<<<<<
 * 		return self
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_eigenvector); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2079, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_v); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2079, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Multiply(__pyx_t_2, __pyx_v_normFactor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2079, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_evz); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2079, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(PyObject_SetItem(__pyx_t_2, __pyx_v_v, __pyx_t_1) < 0)) __PYX_ERR(0, 2079, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "networkit/centrality.pyx":2078
 * 			normFactor = 1
 * 
 * 		for v in self.graph.iterNodes():             # <<<<<<<<<<<<<<
 * 			self.evz[v] = self.eigenvector[v] * normFactor
 * 		return self
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "networkit/centrality.pyx":2080
 * 		for v in self.graph.iterNodes():
 * 			self.evz[v] = self.eigenvector[v] * normFactor
 * 		return self             # <<<<<<<<<<<<<<
 * 
 * 	def scores(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":2066
 * 		raise NotImplemented
 * 
 * 	def run(self):             # <<<<<<<<<<<<<<
 * 		self.prepareSpectrum()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("networkit.centrality.SpectralCentrality.run", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_normFactor);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":2082
 * 		return self
 * 
 * 	def scores(self):             # <<<<<<<<<<<<<<
 * 		if self.scoreList is None:
 * 			self.scoreList = [v for k,v in self.evz.items()]
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_18SpectralCentrality_9scores(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_10centrality_18SpectralCentrality_9scores = {"scores", (PyCFunction)__pyx_pw_9networkit_10centrality_18SpectralCentrality_9scores, METH_O, 0};
static PyObject *__pyx_pw_9networkit_10centrality_18SpectralCentrality_9scores(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scores (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_18SpectralCentrality_8scores(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_18SpectralCentrality_8scores(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *__pyx_7genexpr__pyx_v_k = NULL;
  PyObject *__pyx_7genexpr__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("scores", 0);

  /* "networkit/centrality.pyx":2083
 * 
 * 	def scores(self):
 * 		if self.scoreList is None:             # <<<<<<<<<<<<<<
 * 			self.scoreList = [v for k,v in self.evz.items()]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_scoreList); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__pyx_t_1 == Py_None);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "networkit/centrality.pyx":2084
 * 	def scores(self):
 * 		if self.scoreList is None:
 * 			self.scoreList = [v for k,v in self.evz.items()]             # <<<<<<<<<<<<<<
 * 
 * 		return self.scoreList
 */
    { /* enter inner scope */
      __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2084, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = 0;
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_evz); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2084, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (unlikely(__pyx_t_8 == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
        __PYX_ERR(0, 2084, __pyx_L6_error)
      }
      __pyx_t_9 = __Pyx_dict_iterator(__pyx_t_8, 0, __pyx_n_s_items, (&__pyx_t_6), (&__pyx_t_7)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2084, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_4);
      __pyx_t_4 = __pyx_t_9;
      __pyx_t_9 = 0;
      while (1) {
        __pyx_t_10 = __Pyx_dict_iter_next(__pyx_t_4, __pyx_t_6, &__pyx_t_5, &__pyx_t_9, &__pyx_t_8, NULL, __pyx_t_7);
        if (unlikely(__pyx_t_10 == 0)) break;
        if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 2084, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_k, __pyx_t_9);
        __pyx_t_9 = 0;
        __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_v, __pyx_t_8);
        __pyx_t_8 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_7genexpr__pyx_v_v))) __PYX_ERR(0, 2084, __pyx_L6_error)
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_7genexpr__pyx_v_k); __pyx_7genexpr__pyx_v_k = 0;
      __Pyx_XDECREF(__pyx_7genexpr__pyx_v_v); __pyx_7genexpr__pyx_v_v = 0;
      goto __pyx_L9_exit_scope;
      __pyx_L6_error:;
      __Pyx_XDECREF(__pyx_7genexpr__pyx_v_k); __pyx_7genexpr__pyx_v_k = 0;
      __Pyx_XDECREF(__pyx_7genexpr__pyx_v_v); __pyx_7genexpr__pyx_v_v = 0;
      goto __pyx_L1_error;
      __pyx_L9_exit_scope:;
    } /* exit inner scope */
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_scoreList, __pyx_t_1) < 0) __PYX_ERR(0, 2084, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "networkit/centrality.pyx":2083
 * 
 * 	def scores(self):
 * 		if self.scoreList is None:             # <<<<<<<<<<<<<<
 * 			self.scoreList = [v for k,v in self.evz.items()]
 * 
 */
  }

  /* "networkit/centrality.pyx":2086
 * 			self.scoreList = [v for k,v in self.evz.items()]
 * 
 * 		return self.scoreList             # <<<<<<<<<<<<<<
 * 
 * 	def ranking(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_scoreList); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":2082
 * 		return self
 * 
 * 	def scores(self):             # <<<<<<<<<<<<<<
 * 		if self.scoreList is None:
 * 			self.scoreList = [v for k,v in self.evz.items()]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("networkit.centrality.SpectralCentrality.scores", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_7genexpr__pyx_v_k);
  __Pyx_XDECREF(__pyx_7genexpr__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":2088
 * 		return self.scoreList
 * 
 * 	def ranking(self):             # <<<<<<<<<<<<<<
 * 		if self.rankList is None:
 * 			self.rankList = sorted(self.evz.items(),key=lambda x: float(x[1]), reverse=True)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_18SpectralCentrality_11ranking(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_10centrality_18SpectralCentrality_11ranking = {"ranking", (PyCFunction)__pyx_pw_9networkit_10centrality_18SpectralCentrality_11ranking, METH_O, 0};
static PyObject *__pyx_pw_9networkit_10centrality_18SpectralCentrality_11ranking(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ranking (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_18SpectralCentrality_10ranking(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":2090
 * 	def ranking(self):
 * 		if self.rankList is None:
 * 			self.rankList = sorted(self.evz.items(),key=lambda x: float(x[1]), reverse=True)             # <<<<<<<<<<<<<<
 * 		return self.rankList
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_18SpectralCentrality_7ranking_lambda(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_10centrality_18SpectralCentrality_7ranking_lambda = {"lambda", (PyCFunction)__pyx_pw_9networkit_10centrality_18SpectralCentrality_7ranking_lambda, METH_O, 0};
static PyObject *__pyx_pw_9networkit_10centrality_18SpectralCentrality_7ranking_lambda(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda(__pyx_self, ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_x, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2090, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyNumber_Float(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2090, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("networkit.centrality.SpectralCentrality.ranking.lambda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":2088
 * 		return self.scoreList
 * 
 * 	def ranking(self):             # <<<<<<<<<<<<<<
 * 		if self.rankList is None:
 * 			self.rankList = sorted(self.evz.items(),key=lambda x: float(x[1]), reverse=True)
 */

static PyObject *__pyx_pf_9networkit_10centrality_18SpectralCentrality_10ranking(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ranking", 0);

  /* "networkit/centrality.pyx":2089
 * 
 * 	def ranking(self):
 * 		if self.rankList is None:             # <<<<<<<<<<<<<<
 * 			self.rankList = sorted(self.evz.items(),key=lambda x: float(x[1]), reverse=True)
 * 		return self.rankList
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_rankList); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2089, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__pyx_t_1 == Py_None);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "networkit/centrality.pyx":2090
 * 	def ranking(self):
 * 		if self.rankList is None:
 * 			self.rankList = sorted(self.evz.items(),key=lambda x: float(x[1]), reverse=True)             # <<<<<<<<<<<<<<
 * 		return self.rankList
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_evz); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2090, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_items); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2090, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2090, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2090, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2090, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_10centrality_18SpectralCentrality_7ranking_lambda, 0, __pyx_n_s_SpectralCentrality_ranking_local, NULL, __pyx_n_s_networkit_centrality, __pyx_d, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2090, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_key, __pyx_t_4) < 0) __PYX_ERR(0, 2090, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_reverse, Py_True) < 0) __PYX_ERR(0, 2090, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2090, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_rankList, __pyx_t_4) < 0) __PYX_ERR(0, 2090, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "networkit/centrality.pyx":2089
 * 
 * 	def ranking(self):
 * 		if self.rankList is None:             # <<<<<<<<<<<<<<
 * 			self.rankList = sorted(self.evz.items(),key=lambda x: float(x[1]), reverse=True)
 * 		return self.rankList
 */
  }

  /* "networkit/centrality.pyx":2091
 * 		if self.rankList is None:
 * 			self.rankList = sorted(self.evz.items(),key=lambda x: float(x[1]), reverse=True)
 * 		return self.rankList             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_rankList); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2091, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":2088
 * 		return self.scoreList
 * 
 * 	def ranking(self):             # <<<<<<<<<<<<<<
 * 		if self.rankList is None:
 * 			self.rankList = sorted(self.evz.items(),key=lambda x: float(x[1]), reverse=True)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("networkit.centrality.SpectralCentrality.ranking", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":2106
 * 
 * 	"""
 * 	def __init__(self, G, normalized=False):             # <<<<<<<<<<<<<<
 * 		if G.isDirected():
 * 			raise NotImplementedError("Not implemented for directed graphs; use centrality.EigenvectorCentrality instead")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_8SciPyEVZ_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_10centrality_8SciPyEVZ_1__init__ = {"__init__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_10centrality_8SciPyEVZ_1__init__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_10centrality_8SciPyEVZ_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_G = 0;
  PyObject *__pyx_v_normalized = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_G,&__pyx_n_s_normalized,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)((PyObject *)Py_False));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 3, 1); __PYX_ERR(0, 2106, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_normalized);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 2106, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_G = values[1];
    __pyx_v_normalized = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2106, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.SciPyEVZ.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_10centrality_8SciPyEVZ___init__(__pyx_self, __pyx_v_self, __pyx_v_G, __pyx_v_normalized);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_8SciPyEVZ___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_G, PyObject *__pyx_v_normalized) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "networkit/centrality.pyx":2107
 * 	"""
 * 	def __init__(self, G, normalized=False):
 * 		if G.isDirected():             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError("Not implemented for directed graphs; use centrality.EigenvectorCentrality instead")
 * 		super(SciPyEVZ, self).__init__(G, normalized=normalized)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_G, __pyx_n_s_isDirected); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 2107, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "networkit/centrality.pyx":2108
 * 	def __init__(self, G, normalized=False):
 * 		if G.isDirected():
 * 			raise NotImplementedError("Not implemented for directed graphs; use centrality.EigenvectorCentrality instead")             # <<<<<<<<<<<<<<
 * 		super(SciPyEVZ, self).__init__(G, normalized=normalized)
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__79, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2108, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 2108, __pyx_L1_error)

    /* "networkit/centrality.pyx":2107
 * 	"""
 * 	def __init__(self, G, normalized=False):
 * 		if G.isDirected():             # <<<<<<<<<<<<<<
 * 			raise NotImplementedError("Not implemented for directed graphs; use centrality.EigenvectorCentrality instead")
 * 		super(SciPyEVZ, self).__init__(G, normalized=normalized)
 */
  }

  /* "networkit/centrality.pyx":2109
 * 		if G.isDirected():
 * 			raise NotImplementedError("Not implemented for directed graphs; use centrality.EigenvectorCentrality instead")
 * 		super(SciPyEVZ, self).__init__(G, normalized=normalized)             # <<<<<<<<<<<<<<
 * 
 * 	def _length(self, vector):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_SciPyEVZ); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_self);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_G);
  __Pyx_GIVEREF(__pyx_v_G);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_G);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_normalized, __pyx_v_normalized) < 0) __PYX_ERR(0, 2109, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "networkit/centrality.pyx":2106
 * 
 * 	"""
 * 	def __init__(self, G, normalized=False):             # <<<<<<<<<<<<<<
 * 		if G.isDirected():
 * 			raise NotImplementedError("Not implemented for directed graphs; use centrality.EigenvectorCentrality instead")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("networkit.centrality.SciPyEVZ.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":2111
 * 		super(SciPyEVZ, self).__init__(G, normalized=normalized)
 * 
 * 	def _length(self, vector):             # <<<<<<<<<<<<<<
 * 		square = sum([val * val for val in vector])
 * 		return math.sqrt(square)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_8SciPyEVZ_3_length(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_10centrality_8SciPyEVZ_3_length = {"_length", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_10centrality_8SciPyEVZ_3_length, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_10centrality_8SciPyEVZ_3_length(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_vector = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_length (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_vector,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_vector)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_length", 1, 2, 2, 1); __PYX_ERR(0, 2111, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_length") < 0)) __PYX_ERR(0, 2111, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_vector = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_length", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2111, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.SciPyEVZ._length", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_10centrality_8SciPyEVZ_2_length(__pyx_self, __pyx_v_self, __pyx_v_vector);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_8SciPyEVZ_2_length(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_vector) {
  PyObject *__pyx_v_square = NULL;
  PyObject *__pyx_8genexpr1__pyx_v_val = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_length", 0);

  /* "networkit/centrality.pyx":2112
 * 
 * 	def _length(self, vector):
 * 		square = sum([val * val for val in vector])             # <<<<<<<<<<<<<<
 * 		return math.sqrt(square)
 * 
 */
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2112, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (likely(PyList_CheckExact(__pyx_v_vector)) || PyTuple_CheckExact(__pyx_v_vector)) {
      __pyx_t_2 = __pyx_v_vector; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_vector); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2112, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2112, __pyx_L5_error)
    }
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 2112, __pyx_L5_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2112, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 2112, __pyx_L5_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2112, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 2112, __pyx_L5_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_val, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = PyNumber_Multiply(__pyx_8genexpr1__pyx_v_val, __pyx_8genexpr1__pyx_v_val); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2112, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 2112, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_val); __pyx_8genexpr1__pyx_v_val = 0;
    goto __pyx_L8_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_val); __pyx_8genexpr1__pyx_v_val = 0;
    goto __pyx_L1_error;
    __pyx_L8_exit_scope:;
  } /* exit inner scope */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_sum, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_square = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "networkit/centrality.pyx":2113
 * 	def _length(self, vector):
 * 		square = sum([val * val for val in vector])
 * 		return math.sqrt(square)             # <<<<<<<<<<<<<<
 * 
 * 	def normFactor(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_math); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_sqrt); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_1, __pyx_v_square) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_square);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":2111
 * 		super(SciPyEVZ, self).__init__(G, normalized=normalized)
 * 
 * 	def _length(self, vector):             # <<<<<<<<<<<<<<
 * 		square = sum([val * val for val in vector])
 * 		return math.sqrt(square)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("networkit.centrality.SciPyEVZ._length", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_square);
  __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_val);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":2115
 * 		return math.sqrt(square)
 * 
 * 	def normFactor(self):             # <<<<<<<<<<<<<<
 * 		return 1 / self._length(self.eigenvector)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_8SciPyEVZ_5normFactor(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_10centrality_8SciPyEVZ_5normFactor = {"normFactor", (PyCFunction)__pyx_pw_9networkit_10centrality_8SciPyEVZ_5normFactor, METH_O, 0};
static PyObject *__pyx_pw_9networkit_10centrality_8SciPyEVZ_5normFactor(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normFactor (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_8SciPyEVZ_4normFactor(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_8SciPyEVZ_4normFactor(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("normFactor", 0);

  /* "networkit/centrality.pyx":2116
 * 
 * 	def normFactor(self):
 * 		return 1 / self._length(self.eigenvector)             # <<<<<<<<<<<<<<
 * 
 * 	def prepareSpectrum(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_length); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_eigenvector); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_int_1, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":2115
 * 		return math.sqrt(square)
 * 
 * 	def normFactor(self):             # <<<<<<<<<<<<<<
 * 		return 1 / self._length(self.eigenvector)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("networkit.centrality.SciPyEVZ.normFactor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":2118
 * 		return 1 / self._length(self.eigenvector)
 * 
 * 	def prepareSpectrum(self):             # <<<<<<<<<<<<<<
 * 		spectrum = adjacencyEigenvector(self.graph, order=0)
 * 		self.eigenvector = spectrum[1]
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_8SciPyEVZ_7prepareSpectrum(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_10centrality_8SciPyEVZ_7prepareSpectrum = {"prepareSpectrum", (PyCFunction)__pyx_pw_9networkit_10centrality_8SciPyEVZ_7prepareSpectrum, METH_O, 0};
static PyObject *__pyx_pw_9networkit_10centrality_8SciPyEVZ_7prepareSpectrum(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prepareSpectrum (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_8SciPyEVZ_6prepareSpectrum(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_8SciPyEVZ_6prepareSpectrum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_spectrum = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("prepareSpectrum", 0);

  /* "networkit/centrality.pyx":2119
 * 
 * 	def prepareSpectrum(self):
 * 		spectrum = adjacencyEigenvector(self.graph, order=0)             # <<<<<<<<<<<<<<
 * 		self.eigenvector = spectrum[1]
 * 		self.eigenvalue = spectrum[0]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_adjacencyEigenvector); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_graph); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_order, __pyx_int_0) < 0) __PYX_ERR(0, 2119, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_spectrum = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "networkit/centrality.pyx":2120
 * 	def prepareSpectrum(self):
 * 		spectrum = adjacencyEigenvector(self.graph, order=0)
 * 		self.eigenvector = spectrum[1]             # <<<<<<<<<<<<<<
 * 		self.eigenvalue = spectrum[0]
 * 
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_spectrum, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_eigenvector, __pyx_t_4) < 0) __PYX_ERR(0, 2120, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/centrality.pyx":2121
 * 		spectrum = adjacencyEigenvector(self.graph, order=0)
 * 		self.eigenvector = spectrum[1]
 * 		self.eigenvalue = spectrum[0]             # <<<<<<<<<<<<<<
 * 
 * class SciPyPageRank(SpectralCentrality):
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_spectrum, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_eigenvalue, __pyx_t_4) < 0) __PYX_ERR(0, 2121, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/centrality.pyx":2118
 * 		return 1 / self._length(self.eigenvector)
 * 
 * 	def prepareSpectrum(self):             # <<<<<<<<<<<<<<
 * 		spectrum = adjacencyEigenvector(self.graph, order=0)
 * 		self.eigenvector = spectrum[1]
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("networkit.centrality.SciPyEVZ.prepareSpectrum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_spectrum);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":2125
 * class SciPyPageRank(SpectralCentrality):
 * 	# TODO: docstring
 * 	def __init__(self, G, damp=0.95, normalized=False):             # <<<<<<<<<<<<<<
 * 		super(SciPyPageRank, self).__init__(G, normalized=normalized)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_13SciPyPageRank_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_10centrality_13SciPyPageRank_1__init__ = {"__init__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_10centrality_13SciPyPageRank_1__init__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_10centrality_13SciPyPageRank_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_G = 0;
  PyObject *__pyx_v_damp = 0;
  PyObject *__pyx_v_normalized = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_G,&__pyx_n_s_damp,&__pyx_n_s_normalized,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = ((PyObject *)((PyObject*)__pyx_float_0_95));
    values[3] = ((PyObject *)((PyObject *)Py_False));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_G)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 4, 1); __PYX_ERR(0, 2125, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_damp);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_normalized);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 2125, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_G = values[1];
    __pyx_v_damp = values[2];
    __pyx_v_normalized = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2125, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.SciPyPageRank.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_10centrality_13SciPyPageRank___init__(__pyx_self, __pyx_v_self, __pyx_v_G, __pyx_v_damp, __pyx_v_normalized);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_13SciPyPageRank___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_G, PyObject *__pyx_v_damp, PyObject *__pyx_v_normalized) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "networkit/centrality.pyx":2126
 * 	# TODO: docstring
 * 	def __init__(self, G, damp=0.95, normalized=False):
 * 		super(SciPyPageRank, self).__init__(G, normalized=normalized)             # <<<<<<<<<<<<<<
 * 
 * 		self.damp = damp
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_SciPyPageRank); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_self);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_G);
  __Pyx_GIVEREF(__pyx_v_G);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_G);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_normalized, __pyx_v_normalized) < 0) __PYX_ERR(0, 2126, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/centrality.pyx":2128
 * 		super(SciPyPageRank, self).__init__(G, normalized=normalized)
 * 
 * 		self.damp = damp             # <<<<<<<<<<<<<<
 * 
 * 	def _length(self, vector):
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_damp, __pyx_v_damp) < 0) __PYX_ERR(0, 2128, __pyx_L1_error)

  /* "networkit/centrality.pyx":2125
 * class SciPyPageRank(SpectralCentrality):
 * 	# TODO: docstring
 * 	def __init__(self, G, damp=0.95, normalized=False):             # <<<<<<<<<<<<<<
 * 		super(SciPyPageRank, self).__init__(G, normalized=normalized)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("networkit.centrality.SciPyPageRank.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":2130
 * 		self.damp = damp
 * 
 * 	def _length(self, vector):             # <<<<<<<<<<<<<<
 * 		return sum(vector)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_13SciPyPageRank_3_length(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_10centrality_13SciPyPageRank_3_length = {"_length", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_10centrality_13SciPyPageRank_3_length, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9networkit_10centrality_13SciPyPageRank_3_length(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_vector = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_length (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_vector,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_vector)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_length", 1, 2, 2, 1); __PYX_ERR(0, 2130, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_length") < 0)) __PYX_ERR(0, 2130, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_vector = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_length", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2130, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("networkit.centrality.SciPyPageRank._length", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9networkit_10centrality_13SciPyPageRank_2_length(__pyx_self, __pyx_v_self, __pyx_v_vector);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_13SciPyPageRank_2_length(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_vector) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_length", 0);

  /* "networkit/centrality.pyx":2131
 * 
 * 	def _length(self, vector):
 * 		return sum(vector)             # <<<<<<<<<<<<<<
 * 
 * 	def normFactor(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_sum, __pyx_v_vector); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":2130
 * 		self.damp = damp
 * 
 * 	def _length(self, vector):             # <<<<<<<<<<<<<<
 * 		return sum(vector)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("networkit.centrality.SciPyPageRank._length", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":2133
 * 		return sum(vector)
 * 
 * 	def normFactor(self):             # <<<<<<<<<<<<<<
 * 		return 1 / self._length(self.eigenvector)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_13SciPyPageRank_5normFactor(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_10centrality_13SciPyPageRank_5normFactor = {"normFactor", (PyCFunction)__pyx_pw_9networkit_10centrality_13SciPyPageRank_5normFactor, METH_O, 0};
static PyObject *__pyx_pw_9networkit_10centrality_13SciPyPageRank_5normFactor(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normFactor (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_13SciPyPageRank_4normFactor(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_13SciPyPageRank_4normFactor(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("normFactor", 0);

  /* "networkit/centrality.pyx":2134
 * 
 * 	def normFactor(self):
 * 		return 1 / self._length(self.eigenvector)             # <<<<<<<<<<<<<<
 * 
 * 	def prepareSpectrum(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_length); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_eigenvector); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_int_1, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "networkit/centrality.pyx":2133
 * 		return sum(vector)
 * 
 * 	def normFactor(self):             # <<<<<<<<<<<<<<
 * 		return 1 / self._length(self.eigenvector)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("networkit.centrality.SciPyPageRank.normFactor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "networkit/centrality.pyx":2136
 * 		return 1 / self._length(self.eigenvector)
 * 
 * 	def prepareSpectrum(self):             # <<<<<<<<<<<<<<
 * 		prMatrix = PageRankMatrix(self.graph, self.damp)
 * 		spectrum = symmetricEigenvectors(prMatrix, cutoff=0, reverse=False)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9networkit_10centrality_13SciPyPageRank_7prepareSpectrum(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_9networkit_10centrality_13SciPyPageRank_7prepareSpectrum = {"prepareSpectrum", (PyCFunction)__pyx_pw_9networkit_10centrality_13SciPyPageRank_7prepareSpectrum, METH_O, 0};
static PyObject *__pyx_pw_9networkit_10centrality_13SciPyPageRank_7prepareSpectrum(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prepareSpectrum (wrapper)", 0);
  __pyx_r = __pyx_pf_9networkit_10centrality_13SciPyPageRank_6prepareSpectrum(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9networkit_10centrality_13SciPyPageRank_6prepareSpectrum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_prMatrix = NULL;
  PyObject *__pyx_v_spectrum = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("prepareSpectrum", 0);

  /* "networkit/centrality.pyx":2137
 * 
 * 	def prepareSpectrum(self):
 * 		prMatrix = PageRankMatrix(self.graph, self.damp)             # <<<<<<<<<<<<<<
 * 		spectrum = symmetricEigenvectors(prMatrix, cutoff=0, reverse=False)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_PageRankMatrix); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_graph); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_damp); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2137, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2137, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_4);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_prMatrix = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "networkit/centrality.pyx":2138
 * 	def prepareSpectrum(self):
 * 		prMatrix = PageRankMatrix(self.graph, self.damp)
 * 		spectrum = symmetricEigenvectors(prMatrix, cutoff=0, reverse=False)             # <<<<<<<<<<<<<<
 * 
 * 		self.eigenvector = spectrum[1][0]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_symmetricEigenvectors); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_prMatrix);
  __Pyx_GIVEREF(__pyx_v_prMatrix);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_prMatrix);
  __pyx_t_7 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_cutoff, __pyx_int_0) < 0) __PYX_ERR(0, 2138, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_reverse, Py_False) < 0) __PYX_ERR(0, 2138, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_spectrum = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "networkit/centrality.pyx":2140
 * 		spectrum = symmetricEigenvectors(prMatrix, cutoff=0, reverse=False)
 * 
 * 		self.eigenvector = spectrum[1][0]             # <<<<<<<<<<<<<<
 * 		self.eigenvalue = spectrum[0][0]
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_spectrum, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_4, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_eigenvector, __pyx_t_7) < 0) __PYX_ERR(0, 2140, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "networkit/centrality.pyx":2141
 * 
 * 		self.eigenvector = spectrum[1][0]
 * 		self.eigenvalue = spectrum[0][0]             # <<<<<<<<<<<<<<
 */
  __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_spectrum, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_7, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_eigenvalue, __pyx_t_4) < 0) __PYX_ERR(0, 2141, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "networkit/centrality.pyx":2136
 * 		return 1 / self._length(self.eigenvector)
 * 
 * 	def prepareSpectrum(self):             # <<<<<<<<<<<<<<
 * 		prMatrix = PageRankMatrix(self.graph, self.damp)
 * 		spectrum = symmetricEigenvectors(prMatrix, cutoff=0, reverse=False)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("networkit.centrality.SciPyPageRank.prepareSpectrum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_prMatrix);
  __Pyx_XDECREF(__pyx_v_spectrum);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py___pyx_t_9networkit_10centrality_node")
 * cdef vector[X] __pyx_convert_vector_from_py___pyx_t_9networkit_10centrality_node(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<__pyx_t_9networkit_10centrality_node>  __pyx_convert_vector_from_py___pyx_t_9networkit_10centrality_node(PyObject *__pyx_v_o) {
  std::vector<__pyx_t_9networkit_10centrality_node>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<__pyx_t_9networkit_10centrality_node>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  __pyx_t_9networkit_10centrality_node __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py___pyx_t_9networkit_10centrality_node", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py___pyx_t_9networkit_10centrality_node(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_As_uint64_t(__pyx_v_item); if (unlikely((__pyx_t_5 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((__pyx_t_9networkit_10centrality_node)__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py___pyx_t_9networkit_10centrality_node(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py___pyx_t_9networkit_10centrality_node")
 * cdef vector[X] __pyx_convert_vector_from_py___pyx_t_9networkit_10centrality_node(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py___pyx_t_9networkit_10centrality_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_double(const std::vector<double>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_double", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = PyFloat_FromDouble((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py___pyx_t_9networkit_10centrality_node____double")
 * cdef object __pyx_convert_pair_to_py___pyx_t_9networkit_10centrality_node____double(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

static PyObject *__pyx_convert_pair_to_py___pyx_t_9networkit_10centrality_node____double(std::pair<__pyx_t_9networkit_10centrality_node,double>  const &__pyx_v_p) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_to_py___pyx_t_9networkit_10centrality_node____double", 0);

  /* "pair.to_py":159
 * @cname("__pyx_convert_pair_to_py___pyx_t_9networkit_10centrality_node____double")
 * cdef object __pyx_convert_pair_to_py___pyx_t_9networkit_10centrality_node____double(const pair[X,Y]& p):
 *     return p.first, p.second             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_p.first); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_p.second); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py___pyx_t_9networkit_10centrality_node____double")
 * cdef object __pyx_convert_pair_to_py___pyx_t_9networkit_10centrality_node____double(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.to_py.__pyx_convert_pair_to_py___pyx_t_9networkit_10centrality_node____double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c___pyx_t_9networkit_10centrality_node_2c_double_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c___pyx_t_9networkit_10centrality_node_2c_double_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_pair_3c___pyx_t_9networkit_10centrality_node_2c_double_3e___(const std::vector<std::pair<__pyx_t_9networkit_10centrality_node,double> >  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_pair_3c___pyx_t_9networkit_10centrality_node_2c_double_3e___", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c___pyx_t_9networkit_10centrality_node_2c_double_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c___pyx_t_9networkit_10centrality_node_2c_double_3e___(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __pyx_convert_pair_to_py___pyx_t_9networkit_10centrality_node____double((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c___pyx_t_9networkit_10centrality_node_2c_double_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c___pyx_t_9networkit_10centrality_node_2c_double_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_pair_3c___pyx_t_9networkit_10centrality_node_2c_double_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_size_t")
 * cdef vector[X] __pyx_convert_vector_from_py_size_t(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<size_t>  __pyx_convert_vector_from_py_size_t(PyObject *__pyx_v_o) {
  std::vector<size_t>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<size_t>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_size_t", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_size_t(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_v_item); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((size_t)__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_size_t(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_size_t")
 * cdef vector[X] __pyx_convert_vector_from_py_size_t(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_size_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py___pyx_t_9networkit_10centrality_node")
 * cdef object __pyx_convert_vector_to_py___pyx_t_9networkit_10centrality_node(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py___pyx_t_9networkit_10centrality_node(const std::vector<__pyx_t_9networkit_10centrality_node>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py___pyx_t_9networkit_10centrality_node", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py___pyx_t_9networkit_10centrality_node")
 * cdef object __pyx_convert_vector_to_py___pyx_t_9networkit_10centrality_node(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __Pyx_PyInt_From_uint64_t((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py___pyx_t_9networkit_10centrality_node")
 * cdef object __pyx_convert_vector_to_py___pyx_t_9networkit_10centrality_node(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py___pyx_t_9networkit_10centrality_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py___pyx_t_9networkit_10centrality_edgeweight(const std::vector<__pyx_t_9networkit_10centrality_edgeweight>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py___pyx_t_9networkit_10centrality_edgeweight", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py___pyx_t_9networkit_10centrality_edgeweight")
 * cdef object __pyx_convert_vector_to_py___pyx_t_9networkit_10centrality_edgeweight(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = PyFloat_FromDouble((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py___pyx_t_9networkit_10centrality_edgeweight")
 * cdef object __pyx_convert_vector_to_py___pyx_t_9networkit_10centrality_edgeweight(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py___pyx_t_9networkit_10centrality_edgeweight", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py___pyx_t_9networkit_10centrality_node______pyx_t_9networkit_10centrality_edgeweight")
 * cdef object __pyx_convert_pair_to_py___pyx_t_9networkit_10centrality_node______pyx_t_9networkit_10centrality_edgeweight(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

static PyObject *__pyx_convert_pair_to_py___pyx_t_9networkit_10centrality_node______pyx_t_9networkit_10centrality_edgeweight(std::pair<__pyx_t_9networkit_10centrality_node,__pyx_t_9networkit_10centrality_edgeweight>  const &__pyx_v_p) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_to_py___pyx_t_9networkit_10centrality_node______pyx_t_9networkit_10centrality_edgeweight", 0);

  /* "pair.to_py":159
 * @cname("__pyx_convert_pair_to_py___pyx_t_9networkit_10centrality_node______pyx_t_9networkit_10centrality_edgeweight")
 * cdef object __pyx_convert_pair_to_py___pyx_t_9networkit_10centrality_node______pyx_t_9networkit_10centrality_edgeweight(const pair[X,Y]& p):
 *     return p.first, p.second             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(__pyx_v_p.first); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_p.second); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py___pyx_t_9networkit_10centrality_node______pyx_t_9networkit_10centrality_edgeweight")
 * cdef object __pyx_convert_pair_to_py___pyx_t_9networkit_10centrality_node______pyx_t_9networkit_10centrality_edgeweight(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.to_py.__pyx_convert_pair_to_py___pyx_t_9networkit_10centrality_node______pyx_t_9networkit_10centrality_edgeweight", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c___pyx_t_9networkit_10centrality_node_2c___pyx_t_9networkit_10centrality_edgeweight_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c___pyx_t_9networkit_10centrality_node_2c___pyx_t_9networkit_10centrality_edgeweight_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_pair_3c___pyx_t_9networkit_10centrality_node_2c___pyx_t_9networkit_10centrality_edgeweight_3e___(const std::vector<std::pair<__pyx_t_9networkit_10centrality_node,__pyx_t_9networkit_10centrality_edgeweight> >  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_pair_3c___pyx_t_9networkit_10centrality_node_2c___pyx_t_9networkit_10centrality_edgeweight_3e___", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c___pyx_t_9networkit_10centrality_node_2c___pyx_t_9networkit_10centrality_edgeweight_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c___pyx_t_9networkit_10centrality_node_2c___pyx_t_9networkit_10centrality_edgeweight_3e___(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __pyx_convert_pair_to_py___pyx_t_9networkit_10centrality_node______pyx_t_9networkit_10centrality_edgeweight((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c___pyx_t_9networkit_10centrality_node_2c___pyx_t_9networkit_10centrality_edgeweight_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c___pyx_t_9networkit_10centrality_node_2c___pyx_t_9networkit_10centrality_edgeweight_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_pair_3c___pyx_t_9networkit_10centrality_node_2c___pyx_t_9networkit_10centrality_edgeweight_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_9networkit_10centrality_Centrality(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_10centrality_Centrality *p;
  PyObject *o = __pyx_ptype_9networkit_4base_Algorithm->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_10centrality_Centrality *)o);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_9networkit_10centrality_Centrality(PyObject *o) {
  struct __pyx_obj_9networkit_10centrality_Centrality *p = (struct __pyx_obj_9networkit_10centrality_Centrality *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_9networkit_10centrality_10Centrality_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->_G);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) __pyx_ptype_9networkit_4base_Algorithm->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_9networkit_10centrality_Centrality);
}

static int __pyx_tp_traverse_9networkit_10centrality_Centrality(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_10centrality_Centrality *p = (struct __pyx_obj_9networkit_10centrality_Centrality *)o;
  e = ((likely(__pyx_ptype_9networkit_4base_Algorithm)) ? ((__pyx_ptype_9networkit_4base_Algorithm->tp_traverse) ? __pyx_ptype_9networkit_4base_Algorithm->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9networkit_10centrality_Centrality)); if (e) return e;
  if (p->_G) {
    e = (*v)(((PyObject *)p->_G), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_10centrality_Centrality(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_10centrality_Centrality *p = (struct __pyx_obj_9networkit_10centrality_Centrality *)o;
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) { if (__pyx_ptype_9networkit_4base_Algorithm->tp_clear) __pyx_ptype_9networkit_4base_Algorithm->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9networkit_10centrality_Centrality);
  tmp = ((PyObject*)p->_G);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9networkit_10centrality_Centrality[] = {
  {"scores", (PyCFunction)__pyx_pw_9networkit_10centrality_10Centrality_5scores, METH_NOARGS, __pyx_doc_9networkit_10centrality_10Centrality_4scores},
  {"score", (PyCFunction)__pyx_pw_9networkit_10centrality_10Centrality_7score, METH_O, __pyx_doc_9networkit_10centrality_10Centrality_6score},
  {"ranking", (PyCFunction)__pyx_pw_9networkit_10centrality_10Centrality_9ranking, METH_NOARGS, __pyx_doc_9networkit_10centrality_10Centrality_8ranking},
  {"maximum", (PyCFunction)__pyx_pw_9networkit_10centrality_10Centrality_11maximum, METH_NOARGS, __pyx_doc_9networkit_10centrality_10Centrality_10maximum},
  {"centralization", (PyCFunction)__pyx_pw_9networkit_10centrality_10Centrality_13centralization, METH_NOARGS, __pyx_doc_9networkit_10centrality_10Centrality_12centralization},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_10Centrality_15__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_10Centrality_17__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_10centrality_Centrality = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.centrality.Centrality", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_10centrality_Centrality), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_10centrality_Centrality, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  " Abstract base class for centrality measures", /*tp_doc*/
  __pyx_tp_traverse_9networkit_10centrality_Centrality, /*tp_traverse*/
  __pyx_tp_clear_9networkit_10centrality_Centrality, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_10centrality_Centrality, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_9networkit_10centrality_10Centrality_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_10centrality_Centrality, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_9networkit_10centrality_Betweenness(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_9networkit_10centrality_Centrality(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_9networkit_10centrality_11Betweenness_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9networkit_10centrality_Betweenness[] = {
  {"edgeScores", (PyCFunction)__pyx_pw_9networkit_10centrality_11Betweenness_3edgeScores, METH_NOARGS, __pyx_doc_9networkit_10centrality_11Betweenness_2edgeScores},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_11Betweenness_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_11Betweenness_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_10centrality_Betweenness = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.centrality.Betweenness", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_10centrality_Betweenness), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_10centrality_Centrality, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n\tBetweenness(G, normalized=False, computeEdgeCentrality=False)\n\n\tConstructs the Betweenness class for the given Graph `G`. If the betweenness scores should be normalized,\n\tthen set `normalized` to True. The run() method takes O(nm) time, where n is the number\n \tof nodes and m is the number of edges of the graph.\n\n \tParameters:\n \t-----------\n \tG : networkit.Graph\n \t\tThe graph.\n \tnormalized : bool, optional\n \t\tSet this parameter to True if scores should be normalized in the interval [0,1].\n\tcomputeEdgeCentrality: bool, optional\n\t\tSet this to true if edge betweenness scores should be computed as well.\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_10centrality_Centrality, /*tp_traverse*/
  __pyx_tp_clear_9networkit_10centrality_Centrality, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_10centrality_Betweenness, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_9networkit_10centrality_10Centrality_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_10centrality_Betweenness, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_9networkit_10centrality_ApproxBetweenness(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_9networkit_10centrality_Centrality(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_9networkit_10centrality_17ApproxBetweenness_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9networkit_10centrality_ApproxBetweenness[] = {
  {"numberOfSamples", (PyCFunction)__pyx_pw_9networkit_10centrality_17ApproxBetweenness_3numberOfSamples, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_17ApproxBetweenness_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_17ApproxBetweenness_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_10centrality_ApproxBetweenness = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.centrality.ApproxBetweenness", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_10centrality_ApproxBetweenness), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_10centrality_Centrality, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  " Approximation of betweenness centrality according to algorithm described in\n \tMatteo Riondato and Evgenios M. Kornaropoulos: Fast Approximation of Betweenness Centrality through Sampling\n\n \tApproxBetweenness(G, epsilon=0.01, delta=0.1, universalConstant=1.0)\n\n \tThe algorithm approximates the betweenness of all vertices so that the scores are\n\twithin an additive error epsilon with probability at least (1- delta).\n\tThe values are normalized by default. The run() method takes O(m) time per sample, where  m is\n\tthe number of edges of the graph. The number of samples is proportional to universalConstant/epsilon^2.\n\tAlthough this algorithm has a theoretical guarantee, the algorithm implemented in Estimate Betweenness usually performs better in practice\n\tTherefore, we recommend to use EstimateBetweenness if no theoretical guarantee is needed.\n\n\tParameters:\n\t-----------\n\tG : networkit.Graph\n\t\tthe graph\n\tepsilon : double, optional\n\t\tmaximum additive error\n\tdelta : double, optional\n\t\tprobability that the values are within the error guarantee\n\tuniversalConstant: double, optional\n\t\tthe universal constant to be used in computing the sample size.\n\t\tIt is 1 by default. Some references suggest using 0.5, but there\n\t\tis no guarantee in this case.\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_10centrality_Centrality, /*tp_traverse*/
  __pyx_tp_clear_9networkit_10centrality_Centrality, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_10centrality_ApproxBetweenness, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_9networkit_10centrality_10Centrality_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_10centrality_ApproxBetweenness, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_9networkit_10centrality_EstimateBetweenness(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_9networkit_10centrality_Centrality(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_9networkit_10centrality_19EstimateBetweenness_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9networkit_10centrality_EstimateBetweenness[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_19EstimateBetweenness_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_19EstimateBetweenness_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_10centrality_EstimateBetweenness = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.centrality.EstimateBetweenness", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_10centrality_EstimateBetweenness), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_10centrality_Centrality, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  " Estimation of betweenness centrality according to algorithm described in\n\tSanders, Geisberger, Schultes: Better Approximation of Betweenness Centrality\n\n\tEstimateBetweenness(G, nSamples, normalized=False, parallel=False, seed=0, sources=None, targets=None)\n\n\tThe algorithm estimates the betweenness of all nodes, using weighting\n\tof the contributions to avoid biased estimation. The run() method takes O(m)\n\ttime per sample, where  m is the number of edges of the graph. There is no proven\n\ttheoretical guarantee on the quality of the approximation. However, the algorithm\n        was shown to perform well in practice.\n        If a guarantee is required, use ApproxBetweenness.\n\n\tParameters:\n\t-----------\n\tG : networkit.Graph\n\t\tinput graph\n\tnSamples : count\n\t\tuser defined number of samples\n\tnormalized : bool, optional\n\t\tnormalize centrality values in interval [0,1]\n\tparallel : bool, optional\n\t\trun in parallel with additional memory cost z + 3z * t\n\tseed: count\n\t\tuser defined seed used for sampling. Default seed when not specified is 0\n\tsources: list\n\t\tnode ids that will be considered as source nodes. If not specified all nodes are considered as source nodes\n\ttargets: list\n\t\tnode ids that will be considered as target nodes. If not specified all nodes are considered as target nodes\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_10centrality_Centrality, /*tp_traverse*/
  __pyx_tp_clear_9networkit_10centrality_Centrality, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_10centrality_EstimateBetweenness, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_9networkit_10centrality_10Centrality_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_10centrality_EstimateBetweenness, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_9networkit_10centrality_KadabraBetweenness(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_ptype_9networkit_4base_Algorithm->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_9networkit_10centrality_18KadabraBetweenness_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_10centrality_KadabraBetweenness(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) __pyx_ptype_9networkit_4base_Algorithm->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_9networkit_10centrality_KadabraBetweenness);
}

static PyMethodDef __pyx_methods_9networkit_10centrality_KadabraBetweenness[] = {
  {"ranking", (PyCFunction)__pyx_pw_9networkit_10centrality_18KadabraBetweenness_3ranking, METH_NOARGS, __pyx_doc_9networkit_10centrality_18KadabraBetweenness_2ranking},
  {"topkNodesList", (PyCFunction)__pyx_pw_9networkit_10centrality_18KadabraBetweenness_5topkNodesList, METH_NOARGS, __pyx_doc_9networkit_10centrality_18KadabraBetweenness_4topkNodesList},
  {"topkScoresList", (PyCFunction)__pyx_pw_9networkit_10centrality_18KadabraBetweenness_7topkScoresList, METH_NOARGS, __pyx_doc_9networkit_10centrality_18KadabraBetweenness_6topkScoresList},
  {"scores", (PyCFunction)__pyx_pw_9networkit_10centrality_18KadabraBetweenness_9scores, METH_NOARGS, __pyx_doc_9networkit_10centrality_18KadabraBetweenness_8scores},
  {"getNumberOfIterations", (PyCFunction)__pyx_pw_9networkit_10centrality_18KadabraBetweenness_11getNumberOfIterations, METH_NOARGS, __pyx_doc_9networkit_10centrality_18KadabraBetweenness_10getNumberOfIterations},
  {"getOmega", (PyCFunction)__pyx_pw_9networkit_10centrality_18KadabraBetweenness_13getOmega, METH_NOARGS, __pyx_doc_9networkit_10centrality_18KadabraBetweenness_12getOmega},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_18KadabraBetweenness_15__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_18KadabraBetweenness_17__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_10centrality_KadabraBetweenness = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.centrality.KadabraBetweenness", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_10centrality_KadabraBetweenness), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_10centrality_KadabraBetweenness, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n\tApproximation of the betweenness centrality and computation of the top-k\n\tnodes with highest betweenness centrality according to the algorithm\n\tdescribed in Borassi M. and Natale M. (2016): KADABRA is an ADaptive\n\tAlgorithm for Betweenness via Random Approximation.\n\n\tIf k = 0 the algorithm approximates the betweenness centrality of all\n\tvertices of the graph so that the scores are within an additive error @a\n\terr with probability at least (1 - @a delta). Otherwise, the algorithm\n\tcomputes the exact ranking of the top-k nodes with highest betweenness\n\tcentrality.\n\tThe algorithm relies on an adaptive random sampling technique of shortest\n\tpaths and the number of samples in the worst case is w = ((log(D - 2) +\n\tlog(2/delta))/err^2 samples, where D is the diameter of the graph.\n\tThus, the worst-case performance is O(w * (|E| + |V|)), but performs better\n\tin practice.\n\n\tNB: in order to work properly, the Kadabra algorithm requires a random seed\n\tto be previously set with 'useThreadId' set to True. To do this, call the\n\tsetSeed(<your_seed>, True) fuction within the Random module.\n\n\tParameters:\n\t-----------\n\tG : networkit.Graph\n\t\tThe input graph.\n  \terr : double\n\t\tMaximum additive error guaranteed when approximating the\n\t\tbetweenness centrality of all nodes.\n\tdelta : double\n\t\tProbability that the values of the betweenness centrality are\n\t\twithin the error guarantee.\n\tk : count\n\t\tThe number of top-k nodes to be computed. Set it to zero to\n\t\tapproximate the betweenness centrality of all the nodes.\n\tunionSample : count\n\t\tAlgorithm parameter # TODO: more details\n\tstartFactor : count\n\t\tAlgorithm parameter # TODO: more details\n\t", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_10centrality_KadabraBetweenness, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_10centrality_KadabraBetweenness, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_9networkit_10centrality_DynBetweenness(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_10centrality_DynBetweenness *p;
  PyObject *o = __pyx_ptype_9networkit_4base_Algorithm->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_10centrality_DynBetweenness *)o);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_9networkit_10centrality_14DynBetweenness_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_10centrality_DynBetweenness(PyObject *o) {
  struct __pyx_obj_9networkit_10centrality_DynBetweenness *p = (struct __pyx_obj_9networkit_10centrality_DynBetweenness *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_G);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) __pyx_ptype_9networkit_4base_Algorithm->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_9networkit_10centrality_DynBetweenness);
}

static int __pyx_tp_traverse_9networkit_10centrality_DynBetweenness(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_10centrality_DynBetweenness *p = (struct __pyx_obj_9networkit_10centrality_DynBetweenness *)o;
  e = ((likely(__pyx_ptype_9networkit_4base_Algorithm)) ? ((__pyx_ptype_9networkit_4base_Algorithm->tp_traverse) ? __pyx_ptype_9networkit_4base_Algorithm->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9networkit_10centrality_DynBetweenness)); if (e) return e;
  if (p->_G) {
    e = (*v)(((PyObject *)p->_G), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_10centrality_DynBetweenness(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_10centrality_DynBetweenness *p = (struct __pyx_obj_9networkit_10centrality_DynBetweenness *)o;
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) { if (__pyx_ptype_9networkit_4base_Algorithm->tp_clear) __pyx_ptype_9networkit_4base_Algorithm->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9networkit_10centrality_DynBetweenness);
  tmp = ((PyObject*)p->_G);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9networkit_10centrality_DynBetweenness[] = {
  {"update", (PyCFunction)__pyx_pw_9networkit_10centrality_14DynBetweenness_3update, METH_O, __pyx_doc_9networkit_10centrality_14DynBetweenness_2update},
  {"updateBatch", (PyCFunction)__pyx_pw_9networkit_10centrality_14DynBetweenness_5updateBatch, METH_O, __pyx_doc_9networkit_10centrality_14DynBetweenness_4updateBatch},
  {"scores", (PyCFunction)__pyx_pw_9networkit_10centrality_14DynBetweenness_7scores, METH_NOARGS, __pyx_doc_9networkit_10centrality_14DynBetweenness_6scores},
  {"score", (PyCFunction)__pyx_pw_9networkit_10centrality_14DynBetweenness_9score, METH_O, __pyx_doc_9networkit_10centrality_14DynBetweenness_8score},
  {"ranking", (PyCFunction)__pyx_pw_9networkit_10centrality_14DynBetweenness_11ranking, METH_NOARGS, __pyx_doc_9networkit_10centrality_14DynBetweenness_10ranking},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_14DynBetweenness_13__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_14DynBetweenness_15__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_10centrality_DynBetweenness = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.centrality.DynBetweenness", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_10centrality_DynBetweenness), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_10centrality_DynBetweenness, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  " The algorithm computes the betweenness centrality of all nodes\n\tand updates them after an edge insertion.\n\n\tDynBetweenness(G)\n\n\tParameters:\n\t-----------\n\tG : networkit.Graph\n\t\tthe graph\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_10centrality_DynBetweenness, /*tp_traverse*/
  __pyx_tp_clear_9networkit_10centrality_DynBetweenness, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_10centrality_DynBetweenness, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_10centrality_DynBetweenness, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_9networkit_10centrality_DynApproxBetweenness(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_10centrality_DynApproxBetweenness *p;
  PyObject *o = __pyx_ptype_9networkit_4base_Algorithm->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_10centrality_DynApproxBetweenness *)o);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_9networkit_10centrality_20DynApproxBetweenness_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_10centrality_DynApproxBetweenness(PyObject *o) {
  struct __pyx_obj_9networkit_10centrality_DynApproxBetweenness *p = (struct __pyx_obj_9networkit_10centrality_DynApproxBetweenness *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_G);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) __pyx_ptype_9networkit_4base_Algorithm->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_9networkit_10centrality_DynApproxBetweenness);
}

static int __pyx_tp_traverse_9networkit_10centrality_DynApproxBetweenness(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_10centrality_DynApproxBetweenness *p = (struct __pyx_obj_9networkit_10centrality_DynApproxBetweenness *)o;
  e = ((likely(__pyx_ptype_9networkit_4base_Algorithm)) ? ((__pyx_ptype_9networkit_4base_Algorithm->tp_traverse) ? __pyx_ptype_9networkit_4base_Algorithm->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9networkit_10centrality_DynApproxBetweenness)); if (e) return e;
  if (p->_G) {
    e = (*v)(((PyObject *)p->_G), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_10centrality_DynApproxBetweenness(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_10centrality_DynApproxBetweenness *p = (struct __pyx_obj_9networkit_10centrality_DynApproxBetweenness *)o;
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) { if (__pyx_ptype_9networkit_4base_Algorithm->tp_clear) __pyx_ptype_9networkit_4base_Algorithm->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9networkit_10centrality_DynApproxBetweenness);
  tmp = ((PyObject*)p->_G);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9networkit_10centrality_DynApproxBetweenness[] = {
  {"update", (PyCFunction)__pyx_pw_9networkit_10centrality_20DynApproxBetweenness_3update, METH_O, __pyx_doc_9networkit_10centrality_20DynApproxBetweenness_2update},
  {"updateBatch", (PyCFunction)__pyx_pw_9networkit_10centrality_20DynApproxBetweenness_5updateBatch, METH_O, __pyx_doc_9networkit_10centrality_20DynApproxBetweenness_4updateBatch},
  {"scores", (PyCFunction)__pyx_pw_9networkit_10centrality_20DynApproxBetweenness_7scores, METH_NOARGS, __pyx_doc_9networkit_10centrality_20DynApproxBetweenness_6scores},
  {"score", (PyCFunction)__pyx_pw_9networkit_10centrality_20DynApproxBetweenness_9score, METH_O, __pyx_doc_9networkit_10centrality_20DynApproxBetweenness_8score},
  {"ranking", (PyCFunction)__pyx_pw_9networkit_10centrality_20DynApproxBetweenness_11ranking, METH_NOARGS, __pyx_doc_9networkit_10centrality_20DynApproxBetweenness_10ranking},
  {"getNumberOfSamples", (PyCFunction)__pyx_pw_9networkit_10centrality_20DynApproxBetweenness_13getNumberOfSamples, METH_NOARGS, __pyx_doc_9networkit_10centrality_20DynApproxBetweenness_12getNumberOfSamples},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_20DynApproxBetweenness_15__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_20DynApproxBetweenness_17__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_10centrality_DynApproxBetweenness = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.centrality.DynApproxBetweenness", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_10centrality_DynApproxBetweenness), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_10centrality_DynApproxBetweenness, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  " The algorithm approximates the betweenness of all vertices so that the scores are\n\twithin an additive error @a epsilon with probability at least (1- @a delta).\n\tThe values are normalized by default.\n\n\tDynApproxBetweenness(G, epsilon=0.01, delta=0.1, storePredecessors=True, universalConstant=1.0)\n\n\tThe algorithm approximates the betweenness of all vertices so that the scores are\n\twithin an additive error epsilon with probability at least (1- delta).\n\tThe values are normalized by default.\n\n\tParameters:\n\t-----------\n\tG : networkit.Graph\n\t\tthe graph\n\tepsilon : double, optional\n\t\tmaximum additive error\n\tdelta : double, optional\n\t\tprobability that the values are within the error guarantee\n\tstorePredecessors : bool, optional\n\t\tstore lists of predecessors?\n\tuniversalConstant: double, optional\n\t\tthe universal constant to be used in computing the sample size.\n\t\tIt is 1 by default. Some references suggest using 0.5, but there\n\t\tis no guarantee in this case.\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_10centrality_DynApproxBetweenness, /*tp_traverse*/
  __pyx_tp_clear_9networkit_10centrality_DynApproxBetweenness, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_10centrality_DynApproxBetweenness, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_10centrality_DynApproxBetweenness, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_9networkit_10centrality_DynBetweennessOneNode(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_10centrality_DynBetweennessOneNode *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_10centrality_DynBetweennessOneNode *)o);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_9networkit_10centrality_21DynBetweennessOneNode_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_10centrality_DynBetweennessOneNode(PyObject *o) {
  struct __pyx_obj_9networkit_10centrality_DynBetweennessOneNode *p = (struct __pyx_obj_9networkit_10centrality_DynBetweennessOneNode *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_9networkit_10centrality_21DynBetweennessOneNode_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->_G);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_9networkit_10centrality_DynBetweennessOneNode(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_10centrality_DynBetweennessOneNode *p = (struct __pyx_obj_9networkit_10centrality_DynBetweennessOneNode *)o;
  if (p->_G) {
    e = (*v)(((PyObject *)p->_G), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_10centrality_DynBetweennessOneNode(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_10centrality_DynBetweennessOneNode *p = (struct __pyx_obj_9networkit_10centrality_DynBetweennessOneNode *)o;
  tmp = ((PyObject*)p->_G);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9networkit_10centrality_DynBetweennessOneNode[] = {
  {"run", (PyCFunction)__pyx_pw_9networkit_10centrality_21DynBetweennessOneNode_5run, METH_NOARGS, 0},
  {"update", (PyCFunction)__pyx_pw_9networkit_10centrality_21DynBetweennessOneNode_7update, METH_O, __pyx_doc_9networkit_10centrality_21DynBetweennessOneNode_6update},
  {"updateBatch", (PyCFunction)__pyx_pw_9networkit_10centrality_21DynBetweennessOneNode_9updateBatch, METH_O, __pyx_doc_9networkit_10centrality_21DynBetweennessOneNode_8updateBatch},
  {"getDistance", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_10centrality_21DynBetweennessOneNode_11getDistance, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_10centrality_21DynBetweennessOneNode_10getDistance},
  {"getSigma", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_10centrality_21DynBetweennessOneNode_13getSigma, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_10centrality_21DynBetweennessOneNode_12getSigma},
  {"getSigmax", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_10centrality_21DynBetweennessOneNode_15getSigmax, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_10centrality_21DynBetweennessOneNode_14getSigmax},
  {"getbcx", (PyCFunction)__pyx_pw_9networkit_10centrality_21DynBetweennessOneNode_17getbcx, METH_NOARGS, __pyx_doc_9networkit_10centrality_21DynBetweennessOneNode_16getbcx},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_21DynBetweennessOneNode_19__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_21DynBetweennessOneNode_21__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_10centrality_DynBetweennessOneNode = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.centrality.DynBetweennessOneNode", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_10centrality_DynBetweennessOneNode), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_10centrality_DynBetweennessOneNode, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  " Dynamic exact algorithm for updating the betweenness of a specific node\n\n\tDynBetweennessOneNode(G, x)\n\n\tThe algorithm aupdates the betweenness of a node after an edge insertions\n\t(faster than updating it for all nodes), based on the algorithm\n\tproposed by Bergamini et al. \"Improving the betweenness centrality of a node by adding links\"\n\n\tParameters:\n\t-----------\n\tG : networkit.Graph\n\t\tthe graph\n\tx : node\n\t\tthe node for which you want to update betweenness\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_10centrality_DynBetweennessOneNode, /*tp_traverse*/
  __pyx_tp_clear_9networkit_10centrality_DynBetweennessOneNode, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_10centrality_DynBetweennessOneNode, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_10centrality_DynBetweennessOneNode, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_9networkit_10centrality_Closeness(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_9networkit_10centrality_Centrality(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_9networkit_10centrality_9Closeness_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9networkit_10centrality_Closeness[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_9Closeness_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_9Closeness_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_10centrality_Closeness = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.centrality.Closeness", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_10centrality_Closeness), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_10centrality_Centrality, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n\tCloseness(G, normalized, bool checkConnectdedness)\n\tCloseness(G, normalized, networkit.centrality.ClosenessVariant variant)\n\n\tConstructs the Closeness class for the given Graph `G`. If the Closeness scores should not be normalized,\n\tset `normalized` to False. The run() method takes O(nm) time, where n is the number\n\tof nodes and m is the number of edges of the graph.\n\n\tParameters:\n\t-----------\n\tG : networkit.Graph\n\t\tThe graph.\n\tnormalized : bool\n\t\tSet this parameter to False if scores should not be normalized into an interval of [0,1].\n\t\tNormalization only works for unweighted graphs.\n\tcheckConnectdedness : bool\n\t\tSet this parameter to True to also check if the graph is connected before computing closeness.\n\t\tSet this parameter to False to not check if the graph is connected (note: the standard definition\n\t\tof closeness works for connected graphs, choose this if the input graph is known to be connected).\n\tClosenessVariant : networkit.centrality.ClosenessVariant\n\t\tSet this parameter to networkit.centrality.ClosenessVariant.Standard to use the standard\n\t\tdefinition of closeness, that is defined for connected graphs only; in this case, checkConnectdedness\n\t\tis automatically set to True.\n\t\tSet this parameter to networkit.centrality.ClosenessVariant.Generalized to use the generalized\n\t\tdefinition of closeness, that is defined for also non-connected graphs; in this case, checkConnectdedness\n\t\tis automatically set to False.\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_10centrality_Centrality, /*tp_traverse*/
  __pyx_tp_clear_9networkit_10centrality_Centrality, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_10centrality_Closeness, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_9networkit_10centrality_10Centrality_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_10centrality_Closeness, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_9networkit_10centrality_ApproxCloseness(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_9networkit_10centrality_Centrality(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_9networkit_10centrality_15ApproxCloseness_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9networkit_10centrality_ApproxCloseness[] = {
  {"getSquareErrorEstimates", (PyCFunction)__pyx_pw_9networkit_10centrality_15ApproxCloseness_3getSquareErrorEstimates, METH_NOARGS, __pyx_doc_9networkit_10centrality_15ApproxCloseness_2getSquareErrorEstimates},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_15ApproxCloseness_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_15ApproxCloseness_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_10centrality_ApproxCloseness = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.centrality.ApproxCloseness", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_10centrality_ApproxCloseness), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_10centrality_Centrality, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  " Approximation of closeness centrality according to algorithm described in\n  \tCohen et al., Computing Classic Closeness Centrality, at Scale.\n\n\tApproxCloseness(G, nSamples, epsilon=0.1, normalized=False, type=OUTBOUND)\n\n\tThe algorithm approximates the closeness of all nodes in both directed and undirected graphs using a hybrid estimator.\n\tFirst, it takes nSamples samples. For these sampled nodes, the closeness is computed exactly. The pivot of each of the\n\tremaining nodes is the closest sampled node to it. If a node lies very close to its pivot, a sampling approach is used.\n\tOtherwise, a pivoting approach is used. Notice that the input graph has to be connected.\n\n\tParameters:\n\t-----------\n\tG : networkit.Graph\n\t\tinput graph (undirected)\n\tnSamples : count\n\t\tuser defined number of samples\n\tepsilon : double, optional\n\t\tparameter used for the error guarantee; it is also used to control when to use sampling and when to use pivoting\n\tnormalized : bool, optional\n\t\tnormalize centrality values in interval [0,1]\n\ttype : _ClosenessType, optional\n\t\tuse in- or outbound centrality or the sum of both (see paper) for computing closeness on directed graph. If G is undirected, this can be ignored.\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_10centrality_Centrality, /*tp_traverse*/
  __pyx_tp_clear_9networkit_10centrality_Centrality, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_10centrality_ApproxCloseness, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_9networkit_10centrality_10Centrality_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_10centrality_ApproxCloseness, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_9networkit_10centrality_DegreeCentrality(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_9networkit_10centrality_Centrality(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_9networkit_10centrality_16DegreeCentrality_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9networkit_10centrality_DegreeCentrality[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_16DegreeCentrality_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_16DegreeCentrality_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_10centrality_DegreeCentrality = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.centrality.DegreeCentrality", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_10centrality_DegreeCentrality), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_10centrality_Centrality, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  " Node centrality index which ranks nodes by their degree.\n\tOptional normalization by maximum degree. The run() method runs in O(m) time, where m is the number of\n\tedges in the graph.\n\n\tDegreeCentrality(G, normalized=False, outDeg=True, ignoreSelfLoops=True)\n\n\tConstructs the DegreeCentrality class for the given Graph `G`. If the scores should be normalized,\n\tthen set `normalized` to True.\n\n\tParameters:\n\t-----------\n\tG : networkit.Graph\n\t\tThe graph.\n\tnormalized : bool, optional\n\t\tNormalize centrality values in the interval [0,1].\n\t\toutdeg : bool, optional\n\t\tIf set to true, computes the centrality based on out-degrees, otherwise based on the in-degrees.\n\t\tignoreSelfLoops : bool, optional\n\t\tIf set to true, self loops will not be taken into account.\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_10centrality_Centrality, /*tp_traverse*/
  __pyx_tp_clear_9networkit_10centrality_Centrality, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_10centrality_DegreeCentrality, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_9networkit_10centrality_10Centrality_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_10centrality_DegreeCentrality, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_9networkit_10centrality_HarmonicCloseness(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_9networkit_10centrality_Centrality(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_9networkit_10centrality_17HarmonicCloseness_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9networkit_10centrality_HarmonicCloseness[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_17HarmonicCloseness_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_17HarmonicCloseness_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_10centrality_HarmonicCloseness = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.centrality.HarmonicCloseness", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_10centrality_HarmonicCloseness), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_10centrality_Centrality, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n\tHarmonicCloseness(G, normalized=True)\n\n\tConstructs the HarmonicCloseness class for the given Graph `G`.\n    If the harmonic closeness scores should not be normalized, set\n    `normalized` to False.\n    The run() method takes O(nm) time, where n is the number\n \tof nodes and m is the number of edges of the graph.\n\n \tParameters:\n \t-----------\n \tG : networkit.Graph\n \t\tThe graph.\n \tnormalized : bool, optional\n \t\tSet this parameter to False if scores should not be\n                    normalized into an interval of [0,1].\n                    Normalization only for unweighted graphs.\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_10centrality_Centrality, /*tp_traverse*/
  __pyx_tp_clear_9networkit_10centrality_Centrality, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_10centrality_HarmonicCloseness, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_9networkit_10centrality_10Centrality_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_10centrality_HarmonicCloseness, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_9networkit_10centrality_TopCloseness(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_10centrality_TopCloseness *p;
  PyObject *o = __pyx_ptype_9networkit_4base_Algorithm->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_10centrality_TopCloseness *)o);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_9networkit_10centrality_12TopCloseness_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_10centrality_TopCloseness(PyObject *o) {
  struct __pyx_obj_9networkit_10centrality_TopCloseness *p = (struct __pyx_obj_9networkit_10centrality_TopCloseness *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_G);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) __pyx_ptype_9networkit_4base_Algorithm->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_9networkit_10centrality_TopCloseness);
}

static int __pyx_tp_traverse_9networkit_10centrality_TopCloseness(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_10centrality_TopCloseness *p = (struct __pyx_obj_9networkit_10centrality_TopCloseness *)o;
  e = ((likely(__pyx_ptype_9networkit_4base_Algorithm)) ? ((__pyx_ptype_9networkit_4base_Algorithm->tp_traverse) ? __pyx_ptype_9networkit_4base_Algorithm->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9networkit_10centrality_TopCloseness)); if (e) return e;
  if (p->_G) {
    e = (*v)(((PyObject *)p->_G), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_10centrality_TopCloseness(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_10centrality_TopCloseness *p = (struct __pyx_obj_9networkit_10centrality_TopCloseness *)o;
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) { if (__pyx_ptype_9networkit_4base_Algorithm->tp_clear) __pyx_ptype_9networkit_4base_Algorithm->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9networkit_10centrality_TopCloseness);
  tmp = ((PyObject*)p->_G);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9networkit_10centrality_TopCloseness[] = {
  {"topkNodesList", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_10centrality_12TopCloseness_3topkNodesList, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_10centrality_12TopCloseness_2topkNodesList},
  {"topkScoresList", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_10centrality_12TopCloseness_5topkScoresList, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_10centrality_12TopCloseness_4topkScoresList},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_12TopCloseness_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_12TopCloseness_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_10centrality_TopCloseness = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.centrality.TopCloseness", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_10centrality_TopCloseness), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_10centrality_TopCloseness, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n\tFinds the top k nodes with highest closeness centrality faster than computing it for all nodes, based on \"Computing Top-k Closeness Centrality Faster in Unweighted Graphs\", Bergamini et al., ALENEX16.\n\tThe algorithms is based on two independent heuristics, described in the referenced paper. We recommend to use first_heu = true and second_heu = false for complex networks and first_heu = true and second_heu = true for street networks or networks with large diameters.\n\n\tTopCloseness(G, k=1, first_heu=True, sec_heu=True)\n\n\tParameters:\n\t-----------\n\tG: An unweighted graph.\n\tk: Number of nodes with highest closeness that have to be found. For example, if k = 10, the top 10 nodes with highest closeness will be computed.\n\tfirst_heu: If true, the neighborhood-based lower bound is computed and nodes are sorted according to it. If false, nodes are simply sorted by degree.\n\tsec_heu: If true, the BFSbound is re-computed at each iteration. If false, BFScut is used.\n\tThe worst case running time of the algorithm is O(nm), where n is the number of nodes and m is the number of edges.\n\tHowever, for most networks the empirical running time is O(m).\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_10centrality_TopCloseness, /*tp_traverse*/
  __pyx_tp_clear_9networkit_10centrality_TopCloseness, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_10centrality_TopCloseness, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_10centrality_TopCloseness, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_9networkit_10centrality_TopHarmonicCloseness(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_10centrality_TopHarmonicCloseness *p;
  PyObject *o = __pyx_ptype_9networkit_4base_Algorithm->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_10centrality_TopHarmonicCloseness *)o);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_9networkit_10centrality_20TopHarmonicCloseness_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_10centrality_TopHarmonicCloseness(PyObject *o) {
  struct __pyx_obj_9networkit_10centrality_TopHarmonicCloseness *p = (struct __pyx_obj_9networkit_10centrality_TopHarmonicCloseness *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_G);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) __pyx_ptype_9networkit_4base_Algorithm->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_9networkit_10centrality_TopHarmonicCloseness);
}

static int __pyx_tp_traverse_9networkit_10centrality_TopHarmonicCloseness(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_10centrality_TopHarmonicCloseness *p = (struct __pyx_obj_9networkit_10centrality_TopHarmonicCloseness *)o;
  e = ((likely(__pyx_ptype_9networkit_4base_Algorithm)) ? ((__pyx_ptype_9networkit_4base_Algorithm->tp_traverse) ? __pyx_ptype_9networkit_4base_Algorithm->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9networkit_10centrality_TopHarmonicCloseness)); if (e) return e;
  if (p->_G) {
    e = (*v)(((PyObject *)p->_G), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_10centrality_TopHarmonicCloseness(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_10centrality_TopHarmonicCloseness *p = (struct __pyx_obj_9networkit_10centrality_TopHarmonicCloseness *)o;
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) { if (__pyx_ptype_9networkit_4base_Algorithm->tp_clear) __pyx_ptype_9networkit_4base_Algorithm->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9networkit_10centrality_TopHarmonicCloseness);
  tmp = ((PyObject*)p->_G);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9networkit_10centrality_TopHarmonicCloseness[] = {
  {"topkNodesList", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_10centrality_20TopHarmonicCloseness_3topkNodesList, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_10centrality_20TopHarmonicCloseness_2topkNodesList},
  {"topkScoresList", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_10centrality_20TopHarmonicCloseness_5topkScoresList, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_10centrality_20TopHarmonicCloseness_4topkScoresList},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_20TopHarmonicCloseness_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_20TopHarmonicCloseness_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_10centrality_TopHarmonicCloseness = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.centrality.TopHarmonicCloseness", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_10centrality_TopHarmonicCloseness), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_10centrality_TopHarmonicCloseness, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  " \n\tFinds the top k nodes with highest harmonic closeness centrality faster\n\tthan computing it for all nodes. The implementation is based on \"Computing\n\tTop-k Centrality Faster in Unweighted Graphs\", Bergamini et al., ALENEX16.\n\tThe algorithm also works with weighted graphs but only if with the NBcut\n\tvariation. We recommend to use useNBbound = False for complex (weighted)\n\tnetworks (or networks with small diameter) and useNBbound = True for\n\tunweighted street networks (or networks with large diameters). Notice that\n\tthe worst case running time of the algorithm is O(nm), where n is the\n\tnumber of nodes and m is the number of edges. However, for most real-world\n\tnetworks the empirical running time is O(m).\n\n\n\tTopHarmonicCloseness(G, k=1, useNBbound=True)\n\n\tParameters\n\t----------\n\tG : networkit.Graph\n\t\tThe graph. If useNBbound is set to 'True', edge weights will be ignored.\n\tk : int\n\t\tNumber of nodes with highest closeness that have to be found. For example, if k = 10, the\n\t\ttop 10 nodes with highest closeness will be computed. useNBbound: If True, the NBbound is\n\t\tre-computed at each iteration. If False, NBcut is used. The worst case running time of the\n\t\talgorithm is O(nm), where n is the number of nodes and m is the number of edges.\n\t\tHowever, for most networks the empirical running time is O(m).\n\tuseNBbound : bool\n\t\tIf True, the NBbound variation will be used, otherwise NBcut.\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_10centrality_TopHarmonicCloseness, /*tp_traverse*/
  __pyx_tp_clear_9networkit_10centrality_TopHarmonicCloseness, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_10centrality_TopHarmonicCloseness, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_10centrality_TopHarmonicCloseness, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_9networkit_10centrality_DynTopHarmonicCloseness(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_10centrality_DynTopHarmonicCloseness *p;
  PyObject *o = __pyx_ptype_9networkit_4base_Algorithm->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_10centrality_DynTopHarmonicCloseness *)o);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_9networkit_10centrality_23DynTopHarmonicCloseness_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_10centrality_DynTopHarmonicCloseness(PyObject *o) {
  struct __pyx_obj_9networkit_10centrality_DynTopHarmonicCloseness *p = (struct __pyx_obj_9networkit_10centrality_DynTopHarmonicCloseness *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_G);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) __pyx_ptype_9networkit_4base_Algorithm->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_9networkit_10centrality_DynTopHarmonicCloseness);
}

static int __pyx_tp_traverse_9networkit_10centrality_DynTopHarmonicCloseness(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_10centrality_DynTopHarmonicCloseness *p = (struct __pyx_obj_9networkit_10centrality_DynTopHarmonicCloseness *)o;
  e = ((likely(__pyx_ptype_9networkit_4base_Algorithm)) ? ((__pyx_ptype_9networkit_4base_Algorithm->tp_traverse) ? __pyx_ptype_9networkit_4base_Algorithm->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9networkit_10centrality_DynTopHarmonicCloseness)); if (e) return e;
  if (p->_G) {
    e = (*v)(((PyObject *)p->_G), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_10centrality_DynTopHarmonicCloseness(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_10centrality_DynTopHarmonicCloseness *p = (struct __pyx_obj_9networkit_10centrality_DynTopHarmonicCloseness *)o;
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) { if (__pyx_ptype_9networkit_4base_Algorithm->tp_clear) __pyx_ptype_9networkit_4base_Algorithm->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9networkit_10centrality_DynTopHarmonicCloseness);
  tmp = ((PyObject*)p->_G);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9networkit_10centrality_DynTopHarmonicCloseness[] = {
  {"ranking", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_10centrality_23DynTopHarmonicCloseness_3ranking, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_10centrality_23DynTopHarmonicCloseness_2ranking},
  {"topkNodesList", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_10centrality_23DynTopHarmonicCloseness_5topkNodesList, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_10centrality_23DynTopHarmonicCloseness_4topkNodesList},
  {"topkScoresList", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_10centrality_23DynTopHarmonicCloseness_7topkScoresList, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_10centrality_23DynTopHarmonicCloseness_6topkScoresList},
  {"update", (PyCFunction)__pyx_pw_9networkit_10centrality_23DynTopHarmonicCloseness_9update, METH_O, 0},
  {"updateBatch", (PyCFunction)__pyx_pw_9networkit_10centrality_23DynTopHarmonicCloseness_11updateBatch, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_23DynTopHarmonicCloseness_13__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_23DynTopHarmonicCloseness_15__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_10centrality_DynTopHarmonicCloseness = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.centrality.DynTopHarmonicCloseness", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_10centrality_DynTopHarmonicCloseness), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_10centrality_DynTopHarmonicCloseness, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  " Finds the top k nodes with highest harmonic closeness centrality faster\n\tthan computing it for all nodes and updates them after a single or multiple\n\tedge update. The implementation is based on \"Computing Top-k Closeness\n\tCentrality in Fully-dynamic Graphs\", Bisenius et al., ALENEX18.\n\tThe implementation is based on the static algorithms by Borassi et al.\n\t(complex networks) and Bergamini et al. (large-diameter networks).\n\n\tDynTopHarmonicCloseness(G, k=1, useBFSbound=True)\n\n\tParameters:\n\t-----------\n\tG: An unweighted graph.\n\tk: Number of nodes with highest closeness that have to be found. For example, if k = 10, the top 10 nodes with highest closeness will be computed.\n\tuseBFSbound: If true, the BFSbound is re-computed at each iteration. If false, BFScut is used.\n\tThe worst case running time of the algorithm is O(nm), where n is the number of nodes and m is the number of edges.\n\tHowever, for most networks the empirical running time is O(m).\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_10centrality_DynTopHarmonicCloseness, /*tp_traverse*/
  __pyx_tp_clear_9networkit_10centrality_DynTopHarmonicCloseness, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_10centrality_DynTopHarmonicCloseness, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_10centrality_DynTopHarmonicCloseness, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_9networkit_10centrality_LocalPartitionCoverage(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_10centrality_LocalPartitionCoverage *p;
  PyObject *o = __pyx_tp_new_9networkit_10centrality_Centrality(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_10centrality_LocalPartitionCoverage *)o);
  p->_P = ((struct __pyx_obj_9networkit_10structures_Partition *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_9networkit_10centrality_22LocalPartitionCoverage_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_10centrality_LocalPartitionCoverage(PyObject *o) {
  struct __pyx_obj_9networkit_10centrality_LocalPartitionCoverage *p = (struct __pyx_obj_9networkit_10centrality_LocalPartitionCoverage *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_P);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_9networkit_10centrality_Centrality(o);
}

static int __pyx_tp_traverse_9networkit_10centrality_LocalPartitionCoverage(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_10centrality_LocalPartitionCoverage *p = (struct __pyx_obj_9networkit_10centrality_LocalPartitionCoverage *)o;
  e = __pyx_tp_traverse_9networkit_10centrality_Centrality(o, v, a); if (e) return e;
  if (p->_P) {
    e = (*v)(((PyObject *)p->_P), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_10centrality_LocalPartitionCoverage(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_10centrality_LocalPartitionCoverage *p = (struct __pyx_obj_9networkit_10centrality_LocalPartitionCoverage *)o;
  __pyx_tp_clear_9networkit_10centrality_Centrality(o);
  tmp = ((PyObject*)p->_P);
  p->_P = ((struct __pyx_obj_9networkit_10structures_Partition *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9networkit_10centrality_LocalPartitionCoverage[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_22LocalPartitionCoverage_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_22LocalPartitionCoverage_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_10centrality_LocalPartitionCoverage = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.centrality.LocalPartitionCoverage", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_10centrality_LocalPartitionCoverage), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_10centrality_LocalPartitionCoverage, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n\tThe local partition coverage is the amount of neighbors of a node u that are in the same partition as u.\n\tThe running time of the run() method is O(m), where m is the number of edges in the graph.\n\n\tLocalPartitionCoverage(G, P)\n\n\tParameters:\n\t-----------\n\tG : networkit.Graph\n\t\tThe graph.\n\tP : networkit.Partition\n\t\tThe partition to use\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_10centrality_LocalPartitionCoverage, /*tp_traverse*/
  __pyx_tp_clear_9networkit_10centrality_LocalPartitionCoverage, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_10centrality_LocalPartitionCoverage, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_9networkit_10centrality_10Centrality_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_10centrality_LocalPartitionCoverage, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_9networkit_10centrality_GroupDegree(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_10centrality_GroupDegree *p;
  PyObject *o = __pyx_ptype_9networkit_4base_Algorithm->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_10centrality_GroupDegree *)o);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_9networkit_10centrality_11GroupDegree_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_10centrality_GroupDegree(PyObject *o) {
  struct __pyx_obj_9networkit_10centrality_GroupDegree *p = (struct __pyx_obj_9networkit_10centrality_GroupDegree *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_G);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) __pyx_ptype_9networkit_4base_Algorithm->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_9networkit_10centrality_GroupDegree);
}

static int __pyx_tp_traverse_9networkit_10centrality_GroupDegree(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_10centrality_GroupDegree *p = (struct __pyx_obj_9networkit_10centrality_GroupDegree *)o;
  e = ((likely(__pyx_ptype_9networkit_4base_Algorithm)) ? ((__pyx_ptype_9networkit_4base_Algorithm->tp_traverse) ? __pyx_ptype_9networkit_4base_Algorithm->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9networkit_10centrality_GroupDegree)); if (e) return e;
  if (p->_G) {
    e = (*v)(((PyObject *)p->_G), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_10centrality_GroupDegree(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_10centrality_GroupDegree *p = (struct __pyx_obj_9networkit_10centrality_GroupDegree *)o;
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) { if (__pyx_ptype_9networkit_4base_Algorithm->tp_clear) __pyx_ptype_9networkit_4base_Algorithm->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9networkit_10centrality_GroupDegree);
  tmp = ((PyObject*)p->_G);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9networkit_10centrality_GroupDegree[] = {
  {"groupMaxDegree", (PyCFunction)__pyx_pw_9networkit_10centrality_11GroupDegree_3groupMaxDegree, METH_NOARGS, __pyx_doc_9networkit_10centrality_11GroupDegree_2groupMaxDegree},
  {"getScore", (PyCFunction)__pyx_pw_9networkit_10centrality_11GroupDegree_5getScore, METH_NOARGS, __pyx_doc_9networkit_10centrality_11GroupDegree_4getScore},
  {"scoreOfGroup", (PyCFunction)__pyx_pw_9networkit_10centrality_11GroupDegree_7scoreOfGroup, METH_O, __pyx_doc_9networkit_10centrality_11GroupDegree_6scoreOfGroup},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_11GroupDegree_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_11GroupDegree_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_10centrality_GroupDegree = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.centrality.GroupDegree", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_10centrality_GroupDegree), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_10centrality_GroupDegree, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n\tFinds the group with the highest group degree centrality according to the\n\tdefinition proposed in 'The centrality of groups and classes' by Everett et\n\tal. (The Journal of mathematical sociology, 1999). This is a submodular but\n\tnon monotone function so the algorithm can find a solution that is at least\n\t1/2 of the optimum. Worst-case running time is quadratic, but usually\n\tfaster in real-world networks.\n\tThe 'countGroupNodes' option also count the nodes inside the group in the\n\tscore, this make the group degree monotone and submodular and the algorithm\n\tis guaranteed to return a (1 - 1/e)-approximation of the optimal solution.\n\n\tGroupDegree(G, k = 1, countGroupNodes = True)\n\n\tParameters:\n\t-----------\n\t\tG: A graph.\n\t\tk: Size of the group of nodes\n\t\tcountGroupNodes: if nodes inside the group should be counted in the\n\t\tcentrality score.\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_10centrality_GroupDegree, /*tp_traverse*/
  __pyx_tp_clear_9networkit_10centrality_GroupDegree, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_10centrality_GroupDegree, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_10centrality_GroupDegree, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_9networkit_10centrality_GedWalk(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_10centrality_GedWalk *p;
  PyObject *o = __pyx_ptype_9networkit_4base_Algorithm->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_10centrality_GedWalk *)o);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_9networkit_10centrality_7GedWalk_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_10centrality_GedWalk(PyObject *o) {
  struct __pyx_obj_9networkit_10centrality_GedWalk *p = (struct __pyx_obj_9networkit_10centrality_GedWalk *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_9networkit_10centrality_7GedWalk_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->_G);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) __pyx_ptype_9networkit_4base_Algorithm->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_9networkit_10centrality_GedWalk);
}

static int __pyx_tp_traverse_9networkit_10centrality_GedWalk(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_10centrality_GedWalk *p = (struct __pyx_obj_9networkit_10centrality_GedWalk *)o;
  e = ((likely(__pyx_ptype_9networkit_4base_Algorithm)) ? ((__pyx_ptype_9networkit_4base_Algorithm->tp_traverse) ? __pyx_ptype_9networkit_4base_Algorithm->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9networkit_10centrality_GedWalk)); if (e) return e;
  if (p->_G) {
    e = (*v)(((PyObject *)p->_G), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_10centrality_GedWalk(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_10centrality_GedWalk *p = (struct __pyx_obj_9networkit_10centrality_GedWalk *)o;
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) { if (__pyx_ptype_9networkit_4base_Algorithm->tp_clear) __pyx_ptype_9networkit_4base_Algorithm->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9networkit_10centrality_GedWalk);
  tmp = ((PyObject*)p->_G);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9networkit_10centrality_GedWalk[] = {
  {"groupMaxGedWalk", (PyCFunction)__pyx_pw_9networkit_10centrality_7GedWalk_5groupMaxGedWalk, METH_NOARGS, __pyx_doc_9networkit_10centrality_7GedWalk_4groupMaxGedWalk},
  {"getApproximateScore", (PyCFunction)__pyx_pw_9networkit_10centrality_7GedWalk_7getApproximateScore, METH_NOARGS, __pyx_doc_9networkit_10centrality_7GedWalk_6getApproximateScore},
  {"scoreOfGroup", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_10centrality_7GedWalk_9scoreOfGroup, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_10centrality_7GedWalk_8scoreOfGroup},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_7GedWalk_11__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_7GedWalk_13__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_10centrality_GedWalk = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.centrality.GedWalk", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_10centrality_GedWalk), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_10centrality_GedWalk, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_9networkit_10centrality_GedWalk, /*tp_traverse*/
  __pyx_tp_clear_9networkit_10centrality_GedWalk, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_10centrality_GedWalk, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_10centrality_GedWalk, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_9networkit_10centrality_ApproxGroupBetweenness(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_10centrality_ApproxGroupBetweenness *p;
  PyObject *o = __pyx_ptype_9networkit_4base_Algorithm->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_10centrality_ApproxGroupBetweenness *)o);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_9networkit_10centrality_22ApproxGroupBetweenness_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_10centrality_ApproxGroupBetweenness(PyObject *o) {
  struct __pyx_obj_9networkit_10centrality_ApproxGroupBetweenness *p = (struct __pyx_obj_9networkit_10centrality_ApproxGroupBetweenness *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_G);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) __pyx_ptype_9networkit_4base_Algorithm->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_9networkit_10centrality_ApproxGroupBetweenness);
}

static int __pyx_tp_traverse_9networkit_10centrality_ApproxGroupBetweenness(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_10centrality_ApproxGroupBetweenness *p = (struct __pyx_obj_9networkit_10centrality_ApproxGroupBetweenness *)o;
  e = ((likely(__pyx_ptype_9networkit_4base_Algorithm)) ? ((__pyx_ptype_9networkit_4base_Algorithm->tp_traverse) ? __pyx_ptype_9networkit_4base_Algorithm->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9networkit_10centrality_ApproxGroupBetweenness)); if (e) return e;
  if (p->_G) {
    e = (*v)(((PyObject *)p->_G), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_10centrality_ApproxGroupBetweenness(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_10centrality_ApproxGroupBetweenness *p = (struct __pyx_obj_9networkit_10centrality_ApproxGroupBetweenness *)o;
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) { if (__pyx_ptype_9networkit_4base_Algorithm->tp_clear) __pyx_ptype_9networkit_4base_Algorithm->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9networkit_10centrality_ApproxGroupBetweenness);
  tmp = ((PyObject*)p->_G);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9networkit_10centrality_ApproxGroupBetweenness[] = {
  {"groupMaxBetweenness", (PyCFunction)__pyx_pw_9networkit_10centrality_22ApproxGroupBetweenness_3groupMaxBetweenness, METH_NOARGS, __pyx_doc_9networkit_10centrality_22ApproxGroupBetweenness_2groupMaxBetweenness},
  {"scoreOfGroup", (PyCFunction)__pyx_pw_9networkit_10centrality_22ApproxGroupBetweenness_5scoreOfGroup, METH_O, __pyx_doc_9networkit_10centrality_22ApproxGroupBetweenness_4scoreOfGroup},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_22ApproxGroupBetweenness_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_22ApproxGroupBetweenness_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_10centrality_ApproxGroupBetweenness = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.centrality.ApproxGroupBetweenness", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_10centrality_ApproxGroupBetweenness), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_10centrality_ApproxGroupBetweenness, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n\tApproxGroupBetweenness(G, groupSize, epsilon)\n\n\tConstructs the ApproxGroupBetweenness class for a given undirected Graph\n\t`G`.\n\n\tParameters:\n\t-----------\n\tG : networkit.Graph\n\t\tThe graph.\n\tgroupSize : count\n\t\tThe desired size of the group.\n\tepsilon : double\n\t\tDetermines the accuracy of the approximation.\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_10centrality_ApproxGroupBetweenness, /*tp_traverse*/
  __pyx_tp_clear_9networkit_10centrality_ApproxGroupBetweenness, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_10centrality_ApproxGroupBetweenness, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_10centrality_ApproxGroupBetweenness, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_9networkit_10centrality_GroupCloseness(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_10centrality_GroupCloseness *p;
  PyObject *o = __pyx_ptype_9networkit_4base_Algorithm->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_10centrality_GroupCloseness *)o);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_9networkit_10centrality_14GroupCloseness_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_10centrality_GroupCloseness(PyObject *o) {
  struct __pyx_obj_9networkit_10centrality_GroupCloseness *p = (struct __pyx_obj_9networkit_10centrality_GroupCloseness *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_G);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) __pyx_ptype_9networkit_4base_Algorithm->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_9networkit_10centrality_GroupCloseness);
}

static int __pyx_tp_traverse_9networkit_10centrality_GroupCloseness(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_10centrality_GroupCloseness *p = (struct __pyx_obj_9networkit_10centrality_GroupCloseness *)o;
  e = ((likely(__pyx_ptype_9networkit_4base_Algorithm)) ? ((__pyx_ptype_9networkit_4base_Algorithm->tp_traverse) ? __pyx_ptype_9networkit_4base_Algorithm->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9networkit_10centrality_GroupCloseness)); if (e) return e;
  if (p->_G) {
    e = (*v)(((PyObject *)p->_G), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_10centrality_GroupCloseness(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_10centrality_GroupCloseness *p = (struct __pyx_obj_9networkit_10centrality_GroupCloseness *)o;
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) { if (__pyx_ptype_9networkit_4base_Algorithm->tp_clear) __pyx_ptype_9networkit_4base_Algorithm->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9networkit_10centrality_GroupCloseness);
  tmp = ((PyObject*)p->_G);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9networkit_10centrality_GroupCloseness[] = {
  {"groupMaxCloseness", (PyCFunction)__pyx_pw_9networkit_10centrality_14GroupCloseness_3groupMaxCloseness, METH_NOARGS, __pyx_doc_9networkit_10centrality_14GroupCloseness_2groupMaxCloseness},
  {"computeFarness", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_10centrality_14GroupCloseness_5computeFarness, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_10centrality_14GroupCloseness_4computeFarness},
  {"scoreOfGroup", (PyCFunction)__pyx_pw_9networkit_10centrality_14GroupCloseness_7scoreOfGroup, METH_O, __pyx_doc_9networkit_10centrality_14GroupCloseness_6scoreOfGroup},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_14GroupCloseness_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_14GroupCloseness_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_10centrality_GroupCloseness = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.centrality.GroupCloseness", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_10centrality_GroupCloseness), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_10centrality_GroupCloseness, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n\tFinds the group of nodes with highest (group) closeness centrality. The algorithm is the one proposed in Bergamini et al., ALENEX 2018 and finds a solution that is a (1-1/e)-approximation of the optimum.\n\tThe worst-case running time of this approach is quadratic, but usually much faster in practice.\n\n\tGroupCloseness(G, k=1, H=0)\n\n\tParameters:\n\t-----------\n\tG: An unweighted graph.\n\tk: Size of the group.\n\tH: If equal 0, simply runs the algorithm proposed in Bergamini et al.. If > 0, interrupts all BFSs after H iterations (suggested for very large networks).\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_10centrality_GroupCloseness, /*tp_traverse*/
  __pyx_tp_clear_9networkit_10centrality_GroupCloseness, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_10centrality_GroupCloseness, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_10centrality_GroupCloseness, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_9networkit_10centrality_KPathCentrality(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_9networkit_10centrality_Centrality(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_9networkit_10centrality_15KPathCentrality_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9networkit_10centrality_KPathCentrality[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_15KPathCentrality_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_15KPathCentrality_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_10centrality_KPathCentrality = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.centrality.KPathCentrality", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_10centrality_KPathCentrality), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_10centrality_Centrality, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n\tKPathCentrality(G, alpha=0.2, k=0)\n\n\tConstructs the K-Path Centrality class for the given Graph `G`.\n\n \tParameters:\n \t-----------\n \tG : networkit.Graph\n \t\tThe graph.\n \talpha : double, in interval [-0.5, 0.5]\n\t\ttradeoff between runtime and precision\n\t\t-0.5: maximum precision, maximum runtime\n \t\t 0.5: lowest precision, lowest runtime\n\tk: maximum length of paths\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_10centrality_Centrality, /*tp_traverse*/
  __pyx_tp_clear_9networkit_10centrality_Centrality, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_10centrality_KPathCentrality, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_9networkit_10centrality_10Centrality_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_10centrality_KPathCentrality, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_9networkit_10centrality_KatzCentrality(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_9networkit_10centrality_Centrality(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_9networkit_10centrality_14KatzCentrality_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyObject *__pyx_getprop_9networkit_10centrality_14KatzCentrality_edgeDirection(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9networkit_10centrality_14KatzCentrality_13edgeDirection_1__get__(o);
}

static int __pyx_setprop_9networkit_10centrality_14KatzCentrality_edgeDirection(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9networkit_10centrality_14KatzCentrality_13edgeDirection_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_9networkit_10centrality_KatzCentrality[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_14KatzCentrality_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_14KatzCentrality_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_9networkit_10centrality_KatzCentrality[] = {
  {(char *)"edgeDirection", __pyx_getprop_9networkit_10centrality_14KatzCentrality_edgeDirection, __pyx_setprop_9networkit_10centrality_14KatzCentrality_edgeDirection, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_10centrality_KatzCentrality = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.centrality.KatzCentrality", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_10centrality_KatzCentrality), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_10centrality_Centrality, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n\tKatzCentrality(G, alpha=0, beta=0.1, tol=1e-8)\n\n\tConstructs a KatzCentrality object for the given Graph `G`.\n\tEach iteration of the algorithm requires O(m) time.\n\tThe number of iterations depends on how long it takes to reach the convergence\n\t(and therefore on the desired tolerance `tol`).\n\n \tParameters:\n \t-----------\n \tG : networkit.Graph\n \t\tThe graph.\n \talpha : double\n\t\tDamping of the matrix vector product result, must be non negative.\n\t\tLeave this parameter to 0 to use the default value 1 / (max_degree + 1).\n\tbeta : double\n\t\tConstant value added to the centrality of each vertex\n\ttol : double\n\t\tThe tolerance for convergence.\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_10centrality_Centrality, /*tp_traverse*/
  __pyx_tp_clear_9networkit_10centrality_Centrality, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_10centrality_KatzCentrality, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_9networkit_10centrality_KatzCentrality, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_9networkit_10centrality_10Centrality_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_10centrality_KatzCentrality, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_9networkit_10centrality_DynKatzCentrality(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_9networkit_10centrality_Centrality(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_9networkit_10centrality_17DynKatzCentrality_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9networkit_10centrality_DynKatzCentrality[] = {
  {"update", (PyCFunction)__pyx_pw_9networkit_10centrality_17DynKatzCentrality_3update, METH_O, 0},
  {"updateBatch", (PyCFunction)__pyx_pw_9networkit_10centrality_17DynKatzCentrality_5updateBatch, METH_O, 0},
  {"top", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_10centrality_17DynKatzCentrality_7top, METH_VARARGS|METH_KEYWORDS, 0},
  {"bound", (PyCFunction)__pyx_pw_9networkit_10centrality_17DynKatzCentrality_9bound, METH_O, 0},
  {"areDistinguished", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_10centrality_17DynKatzCentrality_11areDistinguished, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_17DynKatzCentrality_13__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_17DynKatzCentrality_15__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_10centrality_DynKatzCentrality = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.centrality.DynKatzCentrality", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_10centrality_DynKatzCentrality), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_10centrality_Centrality, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  " Finds the top-k nodes with highest Katz centrality.\n\n\tDynKatzCentrality(G, k, groupOnly=False, tolerance=1e-9)\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_10centrality_Centrality, /*tp_traverse*/
  __pyx_tp_clear_9networkit_10centrality_Centrality, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_10centrality_DynKatzCentrality, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_9networkit_10centrality_10Centrality_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_10centrality_DynKatzCentrality, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_9networkit_10centrality_LocalClusteringCoefficient(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_9networkit_10centrality_Centrality(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_9networkit_10centrality_26LocalClusteringCoefficient_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9networkit_10centrality_LocalClusteringCoefficient[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_26LocalClusteringCoefficient_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_26LocalClusteringCoefficient_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_10centrality_LocalClusteringCoefficient = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.centrality.LocalClusteringCoefficient", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_10centrality_LocalClusteringCoefficient), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_10centrality_Centrality, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n\tLocalClusteringCoefficient(G, turbo=False)\n\n\tConstructs the LocalClusteringCoefficient class for the given Graph `G`. If the local clustering coefficient values should be normalized,\n\tthen set `normalized` to True. The graph may not contain self-loops.\n\n\tThere are two algorithms available. The trivial (parallel) algorithm needs only a small amount of additional memory.\n\tThe turbo mode adds a (sequential, but fast) pre-processing step using ideas from [0]. This reduces the running time\n\tsignificantly for most graphs. However, the turbo mode needs O(m) additional memory. In practice this should be a bit\n\tless than half of the memory that is needed for the graph itself. The turbo mode is particularly effective for graphs\n\twith nodes of very high degree and a very skewed degree distribution.\n\n\t[0] Triangle Listing Algorithms: Back from the Diversion\n\tMark Ortmann and Ulrik Brandes\n\t2014 Proceedings of the Sixteenth Workshop on Algorithm Engineering and Experiments (ALENEX). 2014, 1-8\n\n \tParameters:\n \t-----------\n \tG : networkit.Graph\n \t\tThe graph.\n\tturbo : bool\n\t\tIf the turbo mode shall be activated.\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_10centrality_Centrality, /*tp_traverse*/
  __pyx_tp_clear_9networkit_10centrality_Centrality, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_10centrality_LocalClusteringCoefficient, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_9networkit_10centrality_10Centrality_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_10centrality_LocalClusteringCoefficient, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_9networkit_10centrality_Sfigality(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_9networkit_10centrality_Centrality(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_9networkit_10centrality_9Sfigality_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9networkit_10centrality_Sfigality[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_9Sfigality_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_9Sfigality_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_10centrality_Sfigality = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.centrality.Sfigality", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_10centrality_Sfigality), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_10centrality_Centrality, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n\tSfigality is a new type of node centrality measures that is high if neighboring nodes have a higher degree, e.g. in social networks, if your friends have more friends than you. Formally:\n\n\t\t$$\\sigma(u) = \014rac{| \\{ v: \\{u,v\\} \\in E, deg(u) < deg(v) \\} |}{ deg(u) }$$\n\n \tParameters:\n \t-----------\n \tG : networkit.Graph\n \t\tThe graph.\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_10centrality_Centrality, /*tp_traverse*/
  __pyx_tp_clear_9networkit_10centrality_Centrality, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_10centrality_Sfigality, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_9networkit_10centrality_10Centrality_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_10centrality_Sfigality, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_9networkit_10centrality_PermanenceCentrality(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_10centrality_PermanenceCentrality *p;
  PyObject *o = __pyx_ptype_9networkit_4base_Algorithm->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_10centrality_PermanenceCentrality *)o);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  p->_P = ((struct __pyx_obj_9networkit_10structures_Partition *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_9networkit_10centrality_20PermanenceCentrality_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_10centrality_PermanenceCentrality(PyObject *o) {
  struct __pyx_obj_9networkit_10centrality_PermanenceCentrality *p = (struct __pyx_obj_9networkit_10centrality_PermanenceCentrality *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_G);
  Py_CLEAR(p->_P);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) __pyx_ptype_9networkit_4base_Algorithm->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_9networkit_10centrality_PermanenceCentrality);
}

static int __pyx_tp_traverse_9networkit_10centrality_PermanenceCentrality(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_10centrality_PermanenceCentrality *p = (struct __pyx_obj_9networkit_10centrality_PermanenceCentrality *)o;
  e = ((likely(__pyx_ptype_9networkit_4base_Algorithm)) ? ((__pyx_ptype_9networkit_4base_Algorithm->tp_traverse) ? __pyx_ptype_9networkit_4base_Algorithm->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9networkit_10centrality_PermanenceCentrality)); if (e) return e;
  if (p->_G) {
    e = (*v)(((PyObject *)p->_G), a); if (e) return e;
  }
  if (p->_P) {
    e = (*v)(((PyObject *)p->_P), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_10centrality_PermanenceCentrality(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_10centrality_PermanenceCentrality *p = (struct __pyx_obj_9networkit_10centrality_PermanenceCentrality *)o;
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) { if (__pyx_ptype_9networkit_4base_Algorithm->tp_clear) __pyx_ptype_9networkit_4base_Algorithm->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9networkit_10centrality_PermanenceCentrality);
  tmp = ((PyObject*)p->_G);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_P);
  p->_P = ((struct __pyx_obj_9networkit_10structures_Partition *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9networkit_10centrality_PermanenceCentrality[] = {
  {"getIntraClustering", (PyCFunction)__pyx_pw_9networkit_10centrality_20PermanenceCentrality_3getIntraClustering, METH_O, 0},
  {"getPermanence", (PyCFunction)__pyx_pw_9networkit_10centrality_20PermanenceCentrality_5getPermanence, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_20PermanenceCentrality_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_20PermanenceCentrality_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_10centrality_PermanenceCentrality = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.centrality.PermanenceCentrality", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_10centrality_PermanenceCentrality), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_10centrality_PermanenceCentrality, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n\tPermanence centrality\n\n\tThis centrality measure measure how well a vertex belongs to its community. The values are calculated on the fly, the partion may be changed in between the requests.\n\tFor details see\n\n\tTanmoy Chakraborty, Sriram Srinivasan, Niloy Ganguly, Animesh Mukherjee, and Sanjukta Bhowmick. 2014.\n\tOn the permanence of vertices in network communities.\n\tIn Proceedings of the 20th ACM SIGKDD international conference on Knowledge discovery and data mining (KDD '14).\n\tACM, New York, NY, USA, 1396-1405. DOI: http://dx.doi.org/10.1145/2623330.2623707\n\n\tFIXME: does not use the common centrality interface yet.\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_10centrality_PermanenceCentrality, /*tp_traverse*/
  __pyx_tp_clear_9networkit_10centrality_PermanenceCentrality, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_10centrality_PermanenceCentrality, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_10centrality_PermanenceCentrality, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_9networkit_10centrality_LaplacianCentrality(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_9networkit_10centrality_Centrality(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_9networkit_10centrality_19LaplacianCentrality_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9networkit_10centrality_LaplacianCentrality[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_19LaplacianCentrality_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_19LaplacianCentrality_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_10centrality_LaplacianCentrality = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.centrality.LaplacianCentrality", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_10centrality_LaplacianCentrality), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_10centrality_Centrality, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  " Computes the Laplacian centrality of the graph.\n\n\tLaplacianCentrality(G, normalized=False)\n\n\tThe implementation is a simplification of the original algorithm proposed by Qi et al. in\n\t\"Laplacian centrality: A new centrality measure for weighted networks\".\n\n\tSee https://dl.acm.org/citation.cfm?id=2181343.2181780 for details.\n\n\tParameters:\n\t-----------\n\tG : networkit.Graph\n\t\tThe graph.\n\tnormalized : bool, optional\n\t\tWhether scores should be normalized by the energy of the full graph.\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_10centrality_Centrality, /*tp_traverse*/
  __pyx_tp_clear_9networkit_10centrality_Centrality, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_10centrality_LaplacianCentrality, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_9networkit_10centrality_10Centrality_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_10centrality_LaplacianCentrality, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_9networkit_10centrality_CoreDecomposition(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_9networkit_10centrality_Centrality(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_9networkit_10centrality_17CoreDecomposition_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9networkit_10centrality_CoreDecomposition[] = {
  {"maxCoreNumber", (PyCFunction)__pyx_pw_9networkit_10centrality_17CoreDecomposition_3maxCoreNumber, METH_NOARGS, __pyx_doc_9networkit_10centrality_17CoreDecomposition_2maxCoreNumber},
  {"getCover", (PyCFunction)__pyx_pw_9networkit_10centrality_17CoreDecomposition_5getCover, METH_NOARGS, __pyx_doc_9networkit_10centrality_17CoreDecomposition_4getCover},
  {"getPartition", (PyCFunction)__pyx_pw_9networkit_10centrality_17CoreDecomposition_7getPartition, METH_NOARGS, __pyx_doc_9networkit_10centrality_17CoreDecomposition_6getPartition},
  {"getNodeOrder", (PyCFunction)__pyx_pw_9networkit_10centrality_17CoreDecomposition_9getNodeOrder, METH_NOARGS, __pyx_doc_9networkit_10centrality_17CoreDecomposition_8getNodeOrder},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_17CoreDecomposition_11__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_17CoreDecomposition_13__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_10centrality_CoreDecomposition = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.centrality.CoreDecomposition", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_10centrality_CoreDecomposition), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_10centrality_Centrality, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  " Computes k-core decomposition of a graph.\n\n\tCoreDecomposition(G)\n\n\tCreate CoreDecomposition class for graph `G`. The graph may not contain self-loops.\n\n\tParameters:\n\t-----------\n\tG : networkit.Graph\n\t\tThe graph.\n\tnormalized : bool\n\t\tDivide each core number by the maximum degree.\n\tenforceBucketQueueAlgorithm : bool\n\t\tenforce switch to sequential algorithm\n\tstoreNodeOrder : bool\n\t\tIf set to True, the order of the nodes in ascending order of the cores is stored and can later be returned using getNodeOrder(). Enforces the sequential bucket priority queue algorithm.\n\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_10centrality_Centrality, /*tp_traverse*/
  __pyx_tp_clear_9networkit_10centrality_Centrality, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_10centrality_CoreDecomposition, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_9networkit_10centrality_10Centrality_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_10centrality_CoreDecomposition, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_9networkit_10centrality_EigenvectorCentrality(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_9networkit_10centrality_Centrality(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_9networkit_10centrality_21EigenvectorCentrality_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9networkit_10centrality_EigenvectorCentrality[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_21EigenvectorCentrality_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_21EigenvectorCentrality_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_10centrality_EigenvectorCentrality = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.centrality.EigenvectorCentrality", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_10centrality_EigenvectorCentrality), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_10centrality_Centrality, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\tComputes the leading eigenvector of the graph's adjacency matrix (normalized in 2-norm).\n\tInterpreted as eigenvector centrality score.\n\n\tEigenvectorCentrality(G, tol=1e-9)\n\n\tConstructs the EigenvectorCentrality class for the given Graph `G`. `tol` defines the tolerance for convergence.\n\n\tParameters:\n\t-----------\n\tG : networkit.Graph\n\t\tThe graph.\n\ttol : double, optional\n\t\tThe tolerance for convergence.\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_10centrality_Centrality, /*tp_traverse*/
  __pyx_tp_clear_9networkit_10centrality_Centrality, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_10centrality_EigenvectorCentrality, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_9networkit_10centrality_10Centrality_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_10centrality_EigenvectorCentrality, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_9networkit_10centrality_PageRank(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_9networkit_10centrality_Centrality(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_9networkit_10centrality_8PageRank_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyObject *__pyx_getprop_9networkit_10centrality_8PageRank_norm(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9networkit_10centrality_8PageRank_4norm_1__get__(o);
}

static int __pyx_setprop_9networkit_10centrality_8PageRank_norm(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9networkit_10centrality_8PageRank_4norm_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_9networkit_10centrality_8PageRank_maxIterations(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9networkit_10centrality_8PageRank_13maxIterations_1__get__(o);
}

static int __pyx_setprop_9networkit_10centrality_8PageRank_maxIterations(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_9networkit_10centrality_8PageRank_13maxIterations_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_9networkit_10centrality_PageRank[] = {
  {"numberOfIterations", (PyCFunction)__pyx_pw_9networkit_10centrality_8PageRank_3numberOfIterations, METH_NOARGS, __pyx_doc_9networkit_10centrality_8PageRank_2numberOfIterations},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_8PageRank_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_8PageRank_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_9networkit_10centrality_PageRank[] = {
  {(char *)"norm", __pyx_getprop_9networkit_10centrality_8PageRank_norm, __pyx_setprop_9networkit_10centrality_8PageRank_norm, (char *)0, 0},
  {(char *)"maxIterations", __pyx_getprop_9networkit_10centrality_8PageRank_maxIterations, __pyx_setprop_9networkit_10centrality_8PageRank_maxIterations, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_10centrality_PageRank = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.centrality.PageRank", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_10centrality_PageRank), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_10centrality_Centrality, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  " Compute PageRank as node centrality measure.\n\n\tPageRank(G, damp=0.85, tol=1e-9)\n\n\tParameters:\n\t-----------\n\tG : networkit.Graph\n\t\tGraph to be processed.\n\tdamp : double\n\t\tDamping factor of the PageRank algorithm.\n\ttol : double, optional\n\t\tError tolerance for PageRank iteration.\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_10centrality_Centrality, /*tp_traverse*/
  __pyx_tp_clear_9networkit_10centrality_Centrality, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_10centrality_PageRank, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_9networkit_10centrality_PageRank, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_9networkit_10centrality_10Centrality_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_10centrality_PageRank, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_9networkit_10centrality_SpanningEdgeCentrality(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_10centrality_SpanningEdgeCentrality *p;
  PyObject *o = __pyx_ptype_9networkit_4base_Algorithm->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_10centrality_SpanningEdgeCentrality *)o);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_9networkit_10centrality_22SpanningEdgeCentrality_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_10centrality_SpanningEdgeCentrality(PyObject *o) {
  struct __pyx_obj_9networkit_10centrality_SpanningEdgeCentrality *p = (struct __pyx_obj_9networkit_10centrality_SpanningEdgeCentrality *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_G);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) __pyx_ptype_9networkit_4base_Algorithm->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_9networkit_10centrality_SpanningEdgeCentrality);
}

static int __pyx_tp_traverse_9networkit_10centrality_SpanningEdgeCentrality(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_10centrality_SpanningEdgeCentrality *p = (struct __pyx_obj_9networkit_10centrality_SpanningEdgeCentrality *)o;
  e = ((likely(__pyx_ptype_9networkit_4base_Algorithm)) ? ((__pyx_ptype_9networkit_4base_Algorithm->tp_traverse) ? __pyx_ptype_9networkit_4base_Algorithm->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9networkit_10centrality_SpanningEdgeCentrality)); if (e) return e;
  if (p->_G) {
    e = (*v)(((PyObject *)p->_G), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_10centrality_SpanningEdgeCentrality(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_10centrality_SpanningEdgeCentrality *p = (struct __pyx_obj_9networkit_10centrality_SpanningEdgeCentrality *)o;
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) { if (__pyx_ptype_9networkit_4base_Algorithm->tp_clear) __pyx_ptype_9networkit_4base_Algorithm->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9networkit_10centrality_SpanningEdgeCentrality);
  tmp = ((PyObject*)p->_G);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9networkit_10centrality_SpanningEdgeCentrality[] = {
  {"runApproximation", (PyCFunction)__pyx_pw_9networkit_10centrality_22SpanningEdgeCentrality_3runApproximation, METH_NOARGS, __pyx_doc_9networkit_10centrality_22SpanningEdgeCentrality_2runApproximation},
  {"runParallelApproximation", (PyCFunction)__pyx_pw_9networkit_10centrality_22SpanningEdgeCentrality_5runParallelApproximation, METH_NOARGS, __pyx_doc_9networkit_10centrality_22SpanningEdgeCentrality_4runParallelApproximation},
  {"scores", (PyCFunction)__pyx_pw_9networkit_10centrality_22SpanningEdgeCentrality_7scores, METH_NOARGS, __pyx_doc_9networkit_10centrality_22SpanningEdgeCentrality_6scores},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_22SpanningEdgeCentrality_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_22SpanningEdgeCentrality_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_10centrality_SpanningEdgeCentrality = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.centrality.SpanningEdgeCentrality", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_10centrality_SpanningEdgeCentrality), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_10centrality_SpanningEdgeCentrality, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  " Computes the Spanning Edge centrality for the edges of the graph.\n\n\tSpanningEdgeCentrality(G, tol = 0.1)\n\n\tParameters:\n\t-----------\n\tG : networkit.Graph\n\t\tThe graph.\n\ttol: double\n\t\tTolerance used for the approximation: with probability at least 1-1/n, the approximated scores are within a factor 1+tol from the exact scores.\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_10centrality_SpanningEdgeCentrality, /*tp_traverse*/
  __pyx_tp_clear_9networkit_10centrality_SpanningEdgeCentrality, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_10centrality_SpanningEdgeCentrality, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_10centrality_SpanningEdgeCentrality, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_9networkit_10centrality_ApproxElectricalCloseness(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_9networkit_10centrality_Centrality(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_9networkit_10centrality_25ApproxElectricalCloseness_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_9networkit_10centrality_ApproxElectricalCloseness[] = {
  {"getDiagonal", (PyCFunction)__pyx_pw_9networkit_10centrality_25ApproxElectricalCloseness_3getDiagonal, METH_NOARGS, __pyx_doc_9networkit_10centrality_25ApproxElectricalCloseness_2getDiagonal},
  {"computeExactDiagonal", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9networkit_10centrality_25ApproxElectricalCloseness_5computeExactDiagonal, METH_VARARGS|METH_KEYWORDS, __pyx_doc_9networkit_10centrality_25ApproxElectricalCloseness_4computeExactDiagonal},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_25ApproxElectricalCloseness_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_25ApproxElectricalCloseness_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_10centrality_ApproxElectricalCloseness = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.centrality.ApproxElectricalCloseness", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_10centrality_ApproxElectricalCloseness), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_10centrality_Centrality, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n\tApproximates the electrical closeness of all the vertices of the graph by approximating the\n\tdiagonal of the laplacian's pseudoinverse of @a G. Every element of the diagonal is\n\tguaranteed to have a maximum absolute error of eps. Based on \"Approximation of the\n\tDiagonal of a Laplacian\342\200\231s Pseudoinverse for Complex Network Analysis\", Angriman et al., ESA\n\t2020. The algorithm does two steps: solves a linear system and samples uniform spanning trees\n\t(USTs). The parameter @a kappa balances the tolerance of solver for the linear system and the\n\tnumber of USTs to be sampled. A high value of @a kappa raises the tolerance (solver converges\n\tfaster) but more USTs need to be sampled, vice versa for a low value of @a kappa.\n\n\tParameters:\n\t----------\n\tG : networkit.Graph\n\t\tThe input graph.\n\teps : double\n\t\tMaximum absolute error of the elements in the diagonal.\n\tkappa : double\n\t\tBalances the tolerance of the solver for the linear system and the\n\t\tnumber of USTs to be sampled.\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_10centrality_Centrality, /*tp_traverse*/
  __pyx_tp_clear_9networkit_10centrality_Centrality, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_10centrality_ApproxElectricalCloseness, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_9networkit_10centrality_10Centrality_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_10centrality_ApproxElectricalCloseness, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_9networkit_10centrality_ApproxSpanningEdge(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9networkit_10centrality_ApproxSpanningEdge *p;
  PyObject *o = __pyx_ptype_9networkit_4base_Algorithm->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9networkit_10centrality_ApproxSpanningEdge *)o);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_9networkit_10centrality_18ApproxSpanningEdge_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9networkit_10centrality_ApproxSpanningEdge(PyObject *o) {
  struct __pyx_obj_9networkit_10centrality_ApproxSpanningEdge *p = (struct __pyx_obj_9networkit_10centrality_ApproxSpanningEdge *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_G);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) __pyx_ptype_9networkit_4base_Algorithm->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_9networkit_10centrality_ApproxSpanningEdge);
}

static int __pyx_tp_traverse_9networkit_10centrality_ApproxSpanningEdge(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9networkit_10centrality_ApproxSpanningEdge *p = (struct __pyx_obj_9networkit_10centrality_ApproxSpanningEdge *)o;
  e = ((likely(__pyx_ptype_9networkit_4base_Algorithm)) ? ((__pyx_ptype_9networkit_4base_Algorithm->tp_traverse) ? __pyx_ptype_9networkit_4base_Algorithm->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_9networkit_10centrality_ApproxSpanningEdge)); if (e) return e;
  if (p->_G) {
    e = (*v)(((PyObject *)p->_G), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9networkit_10centrality_ApproxSpanningEdge(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9networkit_10centrality_ApproxSpanningEdge *p = (struct __pyx_obj_9networkit_10centrality_ApproxSpanningEdge *)o;
  if (likely(__pyx_ptype_9networkit_4base_Algorithm)) { if (__pyx_ptype_9networkit_4base_Algorithm->tp_clear) __pyx_ptype_9networkit_4base_Algorithm->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_9networkit_10centrality_ApproxSpanningEdge);
  tmp = ((PyObject*)p->_G);
  p->_G = ((struct __pyx_obj_9networkit_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_9networkit_10centrality_ApproxSpanningEdge[] = {
  {"scores", (PyCFunction)__pyx_pw_9networkit_10centrality_18ApproxSpanningEdge_3scores, METH_NOARGS, __pyx_doc_9networkit_10centrality_18ApproxSpanningEdge_2scores},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_18ApproxSpanningEdge_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9networkit_10centrality_18ApproxSpanningEdge_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9networkit_10centrality_ApproxSpanningEdge = {
  PyVarObject_HEAD_INIT(0, 0)
  "networkit.centrality.ApproxSpanningEdge", /*tp_name*/
  sizeof(struct __pyx_obj_9networkit_10centrality_ApproxSpanningEdge), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9networkit_10centrality_ApproxSpanningEdge, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n\tComputes an epsilon-approximation of the spanning edge centrality of every edge of the input\n\tgraph with probability (1 - 1/n), based on \"Efficient Algorithms for Spanning Tree\n\tCentrality\", Hayashi et al., IJCAI, 2016. This implementation also support multi-threading.\n\n\tParameters:\n\t-----------\n\tG : networkit.Graph\n\t\tThe graph.\n\teps : double\n\t\tMaximum additive error.\n\t", /*tp_doc*/
  __pyx_tp_traverse_9networkit_10centrality_ApproxSpanningEdge, /*tp_traverse*/
  __pyx_tp_clear_9networkit_10centrality_ApproxSpanningEdge, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9networkit_10centrality_ApproxSpanningEdge, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9networkit_10centrality_ApproxSpanningEdge, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_centrality(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_centrality},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "centrality",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_Abstract_class_to_compute_the_s, __pyx_k_Abstract_class_to_compute_the_s, sizeof(__pyx_k_Abstract_class_to_compute_the_s), 0, 0, 1, 0},
  {&__pyx_n_s_AdaptiveGeometric, __pyx_k_AdaptiveGeometric, sizeof(__pyx_k_AdaptiveGeometric), 0, 0, 1, 1},
  {&__pyx_n_s_ApproxBetweenness, __pyx_k_ApproxBetweenness, sizeof(__pyx_k_ApproxBetweenness), 0, 0, 1, 1},
  {&__pyx_n_s_ApproxCloseness, __pyx_k_ApproxCloseness, sizeof(__pyx_k_ApproxCloseness), 0, 0, 1, 1},
  {&__pyx_n_s_ApproxElectricalCloseness, __pyx_k_ApproxElectricalCloseness, sizeof(__pyx_k_ApproxElectricalCloseness), 0, 0, 1, 1},
  {&__pyx_n_s_ApproxGroupBetweenness, __pyx_k_ApproxGroupBetweenness, sizeof(__pyx_k_ApproxGroupBetweenness), 0, 0, 1, 1},
  {&__pyx_n_s_ApproxSpanningEdge, __pyx_k_ApproxSpanningEdge, sizeof(__pyx_k_ApproxSpanningEdge), 0, 0, 1, 1},
  {&__pyx_n_s_Betweenness, __pyx_k_Betweenness, sizeof(__pyx_k_Betweenness), 0, 0, 1, 1},
  {&__pyx_n_s_BoundStrategy, __pyx_k_BoundStrategy, sizeof(__pyx_k_BoundStrategy), 0, 0, 1, 1},
  {&__pyx_n_s_Centrality, __pyx_k_Centrality, sizeof(__pyx_k_Centrality), 0, 0, 1, 1},
  {&__pyx_n_s_Closeness, __pyx_k_Closeness, sizeof(__pyx_k_Closeness), 0, 0, 1, 1},
  {&__pyx_n_s_ClosenessVariant, __pyx_k_ClosenessVariant, sizeof(__pyx_k_ClosenessVariant), 0, 0, 1, 1},
  {&__pyx_kp_s_Compute_Eigenvector_centrality, __pyx_k_Compute_Eigenvector_centrality, sizeof(__pyx_k_Compute_Eigenvector_centrality), 0, 0, 1, 0},
  {&__pyx_n_s_CoreDecomposition, __pyx_k_CoreDecomposition, sizeof(__pyx_k_CoreDecomposition), 0, 0, 1, 1},
  {&__pyx_n_s_DegreeCentrality, __pyx_k_DegreeCentrality, sizeof(__pyx_k_DegreeCentrality), 0, 0, 1, 1},
  {&__pyx_n_s_DynApproxBetweenness, __pyx_k_DynApproxBetweenness, sizeof(__pyx_k_DynApproxBetweenness), 0, 0, 1, 1},
  {&__pyx_n_s_DynBetweenness, __pyx_k_DynBetweenness, sizeof(__pyx_k_DynBetweenness), 0, 0, 1, 1},
  {&__pyx_n_s_DynBetweennessOneNode, __pyx_k_DynBetweennessOneNode, sizeof(__pyx_k_DynBetweennessOneNode), 0, 0, 1, 1},
  {&__pyx_n_s_DynKatzCentrality, __pyx_k_DynKatzCentrality, sizeof(__pyx_k_DynKatzCentrality), 0, 0, 1, 1},
  {&__pyx_n_s_DynTopHarmonicCloseness, __pyx_k_DynTopHarmonicCloseness, sizeof(__pyx_k_DynTopHarmonicCloseness), 0, 0, 1, 1},
  {&__pyx_n_s_EdgeDirection, __pyx_k_EdgeDirection, sizeof(__pyx_k_EdgeDirection), 0, 0, 1, 1},
  {&__pyx_n_s_EigenvectorCentrality, __pyx_k_EigenvectorCentrality, sizeof(__pyx_k_EigenvectorCentrality), 0, 0, 1, 1},
  {&__pyx_kp_u_Error_group_must_be_a_list_of_no, __pyx_k_Error_group_must_be_a_list_of_no, sizeof(__pyx_k_Error_group_must_be_a_list_of_no), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_object_not_properly_initia, __pyx_k_Error_object_not_properly_initia, sizeof(__pyx_k_Error_object_not_properly_initia), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_the_third_parameter_must_b, __pyx_k_Error_the_third_parameter_must_b, sizeof(__pyx_k_Error_the_third_parameter_must_b), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_you_may_not_use_Centrality, __pyx_k_Error_you_may_not_use_Centrality, sizeof(__pyx_k_Error_you_may_not_use_Centrality), 0, 1, 0, 0},
  {&__pyx_n_s_EstimateBetweenness, __pyx_k_EstimateBetweenness, sizeof(__pyx_k_EstimateBetweenness), 0, 0, 1, 1},
  {&__pyx_n_s_G, __pyx_k_G, sizeof(__pyx_k_G), 0, 0, 1, 1},
  {&__pyx_n_s_GedWalk, __pyx_k_GedWalk, sizeof(__pyx_k_GedWalk), 0, 0, 1, 1},
  {&__pyx_n_s_Generalized, __pyx_k_Generalized, sizeof(__pyx_k_Generalized), 0, 0, 1, 1},
  {&__pyx_n_s_Geometric, __pyx_k_Geometric, sizeof(__pyx_k_Geometric), 0, 0, 1, 1},
  {&__pyx_n_s_GreedyStrategy, __pyx_k_GreedyStrategy, sizeof(__pyx_k_GreedyStrategy), 0, 0, 1, 1},
  {&__pyx_n_s_GroupCloseness, __pyx_k_GroupCloseness, sizeof(__pyx_k_GroupCloseness), 0, 0, 1, 1},
  {&__pyx_n_s_GroupDegree, __pyx_k_GroupDegree, sizeof(__pyx_k_GroupDegree), 0, 0, 1, 1},
  {&__pyx_n_s_H, __pyx_k_H, sizeof(__pyx_k_H), 0, 0, 1, 1},
  {&__pyx_n_s_HarmonicCloseness, __pyx_k_HarmonicCloseness, sizeof(__pyx_k_HarmonicCloseness), 0, 0, 1, 1},
  {&__pyx_n_s_INBOUND, __pyx_k_INBOUND, sizeof(__pyx_k_INBOUND), 0, 0, 1, 1},
  {&__pyx_n_s_KPathCentrality, __pyx_k_KPathCentrality, sizeof(__pyx_k_KPathCentrality), 0, 0, 1, 1},
  {&__pyx_n_s_KadabraBetweenness, __pyx_k_KadabraBetweenness, sizeof(__pyx_k_KadabraBetweenness), 0, 0, 1, 1},
  {&__pyx_n_s_KatzCentrality, __pyx_k_KatzCentrality, sizeof(__pyx_k_KatzCentrality), 0, 0, 1, 1},
  {&__pyx_n_s_LaplacianCentrality, __pyx_k_LaplacianCentrality, sizeof(__pyx_k_LaplacianCentrality), 0, 0, 1, 1},
  {&__pyx_n_s_Lazy, __pyx_k_Lazy, sizeof(__pyx_k_Lazy), 0, 0, 1, 1},
  {&__pyx_n_s_LocalClusteringCoefficient, __pyx_k_LocalClusteringCoefficient, sizeof(__pyx_k_LocalClusteringCoefficient), 0, 0, 1, 1},
  {&__pyx_n_s_LocalPartitionCoverage, __pyx_k_LocalPartitionCoverage, sizeof(__pyx_k_LocalPartitionCoverage), 0, 0, 1, 1},
  {&__pyx_kp_u_Max_iterations_cannot_be_a_negat, __pyx_k_Max_iterations_cannot_be_a_negat, sizeof(__pyx_k_Max_iterations_cannot_be_a_negat), 0, 1, 0, 0},
  {&__pyx_n_s_No, __pyx_k_No, sizeof(__pyx_k_No), 0, 0, 1, 1},
  {&__pyx_n_s_Norm, __pyx_k_Norm, sizeof(__pyx_k_Norm), 0, 0, 1, 1},
  {&__pyx_n_s_NotImplemented, __pyx_k_NotImplemented, sizeof(__pyx_k_NotImplemented), 0, 0, 1, 1},
  {&__pyx_n_s_NotImplementedError, __pyx_k_NotImplementedError, sizeof(__pyx_k_NotImplementedError), 0, 0, 1, 1},
  {&__pyx_kp_u_Not_implemented_for_directed_gra, __pyx_k_Not_implemented_for_directed_gra, sizeof(__pyx_k_Not_implemented_for_directed_gra), 0, 1, 0, 0},
  {&__pyx_n_s_OUTBOUND, __pyx_k_OUTBOUND, sizeof(__pyx_k_OUTBOUND), 0, 0, 1, 1},
  {&__pyx_n_s_P, __pyx_k_P, sizeof(__pyx_k_P), 0, 0, 1, 1},
  {&__pyx_n_s_PageRank, __pyx_k_PageRank, sizeof(__pyx_k_PageRank), 0, 0, 1, 1},
  {&__pyx_n_s_PageRankMatrix, __pyx_k_PageRankMatrix, sizeof(__pyx_k_PageRankMatrix), 0, 0, 1, 1},
  {&__pyx_n_s_PermanenceCentrality, __pyx_k_PermanenceCentrality, sizeof(__pyx_k_PermanenceCentrality), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_S, __pyx_k_S, sizeof(__pyx_k_S), 0, 0, 1, 1},
  {&__pyx_n_s_SUM, __pyx_k_SUM, sizeof(__pyx_k_SUM), 0, 0, 1, 1},
  {&__pyx_n_s_SciPyEVZ, __pyx_k_SciPyEVZ, sizeof(__pyx_k_SciPyEVZ), 0, 0, 1, 1},
  {&__pyx_n_s_SciPyEVZ___init, __pyx_k_SciPyEVZ___init, sizeof(__pyx_k_SciPyEVZ___init), 0, 0, 1, 1},
  {&__pyx_n_s_SciPyEVZ__length, __pyx_k_SciPyEVZ__length, sizeof(__pyx_k_SciPyEVZ__length), 0, 0, 1, 1},
  {&__pyx_n_s_SciPyEVZ_normFactor, __pyx_k_SciPyEVZ_normFactor, sizeof(__pyx_k_SciPyEVZ_normFactor), 0, 0, 1, 1},
  {&__pyx_n_s_SciPyEVZ_prepareSpectrum, __pyx_k_SciPyEVZ_prepareSpectrum, sizeof(__pyx_k_SciPyEVZ_prepareSpectrum), 0, 0, 1, 1},
  {&__pyx_n_s_SciPyPageRank, __pyx_k_SciPyPageRank, sizeof(__pyx_k_SciPyPageRank), 0, 0, 1, 1},
  {&__pyx_n_s_SciPyPageRank___init, __pyx_k_SciPyPageRank___init, sizeof(__pyx_k_SciPyPageRank___init), 0, 0, 1, 1},
  {&__pyx_n_s_SciPyPageRank__length, __pyx_k_SciPyPageRank__length, sizeof(__pyx_k_SciPyPageRank__length), 0, 0, 1, 1},
  {&__pyx_n_s_SciPyPageRank_normFactor, __pyx_k_SciPyPageRank_normFactor, sizeof(__pyx_k_SciPyPageRank_normFactor), 0, 0, 1, 1},
  {&__pyx_n_s_SciPyPageRank_prepareSpectrum, __pyx_k_SciPyPageRank_prepareSpectrum, sizeof(__pyx_k_SciPyPageRank_prepareSpectrum), 0, 0, 1, 1},
  {&__pyx_n_s_Sfigality, __pyx_k_Sfigality, sizeof(__pyx_k_Sfigality), 0, 0, 1, 1},
  {&__pyx_kp_u_Source_nodes_not_specified_set_t, __pyx_k_Source_nodes_not_specified_set_t, sizeof(__pyx_k_Source_nodes_not_specified_set_t), 0, 1, 0, 0},
  {&__pyx_n_s_SpanningEdgeCentrality, __pyx_k_SpanningEdgeCentrality, sizeof(__pyx_k_SpanningEdgeCentrality), 0, 0, 1, 1},
  {&__pyx_n_s_Spectral, __pyx_k_Spectral, sizeof(__pyx_k_Spectral), 0, 0, 1, 1},
  {&__pyx_n_s_SpectralCentrality, __pyx_k_SpectralCentrality, sizeof(__pyx_k_SpectralCentrality), 0, 0, 1, 1},
  {&__pyx_n_s_SpectralCentrality___init, __pyx_k_SpectralCentrality___init, sizeof(__pyx_k_SpectralCentrality___init), 0, 0, 1, 1},
  {&__pyx_n_s_SpectralCentrality_normFactor, __pyx_k_SpectralCentrality_normFactor, sizeof(__pyx_k_SpectralCentrality_normFactor), 0, 0, 1, 1},
  {&__pyx_n_s_SpectralCentrality_prepareSpectr, __pyx_k_SpectralCentrality_prepareSpectr, sizeof(__pyx_k_SpectralCentrality_prepareSpectr), 0, 0, 1, 1},
  {&__pyx_n_s_SpectralCentrality_ranking, __pyx_k_SpectralCentrality_ranking, sizeof(__pyx_k_SpectralCentrality_ranking), 0, 0, 1, 1},
  {&__pyx_n_s_SpectralCentrality_ranking_local, __pyx_k_SpectralCentrality_ranking_local, sizeof(__pyx_k_SpectralCentrality_ranking_local), 0, 0, 1, 1},
  {&__pyx_n_s_SpectralCentrality_run, __pyx_k_SpectralCentrality_run, sizeof(__pyx_k_SpectralCentrality_run), 0, 0, 1, 1},
  {&__pyx_n_s_SpectralCentrality_scores, __pyx_k_SpectralCentrality_scores, sizeof(__pyx_k_SpectralCentrality_scores), 0, 0, 1, 1},
  {&__pyx_n_s_Standard, __pyx_k_Standard, sizeof(__pyx_k_Standard), 0, 0, 1, 1},
  {&__pyx_n_s_Stochastic, __pyx_k_Stochastic, sizeof(__pyx_k_Stochastic), 0, 0, 1, 1},
  {&__pyx_kp_u_Target_nodes_not_specified_set_t, __pyx_k_Target_nodes_not_specified_set_t, sizeof(__pyx_k_Target_nodes_not_specified_set_t), 0, 1, 0, 0},
  {&__pyx_n_s_TopCloseness, __pyx_k_TopCloseness, sizeof(__pyx_k_TopCloseness), 0, 0, 1, 1},
  {&__pyx_n_s_TopHarmonicCloseness, __pyx_k_TopHarmonicCloseness, sizeof(__pyx_k_TopHarmonicCloseness), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_adjacencyEigenvector, __pyx_k_adjacencyEigenvector, sizeof(__pyx_k_adjacencyEigenvector), 0, 0, 1, 1},
  {&__pyx_n_s_algorithm, __pyx_k_algorithm, sizeof(__pyx_k_algorithm), 0, 0, 1, 1},
  {&__pyx_n_s_alpha, __pyx_k_alpha, sizeof(__pyx_k_alpha), 0, 0, 1, 1},
  {&__pyx_n_s_beta, __pyx_k_beta, sizeof(__pyx_k_beta), 0, 0, 1, 1},
  {&__pyx_n_s_bs, __pyx_k_bs, sizeof(__pyx_k_bs), 0, 0, 1, 1},
  {&__pyx_n_s_centrality, __pyx_k_centrality, sizeof(__pyx_k_centrality), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_computeEdgeCentrality, __pyx_k_computeEdgeCentrality, sizeof(__pyx_k_computeEdgeCentrality), 0, 0, 1, 1},
  {&__pyx_n_s_countGroupNodes, __pyx_k_countGroupNodes, sizeof(__pyx_k_countGroupNodes), 0, 0, 1, 1},
  {&__pyx_n_s_cutoff, __pyx_k_cutoff, sizeof(__pyx_k_cutoff), 0, 0, 1, 1},
  {&__pyx_n_s_damp, __pyx_k_damp, sizeof(__pyx_k_damp), 0, 0, 1, 1},
  {&__pyx_n_s_delta, __pyx_k_delta, sizeof(__pyx_k_delta), 0, 0, 1, 1},
  {&__pyx_n_s_diff, __pyx_k_diff, sizeof(__pyx_k_diff), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_eigenvalue, __pyx_k_eigenvalue, sizeof(__pyx_k_eigenvalue), 0, 0, 1, 1},
  {&__pyx_n_s_eigenvector, __pyx_k_eigenvector, sizeof(__pyx_k_eigenvector), 0, 0, 1, 1},
  {&__pyx_n_s_enforceBucketQueueAlgorithm, __pyx_k_enforceBucketQueueAlgorithm, sizeof(__pyx_k_enforceBucketQueueAlgorithm), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_eps, __pyx_k_eps, sizeof(__pyx_k_eps), 0, 0, 1, 1},
  {&__pyx_n_s_epsilon, __pyx_k_epsilon, sizeof(__pyx_k_epsilon), 0, 0, 1, 1},
  {&__pyx_n_s_err, __pyx_k_err, sizeof(__pyx_k_err), 0, 0, 1, 1},
  {&__pyx_n_s_evz, __pyx_k_evz, sizeof(__pyx_k_evz), 0, 0, 1, 1},
  {&__pyx_n_s_first_heu, __pyx_k_first_heu, sizeof(__pyx_k_first_heu), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_graph, __pyx_k_graph, sizeof(__pyx_k_graph), 0, 0, 1, 1},
  {&__pyx_n_s_group, __pyx_k_group, sizeof(__pyx_k_group), 0, 0, 1, 1},
  {&__pyx_n_s_groupOnly, __pyx_k_groupOnly, sizeof(__pyx_k_groupOnly), 0, 0, 1, 1},
  {&__pyx_n_s_groupSize, __pyx_k_groupSize, sizeof(__pyx_k_groupSize), 0, 0, 1, 1},
  {&__pyx_n_s_gs, __pyx_k_gs, sizeof(__pyx_k_gs), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_ignoreSelfLoops, __pyx_k_ignoreSelfLoops, sizeof(__pyx_k_ignoreSelfLoops), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_inEdges, __pyx_k_inEdges, sizeof(__pyx_k_inEdges), 0, 0, 1, 1},
  {&__pyx_n_s_includeTrail, __pyx_k_includeTrail, sizeof(__pyx_k_includeTrail), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_isDirected, __pyx_k_isDirected, sizeof(__pyx_k_isDirected), 0, 0, 1, 1},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_s_iterNodes, __pyx_k_iterNodes, sizeof(__pyx_k_iterNodes), 0, 0, 1, 1},
  {&__pyx_n_s_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 0, 1, 1},
  {&__pyx_n_s_kappa, __pyx_k_kappa, sizeof(__pyx_k_kappa), 0, 0, 1, 1},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_l1norm, __pyx_k_l1norm, sizeof(__pyx_k_l1norm), 0, 0, 1, 1},
  {&__pyx_n_s_l2norm, __pyx_k_l2norm, sizeof(__pyx_k_l2norm), 0, 0, 1, 1},
  {&__pyx_n_s_length, __pyx_k_length, sizeof(__pyx_k_length), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_math, __pyx_k_math, sizeof(__pyx_k_math), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_n, __pyx_k_n, sizeof(__pyx_k_n), 0, 0, 1, 1},
  {&__pyx_n_s_nSamples, __pyx_k_nSamples, sizeof(__pyx_k_nSamples), 0, 0, 1, 1},
  {&__pyx_n_s_n_nodes, __pyx_k_n_nodes, sizeof(__pyx_k_n_nodes), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_networkit_algebraic, __pyx_k_networkit_algebraic, sizeof(__pyx_k_networkit_algebraic), 0, 0, 1, 1},
  {&__pyx_n_s_networkit_centrality, __pyx_k_networkit_centrality, sizeof(__pyx_k_networkit_centrality), 0, 0, 1, 1},
  {&__pyx_kp_s_networkit_centrality_pyx, __pyx_k_networkit_centrality_pyx, sizeof(__pyx_k_networkit_centrality_pyx), 0, 0, 1, 0},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_node, __pyx_k_node, sizeof(__pyx_k_node), 0, 0, 1, 1},
  {&__pyx_n_s_normFactor, __pyx_k_normFactor, sizeof(__pyx_k_normFactor), 0, 0, 1, 1},
  {&__pyx_n_s_normalized, __pyx_k_normalized, sizeof(__pyx_k_normalized), 0, 0, 1, 1},
  {&__pyx_n_s_numberOfNodes, __pyx_k_numberOfNodes, sizeof(__pyx_k_numberOfNodes), 0, 0, 1, 1},
  {&__pyx_n_s_object, __pyx_k_object, sizeof(__pyx_k_object), 0, 0, 1, 1},
  {&__pyx_n_s_order, __pyx_k_order, sizeof(__pyx_k_order), 0, 0, 1, 1},
  {&__pyx_n_s_outDeg, __pyx_k_outDeg, sizeof(__pyx_k_outDeg), 0, 0, 1, 1},
  {&__pyx_n_s_outEdges, __pyx_k_outEdges, sizeof(__pyx_k_outEdges), 0, 0, 1, 1},
  {&__pyx_n_s_pair, __pyx_k_pair, sizeof(__pyx_k_pair), 0, 0, 1, 1},
  {&__pyx_n_s_parallel, __pyx_k_parallel, sizeof(__pyx_k_parallel), 0, 0, 1, 1},
  {&__pyx_n_s_prMatrix, __pyx_k_prMatrix, sizeof(__pyx_k_prMatrix), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_prepareSpectrum, __pyx_k_prepareSpectrum, sizeof(__pyx_k_prepareSpectrum), 0, 0, 1, 1},
  {&__pyx_n_s_prev_node, __pyx_k_prev_node, sizeof(__pyx_k_prev_node), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_rankList, __pyx_k_rankList, sizeof(__pyx_k_rankList), 0, 0, 1, 1},
  {&__pyx_n_s_rankPerNode, __pyx_k_rankPerNode, sizeof(__pyx_k_rankPerNode), 0, 0, 1, 1},
  {&__pyx_n_s_ranking, __pyx_k_ranking, sizeof(__pyx_k_ranking), 0, 0, 1, 1},
  {&__pyx_n_s_ranking_id, __pyx_k_ranking_id, sizeof(__pyx_k_ranking_id), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_relativeRankErrors, __pyx_k_relativeRankErrors, sizeof(__pyx_k_relativeRankErrors), 0, 0, 1, 1},
  {&__pyx_n_s_reverse, __pyx_k_reverse, sizeof(__pyx_k_reverse), 0, 0, 1, 1},
  {&__pyx_n_s_rnode_x, __pyx_k_rnode_x, sizeof(__pyx_k_rnode_x), 0, 0, 1, 1},
  {&__pyx_n_s_rnode_y, __pyx_k_rnode_y, sizeof(__pyx_k_rnode_y), 0, 0, 1, 1},
  {&__pyx_n_s_run, __pyx_k_run, sizeof(__pyx_k_run), 0, 0, 1, 1},
  {&__pyx_n_s_rx, __pyx_k_rx, sizeof(__pyx_k_rx), 0, 0, 1, 1},
  {&__pyx_n_s_ry, __pyx_k_ry, sizeof(__pyx_k_ry), 0, 0, 1, 1},
  {&__pyx_n_s_scoreList, __pyx_k_scoreList, sizeof(__pyx_k_scoreList), 0, 0, 1, 1},
  {&__pyx_n_s_scores, __pyx_k_scores, sizeof(__pyx_k_scores), 0, 0, 1, 1},
  {&__pyx_n_s_sec_heu, __pyx_k_sec_heu, sizeof(__pyx_k_sec_heu), 0, 0, 1, 1},
  {&__pyx_n_s_seed, __pyx_k_seed, sizeof(__pyx_k_seed), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_kp_s_self__this_cannot_be_converted_t, __pyx_k_self__this_cannot_be_converted_t, sizeof(__pyx_k_self__this_cannot_be_converted_t), 0, 0, 1, 0},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_sorted, __pyx_k_sorted, sizeof(__pyx_k_sorted), 0, 0, 1, 1},
  {&__pyx_n_s_sources, __pyx_k_sources, sizeof(__pyx_k_sources), 0, 0, 1, 1},
  {&__pyx_n_s_spectralDelta, __pyx_k_spectralDelta, sizeof(__pyx_k_spectralDelta), 0, 0, 1, 1},
  {&__pyx_n_s_spectrum, __pyx_k_spectrum, sizeof(__pyx_k_spectrum), 0, 0, 1, 1},
  {&__pyx_n_s_sqrt, __pyx_k_sqrt, sizeof(__pyx_k_sqrt), 0, 0, 1, 1},
  {&__pyx_n_s_square, __pyx_k_square, sizeof(__pyx_k_square), 0, 0, 1, 1},
  {&__pyx_n_s_startFactor, __pyx_k_startFactor, sizeof(__pyx_k_startFactor), 0, 0, 1, 1},
  {&__pyx_n_s_storeNodeOrder, __pyx_k_storeNodeOrder, sizeof(__pyx_k_storeNodeOrder), 0, 0, 1, 1},
  {&__pyx_n_s_storePredecessors, __pyx_k_storePredecessors, sizeof(__pyx_k_storePredecessors), 0, 0, 1, 1},
  {&__pyx_n_s_sum, __pyx_k_sum, sizeof(__pyx_k_sum), 0, 0, 1, 1},
  {&__pyx_n_s_super, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
  {&__pyx_n_s_symmetricEigenvectors, __pyx_k_symmetricEigenvectors, sizeof(__pyx_k_symmetricEigenvectors), 0, 0, 1, 1},
  {&__pyx_n_s_targets, __pyx_k_targets, sizeof(__pyx_k_targets), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_third, __pyx_k_third, sizeof(__pyx_k_third), 0, 0, 1, 1},
  {&__pyx_n_s_tol, __pyx_k_tol, sizeof(__pyx_k_tol), 0, 0, 1, 1},
  {&__pyx_n_s_tolerance, __pyx_k_tolerance, sizeof(__pyx_k_tolerance), 0, 0, 1, 1},
  {&__pyx_n_s_turbo, __pyx_k_turbo, sizeof(__pyx_k_turbo), 0, 0, 1, 1},
  {&__pyx_n_s_type, __pyx_k_type, sizeof(__pyx_k_type), 0, 0, 1, 1},
  {&__pyx_n_s_u, __pyx_k_u, sizeof(__pyx_k_u), 0, 0, 1, 1},
  {&__pyx_n_s_unionSample, __pyx_k_unionSample, sizeof(__pyx_k_unionSample), 0, 0, 1, 1},
  {&__pyx_n_s_universalConstant, __pyx_k_universalConstant, sizeof(__pyx_k_universalConstant), 0, 0, 1, 1},
  {&__pyx_n_s_useBFSbound, __pyx_k_useBFSbound, sizeof(__pyx_k_useBFSbound), 0, 0, 1, 1},
  {&__pyx_n_s_useNBbound, __pyx_k_useNBbound, sizeof(__pyx_k_useNBbound), 0, 0, 1, 1},
  {&__pyx_n_s_v, __pyx_k_v, sizeof(__pyx_k_v), 0, 0, 1, 1},
  {&__pyx_n_s_val, __pyx_k_val, sizeof(__pyx_k_val), 0, 0, 1, 1},
  {&__pyx_n_s_vector, __pyx_k_vector, sizeof(__pyx_k_vector), 0, 0, 1, 1},
  {&__pyx_n_s_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_object = __Pyx_GetBuiltinName(__pyx_n_s_object); if (!__pyx_builtin_object) __PYX_ERR(0, 650, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(0, 38, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_n_s_print); if (!__pyx_builtin_print) __PYX_ERR(0, 223, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 224, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 1988, __pyx_L1_error)
  __pyx_builtin_super = __Pyx_GetBuiltinName(__pyx_n_s_super); if (!__pyx_builtin_super) __PYX_ERR(0, 2046, __pyx_L1_error)
  __pyx_builtin_NotImplemented = __Pyx_GetBuiltinName(__pyx_n_s_NotImplemented); if (!__pyx_builtin_NotImplemented) __PYX_ERR(0, 2060, __pyx_L1_error)
  __pyx_builtin_sorted = __Pyx_GetBuiltinName(__pyx_n_s_sorted); if (!__pyx_builtin_sorted) __PYX_ERR(0, 2090, __pyx_L1_error)
  __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) __PYX_ERR(0, 2108, __pyx_L1_error)
  __pyx_builtin_sum = __Pyx_GetBuiltinName(__pyx_n_s_sum); if (!__pyx_builtin_sum) __PYX_ERR(0, 2112, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "networkit/centrality.pyx":38
 * 	def __init__(self, *args, **kwargs):
 * 		if type(self) == Centrality:
 * 			raise RuntimeError("Error, you may not use Centrality directly, use a sub-class instead")             # <<<<<<<<<<<<<<
 * 
 * 	def __dealloc__(self):
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_Error_you_may_not_use_Centrality); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "networkit/centrality.pyx":51
 * 		"""
 * 		if self._this == NULL:
 * 			raise RuntimeError("Error, object not properly initialized")             # <<<<<<<<<<<<<<
 * 		return (<_Centrality*>(self._this)).scores()
 * 
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_Error_object_not_properly_initia); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_self__this_cannot_be_converted_t); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "(tree fragment)":4
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_self__this_cannot_be_converted_t); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "networkit/centrality.pyx":223
 * 		# Initialize source nodes
 * 		if sources is None:
 * 			print('Source nodes not specified, set to all nodes by default')             # <<<<<<<<<<<<<<
 * 			sources = list(range(G.numberOfNodes()))
 * 			sources_vec = sources
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_u_Source_nodes_not_specified_set_t); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "networkit/centrality.pyx":231
 * 		# Initialize target nodes
 * 		if targets is None:
 * 			print('Target nodes not specified, set to all nodes by default')             # <<<<<<<<<<<<<<
 * 			targets = list(range(G.numberOfNodes()))
 * 			targets_vec = targets
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_u_Target_nodes_not_specified_set_t); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "networkit/centrality.pyx":696
 * 			self._this = new _Closeness(G._this, normalized, <bool_t> third)
 * 		else:
 * 			raise Exception("Error: the third parameter must be either a bool or a ClosenessVariant")             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/centrality/ApproxCloseness.hpp>":
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_u_Error_the_third_parameter_must_b); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__40 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "networkit/centrality.pyx":1292
 * 			groupVec = <vector[node]?>group
 * 		except TypeError:
 * 			raise RuntimeError("Error, group must be a list of nodes.")             # <<<<<<<<<<<<<<
 * 		return (<_GedWalk*>(self._this)).scoreOfGroup[vector[node].iterator](groupVec.begin(), groupVec.end(), epsilon)
 * 
 */
  __pyx_tuple__43 = PyTuple_Pack(1, __pyx_kp_u_Error_group_must_be_a_list_of_no); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(0, 1292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__44 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__45 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__46 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__47 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__48 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__49 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__50 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__51 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__52 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__53 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__54 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__55 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__56 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__57 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__58 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__59 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__60 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__61 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__62 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__63 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__64 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__65 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__66 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__66)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__67 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);

  /* "networkit/centrality.pyx":1815
 * 			""" Set the maximum number of iterations. """
 * 			if maxIterations < 0:
 * 				raise Exception("Max iterations cannot be a negative number.")             # <<<<<<<<<<<<<<
 * 			(<_PageRank*>(self._this)).maxIterations = maxIterations
 * 
 */
  __pyx_tuple__68 = PyTuple_Pack(1, __pyx_kp_u_Max_iterations_cannot_be_a_negat); if (unlikely(!__pyx_tuple__68)) __PYX_ERR(0, 1815, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__69 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__69)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__70 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__71 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__71)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__71);
  __Pyx_GIVEREF(__pyx_tuple__71);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__72 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__73 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__73)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__74 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__74)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__75 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__75)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__75);
  __Pyx_GIVEREF(__pyx_tuple__75);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__76 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__76)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__76);
  __Pyx_GIVEREF(__pyx_tuple__76);

  /* "networkit/centrality.pyx":2108
 * 	def __init__(self, G, normalized=False):
 * 		if G.isDirected():
 * 			raise NotImplementedError("Not implemented for directed graphs; use centrality.EigenvectorCentrality instead")             # <<<<<<<<<<<<<<
 * 		super(SciPyEVZ, self).__init__(G, normalized=normalized)
 * 
 */
  __pyx_tuple__79 = PyTuple_Pack(1, __pyx_kp_u_Not_implemented_for_directed_gra); if (unlikely(!__pyx_tuple__79)) __PYX_ERR(0, 2108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__79);
  __Pyx_GIVEREF(__pyx_tuple__79);

  /* "networkit/centrality.pyx":650
 * 		generalized = 1
 * 
 * class ClosenessVariant(object):             # <<<<<<<<<<<<<<
 * 	Standard = standard
 * 	Generalized = generalized
 */
  __pyx_tuple__80 = PyTuple_Pack(1, __pyx_builtin_object); if (unlikely(!__pyx_tuple__80)) __PYX_ERR(0, 650, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__80);
  __Pyx_GIVEREF(__pyx_tuple__80);

  /* "networkit/centrality.pyx":1193
 * 
 * 
 * class BoundStrategy(object):             # <<<<<<<<<<<<<<
 * 	No = no
 * 	Spectral = spectral
 */
  __pyx_tuple__81 = PyTuple_Pack(1, __pyx_builtin_object); if (unlikely(!__pyx_tuple__81)) __PYX_ERR(0, 1193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__81);
  __Pyx_GIVEREF(__pyx_tuple__81);

  /* "networkit/centrality.pyx":1199
 * 	AdaptiveGeometric = adaptiveGeometric
 * 
 * class GreedyStrategy(object):             # <<<<<<<<<<<<<<
 * 	Lazy = lazy
 * 	Stochastic = stochastic
 */
  __pyx_tuple__82 = PyTuple_Pack(1, __pyx_builtin_object); if (unlikely(!__pyx_tuple__82)) __PYX_ERR(0, 1199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__82);
  __Pyx_GIVEREF(__pyx_tuple__82);

  /* "networkit/centrality.pyx":1449
 * 		InEdges = 1
 * 
 * class EdgeDirection(object):             # <<<<<<<<<<<<<<
 * 	inEdges = InEdges
 * 	outEdges = OutEdges
 */
  __pyx_tuple__83 = PyTuple_Pack(1, __pyx_builtin_object); if (unlikely(!__pyx_tuple__83)) __PYX_ERR(0, 1449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__83);
  __Pyx_GIVEREF(__pyx_tuple__83);

  /* "networkit/centrality.pyx":1758
 * 		L2Norm = 1
 * 
 * class Norm(object):             # <<<<<<<<<<<<<<
 * 	l1norm = L1Norm
 * 	l2norm = L2Norm
 */
  __pyx_tuple__84 = PyTuple_Pack(1, __pyx_builtin_object); if (unlikely(!__pyx_tuple__84)) __PYX_ERR(0, 1758, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__84);
  __Pyx_GIVEREF(__pyx_tuple__84);

  /* "networkit/centrality.pyx":1962
 * 		return (<_ApproxSpanningEdge*>(self._this)).scores();
 * 
 * def ranking(G, algorithm=Betweenness, normalized=False):             # <<<<<<<<<<<<<<
 * 	""" Return a ranking of nodes by the specified centrality type"""
 * 	# FIXME: some centrality algorithms take more Parameters:
 */
  __pyx_tuple__85 = PyTuple_Pack(4, __pyx_n_s_G, __pyx_n_s_algorithm, __pyx_n_s_normalized, __pyx_n_s_centrality); if (unlikely(!__pyx_tuple__85)) __PYX_ERR(0, 1962, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__85);
  __Pyx_GIVEREF(__pyx_tuple__85);
  __pyx_codeobj__86 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__85, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_centrality_pyx, __pyx_n_s_ranking, 1962, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__86)) __PYX_ERR(0, 1962, __pyx_L1_error)

  /* "networkit/centrality.pyx":1969
 * 	return centrality.ranking()
 * 
 * def scores(G, algorithm=Betweenness, normalized=False):             # <<<<<<<<<<<<<<
 * 	""" Return the centrality scores of nodes using the specified centrality type"""
 * 	centrality = algorithm(G, normalized)
 */
  __pyx_tuple__87 = PyTuple_Pack(4, __pyx_n_s_G, __pyx_n_s_algorithm, __pyx_n_s_normalized, __pyx_n_s_centrality); if (unlikely(!__pyx_tuple__87)) __PYX_ERR(0, 1969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__87);
  __Pyx_GIVEREF(__pyx_tuple__87);
  __pyx_codeobj__88 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__87, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_centrality_pyx, __pyx_n_s_scores, 1969, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__88)) __PYX_ERR(0, 1969, __pyx_L1_error)

  /* "networkit/centrality.pyx":1975
 * 	return centrality.scores()
 * 
 * def rankPerNode(ranking):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Parameters:
 */
  __pyx_tuple__89 = PyTuple_Pack(6, __pyx_n_s_ranking, __pyx_n_s_n_nodes, __pyx_n_s_ranking_id, __pyx_n_s_index, __pyx_n_s_pair, __pyx_n_s_prev_node); if (unlikely(!__pyx_tuple__89)) __PYX_ERR(0, 1975, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__89);
  __Pyx_GIVEREF(__pyx_tuple__89);
  __pyx_codeobj__90 = (PyObject*)__Pyx_PyCode_New(1, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__89, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_centrality_pyx, __pyx_n_s_rankPerNode, 1975, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__90)) __PYX_ERR(0, 1975, __pyx_L1_error)

  /* "networkit/centrality.pyx":1999
 * 	return ranking_id
 * 
 * def relativeRankErrors(rx, ry):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Let $r_x(u)$ be the rank of node $u$ in ranking $x$.
 */
  __pyx_tuple__91 = PyTuple_Pack(7, __pyx_n_s_rx, __pyx_n_s_ry, __pyx_n_s_diff, __pyx_n_s_n, __pyx_n_s_rnode_x, __pyx_n_s_rnode_y, __pyx_n_s_i); if (unlikely(!__pyx_tuple__91)) __PYX_ERR(0, 1999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__91);
  __Pyx_GIVEREF(__pyx_tuple__91);
  __pyx_codeobj__92 = (PyObject*)__Pyx_PyCode_New(2, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__91, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_centrality_pyx, __pyx_n_s_relativeRankErrors, 1999, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__92)) __PYX_ERR(0, 1999, __pyx_L1_error)

  /* "networkit/centrality.pyx":2034
 * 	to generate the correct matrices and do the correct normalization.
 * 	"""
 * 	def __init__(self, G, normalized=False):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Constructor.
 */
  __pyx_tuple__93 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_G, __pyx_n_s_normalized); if (unlikely(!__pyx_tuple__93)) __PYX_ERR(0, 2034, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__93);
  __Pyx_GIVEREF(__pyx_tuple__93);
  __pyx_codeobj__94 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__93, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_centrality_pyx, __pyx_n_s_init, 2034, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__94)) __PYX_ERR(0, 2034, __pyx_L1_error)
  __pyx_tuple__95 = PyTuple_Pack(1, ((PyObject *)Py_False)); if (unlikely(!__pyx_tuple__95)) __PYX_ERR(0, 2034, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__95);
  __Pyx_GIVEREF(__pyx_tuple__95);

  /* "networkit/centrality.pyx":2055
 * 		self.evz = {}
 * 
 * 	def prepareSpectrum(self):             # <<<<<<<<<<<<<<
 * 		""" Method that must be implemented to set the following values:
 * 		self.eigenvectors = list of eigenvectors desired for centrality measure
 */
  __pyx_tuple__96 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__96)) __PYX_ERR(0, 2055, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__96);
  __Pyx_GIVEREF(__pyx_tuple__96);
  __pyx_codeobj__97 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__96, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_centrality_pyx, __pyx_n_s_prepareSpectrum, 2055, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__97)) __PYX_ERR(0, 2055, __pyx_L1_error)

  /* "networkit/centrality.pyx":2062
 * 		raise NotImplemented
 * 
 * 	def normFactor(self):             # <<<<<<<<<<<<<<
 * 		""" Method that must be implemented to return a correct normalization factor"""
 * 		raise NotImplemented
 */
  __pyx_tuple__98 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__98)) __PYX_ERR(0, 2062, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__98);
  __Pyx_GIVEREF(__pyx_tuple__98);
  __pyx_codeobj__99 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__98, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_centrality_pyx, __pyx_n_s_normFactor, 2062, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__99)) __PYX_ERR(0, 2062, __pyx_L1_error)

  /* "networkit/centrality.pyx":2066
 * 		raise NotImplemented
 * 
 * 	def run(self):             # <<<<<<<<<<<<<<
 * 		self.prepareSpectrum()
 * 
 */
  __pyx_tuple__100 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_normFactor, __pyx_n_s_v); if (unlikely(!__pyx_tuple__100)) __PYX_ERR(0, 2066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__100);
  __Pyx_GIVEREF(__pyx_tuple__100);
  __pyx_codeobj__101 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_centrality_pyx, __pyx_n_s_run, 2066, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__101)) __PYX_ERR(0, 2066, __pyx_L1_error)

  /* "networkit/centrality.pyx":2082
 * 		return self
 * 
 * 	def scores(self):             # <<<<<<<<<<<<<<
 * 		if self.scoreList is None:
 * 			self.scoreList = [v for k,v in self.evz.items()]
 */
  __pyx_tuple__102 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_k, __pyx_n_s_v); if (unlikely(!__pyx_tuple__102)) __PYX_ERR(0, 2082, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__102);
  __Pyx_GIVEREF(__pyx_tuple__102);
  __pyx_codeobj__103 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__102, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_centrality_pyx, __pyx_n_s_scores, 2082, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__103)) __PYX_ERR(0, 2082, __pyx_L1_error)

  /* "networkit/centrality.pyx":2088
 * 		return self.scoreList
 * 
 * 	def ranking(self):             # <<<<<<<<<<<<<<
 * 		if self.rankList is None:
 * 			self.rankList = sorted(self.evz.items(),key=lambda x: float(x[1]), reverse=True)
 */
  __pyx_tuple__104 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__104)) __PYX_ERR(0, 2088, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__104);
  __Pyx_GIVEREF(__pyx_tuple__104);
  __pyx_codeobj__105 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__104, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_centrality_pyx, __pyx_n_s_ranking, 2088, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__105)) __PYX_ERR(0, 2088, __pyx_L1_error)

  /* "networkit/centrality.pyx":2106
 * 
 * 	"""
 * 	def __init__(self, G, normalized=False):             # <<<<<<<<<<<<<<
 * 		if G.isDirected():
 * 			raise NotImplementedError("Not implemented for directed graphs; use centrality.EigenvectorCentrality instead")
 */
  __pyx_tuple__106 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_G, __pyx_n_s_normalized); if (unlikely(!__pyx_tuple__106)) __PYX_ERR(0, 2106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__106);
  __Pyx_GIVEREF(__pyx_tuple__106);
  __pyx_codeobj__107 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_centrality_pyx, __pyx_n_s_init, 2106, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__107)) __PYX_ERR(0, 2106, __pyx_L1_error)
  __pyx_tuple__108 = PyTuple_Pack(1, ((PyObject *)Py_False)); if (unlikely(!__pyx_tuple__108)) __PYX_ERR(0, 2106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__108);
  __Pyx_GIVEREF(__pyx_tuple__108);

  /* "networkit/centrality.pyx":2111
 * 		super(SciPyEVZ, self).__init__(G, normalized=normalized)
 * 
 * 	def _length(self, vector):             # <<<<<<<<<<<<<<
 * 		square = sum([val * val for val in vector])
 * 		return math.sqrt(square)
 */
  __pyx_tuple__109 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_vector, __pyx_n_s_square, __pyx_n_s_val); if (unlikely(!__pyx_tuple__109)) __PYX_ERR(0, 2111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__109);
  __Pyx_GIVEREF(__pyx_tuple__109);
  __pyx_codeobj__110 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__109, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_centrality_pyx, __pyx_n_s_length, 2111, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__110)) __PYX_ERR(0, 2111, __pyx_L1_error)

  /* "networkit/centrality.pyx":2115
 * 		return math.sqrt(square)
 * 
 * 	def normFactor(self):             # <<<<<<<<<<<<<<
 * 		return 1 / self._length(self.eigenvector)
 * 
 */
  __pyx_tuple__111 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__111)) __PYX_ERR(0, 2115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__111);
  __Pyx_GIVEREF(__pyx_tuple__111);
  __pyx_codeobj__112 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__111, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_centrality_pyx, __pyx_n_s_normFactor, 2115, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__112)) __PYX_ERR(0, 2115, __pyx_L1_error)

  /* "networkit/centrality.pyx":2118
 * 		return 1 / self._length(self.eigenvector)
 * 
 * 	def prepareSpectrum(self):             # <<<<<<<<<<<<<<
 * 		spectrum = adjacencyEigenvector(self.graph, order=0)
 * 		self.eigenvector = spectrum[1]
 */
  __pyx_tuple__113 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_spectrum); if (unlikely(!__pyx_tuple__113)) __PYX_ERR(0, 2118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__113);
  __Pyx_GIVEREF(__pyx_tuple__113);
  __pyx_codeobj__114 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__113, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_centrality_pyx, __pyx_n_s_prepareSpectrum, 2118, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__114)) __PYX_ERR(0, 2118, __pyx_L1_error)

  /* "networkit/centrality.pyx":2125
 * class SciPyPageRank(SpectralCentrality):
 * 	# TODO: docstring
 * 	def __init__(self, G, damp=0.95, normalized=False):             # <<<<<<<<<<<<<<
 * 		super(SciPyPageRank, self).__init__(G, normalized=normalized)
 * 
 */
  __pyx_tuple__115 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_G, __pyx_n_s_damp, __pyx_n_s_normalized); if (unlikely(!__pyx_tuple__115)) __PYX_ERR(0, 2125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__115);
  __Pyx_GIVEREF(__pyx_tuple__115);
  __pyx_codeobj__116 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__115, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_centrality_pyx, __pyx_n_s_init, 2125, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__116)) __PYX_ERR(0, 2125, __pyx_L1_error)
  __pyx_tuple__117 = PyTuple_Pack(2, ((PyObject*)__pyx_float_0_95), ((PyObject *)Py_False)); if (unlikely(!__pyx_tuple__117)) __PYX_ERR(0, 2125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__117);
  __Pyx_GIVEREF(__pyx_tuple__117);

  /* "networkit/centrality.pyx":2130
 * 		self.damp = damp
 * 
 * 	def _length(self, vector):             # <<<<<<<<<<<<<<
 * 		return sum(vector)
 * 
 */
  __pyx_tuple__118 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_vector); if (unlikely(!__pyx_tuple__118)) __PYX_ERR(0, 2130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__118);
  __Pyx_GIVEREF(__pyx_tuple__118);
  __pyx_codeobj__119 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__118, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_centrality_pyx, __pyx_n_s_length, 2130, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__119)) __PYX_ERR(0, 2130, __pyx_L1_error)

  /* "networkit/centrality.pyx":2133
 * 		return sum(vector)
 * 
 * 	def normFactor(self):             # <<<<<<<<<<<<<<
 * 		return 1 / self._length(self.eigenvector)
 * 
 */
  __pyx_tuple__120 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__120)) __PYX_ERR(0, 2133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__120);
  __Pyx_GIVEREF(__pyx_tuple__120);
  __pyx_codeobj__121 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__120, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_centrality_pyx, __pyx_n_s_normFactor, 2133, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__121)) __PYX_ERR(0, 2133, __pyx_L1_error)

  /* "networkit/centrality.pyx":2136
 * 		return 1 / self._length(self.eigenvector)
 * 
 * 	def prepareSpectrum(self):             # <<<<<<<<<<<<<<
 * 		prMatrix = PageRankMatrix(self.graph, self.damp)
 * 		spectrum = symmetricEigenvectors(prMatrix, cutoff=0, reverse=False)
 */
  __pyx_tuple__122 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_prMatrix, __pyx_n_s_spectrum); if (unlikely(!__pyx_tuple__122)) __PYX_ERR(0, 2136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__122);
  __Pyx_GIVEREF(__pyx_tuple__122);
  __pyx_codeobj__123 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__122, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_networkit_centrality_pyx, __pyx_n_s_prepareSpectrum, 2136, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__123)) __PYX_ERR(0, 2136, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_0_1 = PyFloat_FromDouble(0.1); if (unlikely(!__pyx_float_0_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_2 = PyFloat_FromDouble(0.2); if (unlikely(!__pyx_float_0_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_5 = PyFloat_FromDouble(0.5); if (unlikely(!__pyx_float_0_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1_0 = PyFloat_FromDouble(1.0); if (unlikely(!__pyx_float_1_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_01 = PyFloat_FromDouble(0.01); if (unlikely(!__pyx_float_0_01)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_95 = PyFloat_FromDouble(0.95); if (unlikely(!__pyx_float_0_95)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1eneg_8 = PyFloat_FromDouble(1e-8); if (unlikely(!__pyx_float_1eneg_8)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1eneg_9 = PyFloat_FromDouble(1e-9); if (unlikely(!__pyx_float_1eneg_9)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_1_0 = PyFloat_FromDouble(-1.0); if (unlikely(!__pyx_float_neg_1_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_100 = PyInt_FromLong(100); if (unlikely(!__pyx_int_100)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_t_1 = PyImport_ImportModule("networkit.base"); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_9networkit_4base_Algorithm = __Pyx_ImportType(__pyx_t_1, "networkit.base", "Algorithm", sizeof(struct __pyx_obj_9networkit_4base_Algorithm), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9networkit_4base_Algorithm) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_type_9networkit_10centrality_Centrality.tp_base = __pyx_ptype_9networkit_4base_Algorithm;
  if (PyType_Ready(&__pyx_type_9networkit_10centrality_Centrality) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_10centrality_Centrality.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_10centrality_Centrality.tp_dictoffset && __pyx_type_9networkit_10centrality_Centrality.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_10centrality_Centrality.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Centrality, (PyObject *)&__pyx_type_9networkit_10centrality_Centrality) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_10centrality_Centrality) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  __pyx_ptype_9networkit_10centrality_Centrality = &__pyx_type_9networkit_10centrality_Centrality;
  __pyx_type_9networkit_10centrality_Betweenness.tp_base = __pyx_ptype_9networkit_10centrality_Centrality;
  if (PyType_Ready(&__pyx_type_9networkit_10centrality_Betweenness) < 0) __PYX_ERR(0, 105, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_10centrality_Betweenness.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_10centrality_Betweenness.tp_dictoffset && __pyx_type_9networkit_10centrality_Betweenness.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_10centrality_Betweenness.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Betweenness, (PyObject *)&__pyx_type_9networkit_10centrality_Betweenness) < 0) __PYX_ERR(0, 105, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_10centrality_Betweenness) < 0) __PYX_ERR(0, 105, __pyx_L1_error)
  __pyx_ptype_9networkit_10centrality_Betweenness = &__pyx_type_9networkit_10centrality_Betweenness;
  __pyx_type_9networkit_10centrality_ApproxBetweenness.tp_base = __pyx_ptype_9networkit_10centrality_Centrality;
  if (PyType_Ready(&__pyx_type_9networkit_10centrality_ApproxBetweenness) < 0) __PYX_ERR(0, 144, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_10centrality_ApproxBetweenness.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_10centrality_ApproxBetweenness.tp_dictoffset && __pyx_type_9networkit_10centrality_ApproxBetweenness.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_10centrality_ApproxBetweenness.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ApproxBetweenness, (PyObject *)&__pyx_type_9networkit_10centrality_ApproxBetweenness) < 0) __PYX_ERR(0, 144, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_10centrality_ApproxBetweenness) < 0) __PYX_ERR(0, 144, __pyx_L1_error)
  __pyx_ptype_9networkit_10centrality_ApproxBetweenness = &__pyx_type_9networkit_10centrality_ApproxBetweenness;
  __pyx_type_9networkit_10centrality_EstimateBetweenness.tp_base = __pyx_ptype_9networkit_10centrality_Centrality;
  if (PyType_Ready(&__pyx_type_9networkit_10centrality_EstimateBetweenness) < 0) __PYX_ERR(0, 184, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_10centrality_EstimateBetweenness.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_10centrality_EstimateBetweenness.tp_dictoffset && __pyx_type_9networkit_10centrality_EstimateBetweenness.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_10centrality_EstimateBetweenness.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_EstimateBetweenness, (PyObject *)&__pyx_type_9networkit_10centrality_EstimateBetweenness) < 0) __PYX_ERR(0, 184, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_10centrality_EstimateBetweenness) < 0) __PYX_ERR(0, 184, __pyx_L1_error)
  __pyx_ptype_9networkit_10centrality_EstimateBetweenness = &__pyx_type_9networkit_10centrality_EstimateBetweenness;
  __pyx_type_9networkit_10centrality_KadabraBetweenness.tp_base = __pyx_ptype_9networkit_4base_Algorithm;
  if (PyType_Ready(&__pyx_type_9networkit_10centrality_KadabraBetweenness) < 0) __PYX_ERR(0, 251, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_10centrality_KadabraBetweenness.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_10centrality_KadabraBetweenness.tp_dictoffset && __pyx_type_9networkit_10centrality_KadabraBetweenness.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_10centrality_KadabraBetweenness.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_KadabraBetweenness, (PyObject *)&__pyx_type_9networkit_10centrality_KadabraBetweenness) < 0) __PYX_ERR(0, 251, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_10centrality_KadabraBetweenness) < 0) __PYX_ERR(0, 251, __pyx_L1_error)
  __pyx_ptype_9networkit_10centrality_KadabraBetweenness = &__pyx_type_9networkit_10centrality_KadabraBetweenness;
  __pyx_type_9networkit_10centrality_DynBetweenness.tp_base = __pyx_ptype_9networkit_4base_Algorithm;
  if (PyType_Ready(&__pyx_type_9networkit_10centrality_DynBetweenness) < 0) __PYX_ERR(0, 379, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_10centrality_DynBetweenness.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_10centrality_DynBetweenness.tp_dictoffset && __pyx_type_9networkit_10centrality_DynBetweenness.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_10centrality_DynBetweenness.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_DynBetweenness, (PyObject *)&__pyx_type_9networkit_10centrality_DynBetweenness) < 0) __PYX_ERR(0, 379, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_10centrality_DynBetweenness) < 0) __PYX_ERR(0, 379, __pyx_L1_error)
  __pyx_ptype_9networkit_10centrality_DynBetweenness = &__pyx_type_9networkit_10centrality_DynBetweenness;
  __pyx_type_9networkit_10centrality_DynApproxBetweenness.tp_base = __pyx_ptype_9networkit_4base_Algorithm;
  if (PyType_Ready(&__pyx_type_9networkit_10centrality_DynApproxBetweenness) < 0) __PYX_ERR(0, 464, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_10centrality_DynApproxBetweenness.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_10centrality_DynApproxBetweenness.tp_dictoffset && __pyx_type_9networkit_10centrality_DynApproxBetweenness.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_10centrality_DynApproxBetweenness.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_DynApproxBetweenness, (PyObject *)&__pyx_type_9networkit_10centrality_DynApproxBetweenness) < 0) __PYX_ERR(0, 464, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_10centrality_DynApproxBetweenness) < 0) __PYX_ERR(0, 464, __pyx_L1_error)
  __pyx_ptype_9networkit_10centrality_DynApproxBetweenness = &__pyx_type_9networkit_10centrality_DynApproxBetweenness;
  if (PyType_Ready(&__pyx_type_9networkit_10centrality_DynBetweennessOneNode) < 0) __PYX_ERR(0, 571, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_10centrality_DynBetweennessOneNode.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_10centrality_DynBetweennessOneNode.tp_dictoffset && __pyx_type_9networkit_10centrality_DynBetweennessOneNode.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_10centrality_DynBetweennessOneNode.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_DynBetweennessOneNode, (PyObject *)&__pyx_type_9networkit_10centrality_DynBetweennessOneNode) < 0) __PYX_ERR(0, 571, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_10centrality_DynBetweennessOneNode) < 0) __PYX_ERR(0, 571, __pyx_L1_error)
  __pyx_ptype_9networkit_10centrality_DynBetweennessOneNode = &__pyx_type_9networkit_10centrality_DynBetweennessOneNode;
  __pyx_type_9networkit_10centrality_Closeness.tp_base = __pyx_ptype_9networkit_10centrality_Centrality;
  if (PyType_Ready(&__pyx_type_9networkit_10centrality_Closeness) < 0) __PYX_ERR(0, 660, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_10centrality_Closeness.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_10centrality_Closeness.tp_dictoffset && __pyx_type_9networkit_10centrality_Closeness.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_10centrality_Closeness.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Closeness, (PyObject *)&__pyx_type_9networkit_10centrality_Closeness) < 0) __PYX_ERR(0, 660, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_10centrality_Closeness) < 0) __PYX_ERR(0, 660, __pyx_L1_error)
  __pyx_ptype_9networkit_10centrality_Closeness = &__pyx_type_9networkit_10centrality_Closeness;
  __pyx_type_9networkit_10centrality_ApproxCloseness.tp_base = __pyx_ptype_9networkit_10centrality_Centrality;
  if (PyType_Ready(&__pyx_type_9networkit_10centrality_ApproxCloseness) < 0) __PYX_ERR(0, 712, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_10centrality_ApproxCloseness.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_10centrality_ApproxCloseness.tp_dictoffset && __pyx_type_9networkit_10centrality_ApproxCloseness.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_10centrality_ApproxCloseness.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ApproxCloseness, (PyObject *)&__pyx_type_9networkit_10centrality_ApproxCloseness) < 0) __PYX_ERR(0, 712, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_10centrality_ApproxCloseness) < 0) __PYX_ERR(0, 712, __pyx_L1_error)
  __pyx_ptype_9networkit_10centrality_ApproxCloseness = &__pyx_type_9networkit_10centrality_ApproxCloseness;
  __pyx_type_9networkit_10centrality_DegreeCentrality.tp_base = __pyx_ptype_9networkit_10centrality_Centrality;
  if (PyType_Ready(&__pyx_type_9networkit_10centrality_DegreeCentrality) < 0) __PYX_ERR(0, 761, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_10centrality_DegreeCentrality.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_10centrality_DegreeCentrality.tp_dictoffset && __pyx_type_9networkit_10centrality_DegreeCentrality.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_10centrality_DegreeCentrality.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_DegreeCentrality, (PyObject *)&__pyx_type_9networkit_10centrality_DegreeCentrality) < 0) __PYX_ERR(0, 761, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_10centrality_DegreeCentrality) < 0) __PYX_ERR(0, 761, __pyx_L1_error)
  __pyx_ptype_9networkit_10centrality_DegreeCentrality = &__pyx_type_9networkit_10centrality_DegreeCentrality;
  __pyx_type_9networkit_10centrality_HarmonicCloseness.tp_base = __pyx_ptype_9networkit_10centrality_Centrality;
  if (PyType_Ready(&__pyx_type_9networkit_10centrality_HarmonicCloseness) < 0) __PYX_ERR(0, 792, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_10centrality_HarmonicCloseness.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_10centrality_HarmonicCloseness.tp_dictoffset && __pyx_type_9networkit_10centrality_HarmonicCloseness.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_10centrality_HarmonicCloseness.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_HarmonicCloseness, (PyObject *)&__pyx_type_9networkit_10centrality_HarmonicCloseness) < 0) __PYX_ERR(0, 792, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_10centrality_HarmonicCloseness) < 0) __PYX_ERR(0, 792, __pyx_L1_error)
  __pyx_ptype_9networkit_10centrality_HarmonicCloseness = &__pyx_type_9networkit_10centrality_HarmonicCloseness;
  __pyx_type_9networkit_10centrality_TopCloseness.tp_base = __pyx_ptype_9networkit_4base_Algorithm;
  if (PyType_Ready(&__pyx_type_9networkit_10centrality_TopCloseness) < 0) __PYX_ERR(0, 828, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_10centrality_TopCloseness.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_10centrality_TopCloseness.tp_dictoffset && __pyx_type_9networkit_10centrality_TopCloseness.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_10centrality_TopCloseness.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_TopCloseness, (PyObject *)&__pyx_type_9networkit_10centrality_TopCloseness) < 0) __PYX_ERR(0, 828, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_10centrality_TopCloseness) < 0) __PYX_ERR(0, 828, __pyx_L1_error)
  __pyx_ptype_9networkit_10centrality_TopCloseness = &__pyx_type_9networkit_10centrality_TopCloseness;
  __pyx_type_9networkit_10centrality_TopHarmonicCloseness.tp_base = __pyx_ptype_9networkit_4base_Algorithm;
  if (PyType_Ready(&__pyx_type_9networkit_10centrality_TopHarmonicCloseness) < 0) __PYX_ERR(0, 894, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_10centrality_TopHarmonicCloseness.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_10centrality_TopHarmonicCloseness.tp_dictoffset && __pyx_type_9networkit_10centrality_TopHarmonicCloseness.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_10centrality_TopHarmonicCloseness.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_TopHarmonicCloseness, (PyObject *)&__pyx_type_9networkit_10centrality_TopHarmonicCloseness) < 0) __PYX_ERR(0, 894, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_10centrality_TopHarmonicCloseness) < 0) __PYX_ERR(0, 894, __pyx_L1_error)
  __pyx_ptype_9networkit_10centrality_TopHarmonicCloseness = &__pyx_type_9networkit_10centrality_TopHarmonicCloseness;
  __pyx_type_9networkit_10centrality_DynTopHarmonicCloseness.tp_base = __pyx_ptype_9networkit_4base_Algorithm;
  if (PyType_Ready(&__pyx_type_9networkit_10centrality_DynTopHarmonicCloseness) < 0) __PYX_ERR(0, 979, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_10centrality_DynTopHarmonicCloseness.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_10centrality_DynTopHarmonicCloseness.tp_dictoffset && __pyx_type_9networkit_10centrality_DynTopHarmonicCloseness.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_10centrality_DynTopHarmonicCloseness.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_DynTopHarmonicCloseness, (PyObject *)&__pyx_type_9networkit_10centrality_DynTopHarmonicCloseness) < 0) __PYX_ERR(0, 979, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_10centrality_DynTopHarmonicCloseness) < 0) __PYX_ERR(0, 979, __pyx_L1_error)
  __pyx_ptype_9networkit_10centrality_DynTopHarmonicCloseness = &__pyx_type_9networkit_10centrality_DynTopHarmonicCloseness;
  __pyx_type_9networkit_10centrality_LocalPartitionCoverage.tp_base = __pyx_ptype_9networkit_10centrality_Centrality;
  if (PyType_Ready(&__pyx_type_9networkit_10centrality_LocalPartitionCoverage) < 0) __PYX_ERR(0, 1085, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_10centrality_LocalPartitionCoverage.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_10centrality_LocalPartitionCoverage.tp_dictoffset && __pyx_type_9networkit_10centrality_LocalPartitionCoverage.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_10centrality_LocalPartitionCoverage.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_LocalPartitionCoverage, (PyObject *)&__pyx_type_9networkit_10centrality_LocalPartitionCoverage) < 0) __PYX_ERR(0, 1085, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_10centrality_LocalPartitionCoverage) < 0) __PYX_ERR(0, 1085, __pyx_L1_error)
  __pyx_ptype_9networkit_10centrality_LocalPartitionCoverage = &__pyx_type_9networkit_10centrality_LocalPartitionCoverage;
  __pyx_type_9networkit_10centrality_GroupDegree.tp_base = __pyx_ptype_9networkit_4base_Algorithm;
  if (PyType_Ready(&__pyx_type_9networkit_10centrality_GroupDegree) < 0) __PYX_ERR(0, 1114, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_10centrality_GroupDegree.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_10centrality_GroupDegree.tp_dictoffset && __pyx_type_9networkit_10centrality_GroupDegree.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_10centrality_GroupDegree.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GroupDegree, (PyObject *)&__pyx_type_9networkit_10centrality_GroupDegree) < 0) __PYX_ERR(0, 1114, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_10centrality_GroupDegree) < 0) __PYX_ERR(0, 1114, __pyx_L1_error)
  __pyx_ptype_9networkit_10centrality_GroupDegree = &__pyx_type_9networkit_10centrality_GroupDegree;
  __pyx_type_9networkit_10centrality_GedWalk.tp_base = __pyx_ptype_9networkit_4base_Algorithm;
  if (PyType_Ready(&__pyx_type_9networkit_10centrality_GedWalk) < 0) __PYX_ERR(0, 1212, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_10centrality_GedWalk.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_10centrality_GedWalk.tp_dictoffset && __pyx_type_9networkit_10centrality_GedWalk.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_10centrality_GedWalk.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GedWalk, (PyObject *)&__pyx_type_9networkit_10centrality_GedWalk) < 0) __PYX_ERR(0, 1212, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_10centrality_GedWalk) < 0) __PYX_ERR(0, 1212, __pyx_L1_error)
  __pyx_ptype_9networkit_10centrality_GedWalk = &__pyx_type_9networkit_10centrality_GedWalk;
  __pyx_type_9networkit_10centrality_ApproxGroupBetweenness.tp_base = __pyx_ptype_9networkit_4base_Algorithm;
  if (PyType_Ready(&__pyx_type_9networkit_10centrality_ApproxGroupBetweenness) < 0) __PYX_ERR(0, 1303, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_10centrality_ApproxGroupBetweenness.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_10centrality_ApproxGroupBetweenness.tp_dictoffset && __pyx_type_9networkit_10centrality_ApproxGroupBetweenness.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_10centrality_ApproxGroupBetweenness.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ApproxGroupBetweenness, (PyObject *)&__pyx_type_9networkit_10centrality_ApproxGroupBetweenness) < 0) __PYX_ERR(0, 1303, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_10centrality_ApproxGroupBetweenness) < 0) __PYX_ERR(0, 1303, __pyx_L1_error)
  __pyx_ptype_9networkit_10centrality_ApproxGroupBetweenness = &__pyx_type_9networkit_10centrality_ApproxGroupBetweenness;
  __pyx_type_9networkit_10centrality_GroupCloseness.tp_base = __pyx_ptype_9networkit_4base_Algorithm;
  if (PyType_Ready(&__pyx_type_9networkit_10centrality_GroupCloseness) < 0) __PYX_ERR(0, 1361, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_10centrality_GroupCloseness.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_10centrality_GroupCloseness.tp_dictoffset && __pyx_type_9networkit_10centrality_GroupCloseness.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_10centrality_GroupCloseness.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GroupCloseness, (PyObject *)&__pyx_type_9networkit_10centrality_GroupCloseness) < 0) __PYX_ERR(0, 1361, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_10centrality_GroupCloseness) < 0) __PYX_ERR(0, 1361, __pyx_L1_error)
  __pyx_ptype_9networkit_10centrality_GroupCloseness = &__pyx_type_9networkit_10centrality_GroupCloseness;
  __pyx_type_9networkit_10centrality_KPathCentrality.tp_base = __pyx_ptype_9networkit_10centrality_Centrality;
  if (PyType_Ready(&__pyx_type_9networkit_10centrality_KPathCentrality) < 0) __PYX_ERR(0, 1422, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_10centrality_KPathCentrality.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_10centrality_KPathCentrality.tp_dictoffset && __pyx_type_9networkit_10centrality_KPathCentrality.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_10centrality_KPathCentrality.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_KPathCentrality, (PyObject *)&__pyx_type_9networkit_10centrality_KPathCentrality) < 0) __PYX_ERR(0, 1422, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_10centrality_KPathCentrality) < 0) __PYX_ERR(0, 1422, __pyx_L1_error)
  __pyx_ptype_9networkit_10centrality_KPathCentrality = &__pyx_type_9networkit_10centrality_KPathCentrality;
  __pyx_type_9networkit_10centrality_KatzCentrality.tp_base = __pyx_ptype_9networkit_10centrality_Centrality;
  if (PyType_Ready(&__pyx_type_9networkit_10centrality_KatzCentrality) < 0) __PYX_ERR(0, 1459, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_10centrality_KatzCentrality.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_10centrality_KatzCentrality.tp_dictoffset && __pyx_type_9networkit_10centrality_KatzCentrality.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_10centrality_KatzCentrality.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_KatzCentrality, (PyObject *)&__pyx_type_9networkit_10centrality_KatzCentrality) < 0) __PYX_ERR(0, 1459, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_10centrality_KatzCentrality) < 0) __PYX_ERR(0, 1459, __pyx_L1_error)
  __pyx_ptype_9networkit_10centrality_KatzCentrality = &__pyx_type_9networkit_10centrality_KatzCentrality;
  __pyx_type_9networkit_10centrality_DynKatzCentrality.tp_base = __pyx_ptype_9networkit_10centrality_Centrality;
  if (PyType_Ready(&__pyx_type_9networkit_10centrality_DynKatzCentrality) < 0) __PYX_ERR(0, 1503, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_10centrality_DynKatzCentrality.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_10centrality_DynKatzCentrality.tp_dictoffset && __pyx_type_9networkit_10centrality_DynKatzCentrality.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_10centrality_DynKatzCentrality.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_DynKatzCentrality, (PyObject *)&__pyx_type_9networkit_10centrality_DynKatzCentrality) < 0) __PYX_ERR(0, 1503, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_10centrality_DynKatzCentrality) < 0) __PYX_ERR(0, 1503, __pyx_L1_error)
  __pyx_ptype_9networkit_10centrality_DynKatzCentrality = &__pyx_type_9networkit_10centrality_DynKatzCentrality;
  __pyx_type_9networkit_10centrality_LocalClusteringCoefficient.tp_base = __pyx_ptype_9networkit_10centrality_Centrality;
  if (PyType_Ready(&__pyx_type_9networkit_10centrality_LocalClusteringCoefficient) < 0) __PYX_ERR(0, 1536, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_10centrality_LocalClusteringCoefficient.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_10centrality_LocalClusteringCoefficient.tp_dictoffset && __pyx_type_9networkit_10centrality_LocalClusteringCoefficient.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_10centrality_LocalClusteringCoefficient.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_LocalClusteringCoefficient, (PyObject *)&__pyx_type_9networkit_10centrality_LocalClusteringCoefficient) < 0) __PYX_ERR(0, 1536, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_10centrality_LocalClusteringCoefficient) < 0) __PYX_ERR(0, 1536, __pyx_L1_error)
  __pyx_ptype_9networkit_10centrality_LocalClusteringCoefficient = &__pyx_type_9networkit_10centrality_LocalClusteringCoefficient;
  __pyx_type_9networkit_10centrality_Sfigality.tp_base = __pyx_ptype_9networkit_10centrality_Centrality;
  if (PyType_Ready(&__pyx_type_9networkit_10centrality_Sfigality) < 0) __PYX_ERR(0, 1571, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_10centrality_Sfigality.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_10centrality_Sfigality.tp_dictoffset && __pyx_type_9networkit_10centrality_Sfigality.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_10centrality_Sfigality.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Sfigality, (PyObject *)&__pyx_type_9networkit_10centrality_Sfigality) < 0) __PYX_ERR(0, 1571, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_10centrality_Sfigality) < 0) __PYX_ERR(0, 1571, __pyx_L1_error)
  __pyx_ptype_9networkit_10centrality_Sfigality = &__pyx_type_9networkit_10centrality_Sfigality;
  __pyx_type_9networkit_10centrality_PermanenceCentrality.tp_base = __pyx_ptype_9networkit_4base_Algorithm;
  if (PyType_Ready(&__pyx_type_9networkit_10centrality_PermanenceCentrality) < 0) __PYX_ERR(0, 1594, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_10centrality_PermanenceCentrality.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_10centrality_PermanenceCentrality.tp_dictoffset && __pyx_type_9networkit_10centrality_PermanenceCentrality.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_10centrality_PermanenceCentrality.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PermanenceCentrality, (PyObject *)&__pyx_type_9networkit_10centrality_PermanenceCentrality) < 0) __PYX_ERR(0, 1594, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_10centrality_PermanenceCentrality) < 0) __PYX_ERR(0, 1594, __pyx_L1_error)
  __pyx_ptype_9networkit_10centrality_PermanenceCentrality = &__pyx_type_9networkit_10centrality_PermanenceCentrality;
  __pyx_type_9networkit_10centrality_LaplacianCentrality.tp_base = __pyx_ptype_9networkit_10centrality_Centrality;
  if (PyType_Ready(&__pyx_type_9networkit_10centrality_LaplacianCentrality) < 0) __PYX_ERR(0, 1628, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_10centrality_LaplacianCentrality.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_10centrality_LaplacianCentrality.tp_dictoffset && __pyx_type_9networkit_10centrality_LaplacianCentrality.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_10centrality_LaplacianCentrality.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_LaplacianCentrality, (PyObject *)&__pyx_type_9networkit_10centrality_LaplacianCentrality) < 0) __PYX_ERR(0, 1628, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_10centrality_LaplacianCentrality) < 0) __PYX_ERR(0, 1628, __pyx_L1_error)
  __pyx_ptype_9networkit_10centrality_LaplacianCentrality = &__pyx_type_9networkit_10centrality_LaplacianCentrality;
  __pyx_type_9networkit_10centrality_CoreDecomposition.tp_base = __pyx_ptype_9networkit_10centrality_Centrality;
  if (PyType_Ready(&__pyx_type_9networkit_10centrality_CoreDecomposition) < 0) __PYX_ERR(0, 1659, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_10centrality_CoreDecomposition.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_10centrality_CoreDecomposition.tp_dictoffset && __pyx_type_9networkit_10centrality_CoreDecomposition.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_10centrality_CoreDecomposition.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_CoreDecomposition, (PyObject *)&__pyx_type_9networkit_10centrality_CoreDecomposition) < 0) __PYX_ERR(0, 1659, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_10centrality_CoreDecomposition) < 0) __PYX_ERR(0, 1659, __pyx_L1_error)
  __pyx_ptype_9networkit_10centrality_CoreDecomposition = &__pyx_type_9networkit_10centrality_CoreDecomposition;
  __pyx_type_9networkit_10centrality_EigenvectorCentrality.tp_base = __pyx_ptype_9networkit_10centrality_Centrality;
  if (PyType_Ready(&__pyx_type_9networkit_10centrality_EigenvectorCentrality) < 0) __PYX_ERR(0, 1731, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_10centrality_EigenvectorCentrality.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_10centrality_EigenvectorCentrality.tp_dictoffset && __pyx_type_9networkit_10centrality_EigenvectorCentrality.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_10centrality_EigenvectorCentrality.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_EigenvectorCentrality, (PyObject *)&__pyx_type_9networkit_10centrality_EigenvectorCentrality) < 0) __PYX_ERR(0, 1731, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_10centrality_EigenvectorCentrality) < 0) __PYX_ERR(0, 1731, __pyx_L1_error)
  __pyx_ptype_9networkit_10centrality_EigenvectorCentrality = &__pyx_type_9networkit_10centrality_EigenvectorCentrality;
  __pyx_type_9networkit_10centrality_PageRank.tp_base = __pyx_ptype_9networkit_10centrality_Centrality;
  if (PyType_Ready(&__pyx_type_9networkit_10centrality_PageRank) < 0) __PYX_ERR(0, 1770, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_10centrality_PageRank.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_10centrality_PageRank.tp_dictoffset && __pyx_type_9networkit_10centrality_PageRank.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_10centrality_PageRank.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PageRank, (PyObject *)&__pyx_type_9networkit_10centrality_PageRank) < 0) __PYX_ERR(0, 1770, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_10centrality_PageRank) < 0) __PYX_ERR(0, 1770, __pyx_L1_error)
  __pyx_ptype_9networkit_10centrality_PageRank = &__pyx_type_9networkit_10centrality_PageRank;
  __pyx_type_9networkit_10centrality_SpanningEdgeCentrality.tp_base = __pyx_ptype_9networkit_4base_Algorithm;
  if (PyType_Ready(&__pyx_type_9networkit_10centrality_SpanningEdgeCentrality) < 0) __PYX_ERR(0, 1826, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_10centrality_SpanningEdgeCentrality.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_10centrality_SpanningEdgeCentrality.tp_dictoffset && __pyx_type_9networkit_10centrality_SpanningEdgeCentrality.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_10centrality_SpanningEdgeCentrality.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_SpanningEdgeCentrality, (PyObject *)&__pyx_type_9networkit_10centrality_SpanningEdgeCentrality) < 0) __PYX_ERR(0, 1826, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_10centrality_SpanningEdgeCentrality) < 0) __PYX_ERR(0, 1826, __pyx_L1_error)
  __pyx_ptype_9networkit_10centrality_SpanningEdgeCentrality = &__pyx_type_9networkit_10centrality_SpanningEdgeCentrality;
  __pyx_type_9networkit_10centrality_ApproxElectricalCloseness.tp_base = __pyx_ptype_9networkit_10centrality_Centrality;
  if (PyType_Ready(&__pyx_type_9networkit_10centrality_ApproxElectricalCloseness) < 0) __PYX_ERR(0, 1870, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_10centrality_ApproxElectricalCloseness.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_10centrality_ApproxElectricalCloseness.tp_dictoffset && __pyx_type_9networkit_10centrality_ApproxElectricalCloseness.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_10centrality_ApproxElectricalCloseness.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ApproxElectricalCloseness, (PyObject *)&__pyx_type_9networkit_10centrality_ApproxElectricalCloseness) < 0) __PYX_ERR(0, 1870, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_10centrality_ApproxElectricalCloseness) < 0) __PYX_ERR(0, 1870, __pyx_L1_error)
  __pyx_ptype_9networkit_10centrality_ApproxElectricalCloseness = &__pyx_type_9networkit_10centrality_ApproxElectricalCloseness;
  __pyx_type_9networkit_10centrality_ApproxSpanningEdge.tp_base = __pyx_ptype_9networkit_4base_Algorithm;
  if (PyType_Ready(&__pyx_type_9networkit_10centrality_ApproxSpanningEdge) < 0) __PYX_ERR(0, 1930, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9networkit_10centrality_ApproxSpanningEdge.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9networkit_10centrality_ApproxSpanningEdge.tp_dictoffset && __pyx_type_9networkit_10centrality_ApproxSpanningEdge.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9networkit_10centrality_ApproxSpanningEdge.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ApproxSpanningEdge, (PyObject *)&__pyx_type_9networkit_10centrality_ApproxSpanningEdge) < 0) __PYX_ERR(0, 1930, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9networkit_10centrality_ApproxSpanningEdge) < 0) __PYX_ERR(0, 1930, __pyx_L1_error)
  __pyx_ptype_9networkit_10centrality_ApproxSpanningEdge = &__pyx_type_9networkit_10centrality_ApproxSpanningEdge;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("networkit.dynamics"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_9networkit_8dynamics_GraphEvent = __Pyx_ImportType(__pyx_t_1, "networkit.dynamics", "GraphEvent", sizeof(struct __pyx_obj_9networkit_8dynamics_GraphEvent), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9networkit_8dynamics_GraphEvent) __PYX_ERR(2, 34, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("networkit.graph"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_9networkit_5graph_Graph = __Pyx_ImportType(__pyx_t_1, "networkit.graph", "Graph", sizeof(struct __pyx_obj_9networkit_5graph_Graph), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9networkit_5graph_Graph) __PYX_ERR(3, 150, __pyx_L1_error)
  __pyx_vtabptr_9networkit_5graph_Graph = (struct __pyx_vtabstruct_9networkit_5graph_Graph*)__Pyx_GetVtable(__pyx_ptype_9networkit_5graph_Graph->tp_dict); if (unlikely(!__pyx_vtabptr_9networkit_5graph_Graph)) __PYX_ERR(3, 150, __pyx_L1_error)
  __pyx_ptype_9networkit_5graph_RandomMaximumSpanningForest = __Pyx_ImportType(__pyx_t_1, "networkit.graph", "RandomMaximumSpanningForest", sizeof(struct __pyx_obj_9networkit_5graph_RandomMaximumSpanningForest), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9networkit_5graph_RandomMaximumSpanningForest) __PYX_ERR(3, 172, __pyx_L1_error)
  __pyx_ptype_9networkit_5graph_UnionMaximumSpanningForest = __Pyx_ImportType(__pyx_t_1, "networkit.graph", "UnionMaximumSpanningForest", sizeof(struct __pyx_obj_9networkit_5graph_UnionMaximumSpanningForest), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9networkit_5graph_UnionMaximumSpanningForest) __PYX_ERR(3, 187, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("networkit.structures"); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_9networkit_10structures_Cover = __Pyx_ImportType(__pyx_t_1, "networkit.structures", "Cover", sizeof(struct __pyx_obj_9networkit_10structures_Cover), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9networkit_10structures_Cover) __PYX_ERR(4, 46, __pyx_L1_error)
  __pyx_vtabptr_9networkit_10structures_Cover = (struct __pyx_vtabstruct_9networkit_10structures_Cover*)__Pyx_GetVtable(__pyx_ptype_9networkit_10structures_Cover->tp_dict); if (unlikely(!__pyx_vtabptr_9networkit_10structures_Cover)) __PYX_ERR(4, 46, __pyx_L1_error)
  __pyx_ptype_9networkit_10structures_Partition = __Pyx_ImportType(__pyx_t_1, "networkit.structures", "Partition", sizeof(struct __pyx_obj_9networkit_10structures_Partition), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9networkit_10structures_Partition) __PYX_ERR(4, 82, __pyx_L1_error)
  __pyx_vtabptr_9networkit_10structures_Partition = (struct __pyx_vtabstruct_9networkit_10structures_Partition*)__Pyx_GetVtable(__pyx_ptype_9networkit_10structures_Partition->tp_dict); if (unlikely(!__pyx_vtabptr_9networkit_10structures_Partition)) __PYX_ERR(4, 82, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initcentrality(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initcentrality(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_centrality(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_centrality(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_centrality(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  enum NetworKit::ApproxCloseness::CLOSENESS_TYPE __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'centrality' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_centrality(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("centrality", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_networkit__centrality) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "networkit.centrality")) {
      if (unlikely(PyDict_SetItemString(modules, "networkit.centrality", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "networkit/centrality.pyx":13
 * ctypedef double edgeweight
 * 
 * import math             # <<<<<<<<<<<<<<
 * 
 * from .base cimport _Algorithm, Algorithm
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_math, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_math, __pyx_t_1) < 0) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/centrality.pyx":19
 * from .graph cimport _Graph, Graph
 * from .structures cimport _Cover, Cover, _Partition, Partition
 * from networkit.algebraic import adjacencyEigenvector, PageRankMatrix, symmetricEigenvectors             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/centrality/Centrality.hpp>":
 */
  __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_adjacencyEigenvector);
  __Pyx_GIVEREF(__pyx_n_s_adjacencyEigenvector);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_adjacencyEigenvector);
  __Pyx_INCREF(__pyx_n_s_PageRankMatrix);
  __Pyx_GIVEREF(__pyx_n_s_PageRankMatrix);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_PageRankMatrix);
  __Pyx_INCREF(__pyx_n_s_symmetricEigenvectors);
  __Pyx_GIVEREF(__pyx_n_s_symmetricEigenvectors);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_symmetricEigenvectors);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_networkit_algebraic, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_adjacencyEigenvector); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_adjacencyEigenvector, __pyx_t_1) < 0) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_PageRankMatrix); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PageRankMatrix, __pyx_t_1) < 0) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_symmetricEigenvectors); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_symmetricEigenvectors, __pyx_t_1) < 0) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/centrality.pyx":650
 * 		generalized = 1
 * 
 * class ClosenessVariant(object):             # <<<<<<<<<<<<<<
 * 	Standard = standard
 * 	Generalized = generalized
 */
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_tuple__80); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 650, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_tuple__80, __pyx_n_s_ClosenessVariant, __pyx_n_s_ClosenessVariant, (PyObject *) NULL, __pyx_n_s_networkit_centrality, (PyObject *) NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 650, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "networkit/centrality.pyx":651
 * 
 * class ClosenessVariant(object):
 * 	Standard = standard             # <<<<<<<<<<<<<<
 * 	Generalized = generalized
 * 
 */
  __pyx_t_3 = __Pyx_PyInt_From_enum__NetworKit_3a__3a_ClosenessVariant(NetworKit::standard); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_Standard, __pyx_t_3) < 0) __PYX_ERR(0, 651, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "networkit/centrality.pyx":652
 * class ClosenessVariant(object):
 * 	Standard = standard
 * 	Generalized = generalized             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/centrality/Closeness.hpp>":
 */
  __pyx_t_3 = __Pyx_PyInt_From_enum__NetworKit_3a__3a_ClosenessVariant(NetworKit::generalized); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_Generalized, __pyx_t_3) < 0) __PYX_ERR(0, 652, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "networkit/centrality.pyx":650
 * 		generalized = 1
 * 
 * class ClosenessVariant(object):             # <<<<<<<<<<<<<<
 * 	Standard = standard
 * 	Generalized = generalized
 */
  __pyx_t_3 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_ClosenessVariant, __pyx_tuple__80, __pyx_t_1, NULL, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 650, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ClosenessVariant, __pyx_t_3) < 0) __PYX_ERR(0, 650, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/centrality.pyx":738
 * 
 * 	#cdef _ApproxCloseness _this
 * 	INBOUND = 0             # <<<<<<<<<<<<<<
 * 	OUTBOUND = 1
 * 	SUM = 2
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9networkit_10centrality_ApproxCloseness->tp_dict, __pyx_n_s_INBOUND, __pyx_int_0) < 0) __PYX_ERR(0, 738, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_9networkit_10centrality_ApproxCloseness);

  /* "networkit/centrality.pyx":739
 * 	#cdef _ApproxCloseness _this
 * 	INBOUND = 0
 * 	OUTBOUND = 1             # <<<<<<<<<<<<<<
 * 	SUM = 2
 * 
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9networkit_10centrality_ApproxCloseness->tp_dict, __pyx_n_s_OUTBOUND, __pyx_int_1) < 0) __PYX_ERR(0, 739, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_9networkit_10centrality_ApproxCloseness);

  /* "networkit/centrality.pyx":740
 * 	INBOUND = 0
 * 	OUTBOUND = 1
 * 	SUM = 2             # <<<<<<<<<<<<<<
 * 
 * 	def __cinit__(self, Graph G, nSamples, epsilon=0.1, normalized=False, _ClosenessType type=OUTBOUND):
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9networkit_10centrality_ApproxCloseness->tp_dict, __pyx_n_s_SUM, __pyx_int_2) < 0) __PYX_ERR(0, 740, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_9networkit_10centrality_ApproxCloseness);

  /* "networkit/centrality.pyx":742
 * 	SUM = 2
 * 
 * 	def __cinit__(self, Graph G, nSamples, epsilon=0.1, normalized=False, _ClosenessType type=OUTBOUND):             # <<<<<<<<<<<<<<
 * 		self._G = G
 * 		self._this = new _ApproxCloseness(G._this, nSamples, epsilon, normalized, type)
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_9networkit_10centrality_ApproxCloseness, __pyx_n_s_OUTBOUND); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 742, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = ((enum NetworKit::ApproxCloseness::CLOSENESS_TYPE)__Pyx_PyInt_As_enum__NetworKit_3a__3a_ApproxCloseness_3a__3a_CLOSENESS_TYPE(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 742, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__24 = __pyx_t_4;

  /* "networkit/centrality.pyx":1193
 * 
 * 
 * class BoundStrategy(object):             # <<<<<<<<<<<<<<
 * 	No = no
 * 	Spectral = spectral
 */
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_tuple__81); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_tuple__81, __pyx_n_s_BoundStrategy, __pyx_n_s_BoundStrategy, (PyObject *) NULL, __pyx_n_s_networkit_centrality, (PyObject *) NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "networkit/centrality.pyx":1194
 * 
 * class BoundStrategy(object):
 * 	No = no             # <<<<<<<<<<<<<<
 * 	Spectral = spectral
 * 	Geometric = geometric
 */
  __pyx_t_3 = __Pyx_PyInt_From_enum__NetworKit_3a__3a_GedWalk_3a__3a_BoundStrategy(NetworKit::GedWalk::no); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_No, __pyx_t_3) < 0) __PYX_ERR(0, 1194, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "networkit/centrality.pyx":1195
 * class BoundStrategy(object):
 * 	No = no
 * 	Spectral = spectral             # <<<<<<<<<<<<<<
 * 	Geometric = geometric
 * 	AdaptiveGeometric = adaptiveGeometric
 */
  __pyx_t_3 = __Pyx_PyInt_From_enum__NetworKit_3a__3a_GedWalk_3a__3a_BoundStrategy(NetworKit::GedWalk::spectral); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_Spectral, __pyx_t_3) < 0) __PYX_ERR(0, 1195, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "networkit/centrality.pyx":1196
 * 	No = no
 * 	Spectral = spectral
 * 	Geometric = geometric             # <<<<<<<<<<<<<<
 * 	AdaptiveGeometric = adaptiveGeometric
 * 
 */
  __pyx_t_3 = __Pyx_PyInt_From_enum__NetworKit_3a__3a_GedWalk_3a__3a_BoundStrategy(NetworKit::GedWalk::geometric); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_Geometric, __pyx_t_3) < 0) __PYX_ERR(0, 1196, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "networkit/centrality.pyx":1197
 * 	Spectral = spectral
 * 	Geometric = geometric
 * 	AdaptiveGeometric = adaptiveGeometric             # <<<<<<<<<<<<<<
 * 
 * class GreedyStrategy(object):
 */
  __pyx_t_3 = __Pyx_PyInt_From_enum__NetworKit_3a__3a_GedWalk_3a__3a_BoundStrategy(NetworKit::GedWalk::adaptiveGeometric); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_AdaptiveGeometric, __pyx_t_3) < 0) __PYX_ERR(0, 1197, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "networkit/centrality.pyx":1193
 * 
 * 
 * class BoundStrategy(object):             # <<<<<<<<<<<<<<
 * 	No = no
 * 	Spectral = spectral
 */
  __pyx_t_3 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_BoundStrategy, __pyx_tuple__81, __pyx_t_1, NULL, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BoundStrategy, __pyx_t_3) < 0) __PYX_ERR(0, 1193, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/centrality.pyx":1199
 * 	AdaptiveGeometric = adaptiveGeometric
 * 
 * class GreedyStrategy(object):             # <<<<<<<<<<<<<<
 * 	Lazy = lazy
 * 	Stochastic = stochastic
 */
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_tuple__82); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_tuple__82, __pyx_n_s_GreedyStrategy, __pyx_n_s_GreedyStrategy, (PyObject *) NULL, __pyx_n_s_networkit_centrality, (PyObject *) NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "networkit/centrality.pyx":1200
 * 
 * class GreedyStrategy(object):
 * 	Lazy = lazy             # <<<<<<<<<<<<<<
 * 	Stochastic = stochastic
 * 
 */
  __pyx_t_3 = __Pyx_PyInt_From_enum__NetworKit_3a__3a_GedWalk_3a__3a_GreedyStrategy(NetworKit::GedWalk::lazy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_Lazy, __pyx_t_3) < 0) __PYX_ERR(0, 1200, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "networkit/centrality.pyx":1201
 * class GreedyStrategy(object):
 * 	Lazy = lazy
 * 	Stochastic = stochastic             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __Pyx_PyInt_From_enum__NetworKit_3a__3a_GedWalk_3a__3a_GreedyStrategy(NetworKit::GedWalk::stochastic); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_Stochastic, __pyx_t_3) < 0) __PYX_ERR(0, 1201, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "networkit/centrality.pyx":1199
 * 	AdaptiveGeometric = adaptiveGeometric
 * 
 * class GreedyStrategy(object):             # <<<<<<<<<<<<<<
 * 	Lazy = lazy
 * 	Stochastic = stochastic
 */
  __pyx_t_3 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_GreedyStrategy, __pyx_tuple__82, __pyx_t_1, NULL, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_GreedyStrategy, __pyx_t_3) < 0) __PYX_ERR(0, 1199, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/centrality.pyx":1215
 * 	cdef Graph _G
 * 
 * 	def __cinit__(self, Graph G, k = 1, epsilon = 0.1, alpha = -1.0, bs = BoundStrategy.Geometric,             # <<<<<<<<<<<<<<
 * 			gs = GreedyStrategy.Lazy, spectralDelta = 0.5):
 * 		"""
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_BoundStrategy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Geometric); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__41 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "networkit/centrality.pyx":1216
 * 
 * 	def __cinit__(self, Graph G, k = 1, epsilon = 0.1, alpha = -1.0, bs = BoundStrategy.Geometric,
 * 			gs = GreedyStrategy.Lazy, spectralDelta = 0.5):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Finds a group of `k` vertices with at least ((1 - 1/e) * opt - epsilon) GedWalk centrality
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_GreedyStrategy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Lazy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_k__42 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "networkit/centrality.pyx":1449
 * 		InEdges = 1
 * 
 * class EdgeDirection(object):             # <<<<<<<<<<<<<<
 * 	inEdges = InEdges
 * 	outEdges = OutEdges
 */
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_tuple__83); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_tuple__83, __pyx_n_s_EdgeDirection, __pyx_n_s_EdgeDirection, (PyObject *) NULL, __pyx_n_s_networkit_centrality, (PyObject *) NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "networkit/centrality.pyx":1450
 * 
 * class EdgeDirection(object):
 * 	inEdges = InEdges             # <<<<<<<<<<<<<<
 * 	outEdges = OutEdges
 * 
 */
  __pyx_t_3 = __Pyx_PyInt_From_enum__NetworKit_3a__3a_EdgeDirection(NetworKit::InEdges); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_inEdges, __pyx_t_3) < 0) __PYX_ERR(0, 1450, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "networkit/centrality.pyx":1451
 * class EdgeDirection(object):
 * 	inEdges = InEdges
 * 	outEdges = OutEdges             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/centrality/KatzCentrality.hpp>":
 */
  __pyx_t_3 = __Pyx_PyInt_From_enum__NetworKit_3a__3a_EdgeDirection(NetworKit::OutEdges); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_outEdges, __pyx_t_3) < 0) __PYX_ERR(0, 1451, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "networkit/centrality.pyx":1449
 * 		InEdges = 1
 * 
 * class EdgeDirection(object):             # <<<<<<<<<<<<<<
 * 	inEdges = InEdges
 * 	outEdges = OutEdges
 */
  __pyx_t_3 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_EdgeDirection, __pyx_tuple__83, __pyx_t_1, NULL, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_EdgeDirection, __pyx_t_3) < 0) __PYX_ERR(0, 1449, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/centrality.pyx":1758
 * 		L2Norm = 1
 * 
 * class Norm(object):             # <<<<<<<<<<<<<<
 * 	l1norm = L1Norm
 * 	l2norm = L2Norm
 */
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_tuple__84); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1758, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_tuple__84, __pyx_n_s_Norm, __pyx_n_s_Norm, (PyObject *) NULL, __pyx_n_s_networkit_centrality, (PyObject *) NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1758, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "networkit/centrality.pyx":1759
 * 
 * class Norm(object):
 * 	l1norm = L1Norm             # <<<<<<<<<<<<<<
 * 	l2norm = L2Norm
 * 
 */
  __pyx_t_3 = __Pyx_PyInt_From_enum__NetworKit_3a__3a_PageRank_3a__3a_Norm(NetworKit::PageRank::L1Norm); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_l1norm, __pyx_t_3) < 0) __PYX_ERR(0, 1759, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "networkit/centrality.pyx":1760
 * class Norm(object):
 * 	l1norm = L1Norm
 * 	l2norm = L2Norm             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<networkit/centrality/PageRank.hpp>":
 */
  __pyx_t_3 = __Pyx_PyInt_From_enum__NetworKit_3a__3a_PageRank_3a__3a_Norm(NetworKit::PageRank::L2Norm); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1760, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_l2norm, __pyx_t_3) < 0) __PYX_ERR(0, 1760, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "networkit/centrality.pyx":1758
 * 		L2Norm = 1
 * 
 * class Norm(object):             # <<<<<<<<<<<<<<
 * 	l1norm = L1Norm
 * 	l2norm = L2Norm
 */
  __pyx_t_3 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_Norm, __pyx_tuple__84, __pyx_t_1, NULL, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1758, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Norm, __pyx_t_3) < 0) __PYX_ERR(0, 1758, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/centrality.pyx":1962
 * 		return (<_ApproxSpanningEdge*>(self._this)).scores();
 * 
 * def ranking(G, algorithm=Betweenness, normalized=False):             # <<<<<<<<<<<<<<
 * 	""" Return a ranking of nodes by the specified centrality type"""
 * 	# FIXME: some centrality algorithms take more Parameters:
 */
  __Pyx_INCREF(((PyObject *)__pyx_ptype_9networkit_10centrality_Betweenness));
  __pyx_k__77 = ((PyObject *)__pyx_ptype_9networkit_10centrality_Betweenness);
  __Pyx_GIVEREF(__pyx_ptype_9networkit_10centrality_Betweenness);
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9networkit_10centrality_1ranking, NULL, __pyx_n_s_networkit_centrality); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1962, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ranking, __pyx_t_2) < 0) __PYX_ERR(0, 1962, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/centrality.pyx":1969
 * 	return centrality.ranking()
 * 
 * def scores(G, algorithm=Betweenness, normalized=False):             # <<<<<<<<<<<<<<
 * 	""" Return the centrality scores of nodes using the specified centrality type"""
 * 	centrality = algorithm(G, normalized)
 */
  __Pyx_INCREF(((PyObject *)__pyx_ptype_9networkit_10centrality_Betweenness));
  __pyx_k__78 = ((PyObject *)__pyx_ptype_9networkit_10centrality_Betweenness);
  __Pyx_GIVEREF(__pyx_ptype_9networkit_10centrality_Betweenness);
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9networkit_10centrality_3scores, NULL, __pyx_n_s_networkit_centrality); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_scores, __pyx_t_2) < 0) __PYX_ERR(0, 1969, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/centrality.pyx":1975
 * 	return centrality.scores()
 * 
 * def rankPerNode(ranking):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Parameters:
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9networkit_10centrality_5rankPerNode, NULL, __pyx_n_s_networkit_centrality); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1975, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_rankPerNode, __pyx_t_2) < 0) __PYX_ERR(0, 1975, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/centrality.pyx":1999
 * 	return ranking_id
 * 
 * def relativeRankErrors(rx, ry):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Let $r_x(u)$ be the rank of node $u$ in ranking $x$.
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_9networkit_10centrality_7relativeRankErrors, NULL, __pyx_n_s_networkit_centrality); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_relativeRankErrors, __pyx_t_2) < 0) __PYX_ERR(0, 1999, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/centrality.pyx":2029
 * 	return diff
 * 
 * class SpectralCentrality:             # <<<<<<<<<<<<<<
 * 	"""
 * 	Abstract class to compute the spectral centrality of a graph. This class needs to be supplied with methods
 */
  __pyx_t_2 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_SpectralCentrality, __pyx_n_s_SpectralCentrality, (PyObject *) NULL, __pyx_n_s_networkit_centrality, __pyx_kp_s_Abstract_class_to_compute_the_s); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2029, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "networkit/centrality.pyx":2034
 * 	to generate the correct matrices and do the correct normalization.
 * 	"""
 * 	def __init__(self, G, normalized=False):             # <<<<<<<<<<<<<<
 * 		"""
 * 		Constructor.
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_10centrality_18SpectralCentrality_1__init__, 0, __pyx_n_s_SpectralCentrality___init, NULL, __pyx_n_s_networkit_centrality, __pyx_d, ((PyObject *)__pyx_codeobj__94)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2034, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_1, __pyx_tuple__95);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_init, __pyx_t_1) < 0) __PYX_ERR(0, 2034, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/centrality.pyx":2055
 * 		self.evz = {}
 * 
 * 	def prepareSpectrum(self):             # <<<<<<<<<<<<<<
 * 		""" Method that must be implemented to set the following values:
 * 		self.eigenvectors = list of eigenvectors desired for centrality measure
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_10centrality_18SpectralCentrality_3prepareSpectrum, 0, __pyx_n_s_SpectralCentrality_prepareSpectr, NULL, __pyx_n_s_networkit_centrality, __pyx_d, ((PyObject *)__pyx_codeobj__97)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2055, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_prepareSpectrum, __pyx_t_1) < 0) __PYX_ERR(0, 2055, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/centrality.pyx":2062
 * 		raise NotImplemented
 * 
 * 	def normFactor(self):             # <<<<<<<<<<<<<<
 * 		""" Method that must be implemented to return a correct normalization factor"""
 * 		raise NotImplemented
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_10centrality_18SpectralCentrality_5normFactor, 0, __pyx_n_s_SpectralCentrality_normFactor, NULL, __pyx_n_s_networkit_centrality, __pyx_d, ((PyObject *)__pyx_codeobj__99)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2062, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_normFactor, __pyx_t_1) < 0) __PYX_ERR(0, 2062, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/centrality.pyx":2066
 * 		raise NotImplemented
 * 
 * 	def run(self):             # <<<<<<<<<<<<<<
 * 		self.prepareSpectrum()
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_10centrality_18SpectralCentrality_7run, 0, __pyx_n_s_SpectralCentrality_run, NULL, __pyx_n_s_networkit_centrality, __pyx_d, ((PyObject *)__pyx_codeobj__101)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_run, __pyx_t_1) < 0) __PYX_ERR(0, 2066, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/centrality.pyx":2082
 * 		return self
 * 
 * 	def scores(self):             # <<<<<<<<<<<<<<
 * 		if self.scoreList is None:
 * 			self.scoreList = [v for k,v in self.evz.items()]
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_10centrality_18SpectralCentrality_9scores, 0, __pyx_n_s_SpectralCentrality_scores, NULL, __pyx_n_s_networkit_centrality, __pyx_d, ((PyObject *)__pyx_codeobj__103)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2082, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_scores, __pyx_t_1) < 0) __PYX_ERR(0, 2082, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/centrality.pyx":2088
 * 		return self.scoreList
 * 
 * 	def ranking(self):             # <<<<<<<<<<<<<<
 * 		if self.rankList is None:
 * 			self.rankList = sorted(self.evz.items(),key=lambda x: float(x[1]), reverse=True)
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_10centrality_18SpectralCentrality_11ranking, 0, __pyx_n_s_SpectralCentrality_ranking, NULL, __pyx_n_s_networkit_centrality, __pyx_d, ((PyObject *)__pyx_codeobj__105)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2088, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_ranking, __pyx_t_1) < 0) __PYX_ERR(0, 2088, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/centrality.pyx":2029
 * 	return diff
 * 
 * class SpectralCentrality:             # <<<<<<<<<<<<<<
 * 	"""
 * 	Abstract class to compute the spectral centrality of a graph. This class needs to be supplied with methods
 */
  __pyx_t_1 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_SpectralCentrality, __pyx_empty_tuple, __pyx_t_2, NULL, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2029, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SpectralCentrality, __pyx_t_1) < 0) __PYX_ERR(0, 2029, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/centrality.pyx":2094
 * 
 * 
 * class SciPyEVZ(SpectralCentrality):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Compute Eigenvector centrality using algebraic meh
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_SpectralCentrality); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2094, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2094, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2094, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_SciPyEVZ, __pyx_n_s_SciPyEVZ, (PyObject *) NULL, __pyx_n_s_networkit_centrality, __pyx_kp_s_Compute_Eigenvector_centrality); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2094, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "networkit/centrality.pyx":2106
 * 
 * 	"""
 * 	def __init__(self, G, normalized=False):             # <<<<<<<<<<<<<<
 * 		if G.isDirected():
 * 			raise NotImplementedError("Not implemented for directed graphs; use centrality.EigenvectorCentrality instead")
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_10centrality_8SciPyEVZ_1__init__, 0, __pyx_n_s_SciPyEVZ___init, NULL, __pyx_n_s_networkit_centrality, __pyx_d, ((PyObject *)__pyx_codeobj__107)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_5, __pyx_tuple__108);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_init, __pyx_t_5) < 0) __PYX_ERR(0, 2106, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "networkit/centrality.pyx":2111
 * 		super(SciPyEVZ, self).__init__(G, normalized=normalized)
 * 
 * 	def _length(self, vector):             # <<<<<<<<<<<<<<
 * 		square = sum([val * val for val in vector])
 * 		return math.sqrt(square)
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_10centrality_8SciPyEVZ_3_length, 0, __pyx_n_s_SciPyEVZ__length, NULL, __pyx_n_s_networkit_centrality, __pyx_d, ((PyObject *)__pyx_codeobj__110)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_length, __pyx_t_5) < 0) __PYX_ERR(0, 2111, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "networkit/centrality.pyx":2115
 * 		return math.sqrt(square)
 * 
 * 	def normFactor(self):             # <<<<<<<<<<<<<<
 * 		return 1 / self._length(self.eigenvector)
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_10centrality_8SciPyEVZ_5normFactor, 0, __pyx_n_s_SciPyEVZ_normFactor, NULL, __pyx_n_s_networkit_centrality, __pyx_d, ((PyObject *)__pyx_codeobj__112)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_normFactor, __pyx_t_5) < 0) __PYX_ERR(0, 2115, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "networkit/centrality.pyx":2118
 * 		return 1 / self._length(self.eigenvector)
 * 
 * 	def prepareSpectrum(self):             # <<<<<<<<<<<<<<
 * 		spectrum = adjacencyEigenvector(self.graph, order=0)
 * 		self.eigenvector = spectrum[1]
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_10centrality_8SciPyEVZ_7prepareSpectrum, 0, __pyx_n_s_SciPyEVZ_prepareSpectrum, NULL, __pyx_n_s_networkit_centrality, __pyx_d, ((PyObject *)__pyx_codeobj__114)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_prepareSpectrum, __pyx_t_5) < 0) __PYX_ERR(0, 2118, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "networkit/centrality.pyx":2094
 * 
 * 
 * class SciPyEVZ(SpectralCentrality):             # <<<<<<<<<<<<<<
 * 	"""
 * 	Compute Eigenvector centrality using algebraic meh
 */
  __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_SciPyEVZ, __pyx_t_1, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2094, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SciPyEVZ, __pyx_t_5) < 0) __PYX_ERR(0, 2094, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "networkit/centrality.pyx":2123
 * 		self.eigenvalue = spectrum[0]
 * 
 * class SciPyPageRank(SpectralCentrality):             # <<<<<<<<<<<<<<
 * 	# TODO: docstring
 * 	def __init__(self, G, damp=0.95, normalized=False):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_SpectralCentrality); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_1, __pyx_t_2, __pyx_n_s_SciPyPageRank, __pyx_n_s_SciPyPageRank, (PyObject *) NULL, __pyx_n_s_networkit_centrality, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "networkit/centrality.pyx":2125
 * class SciPyPageRank(SpectralCentrality):
 * 	# TODO: docstring
 * 	def __init__(self, G, damp=0.95, normalized=False):             # <<<<<<<<<<<<<<
 * 		super(SciPyPageRank, self).__init__(G, normalized=normalized)
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_10centrality_13SciPyPageRank_1__init__, 0, __pyx_n_s_SciPyPageRank___init, NULL, __pyx_n_s_networkit_centrality, __pyx_d, ((PyObject *)__pyx_codeobj__116)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_5, __pyx_tuple__117);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_init, __pyx_t_5) < 0) __PYX_ERR(0, 2125, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "networkit/centrality.pyx":2130
 * 		self.damp = damp
 * 
 * 	def _length(self, vector):             # <<<<<<<<<<<<<<
 * 		return sum(vector)
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_10centrality_13SciPyPageRank_3_length, 0, __pyx_n_s_SciPyPageRank__length, NULL, __pyx_n_s_networkit_centrality, __pyx_d, ((PyObject *)__pyx_codeobj__119)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_length, __pyx_t_5) < 0) __PYX_ERR(0, 2130, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "networkit/centrality.pyx":2133
 * 		return sum(vector)
 * 
 * 	def normFactor(self):             # <<<<<<<<<<<<<<
 * 		return 1 / self._length(self.eigenvector)
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_10centrality_13SciPyPageRank_5normFactor, 0, __pyx_n_s_SciPyPageRank_normFactor, NULL, __pyx_n_s_networkit_centrality, __pyx_d, ((PyObject *)__pyx_codeobj__121)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_normFactor, __pyx_t_5) < 0) __PYX_ERR(0, 2133, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "networkit/centrality.pyx":2136
 * 		return 1 / self._length(self.eigenvector)
 * 
 * 	def prepareSpectrum(self):             # <<<<<<<<<<<<<<
 * 		prMatrix = PageRankMatrix(self.graph, self.damp)
 * 		spectrum = symmetricEigenvectors(prMatrix, cutoff=0, reverse=False)
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_9networkit_10centrality_13SciPyPageRank_7prepareSpectrum, 0, __pyx_n_s_SciPyPageRank_prepareSpectrum, NULL, __pyx_n_s_networkit_centrality, __pyx_d, ((PyObject *)__pyx_codeobj__123)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_prepareSpectrum, __pyx_t_5) < 0) __PYX_ERR(0, 2136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "networkit/centrality.pyx":2123
 * 		self.eigenvalue = spectrum[0]
 * 
 * class SciPyPageRank(SpectralCentrality):             # <<<<<<<<<<<<<<
 * 	# TODO: docstring
 * 	def __init__(self, G, damp=0.95, normalized=False):
 */
  __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_SciPyPageRank, __pyx_t_2, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SciPyPageRank, __pyx_t_5) < 0) __PYX_ERR(0, 2123, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "networkit/centrality.pyx":1
 * # distutils: language=c++             # <<<<<<<<<<<<<<
 * 
 * from libc.stdint cimport uint64_t
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c___pyx_t_9networkit_10centrality_node_2c___pyx_t_9networkit_10centrality_edgeweight_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c___pyx_t_9networkit_10centrality_node_2c___pyx_t_9networkit_10centrality_edgeweight_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init networkit.centrality", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init networkit.centrality");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* PyIntCompare */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_FALSE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_FALSE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a == (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
        PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2, int decref_tuple) {
    PyObject *value1 = NULL, *value2 = NULL;
#if CYTHON_COMPILING_IN_PYPY
    value1 = PySequence_ITEM(tuple, 0);  if (unlikely(!value1)) goto bad;
    value2 = PySequence_ITEM(tuple, 1);  if (unlikely(!value2)) goto bad;
#else
    value1 = PyTuple_GET_ITEM(tuple, 0);  Py_INCREF(value1);
    value2 = PyTuple_GET_ITEM(tuple, 1);  Py_INCREF(value2);
#endif
    if (decref_tuple) {
        Py_DECREF(tuple);
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
#if CYTHON_COMPILING_IN_PYPY
bad:
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
#endif
}
static int __Pyx_unpack_tuple2_generic(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                       int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    iternextfunc iternext;
    iter = PyObject_GetIter(tuple);
    if (unlikely(!iter)) goto bad;
    if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
    iternext = Py_TYPE(iter)->tp_iternext;
    value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
    value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
    if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
    Py_DECREF(iter);
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
    if (is_dict) {
#if !CYTHON_COMPILING_IN_PYPY
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
#elif PY_MAJOR_VERSION >= 3
        static PyObject *py_items = NULL, *py_keys = NULL, *py_values = NULL;
        PyObject **pp = NULL;
        if (method_name) {
            const char *name = PyUnicode_AsUTF8(method_name);
            if (strcmp(name, "iteritems") == 0) pp = &py_items;
            else if (strcmp(name, "iterkeys") == 0) pp = &py_keys;
            else if (strcmp(name, "itervalues") == 0) pp = &py_values;
            if (pp) {
                if (!*pp) {
                    *pp = PyUnicode_FromString(name + 4);
                    if (!*pp)
                        return NULL;
                }
                method_name = *pp;
            }
        }
#endif
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunctionShared */
#include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    if (unlikely(op == NULL))
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
#if PY_MAJOR_VERSION < 3
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
#endif
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* CallNextTpDealloc */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_dealloc != current_tp_dealloc)
        type = type->tp_base;
    while (type && type->tp_dealloc == current_tp_dealloc)
        type = type->tp_base;
    if (type)
        type->tp_dealloc(obj);
}

/* CallNextTpTraverse */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_traverse != current_tp_traverse)
        type = type->tp_base;
    while (type && type->tp_traverse == current_tp_traverse)
        type = type->tp_base;
    if (type && type->tp_traverse)
        return type->tp_traverse(obj, v, a);
    return 0;
}

/* CallNextTpClear */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_clear != current_tp_clear)
        type = type->tp_base;
    while (type && type->tp_clear == current_tp_clear)
        type = type->tp_base;
    if (type && type->tp_clear)
        type->tp_clear(obj);
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* GetVTable */
static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CalculateMetaclass */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* Py3ClassCreate */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* GetNameInClass */
static PyObject *__Pyx_GetGlobalNameAfterAttributeLookup(PyObject *name) {
    PyObject *result;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result) {
        result = __Pyx_GetGlobalNameAfterAttributeLookup(name);
    }
    return result;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NetworKit_3a__3a_ClosenessVariant(enum NetworKit::ClosenessVariant value) {
    const enum NetworKit::ClosenessVariant neg_one = (enum NetworKit::ClosenessVariant) ((enum NetworKit::ClosenessVariant) 0 - (enum NetworKit::ClosenessVariant) 1), const_zero = (enum NetworKit::ClosenessVariant) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum NetworKit::ClosenessVariant) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NetworKit::ClosenessVariant) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NetworKit::ClosenessVariant) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum NetworKit::ClosenessVariant) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NetworKit::ClosenessVariant) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum NetworKit::ClosenessVariant),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NetworKit_3a__3a_GedWalk_3a__3a_BoundStrategy(enum NetworKit::GedWalk::BoundStrategy value) {
    const enum NetworKit::GedWalk::BoundStrategy neg_one = (enum NetworKit::GedWalk::BoundStrategy) ((enum NetworKit::GedWalk::BoundStrategy) 0 - (enum NetworKit::GedWalk::BoundStrategy) 1), const_zero = (enum NetworKit::GedWalk::BoundStrategy) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum NetworKit::GedWalk::BoundStrategy) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NetworKit::GedWalk::BoundStrategy) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NetworKit::GedWalk::BoundStrategy) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum NetworKit::GedWalk::BoundStrategy) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NetworKit::GedWalk::BoundStrategy) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum NetworKit::GedWalk::BoundStrategy),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NetworKit_3a__3a_GedWalk_3a__3a_GreedyStrategy(enum NetworKit::GedWalk::GreedyStrategy value) {
    const enum NetworKit::GedWalk::GreedyStrategy neg_one = (enum NetworKit::GedWalk::GreedyStrategy) ((enum NetworKit::GedWalk::GreedyStrategy) 0 - (enum NetworKit::GedWalk::GreedyStrategy) 1), const_zero = (enum NetworKit::GedWalk::GreedyStrategy) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum NetworKit::GedWalk::GreedyStrategy) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NetworKit::GedWalk::GreedyStrategy) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NetworKit::GedWalk::GreedyStrategy) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum NetworKit::GedWalk::GreedyStrategy) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NetworKit::GedWalk::GreedyStrategy) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum NetworKit::GedWalk::GreedyStrategy),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NetworKit_3a__3a_EdgeDirection(enum NetworKit::EdgeDirection value) {
    const enum NetworKit::EdgeDirection neg_one = (enum NetworKit::EdgeDirection) ((enum NetworKit::EdgeDirection) 0 - (enum NetworKit::EdgeDirection) 1), const_zero = (enum NetworKit::EdgeDirection) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum NetworKit::EdgeDirection) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NetworKit::EdgeDirection) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NetworKit::EdgeDirection) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum NetworKit::EdgeDirection) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NetworKit::EdgeDirection) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum NetworKit::EdgeDirection),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NetworKit_3a__3a_PageRank_3a__3a_Norm(enum NetworKit::PageRank::Norm value) {
    const enum NetworKit::PageRank::Norm neg_one = (enum NetworKit::PageRank::Norm) ((enum NetworKit::PageRank::Norm) 0 - (enum NetworKit::PageRank::Norm) 1), const_zero = (enum NetworKit::PageRank::Norm) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum NetworKit::PageRank::Norm) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NetworKit::PageRank::Norm) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NetworKit::PageRank::Norm) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum NetworKit::PageRank::Norm) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NetworKit::PageRank::Norm) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum NetworKit::PageRank::Norm),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value) {
    const uint64_t neg_one = (uint64_t) ((uint64_t) 0 - (uint64_t) 1), const_zero = (uint64_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint64_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint64_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint64_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(uint64_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint64_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint64_t),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE enum NetworKit::ApproxCloseness::CLOSENESS_TYPE __Pyx_PyInt_As_enum__NetworKit_3a__3a_ApproxCloseness_3a__3a_CLOSENESS_TYPE(PyObject *x) {
    const enum NetworKit::ApproxCloseness::CLOSENESS_TYPE neg_one = (enum NetworKit::ApproxCloseness::CLOSENESS_TYPE) ((enum NetworKit::ApproxCloseness::CLOSENESS_TYPE) 0 - (enum NetworKit::ApproxCloseness::CLOSENESS_TYPE) 1), const_zero = (enum NetworKit::ApproxCloseness::CLOSENESS_TYPE) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(enum NetworKit::ApproxCloseness::CLOSENESS_TYPE) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(enum NetworKit::ApproxCloseness::CLOSENESS_TYPE, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum NetworKit::ApproxCloseness::CLOSENESS_TYPE) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum NetworKit::ApproxCloseness::CLOSENESS_TYPE) 0;
                case  1: __PYX_VERIFY_RETURN_INT(enum NetworKit::ApproxCloseness::CLOSENESS_TYPE, digit, digits[0])
                case 2:
                    if (8 * sizeof(enum NetworKit::ApproxCloseness::CLOSENESS_TYPE) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::ApproxCloseness::CLOSENESS_TYPE, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::ApproxCloseness::CLOSENESS_TYPE) >= 2 * PyLong_SHIFT) {
                            return (enum NetworKit::ApproxCloseness::CLOSENESS_TYPE) (((((enum NetworKit::ApproxCloseness::CLOSENESS_TYPE)digits[1]) << PyLong_SHIFT) | (enum NetworKit::ApproxCloseness::CLOSENESS_TYPE)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum NetworKit::ApproxCloseness::CLOSENESS_TYPE) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::ApproxCloseness::CLOSENESS_TYPE, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::ApproxCloseness::CLOSENESS_TYPE) >= 3 * PyLong_SHIFT) {
                            return (enum NetworKit::ApproxCloseness::CLOSENESS_TYPE) (((((((enum NetworKit::ApproxCloseness::CLOSENESS_TYPE)digits[2]) << PyLong_SHIFT) | (enum NetworKit::ApproxCloseness::CLOSENESS_TYPE)digits[1]) << PyLong_SHIFT) | (enum NetworKit::ApproxCloseness::CLOSENESS_TYPE)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum NetworKit::ApproxCloseness::CLOSENESS_TYPE) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::ApproxCloseness::CLOSENESS_TYPE, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::ApproxCloseness::CLOSENESS_TYPE) >= 4 * PyLong_SHIFT) {
                            return (enum NetworKit::ApproxCloseness::CLOSENESS_TYPE) (((((((((enum NetworKit::ApproxCloseness::CLOSENESS_TYPE)digits[3]) << PyLong_SHIFT) | (enum NetworKit::ApproxCloseness::CLOSENESS_TYPE)digits[2]) << PyLong_SHIFT) | (enum NetworKit::ApproxCloseness::CLOSENESS_TYPE)digits[1]) << PyLong_SHIFT) | (enum NetworKit::ApproxCloseness::CLOSENESS_TYPE)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum NetworKit::ApproxCloseness::CLOSENESS_TYPE) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(enum NetworKit::ApproxCloseness::CLOSENESS_TYPE) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum NetworKit::ApproxCloseness::CLOSENESS_TYPE, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum NetworKit::ApproxCloseness::CLOSENESS_TYPE) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum NetworKit::ApproxCloseness::CLOSENESS_TYPE, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum NetworKit::ApproxCloseness::CLOSENESS_TYPE) 0;
                case -1: __PYX_VERIFY_RETURN_INT(enum NetworKit::ApproxCloseness::CLOSENESS_TYPE, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(enum NetworKit::ApproxCloseness::CLOSENESS_TYPE,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(enum NetworKit::ApproxCloseness::CLOSENESS_TYPE) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::ApproxCloseness::CLOSENESS_TYPE, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::ApproxCloseness::CLOSENESS_TYPE) - 1 > 2 * PyLong_SHIFT) {
                            return (enum NetworKit::ApproxCloseness::CLOSENESS_TYPE) (((enum NetworKit::ApproxCloseness::CLOSENESS_TYPE)-1)*(((((enum NetworKit::ApproxCloseness::CLOSENESS_TYPE)digits[1]) << PyLong_SHIFT) | (enum NetworKit::ApproxCloseness::CLOSENESS_TYPE)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(enum NetworKit::ApproxCloseness::CLOSENESS_TYPE) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::ApproxCloseness::CLOSENESS_TYPE, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::ApproxCloseness::CLOSENESS_TYPE) - 1 > 2 * PyLong_SHIFT) {
                            return (enum NetworKit::ApproxCloseness::CLOSENESS_TYPE) ((((((enum NetworKit::ApproxCloseness::CLOSENESS_TYPE)digits[1]) << PyLong_SHIFT) | (enum NetworKit::ApproxCloseness::CLOSENESS_TYPE)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(enum NetworKit::ApproxCloseness::CLOSENESS_TYPE) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::ApproxCloseness::CLOSENESS_TYPE, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::ApproxCloseness::CLOSENESS_TYPE) - 1 > 3 * PyLong_SHIFT) {
                            return (enum NetworKit::ApproxCloseness::CLOSENESS_TYPE) (((enum NetworKit::ApproxCloseness::CLOSENESS_TYPE)-1)*(((((((enum NetworKit::ApproxCloseness::CLOSENESS_TYPE)digits[2]) << PyLong_SHIFT) | (enum NetworKit::ApproxCloseness::CLOSENESS_TYPE)digits[1]) << PyLong_SHIFT) | (enum NetworKit::ApproxCloseness::CLOSENESS_TYPE)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum NetworKit::ApproxCloseness::CLOSENESS_TYPE) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::ApproxCloseness::CLOSENESS_TYPE, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::ApproxCloseness::CLOSENESS_TYPE) - 1 > 3 * PyLong_SHIFT) {
                            return (enum NetworKit::ApproxCloseness::CLOSENESS_TYPE) ((((((((enum NetworKit::ApproxCloseness::CLOSENESS_TYPE)digits[2]) << PyLong_SHIFT) | (enum NetworKit::ApproxCloseness::CLOSENESS_TYPE)digits[1]) << PyLong_SHIFT) | (enum NetworKit::ApproxCloseness::CLOSENESS_TYPE)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(enum NetworKit::ApproxCloseness::CLOSENESS_TYPE) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::ApproxCloseness::CLOSENESS_TYPE, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::ApproxCloseness::CLOSENESS_TYPE) - 1 > 4 * PyLong_SHIFT) {
                            return (enum NetworKit::ApproxCloseness::CLOSENESS_TYPE) (((enum NetworKit::ApproxCloseness::CLOSENESS_TYPE)-1)*(((((((((enum NetworKit::ApproxCloseness::CLOSENESS_TYPE)digits[3]) << PyLong_SHIFT) | (enum NetworKit::ApproxCloseness::CLOSENESS_TYPE)digits[2]) << PyLong_SHIFT) | (enum NetworKit::ApproxCloseness::CLOSENESS_TYPE)digits[1]) << PyLong_SHIFT) | (enum NetworKit::ApproxCloseness::CLOSENESS_TYPE)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum NetworKit::ApproxCloseness::CLOSENESS_TYPE) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::ApproxCloseness::CLOSENESS_TYPE, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::ApproxCloseness::CLOSENESS_TYPE) - 1 > 4 * PyLong_SHIFT) {
                            return (enum NetworKit::ApproxCloseness::CLOSENESS_TYPE) ((((((((((enum NetworKit::ApproxCloseness::CLOSENESS_TYPE)digits[3]) << PyLong_SHIFT) | (enum NetworKit::ApproxCloseness::CLOSENESS_TYPE)digits[2]) << PyLong_SHIFT) | (enum NetworKit::ApproxCloseness::CLOSENESS_TYPE)digits[1]) << PyLong_SHIFT) | (enum NetworKit::ApproxCloseness::CLOSENESS_TYPE)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(enum NetworKit::ApproxCloseness::CLOSENESS_TYPE) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum NetworKit::ApproxCloseness::CLOSENESS_TYPE, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum NetworKit::ApproxCloseness::CLOSENESS_TYPE) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum NetworKit::ApproxCloseness::CLOSENESS_TYPE, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            enum NetworKit::ApproxCloseness::CLOSENESS_TYPE val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (enum NetworKit::ApproxCloseness::CLOSENESS_TYPE) -1;
        }
    } else {
        enum NetworKit::ApproxCloseness::CLOSENESS_TYPE val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum NetworKit::ApproxCloseness::CLOSENESS_TYPE) -1;
        val = __Pyx_PyInt_As_enum__NetworKit_3a__3a_ApproxCloseness_3a__3a_CLOSENESS_TYPE(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum NetworKit::ApproxCloseness::CLOSENESS_TYPE");
    return (enum NetworKit::ApproxCloseness::CLOSENESS_TYPE) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum NetworKit::ApproxCloseness::CLOSENESS_TYPE");
    return (enum NetworKit::ApproxCloseness::CLOSENESS_TYPE) -1;
}

/* CIntFromPy */
static CYTHON_INLINE uint64_t __Pyx_PyInt_As_uint64_t(PyObject *x) {
    const uint64_t neg_one = (uint64_t) ((uint64_t) 0 - (uint64_t) 1), const_zero = (uint64_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(uint64_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(uint64_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (uint64_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint64_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(uint64_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(uint64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) >= 2 * PyLong_SHIFT) {
                            return (uint64_t) (((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) >= 3 * PyLong_SHIFT) {
                            return (uint64_t) (((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) >= 4 * PyLong_SHIFT) {
                            return (uint64_t) (((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (uint64_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(uint64_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint64_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint64_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(uint64_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(uint64_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(uint64_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint64_t) (((uint64_t)-1)*(((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(uint64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint64_t) ((((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint64_t) (((uint64_t)-1)*(((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint64_t) ((((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint64_t) (((uint64_t)-1)*(((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint64_t) ((((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(uint64_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint64_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            uint64_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (uint64_t) -1;
        }
    } else {
        uint64_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (uint64_t) -1;
        val = __Pyx_PyInt_As_uint64_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to uint64_t");
    return (uint64_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to uint64_t");
    return (uint64_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE enum NetworKit::EdgeDirection __Pyx_PyInt_As_enum__NetworKit_3a__3a_EdgeDirection(PyObject *x) {
    const enum NetworKit::EdgeDirection neg_one = (enum NetworKit::EdgeDirection) ((enum NetworKit::EdgeDirection) 0 - (enum NetworKit::EdgeDirection) 1), const_zero = (enum NetworKit::EdgeDirection) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(enum NetworKit::EdgeDirection) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(enum NetworKit::EdgeDirection, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum NetworKit::EdgeDirection) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum NetworKit::EdgeDirection) 0;
                case  1: __PYX_VERIFY_RETURN_INT(enum NetworKit::EdgeDirection, digit, digits[0])
                case 2:
                    if (8 * sizeof(enum NetworKit::EdgeDirection) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::EdgeDirection, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::EdgeDirection) >= 2 * PyLong_SHIFT) {
                            return (enum NetworKit::EdgeDirection) (((((enum NetworKit::EdgeDirection)digits[1]) << PyLong_SHIFT) | (enum NetworKit::EdgeDirection)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum NetworKit::EdgeDirection) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::EdgeDirection, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::EdgeDirection) >= 3 * PyLong_SHIFT) {
                            return (enum NetworKit::EdgeDirection) (((((((enum NetworKit::EdgeDirection)digits[2]) << PyLong_SHIFT) | (enum NetworKit::EdgeDirection)digits[1]) << PyLong_SHIFT) | (enum NetworKit::EdgeDirection)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum NetworKit::EdgeDirection) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::EdgeDirection, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::EdgeDirection) >= 4 * PyLong_SHIFT) {
                            return (enum NetworKit::EdgeDirection) (((((((((enum NetworKit::EdgeDirection)digits[3]) << PyLong_SHIFT) | (enum NetworKit::EdgeDirection)digits[2]) << PyLong_SHIFT) | (enum NetworKit::EdgeDirection)digits[1]) << PyLong_SHIFT) | (enum NetworKit::EdgeDirection)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum NetworKit::EdgeDirection) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(enum NetworKit::EdgeDirection) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum NetworKit::EdgeDirection, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum NetworKit::EdgeDirection) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum NetworKit::EdgeDirection, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum NetworKit::EdgeDirection) 0;
                case -1: __PYX_VERIFY_RETURN_INT(enum NetworKit::EdgeDirection, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(enum NetworKit::EdgeDirection,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(enum NetworKit::EdgeDirection) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::EdgeDirection, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::EdgeDirection) - 1 > 2 * PyLong_SHIFT) {
                            return (enum NetworKit::EdgeDirection) (((enum NetworKit::EdgeDirection)-1)*(((((enum NetworKit::EdgeDirection)digits[1]) << PyLong_SHIFT) | (enum NetworKit::EdgeDirection)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(enum NetworKit::EdgeDirection) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::EdgeDirection, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::EdgeDirection) - 1 > 2 * PyLong_SHIFT) {
                            return (enum NetworKit::EdgeDirection) ((((((enum NetworKit::EdgeDirection)digits[1]) << PyLong_SHIFT) | (enum NetworKit::EdgeDirection)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(enum NetworKit::EdgeDirection) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::EdgeDirection, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::EdgeDirection) - 1 > 3 * PyLong_SHIFT) {
                            return (enum NetworKit::EdgeDirection) (((enum NetworKit::EdgeDirection)-1)*(((((((enum NetworKit::EdgeDirection)digits[2]) << PyLong_SHIFT) | (enum NetworKit::EdgeDirection)digits[1]) << PyLong_SHIFT) | (enum NetworKit::EdgeDirection)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum NetworKit::EdgeDirection) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::EdgeDirection, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::EdgeDirection) - 1 > 3 * PyLong_SHIFT) {
                            return (enum NetworKit::EdgeDirection) ((((((((enum NetworKit::EdgeDirection)digits[2]) << PyLong_SHIFT) | (enum NetworKit::EdgeDirection)digits[1]) << PyLong_SHIFT) | (enum NetworKit::EdgeDirection)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(enum NetworKit::EdgeDirection) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::EdgeDirection, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::EdgeDirection) - 1 > 4 * PyLong_SHIFT) {
                            return (enum NetworKit::EdgeDirection) (((enum NetworKit::EdgeDirection)-1)*(((((((((enum NetworKit::EdgeDirection)digits[3]) << PyLong_SHIFT) | (enum NetworKit::EdgeDirection)digits[2]) << PyLong_SHIFT) | (enum NetworKit::EdgeDirection)digits[1]) << PyLong_SHIFT) | (enum NetworKit::EdgeDirection)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum NetworKit::EdgeDirection) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::EdgeDirection, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::EdgeDirection) - 1 > 4 * PyLong_SHIFT) {
                            return (enum NetworKit::EdgeDirection) ((((((((((enum NetworKit::EdgeDirection)digits[3]) << PyLong_SHIFT) | (enum NetworKit::EdgeDirection)digits[2]) << PyLong_SHIFT) | (enum NetworKit::EdgeDirection)digits[1]) << PyLong_SHIFT) | (enum NetworKit::EdgeDirection)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(enum NetworKit::EdgeDirection) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum NetworKit::EdgeDirection, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum NetworKit::EdgeDirection) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum NetworKit::EdgeDirection, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            enum NetworKit::EdgeDirection val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (enum NetworKit::EdgeDirection) -1;
        }
    } else {
        enum NetworKit::EdgeDirection val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum NetworKit::EdgeDirection) -1;
        val = __Pyx_PyInt_As_enum__NetworKit_3a__3a_EdgeDirection(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum NetworKit::EdgeDirection");
    return (enum NetworKit::EdgeDirection) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum NetworKit::EdgeDirection");
    return (enum NetworKit::EdgeDirection) -1;
}

/* CIntFromPy */
static CYTHON_INLINE enum NetworKit::PageRank::Norm __Pyx_PyInt_As_enum__NetworKit_3a__3a_PageRank_3a__3a_Norm(PyObject *x) {
    const enum NetworKit::PageRank::Norm neg_one = (enum NetworKit::PageRank::Norm) ((enum NetworKit::PageRank::Norm) 0 - (enum NetworKit::PageRank::Norm) 1), const_zero = (enum NetworKit::PageRank::Norm) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(enum NetworKit::PageRank::Norm) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(enum NetworKit::PageRank::Norm, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum NetworKit::PageRank::Norm) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum NetworKit::PageRank::Norm) 0;
                case  1: __PYX_VERIFY_RETURN_INT(enum NetworKit::PageRank::Norm, digit, digits[0])
                case 2:
                    if (8 * sizeof(enum NetworKit::PageRank::Norm) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::PageRank::Norm, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::PageRank::Norm) >= 2 * PyLong_SHIFT) {
                            return (enum NetworKit::PageRank::Norm) (((((enum NetworKit::PageRank::Norm)digits[1]) << PyLong_SHIFT) | (enum NetworKit::PageRank::Norm)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum NetworKit::PageRank::Norm) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::PageRank::Norm, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::PageRank::Norm) >= 3 * PyLong_SHIFT) {
                            return (enum NetworKit::PageRank::Norm) (((((((enum NetworKit::PageRank::Norm)digits[2]) << PyLong_SHIFT) | (enum NetworKit::PageRank::Norm)digits[1]) << PyLong_SHIFT) | (enum NetworKit::PageRank::Norm)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum NetworKit::PageRank::Norm) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::PageRank::Norm, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::PageRank::Norm) >= 4 * PyLong_SHIFT) {
                            return (enum NetworKit::PageRank::Norm) (((((((((enum NetworKit::PageRank::Norm)digits[3]) << PyLong_SHIFT) | (enum NetworKit::PageRank::Norm)digits[2]) << PyLong_SHIFT) | (enum NetworKit::PageRank::Norm)digits[1]) << PyLong_SHIFT) | (enum NetworKit::PageRank::Norm)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum NetworKit::PageRank::Norm) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(enum NetworKit::PageRank::Norm) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum NetworKit::PageRank::Norm, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum NetworKit::PageRank::Norm) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum NetworKit::PageRank::Norm, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum NetworKit::PageRank::Norm) 0;
                case -1: __PYX_VERIFY_RETURN_INT(enum NetworKit::PageRank::Norm, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(enum NetworKit::PageRank::Norm,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(enum NetworKit::PageRank::Norm) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::PageRank::Norm, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::PageRank::Norm) - 1 > 2 * PyLong_SHIFT) {
                            return (enum NetworKit::PageRank::Norm) (((enum NetworKit::PageRank::Norm)-1)*(((((enum NetworKit::PageRank::Norm)digits[1]) << PyLong_SHIFT) | (enum NetworKit::PageRank::Norm)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(enum NetworKit::PageRank::Norm) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::PageRank::Norm, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::PageRank::Norm) - 1 > 2 * PyLong_SHIFT) {
                            return (enum NetworKit::PageRank::Norm) ((((((enum NetworKit::PageRank::Norm)digits[1]) << PyLong_SHIFT) | (enum NetworKit::PageRank::Norm)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(enum NetworKit::PageRank::Norm) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::PageRank::Norm, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::PageRank::Norm) - 1 > 3 * PyLong_SHIFT) {
                            return (enum NetworKit::PageRank::Norm) (((enum NetworKit::PageRank::Norm)-1)*(((((((enum NetworKit::PageRank::Norm)digits[2]) << PyLong_SHIFT) | (enum NetworKit::PageRank::Norm)digits[1]) << PyLong_SHIFT) | (enum NetworKit::PageRank::Norm)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum NetworKit::PageRank::Norm) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::PageRank::Norm, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::PageRank::Norm) - 1 > 3 * PyLong_SHIFT) {
                            return (enum NetworKit::PageRank::Norm) ((((((((enum NetworKit::PageRank::Norm)digits[2]) << PyLong_SHIFT) | (enum NetworKit::PageRank::Norm)digits[1]) << PyLong_SHIFT) | (enum NetworKit::PageRank::Norm)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(enum NetworKit::PageRank::Norm) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::PageRank::Norm, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::PageRank::Norm) - 1 > 4 * PyLong_SHIFT) {
                            return (enum NetworKit::PageRank::Norm) (((enum NetworKit::PageRank::Norm)-1)*(((((((((enum NetworKit::PageRank::Norm)digits[3]) << PyLong_SHIFT) | (enum NetworKit::PageRank::Norm)digits[2]) << PyLong_SHIFT) | (enum NetworKit::PageRank::Norm)digits[1]) << PyLong_SHIFT) | (enum NetworKit::PageRank::Norm)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum NetworKit::PageRank::Norm) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::PageRank::Norm, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::PageRank::Norm) - 1 > 4 * PyLong_SHIFT) {
                            return (enum NetworKit::PageRank::Norm) ((((((((((enum NetworKit::PageRank::Norm)digits[3]) << PyLong_SHIFT) | (enum NetworKit::PageRank::Norm)digits[2]) << PyLong_SHIFT) | (enum NetworKit::PageRank::Norm)digits[1]) << PyLong_SHIFT) | (enum NetworKit::PageRank::Norm)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(enum NetworKit::PageRank::Norm) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum NetworKit::PageRank::Norm, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum NetworKit::PageRank::Norm) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum NetworKit::PageRank::Norm, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            enum NetworKit::PageRank::Norm val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (enum NetworKit::PageRank::Norm) -1;
        }
    } else {
        enum NetworKit::PageRank::Norm val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum NetworKit::PageRank::Norm) -1;
        val = __Pyx_PyInt_As_enum__NetworKit_3a__3a_PageRank_3a__3a_Norm(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum NetworKit::PageRank::Norm");
    return (enum NetworKit::PageRank::Norm) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum NetworKit::PageRank::Norm");
    return (enum NetworKit::PageRank::Norm) -1;
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) ((size_t) 0 - (size_t) 1), const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
    const unsigned int neg_one = (unsigned int) ((unsigned int) 0 - (unsigned int) 1), const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 2 * PyLong_SHIFT) {
                            return (unsigned int) (((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 3 * PyLong_SHIFT) {
                            return (unsigned int) (((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 4 * PyLong_SHIFT) {
                            return (unsigned int) (((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) ((((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE enum NetworKit::GraphEvent::Type __Pyx_PyInt_As_enum__NetworKit_3a__3a_GraphEvent_3a__3a_Type(PyObject *x) {
    const enum NetworKit::GraphEvent::Type neg_one = (enum NetworKit::GraphEvent::Type) ((enum NetworKit::GraphEvent::Type) 0 - (enum NetworKit::GraphEvent::Type) 1), const_zero = (enum NetworKit::GraphEvent::Type) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(enum NetworKit::GraphEvent::Type) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(enum NetworKit::GraphEvent::Type, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum NetworKit::GraphEvent::Type) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum NetworKit::GraphEvent::Type) 0;
                case  1: __PYX_VERIFY_RETURN_INT(enum NetworKit::GraphEvent::Type, digit, digits[0])
                case 2:
                    if (8 * sizeof(enum NetworKit::GraphEvent::Type) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::GraphEvent::Type, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::GraphEvent::Type) >= 2 * PyLong_SHIFT) {
                            return (enum NetworKit::GraphEvent::Type) (((((enum NetworKit::GraphEvent::Type)digits[1]) << PyLong_SHIFT) | (enum NetworKit::GraphEvent::Type)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum NetworKit::GraphEvent::Type) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::GraphEvent::Type, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::GraphEvent::Type) >= 3 * PyLong_SHIFT) {
                            return (enum NetworKit::GraphEvent::Type) (((((((enum NetworKit::GraphEvent::Type)digits[2]) << PyLong_SHIFT) | (enum NetworKit::GraphEvent::Type)digits[1]) << PyLong_SHIFT) | (enum NetworKit::GraphEvent::Type)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum NetworKit::GraphEvent::Type) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::GraphEvent::Type, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::GraphEvent::Type) >= 4 * PyLong_SHIFT) {
                            return (enum NetworKit::GraphEvent::Type) (((((((((enum NetworKit::GraphEvent::Type)digits[3]) << PyLong_SHIFT) | (enum NetworKit::GraphEvent::Type)digits[2]) << PyLong_SHIFT) | (enum NetworKit::GraphEvent::Type)digits[1]) << PyLong_SHIFT) | (enum NetworKit::GraphEvent::Type)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum NetworKit::GraphEvent::Type) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(enum NetworKit::GraphEvent::Type) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum NetworKit::GraphEvent::Type, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum NetworKit::GraphEvent::Type) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum NetworKit::GraphEvent::Type, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum NetworKit::GraphEvent::Type) 0;
                case -1: __PYX_VERIFY_RETURN_INT(enum NetworKit::GraphEvent::Type, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(enum NetworKit::GraphEvent::Type,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(enum NetworKit::GraphEvent::Type) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::GraphEvent::Type, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::GraphEvent::Type) - 1 > 2 * PyLong_SHIFT) {
                            return (enum NetworKit::GraphEvent::Type) (((enum NetworKit::GraphEvent::Type)-1)*(((((enum NetworKit::GraphEvent::Type)digits[1]) << PyLong_SHIFT) | (enum NetworKit::GraphEvent::Type)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(enum NetworKit::GraphEvent::Type) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::GraphEvent::Type, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::GraphEvent::Type) - 1 > 2 * PyLong_SHIFT) {
                            return (enum NetworKit::GraphEvent::Type) ((((((enum NetworKit::GraphEvent::Type)digits[1]) << PyLong_SHIFT) | (enum NetworKit::GraphEvent::Type)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(enum NetworKit::GraphEvent::Type) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::GraphEvent::Type, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::GraphEvent::Type) - 1 > 3 * PyLong_SHIFT) {
                            return (enum NetworKit::GraphEvent::Type) (((enum NetworKit::GraphEvent::Type)-1)*(((((((enum NetworKit::GraphEvent::Type)digits[2]) << PyLong_SHIFT) | (enum NetworKit::GraphEvent::Type)digits[1]) << PyLong_SHIFT) | (enum NetworKit::GraphEvent::Type)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum NetworKit::GraphEvent::Type) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::GraphEvent::Type, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::GraphEvent::Type) - 1 > 3 * PyLong_SHIFT) {
                            return (enum NetworKit::GraphEvent::Type) ((((((((enum NetworKit::GraphEvent::Type)digits[2]) << PyLong_SHIFT) | (enum NetworKit::GraphEvent::Type)digits[1]) << PyLong_SHIFT) | (enum NetworKit::GraphEvent::Type)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(enum NetworKit::GraphEvent::Type) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::GraphEvent::Type, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::GraphEvent::Type) - 1 > 4 * PyLong_SHIFT) {
                            return (enum NetworKit::GraphEvent::Type) (((enum NetworKit::GraphEvent::Type)-1)*(((((((((enum NetworKit::GraphEvent::Type)digits[3]) << PyLong_SHIFT) | (enum NetworKit::GraphEvent::Type)digits[2]) << PyLong_SHIFT) | (enum NetworKit::GraphEvent::Type)digits[1]) << PyLong_SHIFT) | (enum NetworKit::GraphEvent::Type)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum NetworKit::GraphEvent::Type) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::GraphEvent::Type, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::GraphEvent::Type) - 1 > 4 * PyLong_SHIFT) {
                            return (enum NetworKit::GraphEvent::Type) ((((((((((enum NetworKit::GraphEvent::Type)digits[3]) << PyLong_SHIFT) | (enum NetworKit::GraphEvent::Type)digits[2]) << PyLong_SHIFT) | (enum NetworKit::GraphEvent::Type)digits[1]) << PyLong_SHIFT) | (enum NetworKit::GraphEvent::Type)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(enum NetworKit::GraphEvent::Type) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum NetworKit::GraphEvent::Type, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum NetworKit::GraphEvent::Type) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum NetworKit::GraphEvent::Type, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            enum NetworKit::GraphEvent::Type val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (enum NetworKit::GraphEvent::Type) -1;
        }
    } else {
        enum NetworKit::GraphEvent::Type val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum NetworKit::GraphEvent::Type) -1;
        val = __Pyx_PyInt_As_enum__NetworKit_3a__3a_GraphEvent_3a__3a_Type(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum NetworKit::GraphEvent::Type");
    return (enum NetworKit::GraphEvent::Type) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum NetworKit::GraphEvent::Type");
    return (enum NetworKit::GraphEvent::Type) -1;
}

/* CIntFromPy */
static CYTHON_INLINE enum NetworKit::ClosenessVariant __Pyx_PyInt_As_enum__NetworKit_3a__3a_ClosenessVariant(PyObject *x) {
    const enum NetworKit::ClosenessVariant neg_one = (enum NetworKit::ClosenessVariant) ((enum NetworKit::ClosenessVariant) 0 - (enum NetworKit::ClosenessVariant) 1), const_zero = (enum NetworKit::ClosenessVariant) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(enum NetworKit::ClosenessVariant) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(enum NetworKit::ClosenessVariant, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum NetworKit::ClosenessVariant) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum NetworKit::ClosenessVariant) 0;
                case  1: __PYX_VERIFY_RETURN_INT(enum NetworKit::ClosenessVariant, digit, digits[0])
                case 2:
                    if (8 * sizeof(enum NetworKit::ClosenessVariant) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::ClosenessVariant, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::ClosenessVariant) >= 2 * PyLong_SHIFT) {
                            return (enum NetworKit::ClosenessVariant) (((((enum NetworKit::ClosenessVariant)digits[1]) << PyLong_SHIFT) | (enum NetworKit::ClosenessVariant)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum NetworKit::ClosenessVariant) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::ClosenessVariant, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::ClosenessVariant) >= 3 * PyLong_SHIFT) {
                            return (enum NetworKit::ClosenessVariant) (((((((enum NetworKit::ClosenessVariant)digits[2]) << PyLong_SHIFT) | (enum NetworKit::ClosenessVariant)digits[1]) << PyLong_SHIFT) | (enum NetworKit::ClosenessVariant)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum NetworKit::ClosenessVariant) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::ClosenessVariant, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::ClosenessVariant) >= 4 * PyLong_SHIFT) {
                            return (enum NetworKit::ClosenessVariant) (((((((((enum NetworKit::ClosenessVariant)digits[3]) << PyLong_SHIFT) | (enum NetworKit::ClosenessVariant)digits[2]) << PyLong_SHIFT) | (enum NetworKit::ClosenessVariant)digits[1]) << PyLong_SHIFT) | (enum NetworKit::ClosenessVariant)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum NetworKit::ClosenessVariant) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(enum NetworKit::ClosenessVariant) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum NetworKit::ClosenessVariant, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum NetworKit::ClosenessVariant) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum NetworKit::ClosenessVariant, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum NetworKit::ClosenessVariant) 0;
                case -1: __PYX_VERIFY_RETURN_INT(enum NetworKit::ClosenessVariant, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(enum NetworKit::ClosenessVariant,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(enum NetworKit::ClosenessVariant) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::ClosenessVariant, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::ClosenessVariant) - 1 > 2 * PyLong_SHIFT) {
                            return (enum NetworKit::ClosenessVariant) (((enum NetworKit::ClosenessVariant)-1)*(((((enum NetworKit::ClosenessVariant)digits[1]) << PyLong_SHIFT) | (enum NetworKit::ClosenessVariant)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(enum NetworKit::ClosenessVariant) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::ClosenessVariant, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::ClosenessVariant) - 1 > 2 * PyLong_SHIFT) {
                            return (enum NetworKit::ClosenessVariant) ((((((enum NetworKit::ClosenessVariant)digits[1]) << PyLong_SHIFT) | (enum NetworKit::ClosenessVariant)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(enum NetworKit::ClosenessVariant) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::ClosenessVariant, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::ClosenessVariant) - 1 > 3 * PyLong_SHIFT) {
                            return (enum NetworKit::ClosenessVariant) (((enum NetworKit::ClosenessVariant)-1)*(((((((enum NetworKit::ClosenessVariant)digits[2]) << PyLong_SHIFT) | (enum NetworKit::ClosenessVariant)digits[1]) << PyLong_SHIFT) | (enum NetworKit::ClosenessVariant)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum NetworKit::ClosenessVariant) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::ClosenessVariant, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::ClosenessVariant) - 1 > 3 * PyLong_SHIFT) {
                            return (enum NetworKit::ClosenessVariant) ((((((((enum NetworKit::ClosenessVariant)digits[2]) << PyLong_SHIFT) | (enum NetworKit::ClosenessVariant)digits[1]) << PyLong_SHIFT) | (enum NetworKit::ClosenessVariant)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(enum NetworKit::ClosenessVariant) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::ClosenessVariant, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::ClosenessVariant) - 1 > 4 * PyLong_SHIFT) {
                            return (enum NetworKit::ClosenessVariant) (((enum NetworKit::ClosenessVariant)-1)*(((((((((enum NetworKit::ClosenessVariant)digits[3]) << PyLong_SHIFT) | (enum NetworKit::ClosenessVariant)digits[2]) << PyLong_SHIFT) | (enum NetworKit::ClosenessVariant)digits[1]) << PyLong_SHIFT) | (enum NetworKit::ClosenessVariant)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum NetworKit::ClosenessVariant) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::ClosenessVariant, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::ClosenessVariant) - 1 > 4 * PyLong_SHIFT) {
                            return (enum NetworKit::ClosenessVariant) ((((((((((enum NetworKit::ClosenessVariant)digits[3]) << PyLong_SHIFT) | (enum NetworKit::ClosenessVariant)digits[2]) << PyLong_SHIFT) | (enum NetworKit::ClosenessVariant)digits[1]) << PyLong_SHIFT) | (enum NetworKit::ClosenessVariant)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(enum NetworKit::ClosenessVariant) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum NetworKit::ClosenessVariant, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum NetworKit::ClosenessVariant) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum NetworKit::ClosenessVariant, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            enum NetworKit::ClosenessVariant val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (enum NetworKit::ClosenessVariant) -1;
        }
    } else {
        enum NetworKit::ClosenessVariant val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum NetworKit::ClosenessVariant) -1;
        val = __Pyx_PyInt_As_enum__NetworKit_3a__3a_ClosenessVariant(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum NetworKit::ClosenessVariant");
    return (enum NetworKit::ClosenessVariant) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum NetworKit::ClosenessVariant");
    return (enum NetworKit::ClosenessVariant) -1;
}

/* CIntFromPy */
static CYTHON_INLINE enum NetworKit::GedWalk::BoundStrategy __Pyx_PyInt_As_enum__NetworKit_3a__3a_GedWalk_3a__3a_BoundStrategy(PyObject *x) {
    const enum NetworKit::GedWalk::BoundStrategy neg_one = (enum NetworKit::GedWalk::BoundStrategy) ((enum NetworKit::GedWalk::BoundStrategy) 0 - (enum NetworKit::GedWalk::BoundStrategy) 1), const_zero = (enum NetworKit::GedWalk::BoundStrategy) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(enum NetworKit::GedWalk::BoundStrategy) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(enum NetworKit::GedWalk::BoundStrategy, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum NetworKit::GedWalk::BoundStrategy) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum NetworKit::GedWalk::BoundStrategy) 0;
                case  1: __PYX_VERIFY_RETURN_INT(enum NetworKit::GedWalk::BoundStrategy, digit, digits[0])
                case 2:
                    if (8 * sizeof(enum NetworKit::GedWalk::BoundStrategy) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::GedWalk::BoundStrategy, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::GedWalk::BoundStrategy) >= 2 * PyLong_SHIFT) {
                            return (enum NetworKit::GedWalk::BoundStrategy) (((((enum NetworKit::GedWalk::BoundStrategy)digits[1]) << PyLong_SHIFT) | (enum NetworKit::GedWalk::BoundStrategy)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum NetworKit::GedWalk::BoundStrategy) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::GedWalk::BoundStrategy, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::GedWalk::BoundStrategy) >= 3 * PyLong_SHIFT) {
                            return (enum NetworKit::GedWalk::BoundStrategy) (((((((enum NetworKit::GedWalk::BoundStrategy)digits[2]) << PyLong_SHIFT) | (enum NetworKit::GedWalk::BoundStrategy)digits[1]) << PyLong_SHIFT) | (enum NetworKit::GedWalk::BoundStrategy)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum NetworKit::GedWalk::BoundStrategy) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::GedWalk::BoundStrategy, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::GedWalk::BoundStrategy) >= 4 * PyLong_SHIFT) {
                            return (enum NetworKit::GedWalk::BoundStrategy) (((((((((enum NetworKit::GedWalk::BoundStrategy)digits[3]) << PyLong_SHIFT) | (enum NetworKit::GedWalk::BoundStrategy)digits[2]) << PyLong_SHIFT) | (enum NetworKit::GedWalk::BoundStrategy)digits[1]) << PyLong_SHIFT) | (enum NetworKit::GedWalk::BoundStrategy)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum NetworKit::GedWalk::BoundStrategy) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(enum NetworKit::GedWalk::BoundStrategy) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum NetworKit::GedWalk::BoundStrategy, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum NetworKit::GedWalk::BoundStrategy) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum NetworKit::GedWalk::BoundStrategy, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum NetworKit::GedWalk::BoundStrategy) 0;
                case -1: __PYX_VERIFY_RETURN_INT(enum NetworKit::GedWalk::BoundStrategy, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(enum NetworKit::GedWalk::BoundStrategy,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(enum NetworKit::GedWalk::BoundStrategy) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::GedWalk::BoundStrategy, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::GedWalk::BoundStrategy) - 1 > 2 * PyLong_SHIFT) {
                            return (enum NetworKit::GedWalk::BoundStrategy) (((enum NetworKit::GedWalk::BoundStrategy)-1)*(((((enum NetworKit::GedWalk::BoundStrategy)digits[1]) << PyLong_SHIFT) | (enum NetworKit::GedWalk::BoundStrategy)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(enum NetworKit::GedWalk::BoundStrategy) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::GedWalk::BoundStrategy, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::GedWalk::BoundStrategy) - 1 > 2 * PyLong_SHIFT) {
                            return (enum NetworKit::GedWalk::BoundStrategy) ((((((enum NetworKit::GedWalk::BoundStrategy)digits[1]) << PyLong_SHIFT) | (enum NetworKit::GedWalk::BoundStrategy)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(enum NetworKit::GedWalk::BoundStrategy) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::GedWalk::BoundStrategy, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::GedWalk::BoundStrategy) - 1 > 3 * PyLong_SHIFT) {
                            return (enum NetworKit::GedWalk::BoundStrategy) (((enum NetworKit::GedWalk::BoundStrategy)-1)*(((((((enum NetworKit::GedWalk::BoundStrategy)digits[2]) << PyLong_SHIFT) | (enum NetworKit::GedWalk::BoundStrategy)digits[1]) << PyLong_SHIFT) | (enum NetworKit::GedWalk::BoundStrategy)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum NetworKit::GedWalk::BoundStrategy) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::GedWalk::BoundStrategy, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::GedWalk::BoundStrategy) - 1 > 3 * PyLong_SHIFT) {
                            return (enum NetworKit::GedWalk::BoundStrategy) ((((((((enum NetworKit::GedWalk::BoundStrategy)digits[2]) << PyLong_SHIFT) | (enum NetworKit::GedWalk::BoundStrategy)digits[1]) << PyLong_SHIFT) | (enum NetworKit::GedWalk::BoundStrategy)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(enum NetworKit::GedWalk::BoundStrategy) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::GedWalk::BoundStrategy, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::GedWalk::BoundStrategy) - 1 > 4 * PyLong_SHIFT) {
                            return (enum NetworKit::GedWalk::BoundStrategy) (((enum NetworKit::GedWalk::BoundStrategy)-1)*(((((((((enum NetworKit::GedWalk::BoundStrategy)digits[3]) << PyLong_SHIFT) | (enum NetworKit::GedWalk::BoundStrategy)digits[2]) << PyLong_SHIFT) | (enum NetworKit::GedWalk::BoundStrategy)digits[1]) << PyLong_SHIFT) | (enum NetworKit::GedWalk::BoundStrategy)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum NetworKit::GedWalk::BoundStrategy) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::GedWalk::BoundStrategy, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::GedWalk::BoundStrategy) - 1 > 4 * PyLong_SHIFT) {
                            return (enum NetworKit::GedWalk::BoundStrategy) ((((((((((enum NetworKit::GedWalk::BoundStrategy)digits[3]) << PyLong_SHIFT) | (enum NetworKit::GedWalk::BoundStrategy)digits[2]) << PyLong_SHIFT) | (enum NetworKit::GedWalk::BoundStrategy)digits[1]) << PyLong_SHIFT) | (enum NetworKit::GedWalk::BoundStrategy)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(enum NetworKit::GedWalk::BoundStrategy) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum NetworKit::GedWalk::BoundStrategy, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum NetworKit::GedWalk::BoundStrategy) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum NetworKit::GedWalk::BoundStrategy, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            enum NetworKit::GedWalk::BoundStrategy val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (enum NetworKit::GedWalk::BoundStrategy) -1;
        }
    } else {
        enum NetworKit::GedWalk::BoundStrategy val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum NetworKit::GedWalk::BoundStrategy) -1;
        val = __Pyx_PyInt_As_enum__NetworKit_3a__3a_GedWalk_3a__3a_BoundStrategy(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum NetworKit::GedWalk::BoundStrategy");
    return (enum NetworKit::GedWalk::BoundStrategy) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum NetworKit::GedWalk::BoundStrategy");
    return (enum NetworKit::GedWalk::BoundStrategy) -1;
}

/* CIntFromPy */
static CYTHON_INLINE enum NetworKit::GedWalk::GreedyStrategy __Pyx_PyInt_As_enum__NetworKit_3a__3a_GedWalk_3a__3a_GreedyStrategy(PyObject *x) {
    const enum NetworKit::GedWalk::GreedyStrategy neg_one = (enum NetworKit::GedWalk::GreedyStrategy) ((enum NetworKit::GedWalk::GreedyStrategy) 0 - (enum NetworKit::GedWalk::GreedyStrategy) 1), const_zero = (enum NetworKit::GedWalk::GreedyStrategy) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(enum NetworKit::GedWalk::GreedyStrategy) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(enum NetworKit::GedWalk::GreedyStrategy, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum NetworKit::GedWalk::GreedyStrategy) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum NetworKit::GedWalk::GreedyStrategy) 0;
                case  1: __PYX_VERIFY_RETURN_INT(enum NetworKit::GedWalk::GreedyStrategy, digit, digits[0])
                case 2:
                    if (8 * sizeof(enum NetworKit::GedWalk::GreedyStrategy) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::GedWalk::GreedyStrategy, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::GedWalk::GreedyStrategy) >= 2 * PyLong_SHIFT) {
                            return (enum NetworKit::GedWalk::GreedyStrategy) (((((enum NetworKit::GedWalk::GreedyStrategy)digits[1]) << PyLong_SHIFT) | (enum NetworKit::GedWalk::GreedyStrategy)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum NetworKit::GedWalk::GreedyStrategy) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::GedWalk::GreedyStrategy, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::GedWalk::GreedyStrategy) >= 3 * PyLong_SHIFT) {
                            return (enum NetworKit::GedWalk::GreedyStrategy) (((((((enum NetworKit::GedWalk::GreedyStrategy)digits[2]) << PyLong_SHIFT) | (enum NetworKit::GedWalk::GreedyStrategy)digits[1]) << PyLong_SHIFT) | (enum NetworKit::GedWalk::GreedyStrategy)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum NetworKit::GedWalk::GreedyStrategy) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::GedWalk::GreedyStrategy, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::GedWalk::GreedyStrategy) >= 4 * PyLong_SHIFT) {
                            return (enum NetworKit::GedWalk::GreedyStrategy) (((((((((enum NetworKit::GedWalk::GreedyStrategy)digits[3]) << PyLong_SHIFT) | (enum NetworKit::GedWalk::GreedyStrategy)digits[2]) << PyLong_SHIFT) | (enum NetworKit::GedWalk::GreedyStrategy)digits[1]) << PyLong_SHIFT) | (enum NetworKit::GedWalk::GreedyStrategy)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum NetworKit::GedWalk::GreedyStrategy) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(enum NetworKit::GedWalk::GreedyStrategy) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum NetworKit::GedWalk::GreedyStrategy, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum NetworKit::GedWalk::GreedyStrategy) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum NetworKit::GedWalk::GreedyStrategy, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum NetworKit::GedWalk::GreedyStrategy) 0;
                case -1: __PYX_VERIFY_RETURN_INT(enum NetworKit::GedWalk::GreedyStrategy, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(enum NetworKit::GedWalk::GreedyStrategy,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(enum NetworKit::GedWalk::GreedyStrategy) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::GedWalk::GreedyStrategy, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::GedWalk::GreedyStrategy) - 1 > 2 * PyLong_SHIFT) {
                            return (enum NetworKit::GedWalk::GreedyStrategy) (((enum NetworKit::GedWalk::GreedyStrategy)-1)*(((((enum NetworKit::GedWalk::GreedyStrategy)digits[1]) << PyLong_SHIFT) | (enum NetworKit::GedWalk::GreedyStrategy)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(enum NetworKit::GedWalk::GreedyStrategy) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::GedWalk::GreedyStrategy, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::GedWalk::GreedyStrategy) - 1 > 2 * PyLong_SHIFT) {
                            return (enum NetworKit::GedWalk::GreedyStrategy) ((((((enum NetworKit::GedWalk::GreedyStrategy)digits[1]) << PyLong_SHIFT) | (enum NetworKit::GedWalk::GreedyStrategy)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(enum NetworKit::GedWalk::GreedyStrategy) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::GedWalk::GreedyStrategy, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::GedWalk::GreedyStrategy) - 1 > 3 * PyLong_SHIFT) {
                            return (enum NetworKit::GedWalk::GreedyStrategy) (((enum NetworKit::GedWalk::GreedyStrategy)-1)*(((((((enum NetworKit::GedWalk::GreedyStrategy)digits[2]) << PyLong_SHIFT) | (enum NetworKit::GedWalk::GreedyStrategy)digits[1]) << PyLong_SHIFT) | (enum NetworKit::GedWalk::GreedyStrategy)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum NetworKit::GedWalk::GreedyStrategy) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::GedWalk::GreedyStrategy, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::GedWalk::GreedyStrategy) - 1 > 3 * PyLong_SHIFT) {
                            return (enum NetworKit::GedWalk::GreedyStrategy) ((((((((enum NetworKit::GedWalk::GreedyStrategy)digits[2]) << PyLong_SHIFT) | (enum NetworKit::GedWalk::GreedyStrategy)digits[1]) << PyLong_SHIFT) | (enum NetworKit::GedWalk::GreedyStrategy)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(enum NetworKit::GedWalk::GreedyStrategy) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::GedWalk::GreedyStrategy, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::GedWalk::GreedyStrategy) - 1 > 4 * PyLong_SHIFT) {
                            return (enum NetworKit::GedWalk::GreedyStrategy) (((enum NetworKit::GedWalk::GreedyStrategy)-1)*(((((((((enum NetworKit::GedWalk::GreedyStrategy)digits[3]) << PyLong_SHIFT) | (enum NetworKit::GedWalk::GreedyStrategy)digits[2]) << PyLong_SHIFT) | (enum NetworKit::GedWalk::GreedyStrategy)digits[1]) << PyLong_SHIFT) | (enum NetworKit::GedWalk::GreedyStrategy)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum NetworKit::GedWalk::GreedyStrategy) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum NetworKit::GedWalk::GreedyStrategy, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum NetworKit::GedWalk::GreedyStrategy) - 1 > 4 * PyLong_SHIFT) {
                            return (enum NetworKit::GedWalk::GreedyStrategy) ((((((((((enum NetworKit::GedWalk::GreedyStrategy)digits[3]) << PyLong_SHIFT) | (enum NetworKit::GedWalk::GreedyStrategy)digits[2]) << PyLong_SHIFT) | (enum NetworKit::GedWalk::GreedyStrategy)digits[1]) << PyLong_SHIFT) | (enum NetworKit::GedWalk::GreedyStrategy)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(enum NetworKit::GedWalk::GreedyStrategy) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum NetworKit::GedWalk::GreedyStrategy, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum NetworKit::GedWalk::GreedyStrategy) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum NetworKit::GedWalk::GreedyStrategy, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            enum NetworKit::GedWalk::GreedyStrategy val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (enum NetworKit::GedWalk::GreedyStrategy) -1;
        }
    } else {
        enum NetworKit::GedWalk::GreedyStrategy val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum NetworKit::GedWalk::GreedyStrategy) -1;
        val = __Pyx_PyInt_As_enum__NetworKit_3a__3a_GedWalk_3a__3a_GreedyStrategy(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum NetworKit::GedWalk::GreedyStrategy");
    return (enum NetworKit::GedWalk::GreedyStrategy) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum NetworKit::GedWalk::GreedyStrategy");
    return (enum NetworKit::GedWalk::GreedyStrategy) -1;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
